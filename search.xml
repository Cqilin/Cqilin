<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>0-serial_number</title>
    <url>/1-(0~50)/0-%E5%BA%8F%E5%8F%B7/</url>
    <content><![CDATA[<h2 id="1-序号"><a href="#1-序号" class="headerlink" title="1. 序号"></a>1. 序号</h2><h3 id="1-typescript-introduction"><a href="#1-typescript-introduction" class="headerlink" title="1-typescript_introduction"></a>1-typescript_introduction</h3><p>ts入门</p>
<hr>
<h3 id="2-ts-first-item"><a href="#2-ts-first-item" class="headerlink" title="2-ts_first_item"></a>2-ts_first_item</h3><p>ts第一个项目</p>
<a id="more"></a>

<hr>
<h3 id="3-ts-problem"><a href="#3-ts-problem" class="headerlink" title="3-ts problem"></a>3-ts problem</h3><p>ts问题</p>
<hr>
<h3 id="4-css-private-note"><a href="#4-css-private-note" class="headerlink" title="4-css_private_note"></a>4-css_private_note</h3><p>css个人笔记</p>
<hr>
<h3 id="5-md语法与技巧note"><a href="#5-md语法与技巧note" class="headerlink" title="5-md语法与技巧note"></a>5-md语法与技巧note</h3><hr>
<h3 id="6-github-amp-amp-gitee-problem"><a href="#6-github-amp-amp-gitee-problem" class="headerlink" title="6-github&amp;&amp;gitee problem"></a>6-github&amp;&amp;gitee problem</h3><hr>
<h3 id="7-blog’s-problem-set"><a href="#7-blog’s-problem-set" class="headerlink" title="7-blog’s problem set"></a>7-blog’s problem set</h3><hr>
<h3 id="8-blog’s-function-add"><a href="#8-blog’s-function-add" class="headerlink" title="8-blog’s function add"></a>8-blog’s function add</h3><hr>
<h3 id="9-Function-website"><a href="#9-Function-website" class="headerlink" title="9-Function_website"></a>9-Function_website</h3><hr>
<h3 id="10-PicGo"><a href="#10-PicGo" class="headerlink" title="10-PicGo"></a>10-PicGo</h3><hr>
<h3 id="11-git"><a href="#11-git" class="headerlink" title="11-git"></a>11-git</h3><hr>
<h3 id="12-html-css-introdiction-pink"><a href="#12-html-css-introdiction-pink" class="headerlink" title="12-html+css_introdiction-pink"></a>12-html+css_introdiction-pink</h3><hr>
<h3 id="13-VPN"><a href="#13-VPN" class="headerlink" title="13-VPN"></a>13-VPN</h3><hr>
<h3 id="14-galgame"><a href="#14-galgame" class="headerlink" title="14-galgame"></a>14-galgame</h3><hr>
<h3 id="15-node-js"><a href="#15-node-js" class="headerlink" title="15-node.js"></a>15-node.js</h3><hr>
<h3 id="16-Python-collect-收藏"><a href="#16-Python-collect-收藏" class="headerlink" title="16-Python-collect_收藏"></a>16-Python-collect_收藏</h3><hr>
<h3 id="17-VPN"><a href="#17-VPN" class="headerlink" title="17-VPN"></a>17-VPN</h3><hr>
<h3 id="18-typora"><a href="#18-typora" class="headerlink" title="18-typora"></a>18-typora</h3><hr>
<h3 id="19-谷歌扩展"><a href="#19-谷歌扩展" class="headerlink" title="19-谷歌扩展"></a>19-谷歌扩展</h3><hr>
<h3 id="20-Pixiv"><a href="#20-Pixiv" class="headerlink" title="20-Pixiv"></a>20-Pixiv</h3><hr>
<h3 id="21-windows；"><a href="#21-windows；" class="headerlink" title="21-windows；"></a>21-windows；</h3><p>2020-9-7 06:04:22</p>
<hr>
<h2 id="2-更新日志"><a href="#2-更新日志" class="headerlink" title="2. 更新日志"></a>2. 更新日志</h2><h3 id="2-1-2020-9-7-06-00-31"><a href="#2-1-2020-9-7-06-00-31" class="headerlink" title="2.1 2020-9-7 06:00:31"></a>2.1 2020-9-7 06:00:31</h3><h4 id="2-1-1-文章8"><a href="#2-1-1-文章8" class="headerlink" title="2.1.1 文章8"></a>2.1.1 文章8</h4><p>1.更新了15，16，17；</p>
<h4 id="2-1-2-文章7"><a href="#2-1-2-文章7" class="headerlink" title="2.1.2 文章7"></a>2.1.2 文章7</h4><p>1.更新了11</p>
<h4 id="2-1-3-文章6"><a href="#2-1-3-文章6" class="headerlink" title="2.1.3 文章6"></a>2.1.3 文章6</h4><p>1.更新了2，2.2，2.3；2020-9-7 06:02:45</p>
<hr>
<h4 id="2-1-4-文章21"><a href="#2-1-4-文章21" class="headerlink" title="2.1.4 文章21"></a>2.1.4 文章21</h4><p>1.新建21，1，1.1，1.2；2020-9-7 06:03:36</p>
<hr>
<h3 id="2-2-2020-9-9-18-50-15"><a href="#2-2-2020-9-9-18-50-15" class="headerlink" title="2.2 2020-9-9 18:50:15"></a>2.2 2020-9-9 18:50:15</h3><h4 id="2-2-1-文章8-bfa"><a href="#2-2-1-文章8-bfa" class="headerlink" title="2.2.1 文章8-bfa"></a>2.2.1 文章8-bfa</h4><ul>
<li>8-blog’s_function_add-文章加密；2020-9-9 18:51:01</li>
<li>7-blog’s_problem_set-12. 不能显示css；2020-9-10 05:22:12</li>
</ul>
<hr>
<h3 id="2-3-2020-9-11-23-55-51"><a href="#2-3-2020-9-11-23-55-51" class="headerlink" title="2.3 2020-9-11 23:55:51"></a>2.3 2020-9-11 23:55:51</h3><ul>
<li>12-8.3.3 三角强化；2020-9-11 23:56:09</li>
</ul>
]]></content>
      <tags>
        <tag>xuhao</tag>
      </tags>
  </entry>
  <entry>
    <title>1-typescript</title>
    <url>/1-(0~50)/1-typescript_introduction/</url>
    <content><![CDATA[<h2 id="1-TypeScript初体验"><a href="#1-TypeScript初体验" class="headerlink" title="1. TypeScript初体验"></a>1. TypeScript初体验</h2><h3 id="1-1-ts概述"><a href="#1-1-ts概述" class="headerlink" title="1.1 ts概述"></a>1.1 ts概述</h3><ul>
<li>JavaScript 是什么</li>
<li>TypeScript 是什么</li>
<li>TypeScript 相比 JavaScript 的优势</li>
</ul>
<a id="more"></a>

<h4 id="1-1-1-JavaScript是什么"><a href="#1-1-1-JavaScript是什么" class="headerlink" title="1.1.1 JavaScript是什么"></a>1.1.1 JavaScript是什么</h4><p>JavaS Script（缩写：JS）是一种运行在客户端（比如：浏览器）中的编程语言。</p>
<p>当应用于浏览器时，为网站提供动态交互特性，让网页“动”起来。</p>
<p>JavaScript 的运行环境：1 浏览器 2 Node.js。<br>Node.js 让 JavaScript 摆脱了浏览器的束缚，可以实现服务端/桌面端编程等。<br>其他： 微信小程序、微信小游戏 等等。<br>总结：JavaScript 既能运行在 浏览器 中，也可以运行在 Node.js 中，前后端通吃，无所不能。</p>
<h4 id="1-1-2-TypeScript-是什么"><a href="#1-1-2-TypeScript-是什么" class="headerlink" title="1.1.2 TypeScript 是什么"></a>1.1.2 TypeScript 是什么</h4><p>TypeS Script（简称：TS）是 JavaScript 的超集（JS 有的 TS 都有）。</p>
<p>TypeScript =  Type + JavaScript（为 JS 添加了类型系统）。<br>TypeScript 是微软开发的开源编程语言，设计目标是开发大型应用。<br>可以在任何浏览器、任何计算机、任何操作系统上运行。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TypeScript 代码：有明确的类型，即 : number （数值类型）</span></span><br><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = <span class="number">18</span></span><br><span class="line"><span class="comment">// JavaScript 代码：无明确的类型</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/08/03/Eo4aSzBmlvQgTJi.png" alt="形象"></p>
<hr>
<h4 id="1-1-3-TypeScript-相比-JS-的优势"><a href="#1-1-3-TypeScript-相比-JS-的优势" class="headerlink" title="1.1.3 TypeScript  相比 JS 的优势"></a>1.1.3 TypeScript  相比 JS 的优势</h4><p>悲伤的故事：男程序员都是好男人，因为他们总会在电脑前问：我到底又错在哪了？<br>JS 的类型系统存在“先天缺陷” ，绝大部分错误都是类型错误（ Uncaught TypeError ）。<br>l 优势一：类型化思维方式，使得开发更加严谨，提前发现错误，减少改 Bug 时间。<br>l 优势二：类型系统提高了代码可读性，并使维护和重构代码更加容易。<br>l 优势三：补充了接口、枚举等开发大型应用时 JS 缺失的功能。<br>l Vue 3 源码使用 TS 重写，释放出重要信号：TS 是趋势。<br>l Angular 默认支持 TS；React 与 TS 完美配合，是很多大型项目的首选。<br>l 我呼吁：准程序员们，为了发量、为了对象，让我们手拉手一起用 TS 吧！</p>
<hr>
<h3 id="1-2-开发工具准备"><a href="#1-2-开发工具准备" class="headerlink" title="1.2 开发工具准备"></a>1.2 开发工具准备</h3><h4 id="1-2-1-开发工具介绍"><a href="#1-2-1-开发工具介绍" class="headerlink" title="1.2.1 开发工具介绍"></a>1.2.1 开发工具介绍</h4><ol>
<li>写代码的工具：V Visual S Studio  Code（简称：VSCode），微软开发的代码编辑工具。</li>
<li>运行 TS / JS 代码的工具：Node.js，一个基于 Chrome 浏览器 V8 解析引擎的 JavaScript 运行环境。</li>
</ol>
<ul>
<li>说明：本课程中，TypeScript 基础知识，使用 Node.js 来运行。</li>
</ul>
<h4 id="1-2-2-安装-VSCode"><a href="#1-2-2-安装-VSCode" class="headerlink" title="1.2.2  安装 VSCode"></a>1.2.2  安装 VSCode</h4><ol>
<li>按照步骤引导安装即可。</li>
<li>安装中文汉化插件：Chinese (Simplified) Language Pack for Visual Studio Code</li>
<li>点击右下角弹出的对话框，重启（Restart）VSCode。</li>
</ol>
<p><img src="https://i.loli.net/2020/08/05/UJ7Dv4dVjx3o56B.png" alt=""></p>
<center style="font-size:14px;color:#C0C0C0;">图1</center>

<hr>
<h4 id="1-2-3-安装-Node-js"><a href="#1-2-3-安装-Node-js" class="headerlink" title="1.2.3  安装  Node.js"></a>1.2.3  安装  Node.js</h4><ol>
<li>按照步骤引导安装即可。</li>
<li>在终端（黑窗口）中输入：node –version，验证是否安装成功（注意：需要重启VSCode）。</li>
<li>如果打印出版本信息说明安装成功。</li>
</ol>
<p><img src="https://i.loli.net/2020/08/05/KwENhpAfS6yYaDu.png" alt=""></p>
<center style="font-size:14px;color:#C0C0C0;">图1</center>

<hr>
<br />

<h4 id="1-2-4-安装解析-TS-的工具包"><a href="#1-2-4-安装解析-TS-的工具包" class="headerlink" title="1.2.4  安装解析 TS  的工具包"></a>1.2.4  安装解析 TS  的工具包</h4><p>问题：为什么要安装这个工具包？</p>
<p>答案：</p>
<ul>
<li>Node.js/浏览器，只认识 JS 代码，不认识 TS 代码。</li>
<li>需要先将 TS 代码转化为 JS，然后就可以在 Node.js/浏览器中运行了。</li>
</ul>
<p>安装步骤：</p>
<ol>
<li><p>打开 VSCode 终端。</p>
</li>
<li><p>输入安装命令： npm i -g typescript 敲回车，来安装（注意：需要联网）。</p>
<p>typescript：就是用来解析 TS 的工具包。提供了 tsc 命令，实现了 TS -&gt; JS 的转化。</p>
<p>npm：用来安装前端开发中用到的包，是安装 Node.js 时自动安装的。</p>
<p>i（install）：表示安装。</p>
<p>-g（–global）：全局标识，可以在任意目录中使用该工具。</p>
</li>
</ol>
<hr>
<br />

<h3 id="1-3-第一个TS文件"><a href="#1-3-第一个TS文件" class="headerlink" title="1.3 第一个TS文件"></a>1.3 第一个TS文件</h3><ol>
<li><p>创建ts文件：<br>① 在桌面中创建文件夹：code。<br>② 在文件夹上点击鼠标右键，然后点击 Open With Code（用VSCode打开文件夹）。<br>③ 在 VSCode 中新建ts文件：hello.ts（注意：文件后缀名为 .ts）。</p>
</li>
<li><p>写代码：在 hello.ts 文件中，写入以下代码，并保存。</p>
<p><code>console.log(&#39;Hello TS&#39;)</code></p>
</li>
</ol>
<p>问题1：TS 代码能直接在 Node.js 里面运行吗？   不能<br>问题2：该如何处理呢？    1 .TS代码 -&gt; JS代码   2. 执行</p>
<ol start="3">
<li><p>执行代码，分两步：</p>
<p>① TS代码 -&gt; JS代码：在当前目录打开终端，输入命令 tsc hello.ts 敲回车。<br>② 执行JS：输入命令 node hello.js（注意：后缀为 .js）。</p>
<p>解释：</p>
<ul>
<li>tsc hello.ts 会生成一个 hello.js 文件。</li>
<li>node hello.js 表示执行这个 JS 文件中的代码。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="4-ts语句"><a href="#4-ts语句" class="headerlink" title="4. ts语句"></a>4. ts语句</h2><h3 id="4-1-条件语句"><a href="#4-1-条件语句" class="headerlink" title="4.1 条件语句"></a>4.1 条件语句</h3><h4 id="4-1-1-概述"><a href="#4-1-1-概述" class="headerlink" title="4.1.1 概述"></a>4.1.1 概述</h4><p>生活中，打开网站看电影：1 免费电影 2 Vip 电影。<br>播放 Vip 电影时，首先会判断是不是 Vip：<br>l 如果是 Vip，就可以看完整电影；<br>l 如果不是 Vip，只能试看5分钟。</p>
<p><img src="https://i.loli.net/2020/08/06/NxqDCYuLbtyR7nJ.png" alt=""></p>
<center style="font-size:15px;color:#C0C0C0;">图1</center>

<p>条件语句：根据判断条件的结果（真或假），来执行不同的代码，从而实现不同功能。<br>条件执行时，首先判断条件是否满足。<br>l 如果  条 件满足，就做某件事情（情况1）<br>l 如果  条 件不满足，就做另外一件事情（情况2）</p>
<p><img src="https://i.loli.net/2020/08/06/5O8A4xrJ7QVE6Dy.png" alt=""></p>
<center style="font-size:15px;color:#C0C0C0;">图2</center>

<p>条件语句，也叫分支语句，不同的情况就是不同的分支。 </p>
<hr>
<h4 id="4-1-2-if语句"><a href="#4-1-2-if语句" class="headerlink" title="4.1.2 if语句"></a>4.1.2 if语句</h4><p>在 TypeScript 中  if 语句就是实现条件判断的。</p>
<ul>
<li><p>if 语句的语法：</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">if ( (判断条件 ) </span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">    条件满足时，要做的事情</span></span><br><span class="line"><span class="template-variable">&#125;</span><span class="xml"> </span></span><br></pre></td></tr></table></figure>

<p>解释：<br>l 判断条件：布尔类型（true 或 false）。<br>l 如果 判断条件 为真，就执行 要做的事情；<br>l 否则，如果判断条件为假，则不执行花括号中的代码。</p>
</li>
</ul>
<p>补充概念说明：语句，是一个完整的句子，用来使某件事情发生（或实现某个功能）。</p>
<hr>
<h4 id="4-1-3-else语句"><a href="#4-1-3-else语句" class="headerlink" title="4.1.3 else语句"></a>4.1.3 else语句</h4><p>在 TypeScript 中 else 语句必须配合  if 语句来使用。</p>
<p>else 语句表示： 条件不满足，要做的事情（ if 语句的对立面）。</p>
<ul>
<li>else 语句的语法:</li>
</ul>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">if (判断条件) </span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">条件满足时，要做的事情</span></span><br><span class="line"><span class="template-variable">&#125;</span><span class="xml">  else </span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">条件不满足，要做的事情</span></span><br><span class="line"><span class="template-variable">&#125;</span><span class="xml"> </span></span><br></pre></td></tr></table></figure>

<p>解释：<br>l 否则，如果 判断条件 为假，就执行 条件不满足时要做的事情。</p>
<hr>
<h3 id="4-2-三元运算符"><a href="#4-2-三元运算符" class="headerlink" title="4.2 三元运算符"></a>4.2 三元运算符</h3><p>三元运算符的作用与  if … else 语句类似。</p>
<p>作用：根据判断条件的真假，得到不同的 结 果。</p>
<p>语法：</p>
<p>结果 = 判断条件 ? 值1 : 值2</p>
<p>解释：</p>
<ul>
<li>如果判断条件为真，结果为 值1；</li>
<li>否则，如果判断条件为假，结果为 值2。</li>
</ul>
<p>注意：得到 结果的类型 由 值1 和 值2 的 类型决定 （值1和值2的类型相同）。</p>
<hr>
<h2 id="5-TypeScript数组"><a href="#5-TypeScript数组" class="headerlink" title="5.TypeScript数组"></a>5.TypeScript数组</h2><h3 id="5-1-数组概述"><a href="#5-1-数组概述" class="headerlink" title="5.1 数组概述"></a>5.1 数组概述</h3><p>问题1：存储一个人的名字，怎么存？  声明一个字符串类型的变量<br><code>let name1: string = &#39;迪丽热巴&#39;</code><br>问题2：存储三个人的名字，怎么存？  声明三个字符串类型的变量</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name1: <span class="keyword">string</span> = <span class="string">&#x27;迪丽热巴&#x27;</span></span><br><span class="line"><span class="keyword">let</span> name2: <span class="keyword">string</span> = <span class="string">&#x27;古力娜扎&#x27;</span></span><br><span class="line"><span class="keyword">let</span> name3: <span class="keyword">string</span> = <span class="string">&#x27;马尔扎哈&#x27;</span></span><br></pre></td></tr></table></figure>

<p>问题3：如何是存储一个班级中所有人的名字呢？<br>存储多个数据时，声明多个变量就太繁琐了。</p>
<!--more-->

<hr>
<p>数组，是用于存放多个数据的集合。</p>
<p>有数组：只需要使用一个数组（ [] ），就可以存储任意多个数据。</p>
<p><code>let names: string[] = [&#39;迪丽热巴&#39;, &#39;古力娜扎&#39;, &#39;马尔扎哈&#39;]</code></p>
<p>没有数组：存储三个人的名字，就需要三个字符串类型的变量。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name1: <span class="keyword">string</span> = <span class="string">&#x27;迪丽热巴&#x27;</span></span><br><span class="line"><span class="keyword">let</span> name2: <span class="keyword">string</span> = <span class="string">&#x27;古力娜扎&#x27;</span></span><br><span class="line"><span class="keyword">let</span> name3: <span class="keyword">string</span> = <span class="string">&#x27;马尔扎哈&#x27;</span></span><br></pre></td></tr></table></figure>

<p>注意：数组中，通常是相同类型的数据。</p>
<hr>
<h3 id="5-2-创建数组"><a href="#5-2-创建数组" class="headerlink" title="5.2 创建数组"></a>5.2 创建数组</h3><ol>
<li>创建数组有两种语法形式。</li>
</ol>
<p>语法一（推荐）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let names: string[] &#x3D; []</span><br></pre></td></tr></table></figure>

<p>[ ] (中括号) 表示数组。如果数组中没有内容，就是一个空数组。</p>
<p>数组的类型注解由两部分组成：类型+ [] 。此处表示字符串类型的数组（只能出现字符串类型）。</p>
<p><code>let names: string[] = [&#39;迪丽热巴&#39;]</code></p>
<p>数组，多个元素之间使用逗号（,）分隔。<br>数组中的每一项内容称为：元素。</p>
<ol start="2">
<li>语法二（不推荐）：</li>
</ol>
<p><code>let names: string[] = new Array()</code></p>
<p>功能与 [ ]  相同，但是更加繁琐：</p>
<p><code>let names: string[] = []</code></p>
<p>数组中有数据时：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> names: <span class="built_in">string</span>[] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&#x27;迪丽热巴&#x27;</span>, <span class="string">&#x27;古力娜扎&#x27;</span>, <span class="string">&#x27;马尔扎哈&#x27;</span>)</span><br><span class="line"><span class="comment">// 相当于：</span></span><br><span class="line"><span class="keyword">let</span> names: <span class="built_in">string</span>[] = [<span class="string">&#x27;迪丽热巴&#x27;</span>, <span class="string">&#x27;古力娜扎&#x27;</span>, <span class="string">&#x27;马尔扎哈&#x27;</span>]</span><br></pre></td></tr></table></figure>



<h3 id="5-3-数组长度和索引"><a href="#5-3-数组长度和索引" class="headerlink" title="5.3 数组长度和索引"></a>5.3 数组长度和索引</h3><p>视频链接：<a href="https://www.bilibili.com/video/BV1UD4y1m7Gw?t=4&amp;p=59">https://www.bilibili.com/video/BV1UD4y1m7Gw?t=4&amp;p=59</a></p>
<h4 id="5-3-1-概述"><a href="#5-3-1-概述" class="headerlink" title="5.3.1 概述"></a>5.3.1 概述</h4><p>生活中，我们经常会排队（比如：排队吃饭）。<br>队伍的特征：1 长度 2 顺序和序号（队伍中的每个人）。<br>我们可以把<font color='red'>数组想象成这个队伍</font>，因为<font color='red'>数组也有长度</font>，也有<font color='red'>顺序</font>并且数组中的每个元素也有<font color='red'>序号</font>。</p>
<p><img src="https://i.loli.net/2020/08/06/VaojGhHTAlZcWsC.png" alt=""></p>
<center style="font-size:15px;color:#C0C0C0;">图1</center>

<h4 id="5-3-2-数组长度"><a href="#5-3-2-数组长度" class="headerlink" title="5.3.2 数组长度"></a>5.3.2 数组长度</h4><p>数组长度：表示数组中元素的个数，通过数组的  length  属性来获取。</p>
<p><code>let foods: string[] = [&#39;煎饼&#39;, &#39;馒头&#39;, &#39;米饭&#39;]</code></p>
<p>获取数组长度：</p>
<p><code>console.log(foods.length) // 3</code></p>
<h4 id="5-3-3-数组索引"><a href="#5-3-3-数组索引" class="headerlink" title="5.3.3 数组索引"></a>5.3.3 数组索引</h4><p>数组中的每个元素都有自己的序号。</p>
<p>我们把数组中元素的序号，称为：索引（下标），数组中的元素与索引一一对应。</p>
<p>注意：<strong>数组索引是从 0 开始的。</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foods: <span class="built_in">string</span>[] = [<span class="string">&#x27;煎饼&#x27;</span>, <span class="string">&#x27;馒头&#x27;</span>, <span class="string">&#x27;米饭&#x27;</span>]</span><br><span class="line"><span class="comment">// 数组的索引分别为：       0       1      2 </span></span><br></pre></td></tr></table></figure>

<p>问题：该数组的长度（ length ）和最大索引之间有什么关系？ 最大索引为： length - 1</p>
<p>总结：</p>
<p>数组是有序的集合，用来存储多个数据。</p>
<p>问题1：如何获取数组长度？   foods.length</p>
<p>问题2：数组索引是从几开始的？  索引从 0 0 开始</p>
<h3 id="5-4、取值与存值"><a href="#5-4、取值与存值" class="headerlink" title="5.4、取值与存值"></a>5.4、取值与存值</h3><h4 id="5-4-1-取值"><a href="#5-4-1-取值" class="headerlink" title="5.4.1 取值"></a>5.4.1 取值</h4><p>从数组中，获取到某一个元素的值，就是从数组中取值。（比如，获取最爱的食物 – 煎饼）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foods: <span class="built_in">string</span>[] = [<span class="string">&#x27;煎饼&#x27;</span>, <span class="string">&#x27;馒头&#x27;</span>, <span class="string">&#x27;米饭&#x27;</span>]</span><br><span class="line"><span class="comment">// 数组的索引分别为：       0      1       2 </span></span><br></pre></td></tr></table></figure>

<p>数组中的元素与索引是 一 一 对应的，<strong>通过索引获取到某一个元素的值</strong>。<br>语法：<br><code>数组名称[索引]</code><br>比如，获取到最爱的食物 – 煎饼：</p>
<p><code>console.log(foods[0]) // 煎饼</code></p>
<h4 id="5-4-2-存值"><a href="#5-4-2-存值" class="headerlink" title="5.4.2 存值"></a>5.4.2 存值</h4><p>如果要修改数组中某个元素的值，就要使用数组存值。（比如，不爱吃馒头，将馒头替换为包子）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foods: <span class="built_in">string</span>[] = [<span class="string">&#x27;煎饼&#x27;</span>, <span class="string">&#x27;馒头&#x27;</span>, <span class="string">&#x27;米饭&#x27;</span>]</span><br><span class="line"><span class="comment">// 数组的索引分别为：       0      1       2 </span></span><br></pre></td></tr></table></figure>

<p>技巧：先获取到要修改的元素，然后，再存值。<br>语法：</p>
<p><code>数组名称[索引] = 新值</code></p>
<p>比如，将馒头替换为包子：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">foods[<span class="number">1</span>] = <span class="string">&#x27;包子&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(foods) <span class="comment">// [&#x27;煎饼&#x27;, &#x27;包子&#x27;, &#x27;米饭&#x27;]</span></span><br></pre></td></tr></table></figure>

<h4 id="5-4-3-添加元素"><a href="#5-4-3-添加元素" class="headerlink" title="5.4.3 添加元素"></a>5.4.3 添加元素</h4><p>存值的语法是：数组名称[ 索引] = 新值，根据索引是否存在，有两种功能：1 修改元素 2 添加元素。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foods: <span class="built_in">string</span>[] = [<span class="string">&#x27;煎饼&#x27;</span>, <span class="string">&#x27;馒头&#x27;</span>, <span class="string">&#x27;米饭&#x27;</span>]</span><br><span class="line"><span class="comment">// 数组的索引分别为：       0      1       2 </span></span><br></pre></td></tr></table></figure>
<ol>
<li><p>如果索引存在，就表示：修改元素。<br> <code>foods[1] = &#39;包子&#39;</code></p>
</li>
<li><p>如果索引不存在，就表示：添加元素。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">foods[<span class="number">3</span> <span class="number">3</span>] = <span class="string">&#x27;油泼面&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(foods) <span class="comment">// [&#x27;煎饼&#x27;, &#x27;馒头&#x27;, &#x27;米饭&#x27;, &#x27; 油泼面&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>添加元素的通用写法：数组名称[数组长度] = 新值</p>
</li>
</ol>
<h5 id="2-push-添加元素"><a href="#2-push-添加元素" class="headerlink" title="2. push-添加元素"></a>2. push-添加元素</h5><ol start="2">
<li><p>push 方法：添加元素（在数组最后一项元素的后面添加）。</p>
<p><code>songs.push(&#39;痒&#39;)</code></p>
<p>原来的方式：使用数组长度作为索引</p>
<p><code>songs[songs.length] = &#39;痒&#39; // =&gt; songs[3] = &#39;痒&#39;</code></p>
<p>2.1 也可以查文档来学习</p>
<ul>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push">push</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> animals = [<span class="string">&#x27;pigs&#x27;</span>, <span class="string">&#x27;goats&#x27;</span>, <span class="string">&#x27;sheep&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = animals.push(<span class="string">&#x27;cows&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(count);</span><br><span class="line"><span class="comment">// expected output: 4</span></span><br><span class="line"><span class="built_in">console</span>.log(animals);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;pigs&quot;, &quot;goats&quot;, &quot;sheep&quot;, &quot;cows&quot;]</span></span><br><span class="line"></span><br><span class="line">animals.push(<span class="string">&#x27;chickens&#x27;</span>, <span class="string">&#x27;cats&#x27;</span>, <span class="string">&#x27;dogs&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(animals);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;pigs&quot;, &quot;goats&quot;, &quot;sheep&quot;, &quot;cows&quot;, &quot;chickens&quot;, &quot;cats&quot;, &quot;dogs&quot;]</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ol>
<ul>
<li><p>解惑：</p>
<ul>
<li>const 表示常量，常量不能重新赋值；let 是变量，可以在后面二次赋值；</li>
</ul>
</li>
</ul>
<p>   2.2 练习：</p>
<ul>
<li><pre><code class="typescript"><span class="keyword">let</span> songs: <span class="built_in">string</span>[] = [<span class="string">'五环之歌'</span>, <span class="string">'探清水河'</span>, <span class="string">'晴天'</span>]
songs.push(<span class="string">'样'</span>)
<span class="built_in">console</span>.log(songs)
&lt;!--hexoPostRenderEscape:&lt;figure <span class="keyword">class</span>=<span class="string">"highlight xquery"</span>&gt;&lt;table&gt;&lt;tr&gt;&lt;td <span class="keyword">class</span>=<span class="string">"gutter"</span>&gt;&lt;pre&gt;&lt;span <span class="keyword">class</span>=<span class="string">"line"</span>&gt;<span class="number">1</span>&lt;<span class="regexp">/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/</span>span&gt;&lt;br&gt;&lt;span <span class="keyword">class</span>=<span class="string">"line"</span>&gt;<span class="number">3</span>&lt;<span class="regexp">/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/</span>span&gt;&lt;br&gt;&lt;span <span class="keyword">class</span>=<span class="string">"line"</span>&gt;<span class="number">5</span>&lt;<span class="regexp">/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/</span>span&gt;&lt;br&gt;&lt;span <span class="keyword">class</span>=<span class="string">"line"</span>&gt;<span class="number">7</span>&lt;<span class="regexp">/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/</span>span&gt;&lt;br&gt;&lt;span <span class="keyword">class</span>=<span class="string">"line"</span>&gt;<span class="number">9</span>&lt;<span class="regexp">/span&gt;&lt;br&gt;&lt;/</span>pre&gt;&lt;<span class="regexp">/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;/</span>span&gt;&lt;br&gt;&lt;span <span class="keyword">class</span>=<span class="string">"line"</span>&gt;+ 如果要接受到push返回的数组长度，需要用一个量来接收；&lt;<span class="regexp">/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/</span>span&gt;&lt;br&gt;&lt;span <span class="keyword">class</span>=<span class="string">"line"</span>&gt;  <span class="string">``</span><span class="string">`typescript&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;span class="keyword"&gt;let&lt;/span&gt; songs:&lt;span class="built_in"&gt; string&lt;/span&gt;[] = [&lt;span class="string"&gt;&amp;#x27;五环之歌&amp;#x27;&lt;/span&gt;, &lt;span class="string"&gt;&amp;#x27;探清水河&amp;#x27;&lt;/span&gt;, &lt;span class="string"&gt;&amp;#x27;晴天&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;span class="keyword"&gt;let&lt;/span&gt; len:&lt;span class="built_in"&gt; number&lt;/span&gt; = songs.push(&lt;span class="string"&gt;&amp;#x27;样&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  console.log(songs, len)&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  // 也许&lt;span class="keyword"&gt;let&lt;/span&gt; len:&lt;span class="built_in"&gt; number&lt;/span&gt; = songs.push(&lt;span class="string"&gt;&amp;#x27;样&amp;#x27;&lt;/span&gt;) 看着不顺眼;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  // 但确实执行了songs.push(&lt;span class="string"&gt;&amp;#x27;样&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</span>
<span class="string"></span></code></pre>
</li>
</ul>
<hr>
<h4 id="5-4-4-删除元素"><a href="#5-4-4-删除元素" class="headerlink" title="5.4.4 删除元素"></a>5.4.4 删除元素</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/pop">MDN文档介绍</a></p>
<ol>
<li>概述</li>
</ol>
<p><code>pop</code> 方法从一个数组中删除并返回最后一个元素。</p>
<p><code>pop</code> 方法有意具有通用性。该方法和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call"><code>call()</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply"><code>apply()</code></a> 一起使用时，可应用在类似数组的对象上。<code>pop</code>方法根据 <code>length</code>属性来确定最后一个元素的位置。如果不包含<code>length</code>属性或<code>length</code>属性不能被转成一个数值，会将<code>length</code>置为0，并返回<code>undefined</code>。</p>
<p>如果你在一个空数组上调用 pop()，它返回  <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a>。</p>
<ol start="2">
<li><p>示例</p>
<p>例子: 删除掉数组的最后一个元素</p>
</li>
</ol>
<p>下面的代码首先创建了一个拥有四个元素的数组 myFish，然后删除掉它的最后一个元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myFish = [<span class="string">&quot;angel&quot;</span>, <span class="string">&quot;clown&quot;</span>, <span class="string">&quot;mandarin&quot;</span>, <span class="string">&quot;surgeon&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> popped = myFish.pop();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myFish); </span><br><span class="line"><span class="comment">// [&quot;angel&quot;, &quot;clown&quot;, &quot;mandarin&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(popped); </span><br><span class="line"><span class="comment">// surgeon</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>问题<br>这个方法不能删除指定的元素；<h5 id="2-删除指定元素"><a href="#2-删除指定元素" class="headerlink" title="2. 删除指定元素"></a>2. 删除指定元素</h5></li>
</ol>
<p><a href="https://www.tnblog.net/Shangjin123/article/details/3492">https://www.tnblog.net/Shangjin123/article/details/3492</a></p>
<p>删除数组中指定的元素，原理上是不能直接删除指定的元素 要是可以直接删除的话绝对又bug 但是可以灵活的应用。</p>
<p><strong>自定义函数删除</strong>：只适用在js，如果想在ts里搞这种类似的写法 自己去写 </p>
<p>首先可以给JS的数组对象定义一个函数，用于查找指定的元素在数组中的位置，即索引，代码为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.indexOf = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123; </span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>[i] == val) <span class="keyword">return</span> i; </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure>

<p>然后使用通过得到这个元素的索引，使用js数组自己固有的函数去删除这个元素：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">var</span> index = <span class="built_in">this</span>.indexOf(val); </span><br><span class="line">  <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) &#123; </span><br><span class="line">  <span class="built_in">this</span>.splice(index, <span class="number">1</span>); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure>

<p>这样就构造了这样一个自定义的函数，好像有点装逼含量，比如我有有一个数组：</p>
<p>var emp = [‘abs’,’dsf’,’sdf’,’fd’];</p>
<p>假如我们要删除其中的 ‘fd’ ,就可以使用：</p>
<p>emp.remove(‘fd’);</p>
<p>输出结果：console.log(emp)</p>
<p>[‘abs’,’dsf’,’sdf’]</p>
<p>ok 被删求掉了</p>
<p><strong>splice删除</strong>：js或ts都可以</p>
<p>var arr=new Array(“aa”,”bb”,”cc”,”dd”,”ee”,”ff”,”gg”);</p>
<p>console.log(“原数组”,arr);//<strong>[“aa”, “bb”, “cc”, “dd”, “ee”, “ff”, “gg”]</strong></p>
<p>console.log(“找到指定元素的下标”arr.indexOf(“ff”));//5</p>
<p>arr.splice(arr.indexOf(“ff”),1);//后边的1代表删除这个位置开始删除1一个元素</p>
<p>console.log(“删除后”,arr);console.log(“删除后”,arr);//[“aa”, “bb”, “cc”, “dd”, “ee”, “gg”]</p>
<p>然后指定元素ff就被删求掉了撒 我的天啊 这种方法困扰了我一个下午</p>
<hr>
<h3 id="5-5-遍历数组"><a href="#5-5-遍历数组" class="headerlink" title="5.5 遍历数组"></a>5.5 遍历数组</h3><p>遍历数组，也就是把数组中的所有元素挨个获取一次（比如，计算数组中所有数字的和）。</p>
<p><code>let nums: number[] = [100, 200, 300]</code></p>
<p>通过数组取值的方式，就可以一个个取出来：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(nums[<span class="number">0</span>]) <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">console</span>.log(nums[<span class="number">1</span>]) <span class="comment">// 200</span></span><br><span class="line"><span class="built_in">console</span>.log(nums[<span class="number">2</span>]) <span class="comment">// 300</span></span><br></pre></td></tr></table></figure>

<p>存在问题：太繁琐，相似的代码重复多次。</p>
<p>重复做某件事情，可以使用  for 循环。<br>重复取值的规律：索引号自增（每次加1 ），而  for 循环的计数器i i也是自增的。</p>
<p>推荐，使用 for 循环遍历数组：</p>
<p>for (let i: number = ?; i &lt;= ? ; i++) {<br>console.log(nums[i])<br>}</p>
<p>这里的 ？ 应该怎么填呢？</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i: <span class="built_in">number</span> = <span class="number">0</span> <span class="number">0</span>; i &lt;= nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(nums[i i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意1：因为数组索引是从0 0开始的，所以计数器i i的默认值为0 0。<br>注意2：应该根据数组长度来计算，公式为数组长度减一，也就是：nums.length – 1（最大索引）。<br>优势：不管数组中元素的数量怎么变化，for循环的判断条件不需要改动。</p>
<p>简化判断条件（计数器i的值为整数，所以， i&lt;=2 与  i&lt;3 作用相同）：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i: <span class="built_in">number</span> = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(nums[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：<br>遍历数组，也就是把数组中的所有元素挨个获取一次。<br>问题1：如果要遍历数组应该使用什么语句？   for 循环语句<br>问题2：for循环计数器的默认值是多少？    默认值为： 0</p>
<p>问题3：for循环的判断条件是什么？  i &lt; nums.length</p>
<h3 id="5-6-数组练习"><a href="#5-6-数组练习" class="headerlink" title="5.6 数组练习"></a>5.6 数组练习</h3><h4 id="5-6-1-求数组中所有元素的和"><a href="#5-6-1-求数组中所有元素的和" class="headerlink" title="5.6.1 求数组中所有元素的和"></a>5.6.1 求数组中所有元素的和</h4><p>例如：[200,20,3]</p>
<p>思路：</p>
<ol>
<li>准备一个变量来存储和（sum）</li>
<li>使用for循环遍历数组，拿到数组中的每一个元素</li>
<li>在for循环中让sum+=数组的每一个元素</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums: <span class="built_in">number</span>[] = [<span class="number">200</span>,<span class="number">30</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment">// 思路：</span></span><br><span class="line"><span class="comment">// 1. 准备一个变量来存储和（sum）</span></span><br><span class="line"><span class="keyword">let</span> sum: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line"><span class="comment">// 2. 使用for循环遍历数组，拿到数组中的每一个元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i: <span class="built_in">number</span> = <span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">    sum += nums[i]</span><br><span class="line">    <span class="comment">// nums[i]拿到每一个元素，每循环一次，拿到一个新元素，从索引0开始</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3. 在for循环中让sum+=数组的每一个元素</span></span><br><span class="line"><span class="built_in">console</span>.log(sum)</span><br><span class="line"><span class="comment">// 打印值</span></span><br></pre></td></tr></table></figure>

<p>无注释版：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums: <span class="built_in">number</span>[] = [<span class="number">200</span>,<span class="number">30</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> sum: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i: <span class="built_in">number</span> = <span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">    sum += nums[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum)</span><br></pre></td></tr></table></figure>



<hr>
<h4 id="5-6-2-找出数组中最大的数"><a href="#5-6-2-找出数组中最大的数" class="headerlink" title="5.6.2-找出数组中最大的数"></a>5.6.2-找出数组中最大的数</h4><p>视频教学：<a href="https://www.bilibili.com/video/BV1UD4y1m7Gw?p=67">https://www.bilibili.com/video/BV1UD4y1m7Gw?p=67</a></p>
<p>例如：[1,9,3]</p>
<p>思路：</p>
<ol>
<li>创建变量max，来存储最大值</li>
<li>假设数组中的第一个元素为最大值，作为max的默认值</li>
<li>用for循环遍历数组，获取到数组中的每一个元素</li>
<li>在for循环中，判断每一个元素是否大于max</li>
<li>如果大于，就把该元素存储到max中（max一直都是最大值）</li>
<li>如果小于或等于，不做任何处理（因为找的是最大值）</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums1: <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">9</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment">// 1. 创建变量max，来存储最大值</span></span><br><span class="line"><span class="comment">// 2. 假设数组中的第一个元素为最大值，作为max的默认值</span></span><br><span class="line"><span class="keyword">let</span> max: <span class="built_in">number</span> = num1[<span class="number">0</span>]</span><br><span class="line"><span class="comment">// 3. 用for循环遍历数组，获取到数组中的每一个元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i: <span class="built_in">number</span> = <span class="number">1</span>; i&lt;nums1.length; i++)&#123;</span><br><span class="line">    <span class="comment">// 4. 在for循环中，判断每一个元素是否大于max</span></span><br><span class="line">    <span class="comment">// 5. 如果大于，就把该元素存储到max中（max一直都是最大值）</span></span><br><span class="line">    <span class="comment">// 6. 如果小于或等于，不做任何处理（因为找的是最大值）</span></span><br><span class="line">    <span class="comment">// 当前环境，已经把num1[0]使用，所以i可以从1开始，而不是0，当仅限一定条件下</span></span><br><span class="line">    <span class="keyword">if</span>(nums1[i] &gt; max)&#123;</span><br><span class="line">        max = nums1[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(max)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>没有注释版本：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums1: <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">9</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> max: <span class="built_in">number</span> = num1[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i: <span class="built_in">number</span> = <span class="number">1</span>; i&lt;nums1.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums1[i] &gt; max)&#123;</span><br><span class="line">        max = nums1[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(max)</span><br></pre></td></tr></table></figure>

<p><strong>思路是编程的基础之一，它非常重要，能让你下笔</strong></p>
<hr>
<h4 id="5-6-3-找出数组中所有不为x的元素，放到一个新的数组中"><a href="#5-6-3-找出数组中所有不为x的元素，放到一个新的数组中" class="headerlink" title="5.6.3 找出数组中所有不为x的元素，放到一个新的数组中"></a>5.6.3 找出数组中所有不为x的元素，放到一个新的数组中</h4><p> 例如：</p>
<p>找出数组中所有不为0的元素，放到一个新的数组中</p>
<p>[1,3,0,10,33,0,0,6] </p>
<p>思路：</p>
<ol>
<li>创建一个新数组（newArr），存储不为0的元素</li>
<li>使用for循环遍历数组，拿到数组中的每一个元素</li>
<li>在for循环中判断每一个元素是否为0</li>
<li>如果不为0，那么，将该元素存储到新数组中</li>
<li>如果为0，就不做任何处理  </li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums2: <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">33</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">6</span>]</span><br><span class="line"><span class="comment">// 1. 创建一个新数组（newArr），存储不为0的元素</span></span><br><span class="line"><span class="keyword">let</span> newArr: <span class="built_in">number</span>[] = []</span><br><span class="line"><span class="comment">// 2. 使用for循环遍历数组，拿到数组中的每一个元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i:<span class="built_in">number</span> = <span class="number">1</span>; i&lt;nums2.length; i++)&#123;</span><br><span class="line">    <span class="comment">// 3. 在for循环中判断每一个元素是否为0</span></span><br><span class="line">    <span class="keyword">if</span>(nums2[i] !== <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 4. 如果不为0，那么，将该元素存储到新数组中</span></span><br><span class="line">        newArr[newArr.length] = nums2[i]</span><br><span class="line">        <span class="comment">// 说明：当newArr为空数组时，里面啥数据都没有，它的长度为0和第一个索引0是一样的。但当有一个数据时，比如，这里nums2[i]=1，不为0。马上要存入数组newArr，存进去后，长度变为了1，但数据1对应的索引还是0，而这时长度已经是1了，新的数据存入的位置是索引1。没问题。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5. 如果为0，就不做任何处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr)</span><br></pre></td></tr></table></figure>

<p>没有注释版：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums2: <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">33</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> newArr: <span class="built_in">number</span>[] = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i:<span class="built_in">number</span> = <span class="number">1</span>; i&lt;nums2.length; i++)&#123;    </span><br><span class="line">    <span class="keyword">if</span>(nums2[i] !== <span class="number">0</span>)&#123;        </span><br><span class="line">        newArr[newArr.length] = nums2[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr)</span><br></pre></td></tr></table></figure>

<p><a href="https://www.bilibili.com/video/BV1UD4y1m7Gw?p=55">https://www.bilibili.com/video/BV1UD4y1m7Gw?p=55</a></p>
<hr>
<h2 id="6-函数基础"><a href="#6-函数基础" class="headerlink" title="6. 函数基础"></a>6. 函数基础</h2><h3 id="6-1-函数概述"><a href="#6-1-函数概述" class="headerlink" title="6.1 函数概述"></a>6.1 函数概述</h3><ol>
<li><p>需求： 计算数组nums中所有元素的和。</p>
<p><code>let nums: number[] = [1, 3, 5]</code> </p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i: <span class="built_in">number</span> = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">sum += nums[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum)</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p>   问题：如果还要计算其他数组（nums2）中所有元素的和呢？ 拷贝一份代码，修改吗？</p>
<p>   例如num2</p>
<p>   <code>let nums2: number[] = [2, 4, 6]</code>  </p>
<p>   存在的问题：相似的代码重复写，代码冗余。[^冗]</p>
<ol start="2">
<li><p>正确的姿势：使用函数来包装（封装）相似的代码，在需要的时候调用函数，相似的代码不再重复写。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> sum: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i: <span class="built_in">number</span> = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    sum += nums[i]</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">console</span>.log(sum)</span><br><span class="line">&#125;</span><br><span class="line">getSum(nums1) <span class="comment">// 计算nums1中所有元素的和</span></span><br><span class="line">getSum(nums2) <span class="comment">// 计算nums2中所有元素的和</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>所谓函数，就是声明一次但却可以调用任意多次的一段代码。<br>封装：将一段代码包装起来，隐藏细节。<br><strong>意义：实现代码 复用，提升开发效率</strong>。</p>
<hr>
<h3 id="6-2-函数的使用"><a href="#6-2-函数的使用" class="headerlink" title="6.2 函数的使用"></a>6.2 函数的使用</h3><p>函数的使用分为两步：1 声明函数 2 调用函数 （类比变量）。</p>
<ul>
<li>第一步：声明函数</li>
</ul>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名称(<span class="params"></span>) </span>&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  解释：</p>
<p>​        函数名称：推荐以动词开头，因为函数表示做一件事情，实现一个功能。</p>
<p>​        函数体：表示要实现功能的代码，复用的代码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sing</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;五环之歌&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 song( )也是可以的，但就是建议用动词，表示在动在做。</p>
<p>嗯，我有感觉，我信他；</p>
<p><a href="https://www.bilibili.com/video/BV1UD4y1m7Gw?t=5&amp;p=71">https://www.bilibili.com/video/BV1UD4y1m7Gw?t=5&amp;p=71</a>  2min07s</p>
<ul>
<li><p>第二步：调用函数</p>
<p><code>函数名称()</code></p>
<p>比如，调用sing函数：</p>
<p><code>sing()</code></p>
<p>注意：只有调用函数后，函数中的代码才会执行。</p>
<ul>
<li><p>如果没有调用就不会使用函数；例如：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sing</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;五环之歌&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ts-node xxx(文件名)是打印不出 五环的；</p>
<p>得加上<code>sing()</code>才有用；</p>
</li>
</ul>
</li>
<li><p>总结</p>
<ol>
<li>函数的基本使用分为哪两步？   1 声明函数 2 调用函数</li>
<li>声明函数的关键字是什么？    function</li>
<li>不调用函数，函数中的代码会执行吗？   不会</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sing</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;五环之歌&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 调用函数</span></span><br><span class="line">sing()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h4 id="6-2-1-函数使用练习"><a href="#6-2-1-函数使用练习" class="headerlink" title="6.2.1 函数使用练习"></a>6.2.1 函数使用练习</h4><ol>
<li><p>创建一个函数sum，计算两个变量num1、num2的和（比如：10和20）</p>
<p>思路：</p>
<p>创建函数sum</p>
<p>在函数体中，计算两个变量num1、num2的和</p>
<p>调用函数sum</p>
</li>
<li><p>编写</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建函数sum</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//在函数体中，计算两个变量num1、num2的和</span></span><br><span class="line">    <span class="keyword">let</span> num1: <span class="built_in">number</span> = <span class="number">10</span></span><br><span class="line">    <span class="keyword">let</span> num2: <span class="built_in">number</span> = <span class="number">20</span></span><br><span class="line">    <span class="keyword">let</span> result: <span class="built_in">number</span> = num1 + num2</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用函数sum</span></span><br><span class="line">sum()</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：在typescript中没句结尾可以不写”；“，但是在javascript中要严格写；  </p>
</li>
</ol>
<hr>
<h3 id="6-3-函数参数"><a href="#6-3-函数参数" class="headerlink" title="6.3 函数参数"></a>6.3 函数参数</h3><h4 id="6-3-1-概述"><a href="#6-3-1-概述" class="headerlink" title="6.3.1 概述"></a>6.3.1 概述</h4><ol>
<li><p>需求：让唱歌的函数（sing），每次调用时，“唱”不同的歌。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sing</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;五环之歌&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">sing() <span class="comment">// 五环之歌</span></span><br><span class="line">sing() <span class="comment">// 五环之歌</span></span><br></pre></td></tr></table></figure>

<p>存在的问题：函数（sing）只能“唱”固定的歌，太死板，没有体现出函数复用的灵活性。</p>
<p>原因：函数（sing）中歌曲名称是固定值。</p>
<hr>
<p>怎么才能唱不同的歌呢？</p>
</li>
<li><p>使用<font color='red'>函数参数</font>来实现</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用函数时，告诉函数要唱的歌曲名称</span></span><br><span class="line">sing(<span class="string">&#x27;五环之歌&#x27;</span>)</span><br><span class="line">sing(<span class="string">&#x27;探清水河&#x27;</span>)</span><br><span class="line"><span class="comment">// 声明函数时，接收传入的歌曲名称</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sing</span>(<span class="params">songName: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(songName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>五环之歌就变成了songName，应该是说 五环之歌 传入了 songName;(emmm)</p>
<p>函数（sing）中歌曲名称：固定值→动态传入的值。<br>函数参数的作用：增加了函数的灵活性、通用性，针对相同的功能，能够适应更多的数据（值）。</p>
</li>
</ol>
<hr>
<h4 id="6-3-2-形参与实参"><a href="#6-3-2-形参与实参" class="headerlink" title="6.3.2 形参与实参"></a>6.3.2 形参与实参</h4><p>函数参数分为两部分：1 形参 2 实参。</p>
<ol>
<li><p><font color='red'>形参</font>：声明函数时指定的参数，放在声明函数的小括号中（挖坑）。</p>
<p><code>function sing(songName: string) &#123; &#125;</code></p>
<p><font color='red'>songName: string</font></p>
<ul>
<li><p>语法：形参名称: 类型注解，类似于变量声明，但是没有赋值。</p>
<blockquote>
<p>估计在js里面，形参的语法，就只有一个形参名称</p>
</blockquote>
</li>
<li><p>作用：指定函数可接收的数据。</p>
</li>
</ul>
<p>然后，就可以在函数体中，像使用变量一样使用形参了。</p>
</li>
<li><p>实参：调用函数时传入的参数，放在调用函数的小括号中（填坑）。</p>
<p><code>sing(&#39;五环之歌&#39;)</code>      五环之歌</p>
<ul>
<li>实参是一个具体的值（比如：‘字符串’、18、[]等），用来赋值给形参。</li>
</ul>
</li>
<li><p>总结</p>
<ul>
<li><p>声明函数时的参数，叫什么？作用？     形参，指定函数能够接收什么数据。</p>
</li>
<li><p>调用函数时的参数，叫什么？作用？    实参，是一个具体的值，用来赋值给形参。</p>
<p><code>function sing(songName: string) &#123; &#125;</code></p>
<p><code>sing(&#39;五环之歌&#39;)</code></p>
<p>通过形参和实参的配合，函数可以接收动态数据，从而让函数变得更加灵活、强大。</p>
</li>
</ul>
</li>
</ol>
<hr>
<h4 id="6-3-3-其他说明"><a href="#6-3-3-其他说明" class="headerlink" title="6.3.3 其他说明"></a>6.3.3 其他说明</h4><ol>
<li><p>根据具体的功能，函数参数可以有多个，参数之间使用逗号（,）来分隔。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) </span>&#123; &#125;</span><br><span class="line">fn(<span class="string">&#x27;刘老师&#x27;</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color='red'>实参和形参按照顺序，一一对应。</font></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) </span>&#123; &#125;</span><br><span class="line">fn(<span class="string">&#x27;刘老师&#x27;</span>, <span class="number">18</span>) <span class="comment">// name -&gt; &#x27;刘老师&#x27;, age -&gt; 18</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/08/06/c67WbDSoVgYdUCz.png" alt="图一"></p>
<center style="font-size:15px;color:#C0C0C0;">图1</center>
</li>
<li><p>实参必须符合形参的类型要求，否则会报错！</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sing</span>(<span class="params">songName: <span class="built_in">string</span></span>) </span>&#123;&#125;</span><br><span class="line">sing(<span class="number">18</span>) <span class="comment">// 报错！ 形参要求是 string 类型，但是，实参是 number 类型。</span></span><br></pre></td></tr></table></figure>

<p>技巧：调用函数时，鼠标放在函数名称上，会显示该函数的参数以及类型。</p>
</li>
</ol>
<hr>
<h4 id="6-3-4-总结"><a href="#6-3-4-总结" class="headerlink" title="6.3.4 总结"></a>6.3.4 总结</h4><ul>
<li><p>函数形参是 string 类型，调用该函数时传入 18 对吗？    不对，因为实参不符合形参的类型要求</p>
</li>
<li><p>函数有多个参数时，多个参数之间用什么符号分隔？   逗号</p>
</li>
<li><p>以下代码会报错吗？</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sing</span><span class="params">(songName: <span class="keyword">string</span>)</span> <span class="comment">&#123; &#125;</span></span></span><br><span class="line"><span class="function"><span class="title">sing</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<p>报错！因为函数sing要求有一个参数，但是没有传</p>
</li>
</ul>
<hr>
<h4 id="6-3-5-函数参数练习"><a href="#6-3-5-函数参数练习" class="headerlink" title="6.3.5 函数参数练习"></a>6.3.5 函数参数练习</h4><ol>
<li>改造函数（sum），实现计算任意两个数字的和</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 改造函数（sum），实现计算任意两个数字的和</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> num1: <span class="built_in">number</span> = <span class="number">10</span></span><br><span class="line">    <span class="keyword">let</span> num2: <span class="built_in">number</span> = <span class="number">20</span></span><br><span class="line">    <span class="keyword">let</span> result: <span class="built_in">number</span> = num1 + num2</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;</span><br><span class="line">sum()</span><br><span class="line">sum()</span><br></pre></td></tr></table></figure>

<p>这个函数写死，只能得出30，如何改造？</p>
<ul>
<li>这个时候就要使用函数参数了</li>
<li>在sum里面设置参数：funtion sum(num1: number, num2: number){}</li>
<li>计算哪两个数的和，由你的实参决定。例如：sum(88,99)</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result: <span class="built_in">number</span> = num1+num2</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure>



<ol start="2">
<li><p>第二个练习：</p>
<p>封装函数（getsum），计算任意数组中所有元素的和。</p>
<p>说明：数组中的元素为数值类型</p>
<p>比如：let nums1: number[ ] = [1, 3, 5]</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">getsum</span>(<span class="params">nums1: <span class="built_in">number</span>[]</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">let</span> sum: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">let</span> i: <span class="built_in">number</span> = <span class="number">0</span>; i&lt;nums1.length; i++)&#123;</span><br><span class="line">       sum += nums1[i]</span><br><span class="line">    &#125;</span><br><span class="line">       <span class="built_in">console</span>.log(sum)</span><br><span class="line">&#125;</span><br><span class="line">   getsum([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line">   getsum([<span class="number">10</span>, <span class="number">30</span>, <span class="number">50</span>])</span><br><span class="line">   <span class="comment">// 直接把数组作为实参是可以的，视频原话</span></span><br></pre></td></tr></table></figure>

<p>结合5.6.1来看，就能体会到，函数的感觉，封装的感觉；</p>
<p>于普通的 求数组和相比</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums:<span class="built_in"> number</span>[] = [<span class="number">200</span>,<span class="number">30</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span><span class="built_in"> sum</span>:<span class="built_in"> number</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i:<span class="built_in"> number</span> = <span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">   <span class="built_in"> sum</span> += nums[i]</span><br><span class="line">&#125;</span><br><span class="line">console.log<span class="built_in">(sum</span>)</span><br></pre></td></tr></table></figure>

<p>只多了，function，形参，实参。理解”封装”2字，即可完成函数；2020-8-3 09:23:40</p>
</li>
</ol>
<hr>
<h3 id="6-4-函数返回值"><a href="#6-4-函数返回值" class="headerlink" title="6.4 函数返回值"></a>6.4 函数返回值</h3><h4 id="6-4-1-概述"><a href="#6-4-1-概述" class="headerlink" title="6.4.1 概述"></a>6.4.1 概述</h4><p>函数返回值的作用：将函数内部计算的结果返回，以便于使用该结果继续参与其他的计算。<br>需求：计算以下两次调用结果的和。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">getSum</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]) // <span class="number">9</span></span><br><span class="line"><span class="attribute">getSum</span>([<span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>]) // <span class="number">1110</span></span><br><span class="line"><span class="attribute">getSum</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]) + getSum([<span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>]) // <span class="number">9</span> + <span class="number">1110</span> =&gt; <span class="number">1119</span></span><br></pre></td></tr></table></figure>

<p>但是：</p>
<p><img src="https://note.youdao.com/yws/public/resource/23eefae7798f03b72803fd5849e1f53d/xmlnote/6C226AB01EF24C5D8935A5130B4D378E/39708" alt="报错"></p>
<p>getSum([1, 3, 5]) + getSum([10, 100, 1000])  是要报错的；</p>
<p>关键点：拿到函数（getSum）内部计算出来的结果，然后，才能进行后续的加法计算。<br>注意：如果没有指定函数的返回值，那么，函数返回值的默认类型为  [^void]（空，什么都没有）。</p>
<hr>
<h4 id="6-4-2-基本使用"><a href="#6-4-2-基本使用" class="headerlink" title="6.4.2 基本使用"></a>6.4.2 基本使用</h4><p>步骤：1 指定返回值类型 2 指定返回值</p>
<ol>
<li><p>指定返回值类型</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>): 类型注解 </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在声明函数的小括号后面，通过 : <font color="red">类型注解</font> 指定。</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">()</span>: number </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>指定返回值</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>): 类型注解 </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在函数体中，使用 <font color="red"> return </font>关键字来返回函数执行的结果。</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">()</span>: number </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：返回值必须符合返回值类型的类型要求，否则会报错！</li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
<ol>
<li>使用变量接收函数返回值</li>
</ol>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">let</span> <span class="variable"><span class="class">result</span></span>: 类型注解 = <span class="function"><span class="title">fn</span>()</span></span><br></pre></td></tr></table></figure>

<p>​    使用变量接收函数返回值的时候，相当于：直接将返回值赋值给变量。</p>
<p>​    <code>let result: number = 18</code></p>
<p>​    注意：变量（result）的类型与函数（fn）的返回值类型要一致。</p>
<p>​    然后，就可以使用这个变量（返回值），继续进行其他计算了。</p>
<p>实验：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result: <span class="built_in">number</span> = fn()</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure>

<p>let result: number = fn()  约等于  let result: number = 18</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">// 进行其他计算</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">result</span> * <span class="number">10</span>)</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">result</span> / <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 看到这，我有点明白了，这个返回值，似乎是给函数名称赋值似的。</p>
</blockquote>
<blockquote>
<p>也就是说，正常情况下，函数名称没有值，封装封装，哦，一般情况下它只是一个包装。含义在里面包装本身没多少意思；</p>
</blockquote>
<blockquote>
<p>但有时，需要包装有意思，人们用包装名词代替某个意思，交流更方便。2020-8-3 10:14:38</p>
</blockquote>
<ol start="2">
<li><p>直接使用函数调用的结果（返回值），进行其他计算</p>
<p><code>console.log( fn() * 10 )</code></p>
<p>不需要变量去接收，直接调用函数。（视频原话）</p>
<blockquote>
<p>调用函数，而不是 使用函数名称么，emmm。</p>
</blockquote>
</li>
</ol>
<hr>
<p>总结：</p>
<ul>
<li><p>使用哪个关键字来指定返回值？    return</p>
</li>
<li><p>以下代码是否正确？</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span>: string </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>错误，返回值18不符合返回值类型string的要求</p>
</li>
<li><p>如果函数（getSum）返回了数组中所有元素的和，以下代码表示什么？</p>
<p><code>getSum([1, 3, 5]) + getSum([10, 100, 1000])</code></p>
<p>表示：计算两个结果的和</p>
</li>
</ul>
<hr>
<h4 id="6-4-3-函数返回值练习"><a href="#6-4-3-函数返回值练习" class="headerlink" title="6.4.3 函数返回值练习"></a>6.4.3 函数返回值练习</h4><h5 id="3-1-计算数组中所有元素的和并返回"><a href="#3-1-计算数组中所有元素的和并返回" class="headerlink" title="3.1 计算数组中所有元素的和并返回"></a>3.1 计算数组中所有元素的和并返回</h5><ol>
<li><p>改造函数（getSum），计算数组中所有元素的和并返回</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i:<span class="built_in">number</span> = <span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">        sum +=nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(sum)</span><br><span class="line">&#125;</span><br><span class="line">getSum([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure>

<p>改造：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i:<span class="built_in">number</span> = <span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">        sum +=nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//console.log(sum)</span></span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> res: <span class="built_in">number</span> = getSum([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment">// 难道不return,这里的 res就得不到getSum([1, 3, 5])的值吗？</span></span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line"><span class="comment">// 其他运算也没问题</span></span><br><span class="line"><span class="built_in">console</span>.log(res - <span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>难道不return,这里的 res就得不到getSum([1, 3, 5])的值吗？</p>
</li>
<li><p>实验：</p>
<p>光是取消 return sum，在上面的number会报错；</p>
<p><img src="https://note.youdao.com/yws/public/resource/23eefae7798f03b72803fd5849e1f53d/xmlnote/AF452FD059F947CF8080A0D64FFDB9A6/39716" alt="报错"></p>
<p>那么把声明返回类型也取消；</p>
<figure class="highlight irpf90"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span></span> getSum(nums: <span class="keyword">number</span>[])&#123;</span><br><span class="line">    let <span class="built_in">sum</span>: <span class="keyword">number</span> = <span class="number">0</span></span><br><span class="line">    for(let i:<span class="keyword">number</span> = <span class="number">0</span>; i&lt;nums<span class="number">.</span>length; i++)&#123;</span><br><span class="line">        <span class="built_in">sum</span> +=nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">    //console<span class="number">.</span><span class="built_in">log</span>(<span class="built_in">sum</span>)</span><br><span class="line">    //<span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line">&#125;</span><br><span class="line">let res: <span class="keyword">number</span> = getSum([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line">console<span class="number">.</span><span class="built_in">log</span>(res)</span><br></pre></td></tr></table></figure>

<p>emmm,赋值的机会都没有，非常棒；</p>
<p><img src="https://note.youdao.com/yws/public/resource/23eefae7798f03b72803fd5849e1f53d/xmlnote/093E3ED5485B43A098F770C02ACFCD34/39719" alt="必须返回值"></p>
</li>
</ul>
</li>
</ol>
<hr>
<h5 id="3-2-计算任意三角形面积并返回"><a href="#3-2-计算任意三角形面积并返回" class="headerlink" title="3.2 计算任意三角形面积并返回"></a>3.2 计算任意三角形面积并返回</h5><ol start="2">
<li><p>公式： 1/2x底x高，[^calc_Area]</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calc_Area</span>(<span class="params">a: <span class="built_in">number</span>, h: <span class="built_in">number</span></span>): <span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> area: <span class="built_in">number</span> = <span class="number">1</span>/<span class="number">2</span> * a * h</span><br><span class="line">    <span class="keyword">return</span> area</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(calc_Area(<span class="number">10</span>,<span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<p>代码优化：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calc_Area</span>(<span class="params">a: <span class="built_in">number</span>, h: <span class="built_in">number</span></span>): <span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/<span class="number">2</span> * a * h</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(calc_Area(<span class="number">10</span>,<span class="number">10</span>))</span><br></pre></td></tr></table></figure>



</li>
</ol>
<hr>
<h5 id="3-3-得到任意两个数中的最大数并返回"><a href="#3-3-得到任意两个数中的最大数并返回" class="headerlink" title="3.3 得到任意两个数中的最大数并返回"></a>3.3 得到任意两个数中的最大数并返回</h5><ol start="3">
<li><p>封装函数(getMax)，得到任意两个数中的最大数并返回</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMax</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a&gt;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getMax(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(getMax(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(getMax(<span class="number">10</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<p>优化：三元运算符</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMax</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 &gt; num2 ? num1 : num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getMax(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(getMax(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(getMax(<span class="number">10</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure>




</li>
</ol>
<hr>
<h4 id="6-4-4-return的说明"><a href="#6-4-4-return的说明" class="headerlink" title="6.4.4  return的说明"></a>6.4.4  return的说明</h4><ol>
<li><p>将函数内部的计算结果返回。</p>
</li>
<li><p>终止函数代码执行，即：return 后面的代码不会执行。</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">()</span>: number </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">18</span></span><br><span class="line">    console.log(<span class="string">&#x27;我不会执行，放在这，没有意义&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>return 只能在函数中使用，否则会报错。</p>
</li>
<li><p>return 可以单独使用（后面可以不跟内容），用来刻意终止函数的执行。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">play</span>(<span class="params">age: <span class="built_in">number</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;网吧上网好爽啊，王者、吃鸡两不误&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">play(<span class="number">16</span>) <span class="comment">// 情况1：进入if后return，后续代码不执行</span></span><br><span class="line">play(<span class="number">20</span>) <span class="comment">// 情况2：不进if，直接打印内容： 网吧上网好爽啊，王者、吃鸡两不误</span></span><br></pre></td></tr></table></figure>

<p>注意：如果函数没有返回值，默认返回值类型是： void （空），可省略不写。虽然写了return但后面没有内容，默认是没有返回值的。</p>
<p><code>function play(age: number) &#123; /* ... */ &#125;</code></p>
<hr>
</li>
<li><p>return  的总结：</p>
<ul>
<li>能否在函数外面使用 return？     不能</li>
<li>return 后面的代码会执行吗？    不会执行</li>
<li>return 后面不跟内容，单独使用，表示什么？   刻意终止函数执行</li>
<li>函数没有返回值，默认返回值类型是什么？   void</li>
</ul>
</li>
</ol>
<hr>
<h3 id="6-5-函数基础总结"><a href="#6-5-函数基础总结" class="headerlink" title="6.5 函数基础总结"></a>6.5 函数基础总结</h3><p>函数，即：声明一次但却可以调用任意多次的一段代码。<br>通过将要实现的功能，使用函数封装起来，实现代码 复用，提升开发效率。</p>
<p>函数的三种主要内容： 1 参数 2 函数体 3 返回值。</p>
<p>简化过程：</p>
<ol>
<li>输入（参数） – 可选</li>
<li>处理（函数体）</li>
<li>输出（返回值）– 可选</li>
</ol>
<p><a href="https://www.bilibili.com/video/BV1UD4y1m7Gw?p=84">https://www.bilibili.com/video/BV1UD4y1m7Gw?p=84</a></p>
<hr>
<h2 id="7-typescript-函数进阶"><a href="#7-typescript-函数进阶" class="headerlink" title="7. typescript 函数进阶"></a>7. typescript 函数进阶</h2><p>目标：</p>
<ul>
<li>能够调试函数</li>
<li>能知道什么是变量作用域</li>
<li>能区分全局变量和局部变量</li>
</ul>
<h3 id="7-1-函数调试"><a href="#7-1-函数调试" class="headerlink" title="7.1 函数调试"></a>7.1 函数调试</h3><h4 id="7-1-1-基本操作"><a href="#7-1-1-基本操作" class="headerlink" title="7.1.1 基本操作"></a>7.1.1 基本操作</h4><p>借助断点调试，观察代码的执行过程。</p>
<p>关键点：1 在哪个位置打断点？ 2 如何调试？</p>
<p>一．断点位置：函数调用所在位置。</p>
<p>二．调试函数常用按钮：</p>
<p>7.1 函数调试 直接看视频，不方便笔记，正好也没啥笔记的；2020-8-3 21:42:03</p>
<p><a href="https://www.bilibili.com/video/BV1UD4y1m7Gw?p=86">https://www.bilibili.com/video/BV1UD4y1m7Gw?p=86</a></p>
<h4 id="7-1-2-函数的执行过程；"><a href="#7-1-2-函数的执行过程；" class="headerlink" title="7.1.2 函数的执行过程；"></a>7.1.2 函数的执行过程；</h4><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">work</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;早上9点开始工作&#x27;</span>)</span><br><span class="line">play()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;晚上6点结束工作&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">play</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;早上9:30开始吃鸡&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;晚上5:30结束吃鸡&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">work()</span><br></pre></td></tr></table></figure>

<p>结论1：函数里面，还可以继续调用其他函数。<br>结论2：函数，按照顺序一行行的执行代码，当遇到调用其他函数时，先完成该函数调用，再继续执行代码。</p>
<p>所以：</p>
<ul>
<li>work()里面console.log(‘早上9点开始工作’)后</li>
<li>就执行调用函数play()</li>
<li>执行完了，回来再继续；</li>
</ul>
<p><a href="https://www.bilibili.com/video/BV1UD4y1m7Gw?p=87">https://www.bilibili.com/video/BV1UD4y1m7Gw?p=87</a></p>
<hr>
<h3 id="7-2-变量作用域"><a href="#7-2-变量作用域" class="headerlink" title="7.2 变量作用域"></a>7.2 变量作用域</h3><p>一个变量的作用域指的是：代码中定义变量的区域，它决定了变量的使用范围。</p>
<p>在 TS（或JS）中，函数可以形成作用域，叫做：函数作用域。</p>
<p>根据范围的不同，变量可以分为两种：1 局部变量 2 全局变量。</p>
<ul>
<li><p>局部变量：表示在函数内部声明的变量，该变量只能在函数内部使用（局部地区有雨）。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 变量 num 是局部变量</span></span><br><span class="line">    <span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">1</span></span><br><span class="line">    <span class="built_in">console</span>.log(num) <span class="comment">// 此处能访问到变量 num</span></span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// 问题：此处能访问到变量 num 吗？ 不能</span></span><br></pre></td></tr></table></figure>

<ol>
<li>在函数里面申明的变量，就是局部变量</li>
<li>所以才有return，函数里面申明的变量，和计算的结果，是作用不到外面的</li>
</ol>
</li>
<li><p>全局变量：表示在函数外部声明的变量，该变量在当前 ts 文件的任何地方都可以使用。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量 num 是全局变量</span></span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num) <span class="comment">// 问题：此处能访问到变量 num 吗？能</span></span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// 问题：此处能访问到变量 num 吗？能</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<hr>
<h2 id="8-TypeScript对象"><a href="#8-TypeScript对象" class="headerlink" title="8. TypeScript对象"></a>8. TypeScript对象</h2><p>目标：</p>
<ul>
<li>能说出对象是什么</li>
<li>能创建对象</li>
<li>能使用TS接口</li>
<li>能获取对象中的属性</li>
<li>能使用数组的常用方法</li>
</ul>
<h3 id="8-1-对象概述"><a href="#8-1-对象概述" class="headerlink" title="8.1 对象概述"></a>8.1 对象概述</h3><ol>
<li>生活中，对象是一个具体的事物，比如：你的电脑、你的手机、古力娜扎、周杰伦（周董）等都是对象。</li>
</ol>
<p>程序员都知道：万物皆对象。</p>
<p>这些具体的事物，都有自己的特征和行为：</p>
<p>特征：</p>
<blockquote>
<p>你的电脑：尺寸、重量、价格等<br>你的手机：品牌、屏幕大小、颜色等<br>古力娜扎：年龄、身高、三围等</p>
</blockquote>
<p>行为：</p>
<blockquote>
<p>你的电脑：浏览网页、写代码等<br>你的手机：播放视频、吃鸡等<br>古力娜扎：演电影、配音等</p>
</blockquote>
<p>TypeScript 中的对象，是对生活中具体事物的抽象，使得我们可以通过代码来描述具体的事物。</p>
<p>TS 中的对象，也是由特征和行为组成的，它们有各自专业的名称：<strong>属性</strong>（特征）和<strong>方法</strong>（行为）。</p>
<ul>
<li><p>理解 TS 中的对象：<strong>一组相关属性和方法的 集合，并且是 无序的</strong>。</p>
<blockquote>
<p>​    对象更有点想是一坨数据；2020-8-5 05:56:12</p>
</blockquote>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 演示对象：</span></span><br><span class="line">&#123;</span><br><span class="line">    name: <span class="string">&#x27;周杰伦&#x27;</span>,</span><br><span class="line">    gender: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    height: <span class="number">175</span>,</span><br><span class="line">    sing: funtion () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;故事的小黄花 从出生那年就飘着&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对象的语法：花括号开头，花括号结束。{}（不知道为啥它叫花括号，百度也没百度到明确的指示）</p>
<hr>
<br />

<h4 id="8-1-2-疑问：为什么要有对象？"><a href="#8-1-2-疑问：为什么要有对象？" class="headerlink" title="8.1.2 疑问：为什么要有对象？"></a>8.1.2 疑问：为什么要有对象？</h4><ol start="2">
<li><p>疑问：为什么要有对象？</p>
<p>需求：使用 TS 代码描述周杰伦。</p>
<ul>
<li>方案一：使用多个变量</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name: <span class="built_in">string</span> = <span class="string">&#x27;周杰伦&#x27;</span></span><br><span class="line"><span class="keyword">let</span> gender: <span class="built_in">string</span> = <span class="string">&#x27;男&#x27;</span></span><br><span class="line"><span class="keyword">let</span> heigh<span class="variable">t:</span> <span class="keyword">number</span> = <span class="number">175</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sing</span><span class="params">()</span> &#123; ... &#125;</span></span><br></pre></td></tr></table></figure>

<p>缺点：一个变量只能存储一个数据，多个变量之间没有任何关联（相关性）。</p>
<ul>
<li><p>方案二：使用数组，一次可以存储多个数据：</p>
<p><code>[&#39;周杰伦&#39;, &#39;男&#39;, 175, function sing() &#123; ... &#125;]</code></p>
<p>缺点：不知道数组中的每个元素表示什么。</p>
</li>
</ul>
</li>
<li><p>正确姿势：使用对象，对象在描述事物（一组相关数据）时，结构更加清晰、明了</p>
<p>{ name: ‘周杰伦’, gender: ‘男’, height: 175, sing: function () { … }}</p>
</li>
<li><p>总结：</p>
<p>对象：一组相关属性和方法的 集合，并且是 无序的。</p>
<p>在 TS 中，如果要描述一个事物或一组相关数据，就可以使用对象来实现。</p>
</li>
</ol>
<hr>
<h3 id="8-2-创建对象"><a href="#8-2-创建对象" class="headerlink" title="8.2 创建对象"></a>8.2 创建对象</h3><h4 id="8-2-1-语法"><a href="#8-2-1-语法" class="headerlink" title="8.2.1 语法"></a>8.2.1 语法</h4><ol>
<li><p>注意：先学习对象的基本使用，再学习对象的类型注解（对象的类型注解类似于对象自身的语法）。<br>对象的语法：</p>
<p><code>let person = &#123;&#125;</code></p>
<p>此处的  {} （花括号、大括号）表示对象。而对象中没有属性或方法时，称为：空对象。</p>
<p>对象中的属性或方法，采用 键值对 的形式，键、值之间使用冒号（ : ）来配对。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">let person = &#123;</span><br><span class="line">       键<span class="number">1</span>: 值<span class="number">1</span>,</span><br><span class="line">       键<span class="number">2</span>: 值<span class="number">2</span></span><br><span class="line">   &#125;</span><br><span class="line">   let person = &#123;</span><br><span class="line">       name: <span class="string">&#x27;刘老师&#x27;</span>,</span><br><span class="line">       age: <span class="number">18</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>键（key）—&gt;名称 ，值（value）—-&gt;具体的数据。</p>
<p>多个键值对之间，通过逗号（,）来分隔（类比数组）。</p>
<hr>
<h4 id="8-2-2-方法与函数，区分"><a href="#8-2-2-方法与函数，区分" class="headerlink" title="8.2.2 方法与函数，区分"></a>8.2.2 方法与函数，区分</h4></li>
<li><p>现在，对象person具有两个属性：</p>
<p><code>let person = &#123; name: &#39;刘老师&#39;, age: 18 &#125;</code></p>
<p>属性和方法的区别：值是不是函数，如果是，就称为方法；否则，就是普通属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    sayHi: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;大家好，我是一个方法&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果值不是函数，就是属性；什么是函数，可以看6.2 函数的使用；</p>
<ul>
<li><p>什么是值？</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">let person = &#123;</span><br><span class="line">    键<span class="number">1</span>: 值<span class="number">1</span>,</span><br><span class="line">    键<span class="number">2</span>: 值<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p>2.1 注意：函数用作方法时可以省略function后面的函数名称，也叫做匿名函数。</p>
<p><img src="https://i.loli.net/2020/08/05/J82odURScnrvyOf.png" alt="图一"></p>
<center style="font-size:14px;color:#C0C0C0;">26-8.2-图一</center>

<p>2.2 函数没有名称，如何调用？ 此处的sayHi相当于函数名称，将来通过对象的sayHi就可以调用了。<br>如果一个函数是单独出现的，没有与对象关联，我们称为函数；否则，称为方法。</p>
<p>2.3 问:谁是方法，谁是函数；</p>
<p>2.3.1 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;大家好，我是一个方法&#x27;</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>2.3.2</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">y:<span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;大家好，我是一个方法&#x27;</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>答：2.3.1 是函数，2.3.2 是方法；</p>
<blockquote>
<p>一下为自己的想法：</p>
<p>函数就像一个个单独的方法，方法不在对象里面，就叫做函数；</p>
<p>当然不是这么笼统。函数和方法的创建的语法都是不一样的；</p>
<p>但从效果来看，方法有点像是把一个个函数集中起来的感觉。</p>
</blockquote>
<hr>
</li>
</ol>
<h4 id="8-2-3-总结"><a href="#8-2-3-总结" class="headerlink" title="8.2.3 总结"></a>8.2.3 总结</h4><p>总结：<br>对象中的属性或方法，采用 键值对 的形式，因此，<strong>对象是无序键值对的集合</strong>。</p>
<ul>
<li>使用什么符号创建对象？   花括号（{}）</li>
<li>键（key）、值（value）之间通过什么符号配对？   冒号（:）</li>
<li>多个属性或方法之间使用什么符号分隔？   逗号（,）</li>
<li>属性和方法的区别？   值是不是函数</li>
</ul>
<hr>
<h3 id="8-3-接口"><a href="#8-3-接口" class="headerlink" title="8.3 接口"></a>8.3 接口</h3><h4 id="8-3-1-对象的类型注解"><a href="#8-3-1-对象的类型注解" class="headerlink" title="8.3.1 对象的类型注解"></a>8.3.1 对象的类型注解</h4><p>接口：为对象的类型注解命名，并为你的代码建立契约来约束对象的结构。</p>
<p><a href="https://www.bilibili.com/video/BV1UD4y1m7Gw?p=92">https://www.bilibili.com/video/BV1UD4y1m7Gw?p=92</a></p>
<p>TS 中的对象是结构化的，结构简单来说就是对象有什么属性或方法。<br>在使用对象前，就可以根据需求，提前设计好对象的结构。<br>比如，创建一个对象，包含姓名、年龄两个属性。</p>
<p>思考过程：</p>
<p>1 对象的结构包含姓名、年龄两个属性 </p>
<p>2 姓名→字符串类型，年龄 →数值类型 </p>
<p>3 创建对象。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person: &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>→→</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;刘老师&#x27;</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这就是对象的结构化类型（左侧），即：对该对象值（右侧）的结构进行类型约束。<br>或者说：<font color="red">建立一种契约，约束对象的结构</font>。</p>
<ul>
<li><p>首先1：</p>
<p>person:，这里有个冒号；上面都是没有的，这里有，也是严格的；</p>
<p>作用是申明person的类型，虽然这里没写类型。</p>
<ul>
<li>为什么这里又需要申明类型了呢？</li>
</ul>
</li>
<li><p>name: string;  而这里 接的 ； 分号，也需要严格执行；</p>
<ul>
<li>嗯，虽然资料故意后讲类型注解，但先思考类型注解，后再想创建对象似乎才顺畅。不然脑壳有点搅；</li>
</ul>
</li>
<li><p><font color="red">在这里，我先假设一下</font></p>
<ul>
<li>编码时，肯定是先类型注解，再创建对象；2020-8-5 04:30:21</li>
</ul>
</li>
</ul>
<hr>
<ol start="2">
<li><p>在视频的11：46处，说 ； 可以去掉。我勒个去；</p>
<p><a href="https://www.bilibili.com/video/BV1UD4y1m7Gw?p=92">https://www.bilibili.com/video/BV1UD4y1m7Gw?p=92</a></p>
<p><del>name: string;  而这里 接的 ； 分号，也需要严格执行；</del></p>
</li>
</ol>
<hr>
<ol start="3">
<li><p>不过我的假设是正确的；</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person: &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line">person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;刘老师&#x27;</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>视频里也是这么写的。若以后有什么不同，再做修改。目前按照此概念执行；</p>
</li>
</ol>
<hr>
<h5 id="8-3-1-2-总结"><a href="#8-3-1-2-总结" class="headerlink" title="8.3.1.2 总结"></a>8.3.1.2 总结</h5><p>总结：<br>TS 中的对象是结构化的，在使用对象前，就可以根据需求，提前设计好对象的结构。</p>
<blockquote>
<p>这么说，还是可以不写结构注解咯；</p>
</blockquote>
<p>对象的结构化类型（类型注解）：建立一种契约，约束对象的结构。</p>
<p>注意点：类型注解中键值对的值为类型！</p>
<hr>
  <br />

<h4 id="8-3-2-对象方法的类型注解"><a href="#8-3-2-对象方法的类型注解" class="headerlink" title="8.3.2 对象方法的类型注解"></a>8.3.2 对象方法的类型注解</h4><ol>
<li><p>问题：如何给对象中的方法，添加类型注解？<br>技巧：鼠标放在变量名称上，VSCode就会给出该变量的类型注解。</p>
<p><img src="https://i.loli.net/2020/08/05/YVo9tMNBzpLZUAm.png" alt=""></p>
<center style="font-size:14px;color:#C0C0C0;">图1</center>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = &#123;</span><br><span class="line">    sayHi: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;哎哟，不错哦~&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = &#123;</span><br><span class="line">    sing: <span class="function"><span class="keyword">function</span>(<span class="params">name: <span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">&#x27;歌曲名称：&#x27;</span> + name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3 = &#123;</span><br><span class="line">    sum: <span class="function"><span class="keyword">function</span> (<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
   <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person: &#123;</span><br><span class="line">    sayHi: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">    sing: <span class="function">(<span class="params">name: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">    sum: <span class="function">(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   箭头（=&gt;）左边小括号中的内容：表示方法的参数类型。</p>
<ul>
<li><p>那么：``sayHi: () =&gt; void` 的左侧是何含义？</p>
<ul>
<li>表示没有参数；没有参数，就只有这个()</li>
<li>05：40处出；</li>
<li><a href="https://www.bilibili.com/video/BV1UD4y1m7Gw?p=93">https://www.bilibili.com/video/BV1UD4y1m7Gw?p=93</a></li>
</ul>
<p>箭头（=&gt;）右边的内容：表示方法的返回值类型。</p>
<p>方法类型注解的关键点：1 参数 2 返回值。</p>
<p>注意：技巧是辅助，更重要的是理解。</p>
</li>
</ul>
<hr>
<p>   1.1 那么我们给方法sayHi添加类型注解吧；</p>
<p>   1.1.1 先删除原先p1的变量声明</p>
   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> p1 = &#123;</span><br><span class="line">    sayHi: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;哎哟，不错哦~&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

   <br />

<p>   1.1.2 然后写类型注解；</p>
   <figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">let p1: &#123;</span><br><span class="line">    sayHi: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   合在一起：</p>
   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1: &#123;</span><br><span class="line">    sayHi: <span class="function">() =&gt;</span> <span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"> p1 = &#123;</span><br><span class="line">    sayHi: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;哎哟，不错哦~&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   并不是类型注解在后面哦</p>
<p>   1.1.3 p2,p3若给方法添加类型注解同理；</p>
<hr>
<h4 id="8-3-3-接口的使用"><a href="#8-3-3-接口的使用" class="headerlink" title="8.3.3  接口的使用"></a>8.3.3  接口的使用</h4><ol>
<li><p>直接在对象名称后面写类型注解的坏处：1 代码结构不简洁 2 无法复用类型注解。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1: &#123;</span><br><span class="line">    name: <span class="built_in">string</span></span><br><span class="line">    age: <span class="built_in">number</span></span><br><span class="line">    sayHi: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125; = &#123;</span><br><span class="line">    name : <span class="string">&#x27;jack&#x27;</span></span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">    sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;再见杰克&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2: &#123;</span><br><span class="line">    name: <span class="built_in">string</span></span><br><span class="line">    age: <span class="built_in">number</span></span><br><span class="line">    sayHi: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125; = &#123;</span><br><span class="line">    name : <span class="string">&#x27;rose&#x27;</span></span><br><span class="line">    age: <span class="number">17</span></span><br><span class="line">    sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;京酱肉丝&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>什么？还有这种写法？你前面不说，这个时候了，突然给我来一句这样的写法；</p>
<p>等等？他的意思应该不是这样的写法，这个只是简写！应该是这样的</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1: &#123;</span><br><span class="line">    name: <span class="built_in">string</span></span><br><span class="line">    age: <span class="built_in">number</span></span><br><span class="line">    sayHi: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125; </span><br><span class="line">p1 = &#123;</span><br><span class="line">    name : <span class="string">&#x27;jack&#x27;</span></span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">    sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;再见杰克&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>嗯，这样的写法，就和前面一样了，确实，每次都要申明不行；</p>
</blockquote>
<p>接口：为对象的类型注解命名，并为你的代码建立契约来约束对象的结构。</p>
<ul>
<li><p>语法：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="symbol">IUser</span> &#123;</span><br><span class="line">name: <span class="built_in">string</span></span><br><span class="line">age: number</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>\longrightarrow</code>  ⟶  (为什么就是不编译呢<code>\longrightarrow</code>应该变成长箭头啊，百度也百度不到)</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">let <span class="attr">p1:</span> IUser = &#123;</span><br><span class="line"><span class="attr">name:</span> <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line"><span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/interface">interface</a> 表示接口，接口名称约定以I开头。</p>
<ul>
<li><font color='red'>interface </font>是关键词，得用它来申明接口；</li>
<li>可以不 I 开头（但我懂得，一般这么说，其实都要）</li>
</ul>
</li>
<li><p><strong>推荐：使用接口来作为对象的类型注解</strong>。(那应该是必须这么写了)</p>
</li>
</ul>
<p>1.1 语法解释</p>
<p>​    直接拿过来用；</p>
<p><img src="https://i.loli.net/2020/08/05/tfM4evq1iEKX6GA.png" alt=""></p>
<center style="font-size:14px;color:#C0C0C0;">图1</center>

<hr>
</li>
<li><p>好我们在代码中体验一下；</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个接口</span></span><br><span class="line"><span class="keyword">interface</span> IUser &#123;</span><br><span class="line">    name: <span class="built_in">string</span></span><br><span class="line">    age: <span class="built_in">number</span></span><br><span class="line">    sayHi: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用接口</span></span><br><span class="line"><span class="keyword">let</span> p1: IUser = &#123;</span><br><span class="line">    name : <span class="string">&#x27;jack&#x27;</span></span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">    sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;再见杰克&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = &#123;</span><br><span class="line">    name : <span class="string">&#x27;jack&#x27;</span></span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">    sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;再见杰克&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p2 = &#123;</span><br><span class="line">    name : <span class="string">&#x27;rose&#x27;</span></span><br><span class="line">    age: <span class="number">17</span></span><br><span class="line">    sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;京酱肉丝&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<br />

<h3 id="8-4-取值与存值"><a href="#8-4-取值与存值" class="headerlink" title="8.4  取值与存值"></a>8.4  取值与存值</h3><h4 id="1-取值"><a href="#1-取值" class="headerlink" title="1 .取值"></a>1 .取值</h4><p>取值，即：拿到对象中的属性或方法并使用。</p>
<p>获取对象中的属性，称为：访问属性。</p>
<p>获取对象中的方法 并调用，称为：调用方法。</p>
<ul>
<li><p>访问属性</p>
<p><code>let jay = &#123; name: &#39;周杰伦&#39;, height: 175 &#125;</code></p>
<ul>
<li><blockquote>
<p>jay  英 [dʒeɪ]   美 [dʒeɪ]       </p>
<p>n.松鸦(见于欧洲，羽毛鲜艳，喜大声鸣叫)</p>
<p>??? 用jay单词的意义何在，也不像是什么缩写；</p>
</blockquote>
</li>
</ul>
<p>需求：获取到对象（jay）的name属性。</p>
<p><code>console.log(jay.name)</code></p>
<p>说明：通过<span id="点语法">点语法</span>（.）就可以访问对象中的属性。</p>
<p>技巧：在输入点语法时，利用VSCode给出来的提示，利用上下键快速选择要访问的属性名称。</p>
</li>
<li><p>来，我们试一试</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建接口</span></span><br><span class="line"><span class="keyword">interface</span> IUser &#123;</span><br><span class="line">    name: <span class="built_in">string</span></span><br><span class="line">    height: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="keyword">let</span> jay: IUser = &#123;</span><br><span class="line">    name: <span class="string">&#x27;张虹成&#x27;</span></span><br><span class="line">    height: <span class="number">175</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 访问对象jay的name属性</span></span><br><span class="line"><span class="built_in">console</span>.log(jay.name)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<ol start="2">
<li><p>调用方法；</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> jay = &#123;</span><br><span class="line">    sing: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;故事的小黄花 从出生那年就飘着&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需求：调用对象（jay）的sing方法，让他唱歌。</p>
<p><code>jay.sing()</code></p>
<p>说明：通过点语法（.）就先拿到方法名称，然后，通过小括号调用方法。</p>
<ul>
<li><p>用访问属性的例子</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建接口</span></span><br><span class="line"><span class="keyword">interface</span> IUser &#123;</span><br><span class="line">    name: <span class="built_in">string</span></span><br><span class="line">    height: <span class="built_in">number</span></span><br><span class="line">    sing: <span class="function">() =&gt;</span> viod</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="keyword">let</span> jay: IUser = &#123;</span><br><span class="line">    name: <span class="string">&#x27;张虹成&#x27;</span></span><br><span class="line">    height: <span class="number">175</span></span><br><span class="line">    sing: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;故事的小黄发。&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 访问对象jay的name属性</span></span><br><span class="line"><span class="built_in">console</span>.log(jay.name)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;我叫&#x27;</span>, jay.name)</span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">jay.sing()</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<br />

<ol start="3">
<li><p>补充说明：</p>
<p><code>console.log(参数1, 参数2, ...)</code></p>
<ul>
<li><p>没错可以多个</p>
</li>
<li><p>console.log(‘我叫’, jay.name)</p>
<blockquote>
<p>ts-node  xxx.ts   会打印出  我叫张虹成；</p>
</blockquote>
</li>
</ul>
<p>实际上，console是一个对象，而log是该对象提供的一个方法。</p>
<ul>
<li>console这个对象，是浏览器环境提供的，所以可以直接用；</li>
</ul>
<p>并且，log方法可以有多个参数。</p>
<p><code>console.log(&#39;我叫&#39;, jay.name)</code></p>
<p>3.1 不过这样打印出来的，之间会有一个空格，不想要空格，还是的用 “+”号</p>
<img src="https://i.loli.net/2020/08/05/AuUMcvE48fPgG5d.png" style="zoom:150%;" />

<center style="font-size:14px;color:#C0C0C0;">图1</center>

</li>
</ol>
<hr>
<ol start="4">
<li><p>总结</p>
<p>通过什么符号，来访问对象中的属性或方法？    <font color='red'>点语法(.)</font></p>
<p>注意：方法需要调用，所以，通过点语法拿到方法名称后，不要忘记使用小括号调用！</p>
<p>技巧：通过点语法，访问对象属性时，利用VSCode出来的提示，快速选择要访问的属性或方法。</p>
<p>该技巧很实用，特别是访问别人创建的对象时（比如：console对象）。</p>
<br />

</li>
</ol>
<hr>
<h4 id="2-存值"><a href="#2-存值" class="headerlink" title="2.  存值"></a>2.  存值</h4><ol>
<li><p>存值，即修改（设置）对象中属性的值。</p>
<p><code>let jay = &#123; name: &#39;周杰伦&#39;, height: 175 &#125;</code></p>
<p>需求：将对象（jay）的name属性的值修改为’周董’。</p>
<p><code>jay.name = &#39;周董&#39;</code></p>
<p>解释：先通过点语法获取到name属性，然后，将新值’周董’赋值给该属性。</p>
<p><code>console.log(jay.name) // 周董</code></p>
<p>注意：设置的新值，也必须符合该属性的类型要求！</p>
<p>注意：几乎不会修改对象中的方法。</p>
<blockquote>
<p>视频里说，若要修改，新写方法覆盖。好像是这么说的，但具体操作没说</p>
<p><a href="https://www.bilibili.com/video/BV1UD4y1m7Gw?p=97">https://www.bilibili.com/video/BV1UD4y1m7Gw?p=97</a></p>
</blockquote>
<br />

<hr>
</li>
</ol>
<br />

<h4 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h4><p>对象是对现实生活中具体事物（特征和行为）的抽象，可以使用对象来描述这些具体的事物。</p>
<p>对象包含：1 属性 2 方法。<br>简单来说：对象就是无序键值对的集合。</p>
<p>对象是结构化的，它的类型注解就是从对象的结构（属性、方法）出发，进行类型约束和检查。<br>推荐：使用<font color='red'>接口</font>来作为对象的类型注解，<font color='red'>建立一种契约，约束对象的结构。</font></p>
<p>TS中的数据类型分为两大类：1 原始类型（基本数据类型） 2 对象类型（复杂数据类型）。</p>
<p>常用的基本数据类型有 5 个： number  /  string  /  boolean  / undefined / null。</p>
<p><font color='red'>复杂数据类型</font>：object（对象、数组）、function（函数）。</p>
<hr>
<br />

<h3 id="8-5-内置对象"><a href="#8-5-内置对象" class="headerlink" title="8.5 内置对象"></a>8.5 内置对象</h3><h4 id="8-5-1-概述"><a href="#8-5-1-概述" class="headerlink" title="8.5.1 概述"></a>8.5.1 概述</h4><p>对象的两种来源：1 自己创建 2 其他人创建（编程语言自带或第三方）。</p>
<p>内置对象，是 TS/JS 自带的一些基础对象，提供了TS开发时所需的基础或必要的能力。</p>
<ul>
<li>比如手机，手机会自带一些软件，如文件管理，照相。</li>
</ul>
<p>已经用过的内置对象：数组。</p>
<ol>
<li><p>学习内置对象，需要学什么？   常用属性和方法</p>
</li>
<li><p>怎么学？   查文档</p>
<hr>
</li>
</ol>
<h4 id="8-5-2-学习方式-查文档"><a href="#8-5-2-学习方式-查文档" class="headerlink" title="8.5.2 学习方式 - 查文档"></a>8.5.2 学习方式 - 查文档</h4><p>注意：内置对象中提供了非常多的方法或属性，以满足开发中各种各样的需求。</p>
<p>编程不是死记硬背，而是掌握一定的技巧，<font color='red'>查文档</font>就是最重要的一个。</p>
<blockquote>
<ul>
<li>视频里说的是，太多了，记不住，也费时，好多用不上，要用的时候去查…..</li>
</ul>
</blockquote>
<p>文档地址：<a href="https://developer.mozilla.org/zh-CN/">MDN</a>（更标准） / W3school（国内）</p>
<ul>
<li><p>例如在MDN里查到的一个方法</p>
<ol>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/max">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/max</a></p>
</li>
<li><p><code>**Math.max()**</code> 函数返回一组数中的最大值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>));</span><br><span class="line"><span class="comment">// expected output: 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(<span class="number">-1</span>, <span class="number">-3</span>, <span class="number">-2</span>));</span><br><span class="line"><span class="comment">// expected output: -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(...array1));</span><br><span class="line"><span class="comment">// expected output: 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
</li>
<li><p>总结</p>
</li>
</ul>
<p>内置对象，是 TS/JS 自带的一些基础对象，提供了TS开发时所需的基础或必要的能力。</p>
<p>学什么？学内置对象中的属性或方法。<br>怎么学？查文档，文档地址：MDN（更标准） / W3school（国内）</p>
<hr>
<h4 id="8-5-3-数组对象"><a href="#8-5-3-数组对象" class="headerlink" title="8.5.3  数组对象"></a>8.5.3  数组对象</h4><p>数组是 TS 中最常用、最重要的内置对象之一，掌握数组的常用操作能够显著提升开发效率。<br>数组的常用操作：添加、删除、遍历、过滤等。<br>重点学习：1 属性（length） 2 方法（push、forEach、some）。</p>
<ol>
<li><p>length 属性：获取数组长度。</p>
<p><code>let songs: string[] = [&#39;五环之歌&#39;, &#39;探清水河&#39;, &#39;晴天&#39;]</code></p>
<p>获取数组长度：</p>
<p><code>songs.length</code></p>
<p>原来length是 一个 名为 ”数组“的对象里面的 一个 名为”length“的键。然后它的值是一个属性。</p>
</li>
</ol>
<h5 id="2-push-添加元素-1"><a href="#2-push-添加元素-1" class="headerlink" title="2. push-添加元素"></a>2. push-添加元素</h5><ol start="2">
<li><p>push 方法：添加元素（在数组最后一项元素的后面添加）。</p>
<p><code>songs.push(&#39;痒&#39;)</code></p>
<p>原来的方式：使用数组长度作为索引</p>
<p><code>songs[songs.length] = &#39;痒&#39; // =&gt; songs[3] = &#39;痒&#39;</code></p>
<p>2.1 也可以查文档来学习</p>
<ul>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push">push</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> animals = [<span class="string">&#x27;pigs&#x27;</span>, <span class="string">&#x27;goats&#x27;</span>, <span class="string">&#x27;sheep&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = animals.push(<span class="string">&#x27;cows&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(count);</span><br><span class="line"><span class="comment">// expected output: 4</span></span><br><span class="line"><span class="built_in">console</span>.log(animals);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;pigs&quot;, &quot;goats&quot;, &quot;sheep&quot;, &quot;cows&quot;]</span></span><br><span class="line"></span><br><span class="line">animals.push(<span class="string">&#x27;chickens&#x27;</span>, <span class="string">&#x27;cats&#x27;</span>, <span class="string">&#x27;dogs&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(animals);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;pigs&quot;, &quot;goats&quot;, &quot;sheep&quot;, &quot;cows&quot;, &quot;chickens&quot;, &quot;cats&quot;, &quot;dogs&quot;]</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ol>
<ul>
<li><p>解惑：</p>
<ul>
<li>const 表示常量，常量不能重新赋值；let 是变量，可以在后面二次赋值；</li>
</ul>
</li>
</ul>
<p>   2.2 练习：</p>
<ul>
<li><pre><code class="typescript"><span class="keyword">let</span> songs: <span class="built_in">string</span>[] = [<span class="string">'五环之歌'</span>, <span class="string">'探清水河'</span>, <span class="string">'晴天'</span>]
songs.push(<span class="string">'样'</span>)
<span class="built_in">console</span>.log(songs)
&lt;!--hexoPostRenderEscape:&lt;figure <span class="keyword">class</span>=<span class="string">"highlight xquery"</span>&gt;&lt;table&gt;&lt;tr&gt;&lt;td <span class="keyword">class</span>=<span class="string">"gutter"</span>&gt;&lt;pre&gt;&lt;span <span class="keyword">class</span>=<span class="string">"line"</span>&gt;<span class="number">1</span>&lt;<span class="regexp">/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/</span>span&gt;&lt;br&gt;&lt;span <span class="keyword">class</span>=<span class="string">"line"</span>&gt;<span class="number">3</span>&lt;<span class="regexp">/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/</span>span&gt;&lt;br&gt;&lt;span <span class="keyword">class</span>=<span class="string">"line"</span>&gt;<span class="number">5</span>&lt;<span class="regexp">/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/</span>span&gt;&lt;br&gt;&lt;span <span class="keyword">class</span>=<span class="string">"line"</span>&gt;<span class="number">7</span>&lt;<span class="regexp">/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/</span>span&gt;&lt;br&gt;&lt;span <span class="keyword">class</span>=<span class="string">"line"</span>&gt;<span class="number">9</span>&lt;<span class="regexp">/span&gt;&lt;br&gt;&lt;/</span>pre&gt;&lt;<span class="regexp">/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;/</span>span&gt;&lt;br&gt;&lt;span <span class="keyword">class</span>=<span class="string">"line"</span>&gt;+ 如果要接受到push返回的数组长度，需要用一个量来接收；&lt;<span class="regexp">/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/</span>span&gt;&lt;br&gt;&lt;span <span class="keyword">class</span>=<span class="string">"line"</span>&gt;  <span class="string">``</span><span class="string">`typescript&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;span class="keyword"&gt;let&lt;/span&gt; songs:&lt;span class="built_in"&gt; string&lt;/span&gt;[] = [&lt;span class="string"&gt;&amp;#x27;五环之歌&amp;#x27;&lt;/span&gt;, &lt;span class="string"&gt;&amp;#x27;探清水河&amp;#x27;&lt;/span&gt;, &lt;span class="string"&gt;&amp;#x27;晴天&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;span class="keyword"&gt;let&lt;/span&gt; len:&lt;span class="built_in"&gt; number&lt;/span&gt; = songs.push(&lt;span class="string"&gt;&amp;#x27;样&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  console.log(songs, len)&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  // 也许&lt;span class="keyword"&gt;let&lt;/span&gt; len:&lt;span class="built_in"&gt; number&lt;/span&gt; = songs.push(&lt;span class="string"&gt;&amp;#x27;样&amp;#x27;&lt;/span&gt;) 看着不顺眼;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  // 但确实执行了songs.push(&lt;span class="string"&gt;&amp;#x27;样&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</span>
<span class="string"></span></code></pre>
</li>
</ul>
<hr>
<h5 id="3-数组对象-forEach"><a href="#3-数组对象-forEach" class="headerlink" title="3. 数组对象 - forEach"></a>3. 数组对象 - forEach</h5><ol>
<li><p>forEach 方法：遍历数组。<a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/each">each</a></p>
<blockquote>
<p>forEach被称为方法，你还记什么是方法吗？</p>
<blockquote>
<p> 在上面复习了 8.2.2后下来：</p>
<p> 对象中，键的值为函数；</p>
<p> 那么forEach是某个对象中的键，毕竟函数本身没有名字，是一些匿名函数；</p>
<p> 而那个匿名函数里面，就写了类似</p>
 <figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (let <span class="built_in">i</span>: number = <span class="number">0</span>; <span class="built_in">i</span> &lt; songs.<span class="built_in">length</span>; <span class="built_in">i</span>++) &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">&#x27;索引为&#x27;</span>, <span class="built_in">i</span>, <span class="string">&#x27;元素为&#x27;</span>, songs[<span class="built_in">i</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 的东西</p>
<p> 然而，看了后面，不是这么简单，forEach的参数，是一个函数；懵了</p>
</blockquote>
</blockquote>
<p><code>let songs: string[] = [&#39;五环之歌&#39;, &#39;探清水河&#39;, &#39;晴天&#39;]</code></p>
<p>原来的方式：使用 for 循环遍历数组</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i: <span class="built_in">number</span> = <span class="number">0</span>; i &lt; songs.length; i++) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;索引为&#x27;</span>, i, <span class="string">&#x27;元素为&#x27;</span>, songs[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 forEach：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">songs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;索引为&#x27;</span>, index, <span class="string">&#x27;元素为&#x27;</span>, item)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这也的点，应该不是单独的。</p>
<p>不是单独的说以前的方法不好，以前的方法才是原始的逻辑。不然如何思考，如何理解遍历的实现</p>
<p>这里主要是说，使用对象的方便，与对象的使用；</p>
</blockquote>
<ul>
<li><p>forEach <strong>使用</strong>说明：</p>
<p>注意：forEach 方法的参数是一个函数，这种函数也称为 回调函数。同时里面的函数是一个匿名函数，没有函数名；</p>
<blockquote>
<p>方法的参数是一个函数？方法的参数，听起来有点陌生</p>
<blockquote>
<p>这里的意思应该是：</p>
<p>键对应的值（函数）的参数，也就是说是一个函数的参数。函数确实有参数</p>
<blockquote>
<p>可以复习一下函数，函数的参数；6.3 函数参数</p>
</blockquote>
<p>而函数的参数，是个函数。那么这种函数。</p>
<p>叫做回调函数；</p>
<p>可以百度 回调函数，看看自己的理解如何；2020-8-6 02:24:10</p>
</blockquote>
</blockquote>
<p>forEach 方法的执行过程：遍历整个数组，为数组的每一项元素，调用一次回调函数。<br>回调函数的两个参数：</p>
</li>
</ul>
<ol>
<li><p><a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/item">item</a> 表示数组中的每个元素，相当于 songs[i]。</p>
<ol start="2">
<li>index 表示索引，相当于 i。</li>
</ol>
<hr>
</li>
</ol>
<ul>
<li><p>forEach<strong>方法</strong>的说明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     </span><br></pre></td></tr></table></figure>

<p>songs.forEach(function (item, index) {<br>console.log(‘索引为’, index, ‘元素为’, item)<br>})</p>
<figure class="highlight hsp"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line">疑问：不需要为&lt;<span class="keyword">font</span> <span class="keyword">color</span>=<span class="string">&#x27;red&#x27;</span>&gt;回调函数&lt;/<span class="keyword">font</span>&gt;的参数或返回值指定类型注解吗？</span><br><span class="line">    </span><br><span class="line">注意：此处的回调函数，是作为 <span class="keyword">forEach</span> 方法的&lt;<span class="keyword">font</span> <span class="keyword">color</span>=<span class="string">&#x27;red&#x27;</span>&gt;实参&lt;/<span class="keyword">font</span>&gt;传入，不应该指定类型注解！</span><br><span class="line">    </span><br><span class="line"><span class="keyword">forEach</span> 方法，可以根据当前数组的类型，自动推导出回调函数中参数的类型。</span><br><span class="line">    </span><br><span class="line">注意：回调函数中的参数可以用任意名称，并且，&lt;sapn id=<span class="string">&quot;没用到索引&quot;</span>&gt;如果没有用到&lt;/span&gt;，可以省略。</span><br><span class="line">  </span><br><span class="line">&gt; 单纯的从这句话能感受出，回调函数，主要是指那个作为参数的函数。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>songs.forEach(function (a, b) {}) // OK! a ⟶ 数组元素 b ⟶索引<br>songs.forEach(function (item) {}) // OK! 索引没用到，直接省略</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   此处建议看视频：https:<span class="comment">//www.bilibili.com/video/BV1UD4y1m7Gw?p=102</span></span><br><span class="line">     </span><br><span class="line">   ```typescript</span><br><span class="line">   <span class="comment">// 模拟 forEach 方法的声明：</span></span><br><span class="line">   <span class="keyword">function</span> <span class="keyword">for</span><span class="constructor">Each1(<span class="params">callbackfn</span>: (<span class="params">value</span>: <span class="params">string</span>, <span class="params">index</span>: <span class="params">number</span>)</span> =&gt; void) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟forEach 方法的调用：</span></span><br><span class="line">   <span class="comment">//此处的函数是实参！</span></span><br><span class="line"><span class="keyword">for</span><span class="constructor">Each1(<span class="params">function</span> (<span class="params">value</span>, <span class="params">index</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>如果把</p>
</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// 模拟 forEach 方法的声明：</span></span><br><span class="line"><span class="keyword">function</span> <span class="keyword">for</span><span class="constructor">Each1(<span class="params">callbackfn</span>: (<span class="params">value</span>: <span class="params">string</span>, <span class="params">index</span>: <span class="params">number</span>)</span> =&gt; void) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>  写成 8.3.2 对象方法的类型注解格式：</p>
  <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">let</span> p3 = &#123;</span><br><span class="line">       forEach: callbackfn (value: <span class="built_in">string</span>, index: <span class="built_in">number</span>)&#123;</span><br><span class="line">            </span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="built_in">Array</span>: &#123;</span><br><span class="line">       forEach: <span class="function">(<span class="params">value: <span class="built_in">string</span>, index: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  不对，不对；这样理解。callbackfn: (value: string, index: number) =&gt; void 如何作为函数forEach1的实参？</p>
<ul>
<li><p>可能需要专门针对学习 回调函数的 资料，这里只是讲数组对象forEach而谈到。</p>
<p>只要能理解 如何创建 回调函数。应该就能理解这里了；</p>
<p>好，我去找资料；</p>
<hr>
</li>
</ul>
</li>
</ol>
<h6 id="3-2-回调函数"><a href="#3-2-回调函数" class="headerlink" title="3.2 回调函数"></a>3.2 回调函数</h6><p><a href="https://blog.csdn.net/UnderIcon/article/details/81188923?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param">https://blog.csdn.net/UnderIcon/article/details/81188923?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param</a></p>
<p>简单一句：函数a的事先干完，回头再调用函数b</p>
<p>a（b），不过上面怎么看起来很复杂，因为直接把函数b本身写进参数了吗？而不是b这个代名词；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">callback</span>)</span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我是parent函数a！&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;调用回调函数&quot;</span>);</span><br><span class="line">    callback();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;我是回调函数b&quot;</span>);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;我是回调函数c&quot;</span>);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a(b);</span><br><span class="line">   a(c);</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure>

<p>页面里的代码 node X.js 会报错，我就全部换成console.log 了；</p>
<p>回调函数先到这吧，许久了；forEach那里估计写的不规范，看起来很迷糊；</p>
<hr>
<h6 id="3-3-forEach方法的练习；"><a href="#3-3-forEach方法的练习；" class="headerlink" title="3.3 forEach方法的练习；"></a>3.3 forEach方法的练习；</h6><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需求：判断数组(nums)中是否包含大于10的数字</span></span><br><span class="line">let nums: number[] = [<span class="number">1</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure>

<p>思路：</p>
<ol>
<li><p>用布尔值来判断是否大于10</p>
<p>1.1 创建一个布尔值变量（has），默认值为false</p>
</li>
<li><p>拿到数组中的每一个元素。</p>
<p>2.1 使用forEach方法来遍历数组；</p>
</li>
<li><p>分别于10进行比较，用if</p>
</li>
<li><p>如果大于10，has设置为true，小于10不用设置，本身为false；</p>
</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.1 创建一个布尔值变量（has），默认值为false</span></span><br><span class="line"><span class="keyword">let</span> has: <span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 2.1 使用forEach方法来遍历数组</span></span><br><span class="line">nums.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num) <span class="comment">// 可以试试，能不能拿到数组中的每个元素</span></span><br><span class="line">    <span class="comment">//分别于10进行比较，用if</span></span><br><span class="line">    <span class="comment">//如果大于10，has设置为true，小于10不用设置，本身为false；</span></span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">10</span>)&#123;</span><br><span class="line">        has = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 打印has，大于10位true，小于10位false，这样就能满足需求；</span></span><br><span class="line"><span class="built_in">console</span>.log(has)</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="4-数组对象–some"><a href="#4-数组对象–some" class="headerlink" title="4 数组对象–some"></a>4 数组对象–some</h5><ol>
<li>如何使用some？</li>
</ol>
<p>需求：判断数组中是否包含大于10的数字。</p>
<blockquote>
<p>这不是上面forEach的练习么</p>
</blockquote>
<p>使用forEach。</p>
<p>问题： 遍历整个数组（循环执行了5次），无法中间停止，这种情况下，效率低。</p>
<br />

<p>some 方法：遍历数组，查找是否有一个满足条件的元素（如果有，就可以停止循环）。</p>
<p>循环特点：<font color="red">根据回调函数的返回值</font>，决定是否停止循环。如果返回 true，就停止；返回 false，就继续循环。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">nums.some(<span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>将</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> has: <span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line">nums.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">10</span>)&#123;</span><br><span class="line">        has = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(has)</span><br></pre></td></tr></table></figure>

<p>用some方法写，如何写呢？可以自己先写写，再看下面；</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>]</span><br><span class="line">nums.some(<span class="function"><span class="keyword">function</span> (<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 额，就是这么简单粗暴</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从后面回来，这种写法不好。虽然当时刚到这就觉得不好了</span></span><br><span class="line"><span class="keyword">let</span> nums: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">some1</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num&gt;<span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">nums.some(some1)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果疑问只有一个num，可以去：<a href="#没用到索引">没用到索引</a></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个时候我问 some1(num)里面的num 是什么</span></span><br><span class="line"><span class="comment">// 那么可以先打印一下是什么；</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">some2</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(num)</span><br><span class="line">&#125;</span><br><span class="line">nums.some(some2)</span><br></pre></td></tr></table></figure>

<p>是调用some方法的那个量的元素（内容）</p>
<p><img src="https://i.loli.net/2020/08/10/Fj1XOvHxPBUV6q2.png" alt="1"></p>
<p>为什么是？</p>
<p>应该是some这个方法，赋予了，被当做参数，的那个函数，的参数的，逻辑关系</p>
</blockquote>
<ol start="2">
<li><p>some有返回值吗？是什么类型？</p>
<p>有，是布尔类型。</p>
<p>申明一个变量，即可接收；</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> has: <span class="built_in">boolean</span> =nums.some(<span class="function"><span class="keyword">function</span> (<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num&gt;<span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>突然想起，每次都是）结尾，以前都是{}</p>
<p>因为这里并不是函数，而是方法，方法好像都是（）</p>
<p>如console.log( )</p>
<p>这里就是nums.some( ) ;本来即使是回调函数，也应该把函数在外面写完，直接用函数名带入，而这里是在里面写函数？</p>
</blockquote>
<p>some  方法的返回值：布尔值。如果找到满足条件的元素，结果为  true ; 否则，为  false 。</p>
<p>查找是否包含满足条件的元素时，使用 some；对数组中每个元素都进行相同的处理时，就用 forEach。</p>
<blockquote>
<p>在some方法里，找到了满足条件的数据，就会停止遍历</p>
</blockquote>
</li>
</ol>
<hr>
<br />

<h5 id="5-补充：-TS-的类型推论"><a href="#5-补充：-TS-的类型推论" class="headerlink" title="5. 补充： TS 的类型推论"></a>5. 补充： TS 的类型推论</h5><p>在 TS 中，某些没有明确指出类型的地方，类型推论会帮助提供类型。</p>
<p>换句话说：由于类型推论的存在，这些地方，类型注解可以省略不写！</p>
<p>发生类型推论的2种常见场景：1 声明变量并初始化时 2 决定函数返回值时。</p>
<p>let age: <del>number</del> = 18 // =&gt;  let age = 18<br>function sum(num1: number, num2: number)<del>: number</del> { return num1 + num2 }<br>// =&gt;<br>function sum(num1: number, num2: number) { return num1 + num2 } }</p>
<p>注意：这两种情况下，类型注解可以省略不写！</p>
<p>推荐：<font color="red">能省略类型注解的地方，就省略</font>（偷懒、充分利用TS类型推论的能力，提升开发效率）。</p>
<p>为什么不早说？</p>
<p>学习的时候，培养大家去建立<font color="red">类型思维</font>；出师了，可以去繁就简。</p>
<blockquote>
<p>我真是难受；2020-8-6 23:02:12</p>
</blockquote>
<hr>
<br />

<h2 id="9-TypeScript-之-Web开发"><a href="#9-TypeScript-之-Web开发" class="headerlink" title="9. TypeScript 之 Web开发"></a>9. TypeScript 之 Web开发</h2><br />

<h3 id="9-1-Web开发基础"><a href="#9-1-Web开发基础" class="headerlink" title="9.1 Web开发基础"></a>9.1 Web开发基础</h3><h4 id="9-1-1-概述"><a href="#9-1-1-概述" class="headerlink" title="9.1.1 概述"></a>9.1.1 概述</h4><p>下棋游戏（XXOO）是通过 Web（网页）开发实现的，因此，我们要学习 Web 开发的相关知识。</p>
<p>Web 开发涵盖以下内容：HTML、CSS、JavaScript （HTML、CSS不是本课程的重点，仅简单讲解）。<br>三者之间的关系：</p>
<ul>
<li>（结构）HTML 负责创建页面结构。</li>
<li>（样式）CSS 负责美化页面结构（相当于化妆）。</li>
<li>（行为）JavaScript 负责让页面“动”起来，解锁更多动效。</li>
</ul>
<hr>
<blockquote>
<p>一般都是学了html 与css 再来的，可以不看</p>
</blockquote>
<p>HTML（Hyper Text Markup Language，即：超文本标记语言）负责创建页面结构。<br>创建第一个 HTML 步骤：</p>
<ol start="2">
<li>快速生成 HTML 基本骨架：在文件中输入英文叹号（!），然后，按 tab 键。</li>
<li>创建 a .html 文件。</li>
<li>创建按钮标签：在 body 标签中，输入 button，按 tab 键。</li>
<li>打开 HTML 页面：在文件夹中找到页面文件，双击打开。<br>注意：页面中可见的内容，写在 body 标签中。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> 布局标签（独占一行）</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>  段落标签（存放文字）</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span> 标题标签</span><br></pre></td></tr></table></figure>

<br />

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span> 按钮标签</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> /&gt;</span> 图片标签</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<hr>
<p>CSS（Cascading Style Sheets，即：层叠样式表）负责美化页面结构。<br>使用 CSS 的三种方式：</p>
<ol>
<li>style 属性：在 HTML 标签中，通过 style 属性来添加样式。</li>
</ol>
<p><code>&lt;p style=&quot;color: red; font-size: 50px;&quot;&gt;天青色等烟雨 ...&lt;/p&gt;</code></p>
<ol start="2">
<li>style 标签：在 head 标签中，创建 style 标签。<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="comment">/* 标签选择器 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>技巧： 先通过选择器获取标签，再设置样式。</p>
<p>常用的 CSS 选择器：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 标签选择器 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"><span class="comment">/* id 选择器 */</span></span><br><span class="line"><span class="selector-id">#txt</span> &#123; <span class="attribute">font-size</span>: <span class="number">50px</span>; &#125;</span><br><span class="line"><span class="comment">/* 类（名）选择器 –- 推荐 */</span></span><br><span class="line"><span class="selector-class">.cls</span> &#123; <span class="attribute">backgroud-color</span>: pink; &#125;</span><br></pre></td></tr></table></figure>

<p>推荐：使用 类选择器 来给标签添加样式！</p>
<ol start="3">
<li><p>CSS 文件：创建 .css 文件，将样式放在该文件中，然后在 head 中通过 link 标签引入该文件。</p>
<p><code>&lt;link ref=&quot;stylesheet&quot; href=&quot;./index.css&quot; /&gt;</code></p>
</li>
</ol>
<p>总结：</p>
<p>作用：美化页面结构。<br>使用方式：</p>
<ol>
<li>HTML 标签的 style 属性。</li>
<li>style 标签（在 head 标签中创建）。</li>
<li>CSS 文件（在 head 中通过 link 标签引入）。</li>
</ol>
<p>常用的 CSS 选择器：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: red; &#125; <span class="comment">/* 标签选择器 */</span></span><br><span class="line"><span class="selector-id">#txt</span> &#123; <span class="attribute">font-size</span>: <span class="number">50px</span>; &#125; <span class="comment">/* id 选择器 */</span></span><br><span class="line"><span class="selector-class">.class</span> &#123; <span class="attribute">backgroud-color</span>: pink; &#125; <span class="comment">/* 类（名）选择器 –- 推荐 */</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="9-1-2-浏览器中使用JavaScript"><a href="#9-1-2-浏览器中使用JavaScript" class="headerlink" title="9.1.2 浏览器中使用JavaScript"></a>9.1.2 浏览器中使用JavaScript</h4><p>JavaScript（简称：JS），负责让页面“动”起来，为页面添加动效。</p>
<p>使用 JS 的两种方式：</p>
<ol>
<li><p>script 标签：在 body 标签的最后面，创建 script 标签。</p>
<p>注意：console.log 方法打印的内容，需要在浏览器控制台中查看。</p>
<p>打开控制台（console）的方式：在页面中点击鼠标右键，选择“检查”，切换到 Console 面板。</p>
</li>
<li><p>独立 js文件：创建 index.js 文件，在 body 标签的最后面，通过 script 标签引入。</p>
<p><code>&lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;</code></p>
<p><strong>当然是选择它啦</strong></p>
</li>
</ol>
<hr>
<br />

<h4 id="9-1-3-自动刷新浏览器"><a href="#9-1-3-自动刷新浏览器" class="headerlink" title="9.1.3 自动刷新浏览器"></a>9.1.3 自动刷新浏览器</h4><p>问题：每次修改页面内容后，都要手动刷新浏览器，才能看到修改后的内容。</p>
<p>解决方式：使用 VSCode 的 Live Server 插件，实现自动刷新浏览器。</p>
<p>作用：监视 html 或引入的css、js的变化，在保存文件时，该插件就会帮我们自动刷新浏览器。</p>
<p>如何使用？     注意：不再双击打开 html 页面！</p>
<p>使用方式：在 html 文件中，点击鼠标右键，再点击  Open with Live Server 按钮即可。</p>
<p>注意：html 文件所在的文件夹名称 <strong>不要包含中文</strong>，否则，打开页面失败，插件功能无法生效！</p>
<hr>
<h3 id="9-2-浏览器中运行TS"><a href="#9-2-浏览器中运行TS" class="headerlink" title="9.2 浏览器中运行TS"></a>9.2 浏览器中运行TS</h3><p>注意：浏览器中只能运行 JS， <strong>无法直接运行 TS</strong>，因此，需要将 TS 转化为 JS 然后再运行。</p>
<p>浏览器中运行 TS 的步骤：</p>
<ol>
<li>使用命令 <font color='red'>tsc</font> index.ts 将 ts 文件转化为 js 文件。</li>
<li>在页面中，使用 script 标签引入生成的<font color='red'> js </font>文件（注意是 js 文件）。</li>
</ol>
<p><code>&lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;</code></p>
<p>问题：每次修改 ts 文件后，都要重新运行 tsc 命令将 ts 转化为 js 。<br>解决方式：使用 tsc 命令的<font color='red'>监视模式</font>。</p>
<p><code>tsc --watch index.ts</code></p>
<p>解释： –watch 表示启用监视模式，只要重新保存了 ts 文件，就会自动调用 tsc 将 ts 转化为 js。</p>
<hr>
<br />

<h3 id="9-3-DOM操作"><a href="#9-3-DOM操作" class="headerlink" title="9.3 DOM操作"></a>9.3 DOM操作</h3><h4 id="9-3-1-概述"><a href="#9-3-1-概述" class="headerlink" title="9.3.1 概述"></a>9.3.1 概述</h4><ol>
<li><p>DOM（Document Object Modal）：文档对象模型</p>
<p>DOM 是浏览器提供的（ 浏览器特有），专门用来 操作网页内容的一些 JS 对象。<br>HTML：超文本标记语言，用来创建网页结构。</p>
<p>目的：让我们可以使用 JS/TS 代码来操作页面（HTML）内容，让页面“动”起来，从而实现 Web 开发。</p>
<p>两者的关系：浏览器根据 HTML 内容创建相应的 DOM 对象，也就是：每个 HTML 标签都有对应的 DOM 对象</p>
<p><img src="https://i.loli.net/2020/08/07/zmDMBr6yutvpnf7.png" alt=""></p>
<center style="font-size:15px;color:#C0C0C0;">图1</center>



</li>
</ol>
<hr>
<ol start="2">
<li>学习四个常用 DOM 操作：1 .获取 DOM 元素（DOM 对象） 2 .设置样式 3 .设置内容 4 .绑定（解绑）事件。</li>
</ol>
<p>DOM 操作的套路（技巧）：先找人 后做事。</p>
<ul>
<li>找人：获取 DOM 元素。</li>
<li>做事：设置样式、内容、绑定（解绑）事件。</li>
</ul>
<p><code>document.title = &#39;等你下课&#39;</code></p>
<blockquote>
<p> <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document">document-MDN文档</a>，<a href="https://www.w3school.com.cn/jsref/dom_obj_document.asp">document–w3cschool</a>;</p>
</blockquote>
<p>比如： 将 p 标签中的内容修改为：天青色等烟雨而我在等你。</p>
<p>步骤： 1 获取 p 元素 2 设置内容。</p>
<blockquote>
<p>html里面教标签。js 与 ts 里面叫元素</p>
</blockquote>
<hr>
<h4 id="9-3-2-获取元素"><a href="#9-3-2-获取元素" class="headerlink" title="9.3.2 获取元素"></a>9.3.2 获取元素</h4><p>常用方法有两个：</p>
<ul>
<li><p>querySelector(selector) 作用：获取某一个 DOM 元素。</p>
</li>
<li><p>querySelectorAll(selector) 作用：同时获取多个 DOM 元素。</p>
<blockquote>
<p><a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/query">query</a>; <a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/selector">selector</a>; <a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/query%20selector">query selector</a> ; </p>
</blockquote>
</li>
</ul>
<ol>
<li><p>获取一个DOM元素：</p>
<p><code>document.querySelector(selector)</code></p>
<p>document 对象：文档对象（整个页面），是操作页面内容的入口对象。</p>
<ul>
<li>想操作页面内容，必须先拿到document对象；让我们回想一下对象的使用；</li>
</ul>
<p>selector 参数：是一个 CSS 选择器（标签、类、id 选择器等）。</p>
<p>作用：查询（获取）与选择器参数匹配的 DOM 元素，但是，只能获取到<font color='red'>第一个！</font><br>推荐：使用<font color='red'> id </font>选择器（唯一）。</p>
<p><code>let title = document.querySelector(&#39;#title&#39;)</code></p>
<p>解释：获取页面中id为title的DOM元素。</p>
</li>
</ol>
<h5 id="2-类型断言"><a href="#2-类型断言" class="headerlink" title="2. 类型断言"></a>2. 类型断言</h5><p>问题：调用 querySelector() 通过 id 选择器获取 DOM 元素时，拿到的元素类型都是 Element。</p>
<p>因为无法根据 id 来确定元素的类型，所以，该方法就返回了一个 宽泛的类型：元素（Element）类型。</p>
<p>不管是 h1 还是 img 都是元素。</p>
<p>导致新问题：无法访问 img 元素的 src 属性了。</p>
<p>因为：Element 类型只包含所有元素共有的属性和方法（比如：id 属性）。</p>
<blockquote>
<p>在ts中，img.src 会报错。img.id，title.id 就不会；id是大家都有的，而有些是特有的</p>
</blockquote>
<ul>
<li><p>解决方式：使用<strong>类型断言</strong>，来手动指定 更 加具体的类型（比如，此处应该比 Element 类型更加具体）。</p>
<p>语法：</p>
<p><code>值 as 更具体的类型</code></p>
<p>比如：</p>
<p><code>let img = document.querySelector(&#39;#image&#39;) as HTMLImageElement</code></p>
<p>解释：我们确定 id=”image” 的元素是图片元素，所以，我们将类型指定为 HTMLImageElement。</p>
<p>我们怎么知道什么元素是什么类型呢？</p>
<p>技巧：通过 <font color='red'> console.dir()</font> 打印 DOM 元素，在属性的最后面，即可看到该元素的类型。</p>
<p><img src="https://i.loli.net/2020/08/07/Ove5uEjBF6cwJpA.png" alt=""></p>
<blockquote>
<p><code>console.dir(title)</code>; <code>console.dir(img)</code>;</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Console/dir">console.dir – MDN文档</a></p>
</blockquote>
</li>
<li><p>类型断言：手动指定 <strong>更 加具 体（精确）</strong>的类型。</p>
</li>
</ul>
<hr>
<h5 id="3-获取多个元素"><a href="#3-获取多个元素" class="headerlink" title="3. 获取多个元素"></a>3. 获取多个元素</h5><p><code>document.querySelectorAll(selector)</code></p>
<p>作用：获取<font color='red'>所有</font>与选择器参数匹配的 DOM 元素，<strong>返回值</strong>是一个列表。</p>
<p>推荐：使用  class 选择器。</p>
<p>示例：</p>
<p><code>let list = document.querySelectorAll(&#39;.a&#39;)</code></p>
<p>解释：获取页面中所有 class 属性包含 a 的元素。</p>
<p>接下来我们在代码中体会一下：</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta">meta – MDN文档</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;b a&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;a c&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;c a b&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例：获取带有.a类名的元素列表</span></span><br><span class="line"><span class="keyword">let</span> list = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.a&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(list)</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="9-3-3-操作文本内容"><a href="#9-3-3-操作文本内容" class="headerlink" title="9.3.3 操作文本内容"></a>9.3.3 操作文本内容</h4><ol>
<li><p>读取</p>
<p><code>dom.innerText</code></p>
</li>
<li><p>设置</p>
<p><code>dom.innerText = &#39;等你下课&#39;</code></p>
<p>注意：需要通过<strong>类型断言</strong>来指定 DOM 元素的具体类型，才可以使用  innerText 属性。</p>
<blockquote>
<p>emmm，我以前不会类型断言的时候也用过啊</p>
<p>那个时候我记得是js，用的是getElement</p>
<p>可惜那个时候不会写md笔记，不然现在肯定在学vue，node.js了；</p>
</blockquote>
<p>注意：设置内容时，会 覆盖原来的内容。如何实现追加内容（比如，张虹成 → 张虹成– 彭华）？</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">dom.innerText = dom.innerText + <span class="string">&#x27; – 彭华&#x27;</span></span><br><span class="line"><span class="comment">// 简化</span></span><br><span class="line">dome.innerText += <span class="string">&#x27; – 彭华&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>练习：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>xxxooo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>试试？<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>再试试？<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;b a&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;a c&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;c a b&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取元素 和 innerText</span></span><br><span class="line"><span class="comment">    要求： 给所有 P 标签的内容前面，添加 &#x27;[自己的索引]&#x27;</span></span><br><span class="line"><span class="comment">    1 → [0]1       2 → [1]2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 1. 获取所有的P元素列表（可以遍历）</span></span><br><span class="line"><span class="keyword">let</span> list = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.a&#x27;</span>)</span><br><span class="line"><span class="comment">// console.log(list) // 看看效果</span></span><br><span class="line"><span class="comment">// 2. 遍历p元素列表，拿到每一个p元素以及索引号</span></span><br><span class="line">list.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item, index)</span><br><span class="line">    <span class="comment">// 此时可以在浏览器F12的console里面打开打印出来的 元素 与 索引号</span></span><br><span class="line">    <span class="comment">// 此时的item 是 Element 类型</span></span><br><span class="line">    <span class="comment">// 因需要访问item（P 元素）的 innerText 属性，所以要 类型断言 指定更加具体的类型</span></span><br><span class="line">    <span class="keyword">let</span> p = item <span class="keyword">as</span> HTMLParagraphElement</span><br><span class="line">    <span class="comment">// 3. 通过索引号拼接内容，然后甚至文本内容</span></span><br><span class="line">    p.innerText = <span class="string">&#x27;[&#x27;</span> + index + <span class="string">&#x27;]&#x27;</span> + p.innerText</span><br><span class="line">    <span class="comment">//现在访问的是p，不是item;为什么不是item？</span></span><br><span class="line">    <span class="comment">//item只是是个参数，因为一系列逻辑函数而获取了innerText,实则无法改变item;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br />

<p><img src="https://i.loli.net/2020/08/07/MIBGFp4JUjCdml9.png" alt=""></p>
<center style="font-size:15px;color:#C0C0C0;">图1</center>

<br />

<hr>
</li>
</ol>
<h4 id="9-3-4-样式操作"><a href="#9-3-4-样式操作" class="headerlink" title="9.3.4 样式操作"></a>9.3.4 样式操作</h4><p>两种方式：</p>
<ul>
<li>dom.style 属性：行内样式操作，可以设置每一个样式属性（比如，字体大小、文字颜色等）。</li>
<li>dom.classList 属性：类样式操作，也就是操作类名，比如，添加类名、移除类名等。</li>
</ul>
<h5 id="1-style-属性（行内样式）"><a href="#1-style-属性（行内样式）" class="headerlink" title="1. style 属性（行内样式）"></a>1. style 属性（行内样式）</h5><p>   读取：</p>
<p>   <code>dom.style.样式名称</code></p>
<p>   设置：</p>
<p>   <code>dom.style.样式名称 = 样式值</code></p>
<p>   说明：所有的样式名称都与  CSS 相通，但命名规则为驼峰命名法。</p>
   <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">dom.style.fontSize</span> = <span class="string">&#x27;30px&#x27;</span></span><br><span class="line"><span class="attr">dom.style.display</span> = <span class="string">&#x27;none&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>css里面是 font-size,这里就不是了</p>
<p>因为style又是一个对象，所以可以两个点，dom.style.</p>
</blockquote>
<h5 id="2-classList-属性（类样式）"><a href="#2-classList-属性（类样式）" class="headerlink" title="2. classList 属性（类样式）"></a>2. classList 属性（类样式）</h5><p>包含三个常用方法：添加、移除、判断是否存在。</p>
<ol>
<li><p>添加：</p>
<p><code>dom.classList.add(类名1, 类名2, ...)</code></p>
<blockquote>
<p>classList也是对象</p>
</blockquote>
<p>参数表示：要添加的类名，可以同时添加多个。</p>
<p>比如：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;p <span class="keyword">class</span>=<span class="string">&quot;a&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">dom.classList.add(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>) <span class="comment">// 添加 class 样式 ==&gt; class=&quot;a b c&quot;</span></span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;txt&quot;</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span>2333<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>+</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.b</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.c</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>别在ts这边写多了后，忘记了css那边结尾的“；”号</p>
</blockquote>
<p>加ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#txt&#x27;</span>) <span class="keyword">as</span> HTMLParagraphElement</span><br><span class="line">p.classList.add(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>光写<code>p.classList.add(&#39;b&#39;, &#39;c&#39;)</code>会报错；</p>
<p>找到了以前的学习的写法：</p>
<blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changecolor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x=<span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>);</span><br><span class="line">    x.style.color=<span class="string">&quot;red&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>还是有申明 var，这里的var 我记得是 变量，然后let 是常量；</p>
<p>而ts这边let 是变量，const 是常量；</p>
<p>目前记得是这样，事实怎样，看事实；</p>
</blockquote>
</blockquote>
</li>
<li><p>移除：</p>
<p><code>dom.classList.remove(类名1, 类名2, ...)</code></p>
<p>参数表示：要移除的类名，可以同时移除多个。</p>
<p>比如：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;p <span class="keyword">class</span>=<span class="string">&quot;a b c&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">dom.classList.remove(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>) <span class="comment">// 移除 class 样式 ==&gt; class=&quot;b&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>判断类名是否存在：</p>
<p><code>let has = dom.classList.contains(类名)</code></p>
<blockquote>
<p><a href="https://fanyi.baidu.com/?aldtype=85#en/zh/contains">contains – 音标</a></p>
<p>contains 有返回值，返回值是布尔值；</p>
</blockquote>
<p>参数表示：要判断存在的类名。</p>
<p>比如：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;p <span class="keyword">class</span>=<span class="string">&quot;b&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">dom.classList.contains(<span class="string">&#x27;a&#x27;</span>) <span class="comment">// false</span></span><br><span class="line">dom.classList.contains(<span class="string">&#x27;b&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>在上面1.添加的例子中可以加入：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">has</span> = <span class="keyword">p</span>.classList.contains(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">has</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h5 id="3-总结-1"><a href="#3-总结-1" class="headerlink" title="3. 总结"></a>3. 总结</h5><p>总结：<br>类样式（classList）的操作有三种：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加</span></span><br><span class="line">dom.classList.add(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="comment">// 移除</span></span><br><span class="line">dom.classList.remove(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="comment">// 判断是否存在</span></span><br><span class="line"><span class="keyword">let</span> has = dom.classList.contains(<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure>

<br />

<hr>
<h4 id="9-3-5-操作事件"><a href="#9-3-5-操作事件" class="headerlink" title="9.3.5 操作事件"></a>9.3.5 操作事件</h4><p>在浏览网页时，我们经常会通过移入鼠标、点击鼠标、敲击键盘等操作，来使用网站提供的功能。</p>
<p>如果要让我们自己实现这样的功能，就需要通过<font color='red'>操作事件</font>来实现了。</p>
<p>实际上，移入鼠标、点击鼠标、敲击键盘等，都是常见的 DOM 事件。</p>
<p>操作事件的两个方法：</p>
<ul>
<li>addEventListener 添加（绑定）事件。</li>
<li>removeEventListener 移除（解绑）事件。</li>
</ul>
<h5 id="1-添加事件"><a href="#1-添加事件" class="headerlink" title="1. 添加事件"></a>1. 添加事件</h5><ol>
<li><p>addEventListener 添加事件</p>
<p>作用：给 DOM 元素添加事件。</p>
<p><code>dom.addEventListener(事件名称, 事件处理程序)</code></p>
<blockquote>
<p><a href="https://fanyi.baidu.com/?aldtype=85#en/zh/Event%20Listener">Event Listener –百度翻译</a> ; </p>
</blockquote>
<p>事件名称：字符串，比如： ‘click’ （鼠标点击事件）、 ‘mouseenter’ （鼠标进入事件）。</p>
<p>事件处理程序：回调函数，指定要实现的功能，该函数会在触发事件时调用。<br>示例：鼠标点击按钮，打印内容。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btn&#x27;</span>)</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;鼠标点击事件触发了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>1.2 鼠标移入也是一样:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btn&#x27;</span>)</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;鼠标移入了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<h5 id="2-事件对象"><a href="#2-事件对象" class="headerlink" title="2. 事件对象"></a>2. 事件对象</h5><p>事件对象（<span id="event">event</span>），是事件处理程序（回调函数）的参数。</p>
<p>表示：与当前事件相关的信息，比如：事件类型（type）、触发事件的 DOM 元素（target）等。(event.target 会 返回 使用 事件的 html内容 （话说不叫方法么，渐渐的叫事件了）)</p>
<blockquote>
<p>btn.addEventListener(‘click’, function (<font color='red'>event</font>) {<br>    console.log(event.type) // click<br>    console.log(event.target) // btn 元素<br>})</p>
<blockquote>
<p>本来回调函数就是指，a函数作为b函数的参数。</p>
<p>而这里，c对象又作为a函数的参数：b(a(c))；套娃呢？</p>
</blockquote>
<p><code>console.log(event)</code>可以打印出event对象有哪些属性；</p>
<ol start="2">
<li><p>event 会自动类型注解 跟随事件</p>
<p><img src="https://i.loli.net/2020/08/09/UOJ3C9ri1bElGNs.png" alt="1"></p>
<p>确实是能代理当前事件。当前被使用事件.xx属性或方法 == event.xx属性或方法</p>
</li>
</ol>
</blockquote>
<p>2.2 实例：</p>
<p>添加事件，让当前按钮的文字大小变为30px；</p>
<ul>
<li>方法一</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btn&#x27;</span>) <span class="keyword">as</span> HTMLButtonElement</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event.type) <span class="comment">// click</span></span><br><span class="line">  <span class="built_in">console</span>.log(event.target) <span class="comment">// btn 元素</span></span><br><span class="line">  btn.style.fontSize = <span class="string">&#x27;30px&#x27;</span> <span class="comment">//因为这个类型是string所以这样，VScode鼠标放上可查看；</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法二</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btn&#x27;</span>)</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event.type) <span class="comment">// click</span></span><br><span class="line">  <span class="built_in">console</span>.log(event.target) <span class="comment">// btn 元素</span></span><br><span class="line">    <span class="keyword">let</span> target = event.target <span class="keyword">as</span> HTMLButtonElement</span><br><span class="line">    target.style.fontSize = <span class="string">&#x27;30px&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<br />

<hr>
<h5 id="3-移除事件"><a href="#3-移除事件" class="headerlink" title="3. 移除事件"></a>3. 移除事件</h5><ol>
<li>removeEventListener 移除事件</li>
</ol>
<p>作用：移除给 DOM 元素添加的事件，移除后，事件就不再触发了。</p>
<p><code>dom.removeEventListener(事件名称, 事件处理程序)</code></p>
<p>事件名称：同添加事件的第一个参数。</p>
<p>事件处理程序： <strong>必须要 跟 添加 事 件时的事件处理程序是同一 个</strong>，否则无法移除！</p>
<blockquote>
<p>到底什么意思？看下面例子：</p>
</blockquote>
<p>1.1 正确方式：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, handleClick)</span><br><span class="line">btn.removeEventListener(<span class="string">&#x27;click&#x27;</span>, handleClick)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>从上面能感觉到：</p>
<p>回调函数，是专门，把参数作为函数使用。不是被迫把一个函数作为参数；</p>
<p>也许那些回调函数的本身，只是一个桥梁or动作，真正要实现的内容，是作为参数的函数；</p>
</blockquote>
<p>说明：添加和移除事件时，事件处理程序是同一个，都是函数 handleClick。</p>
<blockquote>
<p>要有明确的函数名；</p>
</blockquote>
<p>1.2 错误演示：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;&#125;)</span><br><span class="line">btn.removeEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>注意：以上两个函数虽然长的一样，却是不同的函数（双胞胎，不是同一个人）。</p>
<blockquote>
<p>虽然都是function () {}，但是 是两个 不同的函数。</p>
</blockquote>
<ol start="2">
<li><p>练习：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btn&#x27;</span>)</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;鼠标点击事件触发了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>使用移除方法，把添加的addEventListener事件，移除；</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btn&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;点我，你再点下&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, handleClick)</span><br><span class="line"><span class="comment">// 点击移除事件按钮；</span></span><br><span class="line"><span class="keyword">let</span> removeBtn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#remove&#x27;</span>)</span><br><span class="line">removeBtn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 移除btn按钮的点击事件</span></span><br><span class="line">  btn.removeEventListener(<span class="string">&#x27;click&#x27;</span>, handleClick)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>写法二：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btn&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;点我，你再点下&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, handleClick)</span><br><span class="line"><span class="comment">// 点击移除事件按钮；</span></span><br><span class="line"><span class="keyword">let</span> removeBtn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#remove&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeBtn_2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    btn.removeEventListener(<span class="string">&#x27;click&#x27;</span>, handleClick)</span><br><span class="line">&#125;</span><br><span class="line">removeBtn.addEventListener(<span class="string">&#x27;click&#x27;</span>, removeBtn_2)</span><br></pre></td></tr></table></figure>

<p>VScode实验，两个写法都有效；也许第二个写法要多几个字符。但观看美观；</p>
<p>再调整一下位置：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btn&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> removeBtn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#remove&#x27;</span>)<span class="comment">// 点击移除事件按钮；</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;点我，你再点下&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeBtn_2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    btn.removeEventListener(<span class="string">&#x27;click&#x27;</span>, handleClick)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, handleClick)</span><br><span class="line">removeBtn.addEventListener(<span class="string">&#x27;click&#x27;</span>, removeBtn_2)</span><br></pre></td></tr></table></figure>

<p>good，以后我就这样写，这样看这舒服太多；</p>
</li>
</ol>
<h6 id="3-只触发一次"><a href="#3-只触发一次" class="headerlink" title="3. 只触发一次"></a>3. 只触发一次</h6><p>如果事件<font color='red'>只触发一次</font>，可以在添加事件时处理</p>
<p>处理方式：传入第三个参数，将 once 属性设置为 true。</p>
<p><code>btn.addEventListener(&#39;click&#39;, function () &#123;&#125;, &#123; once: true &#125;)</code></p>
<p>once ：如果值为 true，会在触发事件后，自动将事件移除，达到只触发一次的目的。</p>
<blockquote>
<p><code>&#123; once: true &#125;</code>是对象的写法，还是第一次见。直接把键值对写出来，然后用{}当参数。不知其中有什么深意没，资料没说，我也不纠结了。先好好学习眼前的</p>
</blockquote>
<hr>
<h5 id="4-函数形式说明"><a href="#4-函数形式说明" class="headerlink" title="4. 函数形式说明"></a>4. 函数形式说明</h5><p>函数声明形式的事件处理程序说明</p>
<ol>
<li><p>可以先使用函数，再声明函数。<strong>–不建议</strong></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">btn.add<span class="constructor">EventListener(&#x27;<span class="params">click</span>&#x27;, <span class="params">handleClick</span>)</span></span><br><span class="line"><span class="keyword">function</span> handle<span class="constructor">Click()</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>原因：函数声明在当前 ts 文件中的任意位置都有定义。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1 先调用函数</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span></span>()</span><br><span class="line"><span class="comment">// 2 再声明函数</span></span><br><span class="line">function <span class="function"><span class="keyword">fn</span></span>() &#123;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>也就是说，声明函数（创建函数）写在最下面也是可以的。</p>
<p>但明显不规范，不方便看。</p>
<p>一般都是先创建后使用。我不建议使用此写法；</p>
</blockquote>
</li>
<li><p>使用事件对象参数时，应该<font color='red'>指定类型注解</font>，否则，访问事件对象的属性时没有任何提示。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, handleClick)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">event: MouseEvent</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event.target)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.1 可以在vscode试试：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;点我，再点试试&#x27;</span>,event.)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时 event.  后面没有任何提示；</p>
<p><code>event: MouseEvent</code>后就有提示；</p>
<blockquote>
<p>event到底是何许？是不是忘记了？<a href="#event">点击回到event讲解处</a></p>
</blockquote>
<p>2.2 如果是使用的回调+匿名，会自动给 类型注解；</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1UD4y1m7Gw?p=127">https://www.bilibili.com/video/BV1UD4y1m7Gw?p=127</a></p>
<p>04:35 处，讲解；</p>
</blockquote>
<p>技巧：使用原始方式（匿名回调函数）查看参数类型。</p>
</li>
</ol>
<hr>
<h2 id="10-项目：下棋游戏"><a href="#10-项目：下棋游戏" class="headerlink" title="10. 项目：下棋游戏"></a>10. 项目：下棋游戏</h2><p><a href="../2-ts_first_item/#10-项目：下棋游戏">转移到了 5-ts first item</a></p>
<blockquote>
<p><img src="https://i.loli.net/2020/08/08/e7rOmNwfpD3sdTg.png" alt=""></p>
<p>由这个和：</p>
<p><a href="https://cqilin.github.io/typescript/26-typescript_introduction/">https://cqilin.github.io/typescript/26-typescript_introduction/</a></p>
<p><a href="https://cqilin.github.io/typescript/5-ts_first_item/">https://cqilin.github.io/typescript/5-ts_first_item/</a></p>
<p>而感得出，跳转文件；</p>
<p><code>[转移到了 5-ts first item](../5-ts_first_item/#10-项目：下棋游戏)</code></p>
<p>都在typescript文件下，那先返回上一级：../</p>
<p>然后是5-ts_first_item ：../5-ts_first_item</p>
<p>但这样是无法跳转的；然后早就知道图上①处的地方。但是之前没观察②处</p>
<p>这次看了②处，才知道是url发生了改变；正好有#定位，用之</p>
</blockquote>
<h3 id="10-1-游戏准备"><a href="#10-1-游戏准备" class="headerlink" title="10.1 游戏准备"></a>10.1 游戏准备</h3><h4 id="10-1-1-游戏演示"><a href="#10-1-1-游戏演示" class="headerlink" title="10.1.1 游戏演示"></a>10.1.1 游戏演示</h4><p>玩法：两个玩家，一个玩家使用（X），一个玩家使用（O），轮流在棋盘上下棋（点击单元格）。</p>
<p>获胜条件：横、竖、斜（对角线）三个棋子相同。<br>平局：棋盘满子，但是，不满足任何一种获胜条件。</p>
<h4 id="10-1-2-游戏模板说明"><a href="#10-1-2-游戏模板说明" class="headerlink" title="10.1.2 游戏模板说明"></a>10.1.2 游戏模板说明</h4><p>重点：运用学到的 TS 知识，来开发下棋游戏。<br>游戏的模板（HTML、CSS），已准备好，直接使用即可。</p>
<p>模板（HTML、CSS）的说明：</p>
<ol>
<li>下一步提示：给游戏面板（#bord）标签，添加 x 或 o 类名。</li>
<li>下棋（点击单元格）：给单元格（.cell）标签，添加 x 或 o 类名。</li>
<li>展示和隐藏获胜信息：设置获胜信息面板（#message）标签的样式属性 display。</li>
</ol>
<h3 id="10-2-点击下棋"><a href="#10-2-点击下棋" class="headerlink" title="10.2 点击下棋"></a>10.2 点击下棋</h3><h4 id="10-2-1-单元格点击"><a href="#10-2-1-单元格点击" class="headerlink" title="10.2.1 单元格点击"></a>10.2.1 单元格点击</h4><p>效果：点击棋盘的任意单元格，单元格显示 X（默认）。</p>
<ol>
<li>获取到所有的单元格列表。</li>
<li>遍历单元格列表，给每一个单元格添加点击事件。</li>
<li>给当前被点击的单元格添加类名 x。</li>
</ol>
<p>优化（1）：防止单元格重复点击，在添加事件时，使用 once 属性，让单元格只能被点击一次。</p>
<p>优化（2）：使用函数声明形式的事件处理程序（代码多了后，代码结构会更清晰）。</p>
<h4 id="10-2-2-切换玩家"><a href="#10-2-2-切换玩家" class="headerlink" title="10.2.2 切换玩家"></a>10.2.2 切换玩家</h4><p>效果：玩家（X）和玩家（O）轮流交替下棋。</p>
<ol>
<li>创建一个存储当前玩家的变量（currentPlayer），默认值为：x。</li>
<li>将添加给单元格时写死的类名 x ，替换为变量（currentPlayer）的值。</li>
<li>切换到另一个玩家：在添加类名（下棋完成一步）后，根据当前玩家，得到另外一个玩家。</li>
<li>处理下一步提示：移除游戏面板中的 x 和 o 类名，添加下一个玩家对应的类名。</li>
</ol>
<hr>
<h2 id="11-提问"><a href="#11-提问" class="headerlink" title="11. 提问"></a>11. 提问</h2><ol>
<li><a href="#点语法">如何使用对象的属性或方法</a> ？（点语法）</li>
<li><a href="#event">点击回到event讲解处</a></li>
<li></li>
</ol>
<hr>
<p>[^冗]: 拼 音 <strong>rǒng</strong> 基本含义：1.多余的：～员。文章～长。2.烦琐；繁忙：～杂。～忙。3.繁忙的事：拨～。<br>[^void]: void 英 [vɔɪd]   美 [vɔɪd]  n.空间;空白;真空;空虚  adj.缺乏;没有;无效的;空的;空空如也  v.使无效;宣布…作废;取消;排泄，排放(大小便)</p>
<p>[^calc_Area]: 面积计算 ；百度翻译</p>
<p>​</p>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>2-typescript_First_Small_projects</title>
    <url>/1-(0~50)/2-ts_first_item/</url>
    <content><![CDATA[<h2 id="10-项目：下棋游戏"><a href="#10-项目：下棋游戏" class="headerlink" title="10. 项目：下棋游戏"></a>10. 项目：下棋游戏</h2><p><a href="https://cqilin.gitee.io/web_learn/">小作品网址</a></p>
<h3 id="10-0-html与css准备；"><a href="#10-0-html与css准备；" class="headerlink" title="10.0 html与css准备；"></a>10.0 html与css准备；</h3><h4 id="10-0-1-准备初始的html"><a href="#10-0-1-准备初始的html" class="headerlink" title="10.0.1 准备初始的html"></a>10.0.1 准备初始的html</h4><a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Tic Tac Toe 井字游戏<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Tic Tac Toe 井字游戏<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改h1的css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 修改p标签的外边距 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 设置背景颜色 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f9f2e7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 标题 */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#477998</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<ol start="2">
<li><p>创建 .container，设置棋盘的长宽。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Tic Tac Toe 井字游戏<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">471px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">471px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>2.1 在里面 创建 <code>&lt;div id=&quot;bord&quot; class=&quot;game-board x&quot;&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Tic Tac Toe 井字游戏<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;bord&quot;</span> <span class="attr">class</span>=<span class="string">&quot;game-board x&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>board：板子；game-board: 游戏板；</p>
<p>id=”bord” ； 用于ts定位；</p>
<p>x；也许代表x轴；</p>
</blockquote>
</li>
<li><p>为了节省时间这次先全给出，笔记其难点；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Tic Tac Toe<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Tic Tac Toe<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 游戏面板（棋盘） --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;bord&quot;</span> <span class="attr">class</span>=<span class="string">&quot;game-board x&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 游戏获胜信息面板 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span> <span class="attr">class</span>=<span class="string">&quot;game-message&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;winner&quot;</span>&gt;</span>X 赢了！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;restart&quot;</span>&gt;</span>重新开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>css全：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f9f2e7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 标题 */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#477998</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 游戏内容容器 */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">471px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">471px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 游戏面板棋盘 */</span></span><br><span class="line"><span class="selector-class">.game-board</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">471px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">471px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.game-board</span><span class="selector-class">.x</span> <span class="selector-class">.cell</span><span class="selector-pseudo">:not(.x)</span><span class="selector-pseudo">:not(.o)</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">    <span class="attribute">color</span>: lightgray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.game-board</span><span class="selector-class">.o</span> <span class="selector-class">.cell</span><span class="selector-pseudo">:not(.x)</span><span class="selector-pseudo">:not(.o)</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">    <span class="attribute">color</span>: lightgray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 棋盘 - 行 */</span></span><br><span class="line"><span class="selector-class">.row</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:last-child</span> <span class="selector-class">.cell</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 棋盘 - 单元格 */</span></span><br><span class="line"><span class="selector-class">.cell</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">157px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">157px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">157px</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">6px</span> solid <span class="number">#546363</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">6px</span> solid <span class="number">#546363</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">88px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Gill Sans&#x27;</span>, <span class="string">&#x27;Gill Sans MT&#x27;</span>, Calibri, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cell</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 游戏获胜信息面板 */</span></span><br><span class="line"><span class="selector-class">.game-message</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">69</span>, <span class="number">133</span>, <span class="number">136</span>, <span class="number">0.4</span>);</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* winner 获胜者 */</span></span><br><span class="line"><span class="selector-class">.game-message</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">180px</span> <span class="number">0</span> <span class="number">40px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 重新开始游戏按钮 */</span></span><br><span class="line"><span class="selector-class">.game-message</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#517304</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#517304</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">110px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* x 玩家 */</span></span><br><span class="line"><span class="selector-class">.cell</span><span class="selector-class">.x</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#01a8c6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* o 玩家 */</span></span><br><span class="line"><span class="selector-class">.cell</span><span class="selector-class">.o</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#8fbe01</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="10-0-2-标签解"><a href="#10-0-2-标签解" class="headerlink" title="10.0.2 标签解"></a>10.0.2 标签解</h4><h5 id="1-cursor-pointer"><a href="#1-cursor-pointer" class="headerlink" title="1.cursor: pointer"></a>1.cursor: pointer</h5><p>cursor 属性规定要显示的光标的类型（形状）。</p>
<p><a href="https://www.w3school.com.cn/cssref/pr_class_cursor.asp">https://www.w3school.com.cn/cssref/pr_class_cursor.asp</a></p>
<p>pointer    光标呈现为指示链接的指针（一只手）</p>
<h5 id="2-content-‘X’"><a href="#2-content-‘X’" class="headerlink" title="2. content: ‘X’;"></a>2. content: ‘X’;</h5><p>content 属性与 :before 及 :after 伪元素配合使用，来插入生成内容。</p>
<p><a href="https://www.runoob.com/cssref/pr-gen-content.html">https://www.runoob.com/cssref/pr-gen-content.html</a></p>
<p>插入 ‘X’</p>
<h5 id="3-not-x-not-o"><a href="#3-not-x-not-o" class="headerlink" title="3. :not(.x):not(.o)"></a>3. :not(.x):not(.o)</h5><p>:not(<em>selector</em>) 选择器匹配非指定元素/选择器的每个元素。</p>
<p><a href="https://www.w3school.com.cn/cssref/selector_not.asp">https://www.w3school.com.cn/cssref/selector_not.asp</a></p>
<h5 id="4-game-board-x"><a href="#4-game-board-x" class="headerlink" title="4. .game-board.x"></a>4. .game-board.x</h5><p>同时包含两个类，同时包含 game-board 与 x 的class; </p>
<blockquote>
<p>必须一个class里面有这两个都在，才会有效果</p>
</blockquote>
<p>如果是分隔开：<code>.game-board .x</code>表示同时赋予这两个类各种属性</p>
<blockquote>
<p>两个class ；</p>
</blockquote>
<h4 id="10-0-3-flex布局"><a href="#10-0-3-flex布局" class="headerlink" title="10.0.3 flex布局"></a>10.0.3 flex布局</h4><blockquote>
<p>我想：为什么不 display：inline ；因为内联元素没有宽度。</p>
<p>宽度就是它的文字或图片的宽度，不可改变。</p>
<p><img src="https://i.loli.net/2020/08/09/pM4REPJYef51Tnq.png" alt="1"></p>
</blockquote>
<ol start="2">
<li><p>flex布局是什么？</p>
<p>flex布局语法：<a href="https://www.runoob.com/w3cnote/flex-grammar.html">https://www.runoob.com/w3cnote/flex-grammar.html</a></p>
<p>display:flex 布局–简书：<a href="https://www.jianshu.com/p/d9373a86b748/">https://www.jianshu.com/p/d9373a86b748/</a></p>
<p><a href="https://www.bilibili.com/video/BV14J4114768?p=416">黑马link老师</a>–不过这里讲的主要是为移动端服务</p>
</li>
</ol>
<hr>
<h3 id="10-1-游戏准备"><a href="#10-1-游戏准备" class="headerlink" title="10.1 游戏准备"></a>10.1 游戏准备</h3><h4 id="10-1-1-游戏演示"><a href="#10-1-1-游戏演示" class="headerlink" title="10.1.1 游戏演示"></a>10.1.1 游戏演示</h4><p>玩法：两个玩家，一个玩家使用（X），一个玩家使用（O），轮流在棋盘上下棋（点击单元格）。</p>
<p>获胜条件：横、竖、斜（对角线）三个棋子相同。<br>平局：棋盘满子，但是，不满足任何一种获胜条件。</p>
<h4 id="10-1-2-游戏模板说明"><a href="#10-1-2-游戏模板说明" class="headerlink" title="10.1.2 游戏模板说明"></a>10.1.2 游戏模板说明</h4><p>重点：运用学到的 TS 知识，来开发下棋游戏。<br>游戏的模板（HTML、CSS），已准备好，直接使用即可。</p>
<p>模板（HTML、CSS）的说明：</p>
<ol>
<li><p>下一步提示：给游戏面板（#bord）标签，添加 x 或 o 类名。</p>
</li>
<li><p>下棋（点击单元格）：给单元格（.cell）标签，添加 x 或 o 类名。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* x 玩家 */</span></span><br><span class="line"><span class="selector-class">.cell</span><span class="selector-class">.x</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#01a8c6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* o 玩家 */</span></span><br><span class="line"><span class="selector-class">.cell</span><span class="selector-class">.o</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#8fbe01</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li>展示和隐藏获胜信息：设置获胜信息面板（#message）标签的样式属性 display。</li>
</ol>
<h3 id="10-2-点击下棋"><a href="#10-2-点击下棋" class="headerlink" title="10.2 点击下棋"></a>10.2 点击下棋</h3><h4 id="10-2-1-单元格点击"><a href="#10-2-1-单元格点击" class="headerlink" title="10.2.1 单元格点击"></a>10.2.1 单元格点击</h4><p>效果：点击棋盘的任意单元格，单元格显示 X（默认）。</p>
<ol>
<li><p>获取到所有的单元格列表。</p>
</li>
<li><p>遍历单元格列表，给每一个单元格添加点击事件。</p>
<blockquote>
<p><a href="../26-typescript_introduction/#2-事件对象">event笔记所在处</a>；</p>
</blockquote>
</li>
<li><p>给当前被点击的单元格添加类名 x。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 获取到所有的单元格列表</span></span><br><span class="line"><span class="keyword">let</span> cells = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.cell&#x27;</span>)</span><br><span class="line"><span class="comment">//console.log(cells)</span></span><br><span class="line"><span class="comment">// 2. 遍历单元格列表</span></span><br><span class="line">cells.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(item)</span></span><br><span class="line">    <span class="comment">// 2.1 给每一个单元格添加点击事件</span></span><br><span class="line">    <span class="keyword">let</span> cell_2 = item <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">    cell_2.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>)</span>&#123;</span><br><span class="line">      <span class="comment">// console.log(&#x27;click&#x27;) // 打印出点击事件本身</span></span><br><span class="line">      <span class="comment">// console.log(&#x27;click&#x27;, event.target)</span></span><br><span class="line">      <span class="comment">// 2.2 获取事件对象的元素；</span></span><br><span class="line">      <span class="keyword">let</span> target = event.target <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">      <span class="comment">// 3. 给当前被点击的单元格添加类名 x。</span></span><br><span class="line">      target.classList.add(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>回溯一下；</p>
<blockquote>
<p>4.1 我们要点击棋盘的任意单元格，单元格显示 X</p>
<p>4.2 得获取到所有单元格；</p>
<p><code>let cells = document.querySelectorAll(&#39;.cell&#39;)</code></p>
<p>4.3 获取到所有单元格后，它cells，成了一个数组。直接用它不行，一点全有效；得单独每个有效；获取到每一个，遍历；</p>
<p><code>cells.forEach(function (item) &#123;&#125;</code></p>
<p>4.4 获取到每一个后，添加点击事件；</p>
<p>4.4.1 item没有添加事件addEventListener的方法？是类型出错，类型注解；</p>
<p><code>let cell_2 = item as HTMLDivElement</code></p>
<p>4.4.2 添加点击事件；</p>
<p><code>cell_2.addEventListener(&#39;click&#39;, function ()&#123;&#125;</code></p>
<p>4.5 点击完成后，需要每次点击会添加一个x的class类；</p>
<p>4.5.1 找到相应的dom</p>
<p><code>cell_2.addEventListener(&#39;click&#39;, function (event)&#123;&#125;</code></p>
<p>4.5.2 添加类</p>
<p><code>event.target.classList.add(&#39;x&#39;)</code></p>
<p>报错找不到方法；</p>
<p>我们已知对应的dom是html的那边，找到相应的地方，vscode鼠标移动到。emm看不到？div看不到么。是div，类型注解它</p>
<p><code>let target = event.target as HTMLDivElement</code></p>
<p>再次添加类</p>
<p><code>event.target.classList.add(&#39;x&#39;)</code></p>
<p>over；</p>
</blockquote>
</li>
</ol>
<p>优化（1）：防止单元格重复点击，在添加事件时，使用 once 属性，让单元格只能被点击一次。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cells = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.cell&#x27;</span>)</span><br><span class="line">cells.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cell_2 = item <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">    cell_2.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> target = event.target <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">      target.classList.add(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    &#125;, &#123; once: <span class="literal">true</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在9.3.5.3.3有说once；</p>
</blockquote>
<p>优化（2）：使用函数声明形式的事件处理程序（代码多了后，代码结构会更清晰）。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cells = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.cell&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickCell</span> (<span class="params">event</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> target = event.target <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">      target.classList.add(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">cells.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cell_2 = item <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">    cell_2.addEventListener(<span class="string">&#x27;click&#x27;</span>, clickCell, &#123; once: <span class="literal">true</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>所以还是回到了我喜欢的模样；看我把forEach也拿出来；</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1-1. 获取到所有的单元格列表</span></span><br><span class="line"><span class="keyword">let</span> cells = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.cell&#x27;</span>)</span><br><span class="line"><span class="comment">//console.log(cells)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach_1</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(item)</span></span><br><span class="line">    <span class="comment">// 1-2.1 给每一个单元格添加点击事件</span></span><br><span class="line">    <span class="keyword">let</span> cell_2 = item <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">    cell_2.addEventListener(<span class="string">&#x27;click&#x27;</span>, clickCell, &#123; once: <span class="literal">true</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickCell</span> (<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;click&#x27;</span>) <span class="comment">// 打印出点击事件本身</span></span><br><span class="line">    <span class="comment">// 1-3. 给当前被点击的单元格添加类名 x</span></span><br><span class="line">    <span class="keyword">let</span> target_3 = event.target <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">    target_3.classList.add(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1-2. 遍历单元格列表</span></span><br><span class="line">cells.forEach(forEach_1)</span><br></pre></td></tr></table></figure>

<p>这样才是最爽的；2020-8-9 12:56:56</p>
<ol start="3">
<li><p>注意</p>
<p>不过这么写，event不会自动给类型注解；</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickCell</span> (<span class="params">event: MouseEvent</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;click&#x27;</span>) <span class="comment">// 打印出点击事件本身</span></span><br><span class="line">    <span class="comment">// 1-3. 给当前被点击的单元格添加类名 x</span></span><br><span class="line">    <span class="keyword">let</span> target_3 = event.target <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">    target_3.classList.add(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以要给类型注解；不然.target不会出；</p>
</li>
<li><p>同理；</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach_1</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(item)</span></span><br><span class="line">    <span class="comment">// 1-2.1 给每一个单元格添加点击事件</span></span><br><span class="line">    <span class="keyword">let</span> cell_2 = item <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">    cell_2.addEventListener(<span class="string">&#x27;click&#x27;</span>, clickCell, &#123; once: <span class="literal">true</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以改为：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach_1</span> (<span class="params">item: HTMLDivElement</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(item)</span></span><br><span class="line">    <span class="comment">// 2.1 给每一个单元格添加点击事件</span></span><br><span class="line">    <span class="comment">// let cell_2 = item as HTMLDivElement</span></span><br><span class="line">    item.addEventListener(<span class="string">&#x27;click&#x27;</span>, clickCell, &#123; once: <span class="literal">true</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="10-2-2-切换玩家"><a href="#10-2-2-切换玩家" class="headerlink" title="10.2.2 切换玩家"></a>10.2.2 切换玩家</h4><p>效果：玩家（X）和玩家（O）轮流交替下棋。</p>
<ol start="0">
<li><p>不能把target_3.classList.add(‘x’)，写死</p>
</li>
<li><p>创建一个存储当前玩家的变量（currentPlayer），默认值为：x。</p>
<blockquote>
<p><a href="https://fanyi.baidu.com/translate?aldtype=16047&query=Counter&keyfrom=baidu&smartresult=dict&lang=auto2zh#en/zh/current">current – 读音</a>；currentPlayer：当前玩家；</p>
</blockquote>
</li>
<li><p>将添加给单元格时写死的类名 x ，替换为变量（currentPlayer）的值。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> currentPlayer = <span class="string">&#x27;x&#x27;</span></span><br><span class="line">target_3.classList.add(currentPlayer)</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li><p>切换到另一个玩家：在添加类名（下棋完成一步）后，根据当前玩家，得到另外一个玩家。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickCell</span> (<span class="params">event: MouseEvent</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;click&#x27;</span>) <span class="comment">// 打印出点击事件本身</span></span><br><span class="line">    <span class="comment">// 3. 给当前被点击的单元格添加类名 x</span></span><br><span class="line">    <span class="keyword">let</span> target_3 = event.target <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">    target_3.classList.add(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    <span class="comment">// 2-1.关键点：根据当前玩家，得到另一个玩家</span></span><br><span class="line">    currentPlayer = currentPlayer === <span class="string">&#x27;x&#x27;</span> ? <span class="string">&#x27;o&#x27;</span> : <span class="string">&#x27;x&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="4">
<li><p>处理下一步提示：移除游戏面板中的 x 和 o 类名，添加下一个玩家对应的类名。</p>
<blockquote>
<p>4.1 因为html那边是：<code>&lt;div id=&quot;bord&quot; class=&quot;game-board x&quot;&gt;</code></p>
<p>所以下一步提示一直是 X；</p>
<p>4.2 想让提示变成O，得把<code>game-board x</code> 变成<code>game-board o</code></p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2-1.关键点：根据当前玩家，得到另一个玩家</span></span><br><span class="line">currentPlayer = currentPlayer === <span class="string">&#x27;x&#x27;</span> ? <span class="string">&#x27;o&#x27;</span> : <span class="string">&#x27;x&#x27;</span></span><br><span class="line"><span class="comment">// 2-2.处理下一步提示；移除游戏面板中的 x 和 o 类名</span></span><br><span class="line"><span class="comment">// 2-2.1 先拿到对应的元素，正好有id=&#x27;bord&#x27;</span></span><br><span class="line"><span class="keyword">let</span> gameBord = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#bord&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(gameBord) <span class="comment">//看拿到没；</span></span><br><span class="line"><span class="comment">// 2-2.2 移除游戏面板中的 x 和 o 类名</span></span><br><span class="line">gameBord.classList.remov(<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;o&#x27;</span>)<span class="comment">//两个都要，有谁除谁</span></span><br><span class="line"><span class="comment">// 2-2.3 然后添加下一步应该要下的类名；</span></span><br><span class="line">game.Bord.classList.add(currentPlayer)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>突发奇想：如果让先手为o，如何修改？</p>
<p>将 let currentPlayer = ‘x’ 改为   ‘o’ 吗？</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> currentPlayer = <span class="string">&#x27;o&#x27;</span></span><br></pre></td></tr></table></figure>

<p>..2020-8-9 13:46:31</p>
</li>
</ol>
<hr>
<h4 id="10-2-3-枚举"><a href="#10-2-3-枚举" class="headerlink" title="10.2.3 枚举"></a>10.2.3 枚举</h4><h5 id="1-为什么要使用枚举？"><a href="#1-为什么要使用枚举？" class="headerlink" title="1. 为什么要使用枚举？"></a>1. 为什么要使用枚举？</h5><p>使用变量（currentPlayer）处理当前玩家，存在的问题：<br>变量的类型是 string，它的值可以是任意字符串。</p>
<p>如果不小心写错了（o → 0），代码不会报错，但功能就无法实现了，并且很难找错。</p>
<p>也就是：string 类型的变量，取值太宽泛，无法很好的限制值为 x 和 o。</p>
<p><font color='red'>枚举</font>是组织有关联数据的一种方式（比如，x 和 o 就是有关联的数据）。</p>
<p>使用场景：当变量的值， <red>只能是几个固定值中的一个</red>，应该使用<red>枚举</red>来实现。</p>
<p>注意：<font color='red'>JS 中没有枚举</font>，这是TS为了弥补 JS 自身不足而新增的。</p>
<h5 id="2-语法"><a href="#2-语法" class="headerlink" title="2. 语法"></a>2. 语法</h5><p>创建枚举的语法：</p>
<p><code>enum 枚举名称 &#123; 成员1, 成员2, ... &#125;</code></p>
<p>enum是关键字，只有使用它创建；</p>
<p>示例：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Gender</span> &#123; <span class="title">Female</span>, <span class="title">Male</span> &#125;</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Player</span> &#123; <span class="title">X</span>, <span class="title">O</span> &#125;</span></span><br></pre></td></tr></table></figure>

<p>约定枚举名称、<strong>成员名称</strong>以<red>大</red>写字母开头。</p>
<blockquote>
<p>所以这里原本是小写的x和o，也是大写X,O；</p>
</blockquote>
<p>多个成员之间使用逗号（,）分隔。</p>
<p>枚举中的成员哪来的？自己定的</p>
<p>注意：枚举中的成员，根据功能自己指定！</p>
<p>注意：枚举中的成员不是键值对！</p>
<h5 id="3-使用枚举"><a href="#3-使用枚举" class="headerlink" title="3. 使用枚举"></a>3. 使用枚举</h5><p>枚举是一种类型，因此，<strong>可以其作为变量的类型注解</strong>。</p>
<blockquote>
<p>就像string，number一样；接口也是一种类型。emmm</p>
</blockquote>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Gender</span> &#123; <span class="title">Female</span>, <span class="title">Male</span> &#125;</span></span><br><span class="line">let <span class="symbol">userGender:</span> Gender</span><br></pre></td></tr></table></figure>

<blockquote>
<p>视频说的是，得类型注解了，才能访问枚举中的成员；</p>
<p>let userGender: Gender；才能  userGender = Gender.Female</p>
<p>未实验；2020-8-10 05:14:08</p>
</blockquote>
<p>访问枚举（Gender）中的成员，作为变量（userGender）的值：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">userGender</span> = Gender.Female</span><br><span class="line"><span class="attr">userGender</span> = Gender.Male</span><br></pre></td></tr></table></figure>

<p>注意：枚举成员是只读的，也就是说枚举中的成员可以访问，但是不能赋值！</p>
<p><code>Gender.Female = &#39;男&#39; // 错误！</code></p>
<h5 id="4-问题：将枚举成员赋值给变量，变量的值是什么呢？"><a href="#4-问题：将枚举成员赋值给变量，变量的值是什么呢？" class="headerlink" title="4. 问题：将枚举成员赋值给变量，变量的值是什么呢？"></a>4. 问题：将枚举成员赋值给变量，变量的值是什么呢？</h5><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> Gender &#123; Female, Male &#125;</span><br><span class="line"><span class="keyword">let</span> userGender: Gender = Gender.Female</span><br><span class="line"><span class="built_in">console</span>.log(userGender) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(Gender.Female) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(Gender.Male) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p><strong>枚举成员是有值的</strong>，默认为：从 0 开始自增的数值。<br>我们把，枚举成员的值为数字的枚举，称为：<red>数字枚举</red>。</p>
<blockquote>
<p>什么？值不是成员本身么，打印出来居然是数字；</p>
<p>不过由这句话得出：枚举成员的值为数字的枚举，也有值不是数字的枚举；</p>
</blockquote>
<p>当然，也可以给枚举中的成员初始化值。</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Gender</span> </span>&#123; Female = <span class="number">1</span>, Male &#125;  <span class="comment">// Female =&gt; 1 Male =&gt; 2</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Gender</span> </span>&#123; Female = <span class="number">1</span>, Male = <span class="number">100</span> &#125; <span class="comment">// Female =&gt; 1 Male =&gt; 100</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>没有设置，就自增长；设置了Female = 1，Male默认为1+1；</p>
</blockquote>
<h5 id="5-字符串枚举；"><a href="#5-字符串枚举；" class="headerlink" title="5. 字符串枚举；"></a>5. 字符串枚举；</h5><p>字符串枚举：枚举成员的值是字符串。</p>
<p><code>enum Gender &#123; Female = &#39;女&#39;, Male = &#39;男&#39; &#125;</code></p>
<p>注意：字符串枚举没有自增长行为，因此，<strong>每个成员必须有初始值</strong>。</p>
<blockquote>
<p>如果这样：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Gender</span> &#123;</span></span><br><span class="line"> Female = <span class="string">&#x27;女&#x27;</span>,</span><br><span class="line"> Male,</span><br><span class="line"> A</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么Male与A就会报错；</p>
</blockquote>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">console.<span class="built_in">log</span>(Gender.Female) <span class="comment">// 女</span></span><br><span class="line">console.<span class="built_in">log</span>(Gender.Male) <span class="comment">// 男</span></span><br></pre></td></tr></table></figure>

<h5 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h5><p>两种常用的枚举总结：</p>
<ol>
<li><p>数字枚举：枚举成员的值为数字，默认情况下就是数字枚举。</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Gender</span> </span>&#123; Female, Male &#125;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Gender</span> </span>&#123; Female = <span class="number">100</span>, Male &#125; <span class="comment">// 初始化成员的值</span></span><br></pre></td></tr></table></figure>

<p>特点：成员的值是从 0 开始自增的数值。</p>
</li>
<li><p>字符串枚举：枚举成员的值为字符串。</p>
<p><code>enum Gender &#123; Female = &#39;女&#39;, Male = &#39;男&#39; &#125;</code></p>
<p>特点：没有自增行为，需要为每一个成员赋值！</p>
<p><red>枚举是一组有名字的常量（只读）的集合。</red></p>
</li>
</ol>
<hr>
<h5 id="7-使用枚举修改当前玩家"><a href="#7-使用枚举修改当前玩家" class="headerlink" title="7. 使用枚举修改当前玩家"></a>7. 使用枚举修改当前玩家</h5><p>效果：使用枚举代替原来的字符串类名（x 和 o）。</p>
<ol>
<li>创建字符串枚举（Player），提供 X 和 O 两个成员。</li>
<li>将成员 X 的值设置为：’x’（类名）；将成员 O 的值设置为：’o’（类名）。</li>
<li>将变量（currentPlayer）的类型设置为 Player 枚举类型，默认值为 Player.X。</li>
<li>将所有用到 x 和 o 的地方全部使用枚举成员代替。</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 创建字符串枚举（Player），提供 X 和 O 两个成员</span></span><br><span class="line"><span class="built_in">enum</span> Player &#123;</span><br><span class="line">  <span class="comment">// 2. 将成员 X 的值设置为：&#x27;x&#x27;（类名）；将成员 O 的值设置为：&#x27;o&#x27;（类名）。</span></span><br><span class="line">    X = <span class="string">&#x27;x&#x27;</span></span><br><span class="line">    O = <span class="string">&#x27;o&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当前玩家</span></span><br><span class="line"><span class="comment">// let currentPlayer = x</span></span><br><span class="line"><span class="comment">// 3. 将变量（currentPlayer）的类型设置为 Player 枚举类型; 默认是，不需要设置；</span></span><br><span class="line"><span class="keyword">let</span> currentPlayer = Player.X</span><br><span class="line"><span class="comment">// 4. 将所有用到 x 和 o 的地方全部使用枚举成员代替。</span></span><br><span class="line"><span class="comment">//currentPlayer = currentPlayer === &#x27;x&#x27; ? &#x27;o&#x27; : &#x27;x&#x27;</span></span><br><span class="line">currentPlayer = currentPlayer === Player.X ? Player.O : player.X</span><br><span class="line">gameBord.classList.remove(Player.X, Player.O)</span><br></pre></td></tr></table></figure>

<p>目前完整版：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 获取到所有的单元格列表</span></span><br><span class="line"><span class="keyword">let</span> cells = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.cell&#x27;</span>)</span><br><span class="line"><span class="comment">//console.log(cells)</span></span><br><span class="line"><span class="comment">// 3-1. 创建字符串枚举（Player），提供 X 和 O 两个成员</span></span><br><span class="line"><span class="built_in">enum</span> Player &#123;</span><br><span class="line">    X = <span class="string">&#x27;x&#x27;</span>,</span><br><span class="line">    O = <span class="string">&#x27;o&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3-2. 将所有用到 x 和 o 的地方全部使用枚举成员代替。</span></span><br><span class="line"><span class="comment">//let currentPlayer = &#x27;x&#x27;</span></span><br><span class="line"><span class="keyword">let</span> currentPlayer = Player.X</span><br><span class="line"><span class="keyword">let</span> gameBord = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#bord&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach_1</span> (<span class="params">item: HTMLDivElement</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(item)</span></span><br><span class="line">    <span class="comment">// 2.1 给每一个单元格添加点击事件</span></span><br><span class="line">    <span class="comment">// let cell_2 = item as HTMLDivElement</span></span><br><span class="line">    item.addEventListener(<span class="string">&#x27;click&#x27;</span>, clickCell, &#123; once: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;click&#x27;</span>) <span class="comment">// 打印出点击事件本身</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickCell</span> (<span class="params">event: MouseEvent</span>)</span>&#123;  </span><br><span class="line">    <span class="comment">// 3. 给当前被点击的单元格添加类名 x</span></span><br><span class="line">    <span class="keyword">let</span> target_3 = event.target <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">    target_3.classList.add(currentPlayer)</span><br><span class="line">    <span class="comment">// 根据当前玩家，得到另一个玩家</span></span><br><span class="line">    currentPlayer = currentPlayer === Player.X ? Player.O : Player.X</span><br><span class="line">    <span class="comment">// 改变下一步提示；</span></span><br><span class="line">    gameBord.classList.remove(Player.X, Player.O)</span><br><span class="line">    gameBord.classList.add(currentPlayer)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 遍历单元格列表</span></span><br><span class="line">cells.forEach(forEach_1)</span><br></pre></td></tr></table></figure>

<br />

<hr>
<h3 id="10-3-游戏判赢"><a href="#10-3-游戏判赢" class="headerlink" title="10.3 游戏判赢"></a>10.3 游戏判赢</h3><h4 id="10-3-1-判赢思路"><a href="#10-3-1-判赢思路" class="headerlink" title="10.3.1 判赢思路"></a>10.3.1 判赢思路</h4><p>思路：判断棋盘中，横、竖、斜（对角线）是否存在三个相同的 x 或 o。</p>
<p>只要有一个满足条件，就说明 x 或 o 获胜了。<br>如果所有单元格都有内容，但没有获胜的情况，就说明是平局。<br>如何判断？</p>
<ol>
<li><p>单元格元素列表（ cells ）中，每个单元格元素都有自己的索引，如下图所示：</p>
<p><code>console.log(cells)</code>可以看到</p>
<p><img src="https://i.loli.net/2020/08/10/wXyWEAuZsUH8a7B.png" alt=""></p>
</li>
<li><p>每个单元格都有自己的索引，如图：</p>
<p><img src="https://i.loli.net/2020/08/10/aSf7wKJ1n8sT3qA.png" alt="2"></p>
</li>
<li><p>使用单元格索引，来表示每种获胜情况（使用数组来存储，比如： [0, 1, 2] ）。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获胜的所有情况（8 种）：</span></span><br><span class="line">[</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], <span class="comment">// 横</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>], [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>], [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>], <span class="comment">// 竖</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>] <span class="comment">// 斜</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>然后，使用一个“大”数组（外层），来存储这  8 种情况（因为每次判赢都要判断所有情况）。<br>判断过程：遍历这个大数组，分别判断每一种情况对应的  3 个单元格元素，是否都是相同的  x 或  o 类名。<br>只要有一种情况满足，就说明获胜了。</p>
<blockquote>
<p>数组的元素可以是数组；</p>
</blockquote>
</li>
</ol>
<hr>
<h4 id="10-3-2-分析盘赢数组"><a href="#10-3-2-分析盘赢数组" class="headerlink" title="10.3.2 分析盘赢数组"></a>10.3.2 分析盘赢数组</h4><p>数组的基本结构：<code>[ 元素1, 元素2, ... ]</code></p>
<p>判赢数组：每个元素又是数组（二维数组，概念知道即可）。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">let winsArr = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>只要是数组用法都一样，比如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">// 访问数组元素：</span><br><span class="line">winsArr[0] // [0, 1, 2]</span><br><span class="line">winsArr[<span class="string">0</span>][<span class="symbol">1</span>] // 1</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>winsArr[0][1]</code></p>
<ol>
<li>winsArr[0] = [0, 1, 2]</li>
<li><code>winsArr[0][1]</code>=[0, 1, 2]里，索引为1的元素=1；</li>
</ol>
</blockquote>
<h4 id="10-3-3-单元格元素列表说明"><a href="#10-3-3-单元格元素列表说明" class="headerlink" title="10.3.3 单元格元素列表说明"></a>10.3.3 单元格元素列表说明</h4><p>单元格元素列表（cells），实际上是一个<red>伪数组</red>。</p>
<p>伪数组的特征：具有长度（length）属性和索引。</p>
<p><img src="https://i.loli.net/2020/08/10/wXyWEAuZsUH8a7B.png" alt=""></p>
<p>伪数组的操作：1 通过索引获取元素 2 使用 for 循环遍历（推荐使用 forEach 方法） 。</p>
<ol>
<li><p>通过索引获取元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">console</span><span class="selector-class">.log</span>(<span class="selector-tag">cells</span><span class="selector-attr">[0]</span>)</span><br><span class="line"><span class="selector-tag">console</span><span class="selector-class">.log</span>(<span class="selector-tag">cells</span><span class="selector-attr">[1]</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 for 循环遍历</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (let <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; cells.<span class="built_in">length</span>; <span class="built_in">i</span>++) &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(cells[<span class="built_in">i</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用forEach遍历</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach_cells</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line">cells.forEach(forEach_cells)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<br />

<hr>
<h4 id="10-3-4-封装判赢函数"><a href="#10-3-4-封装判赢函数" class="headerlink" title="10.3.4 封装判赢函数"></a>10.3.4 封装判赢函数</h4><ol>
<li><p>封装函数，主要考虑：参数和返回值。</p>
<p>该函数的返回值是什么？  布尔值（判断<red>是否</red>获胜）</p>
<p>该函数的有参数吗？是什么？   当前玩家</p>
<p>说明：判赢，就是在判断当前玩家下棋后是否获胜（玩家没下棋，不可能获胜，不需要判断）。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明函数：</span></span><br><span class="line"><span class="keyword">function</span> check<span class="constructor">Win(<span class="params">player</span>: Player)</span>: boolean &#123;&#125;</span><br><span class="line"><span class="comment">// 调用函数：</span></span><br><span class="line"><span class="keyword">let</span> isWin = check<span class="constructor">Win(<span class="params">currentPlayer</span>)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>函数的参数是当前玩家，于是指定了一个形参：player</p>
<p>它的类型是：枚举player；∴ （player：player）</p>
<p>因为在代码中，是使用枚举来指定玩家的；</p>
</blockquote>
<blockquote>
<p>调用函数：</p>
<p>checkWin(currentPlayer) 当前玩家=currentPlayer，作为一个参数传递给函数checkWin</p>
<p>然后返回布尔值；给isWin；</p>
</blockquote>
<p>想不出返回值和参数怎么办？</p>
<p>技巧：如果想不到返回值和参数，可以反推，也就是从如何调用函数的角度来分析。</p>
<blockquote>
<ol>
<li><p>假如没有声明函数；</p>
<p>只有调用函数，或者是说，从调用函数开始思考</p>
</li>
<li><p>假设我们要封装的，需要被调用的，函数叫：checkWin；当然这个名字是任意的</p>
</li>
<li><p>然后想：这个函数要干嘛呢？要判赢；要通过它的返回值告诉我；</p>
<p>所以返回值类型应该是个 布尔值</p>
</li>
<li><p>我要判赢，我要判断谁赢呢？是当前玩家，那就把当前玩家=currentPlayer作为 参数 传递给声明函数的参数使用；</p>
</li>
</ol>
</blockquote>
</li>
<li><p>问题：什么时候判赢？ 玩家下棋后，或下棋时；</p>
</li>
<li><p>思路：</p>
<ol>
<li>声明函数（checkWin），指定参数（player），类型注解为：Player 枚举。</li>
<li>指定返回值：现在函数中写死返回 true 或 false。</li>
<li>在给单元格添加类名后（下棋后），调用函数 checkWin，拿到函数返回值。</li>
<li>判断函数返回值是否为 true，如果是，说明当前玩家获胜了。</li>
</ol>
</li>
<li><p>编码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装判赢函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkWin</span>(<span class="params">player: Player</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span> <span class="comment">//在写return true后，会自动给checkWin(player: Player)分配类型注解</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br />

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用判赢函数，判断是否获胜</span></span><br><span class="line"><span class="comment">// 因为是在玩家下棋时判断，所以在点击事件函数里面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickCell</span> (<span class="params">event: MouseEvent</span>)</span>&#123;  </span><br><span class="line">    <span class="comment">// 3. 给当前被点击的单元格添加类名 x</span></span><br><span class="line">    <span class="keyword">let</span> target_3 = event.target <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">    target_3.classList.add(currentPlayer)</span><br><span class="line">  <span class="comment">// 调用判赢函数，判断是否获胜</span></span><br><span class="line">  <span class="comment">// 只要把当前下棋玩家判断，也就判断了每一步</span></span><br><span class="line">  <span class="keyword">let</span> isWin = checkWin(currentPlayer)</span><br><span class="line">  <span class="keyword">if</span> (isWin) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;当前玩家获胜&#x27;</span>, currentPlayer)</span><br><span class="line">    <span class="comment">// 此时用console.log(&#x27;当前玩家获胜&#x27;, currentPlayer)来检测一下编码是否正确，有效</span></span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 根据当前玩家，得到另一个玩家</span></span><br><span class="line">    currentPlayer = currentPlayer === Player.X ? Player.O : Player.X</span><br><span class="line">    <span class="comment">// 改变下一步提示；</span></span><br><span class="line">    gameBord.classList.remove(Player.X, Player.O)</span><br><span class="line">    gameBord.classList.add(currentPlayer)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>因为当前写死了 return true；</p>
<p>所以每次点击一下，就会有 当前玩家获胜 与 当前玩家（也就是下棋模样，下的X，就是x玩家，下的O，就是o玩家）</p>
</blockquote>
</li>
</ol>
<hr>
<h4 id="10-3-5-实习判赢函数"><a href="#10-3-5-实习判赢函数" class="headerlink" title="10.3.5 实习判赢函数"></a>10.3.5 实习判赢函数</h4><p>思路：</p>
<p>遍历判赢数组，分别判断每种情况对应的  3 个单元格元素，是否同时包含当前玩家的类名。</p>
<p>问题：使用哪种方式遍历数组呢？</p>
<p><strong>只要有一种情况满足</strong>，就表示玩家获胜，后续的情况就没有必要再遍历，因此，数组遍历时可以终止。</p>
<p>判赢函数的返回值是布尔类型，如果玩家获胜（有一种情况满足），就返回 true；否则，返回 false。</p>
<p>数组的  some 方法：1 遍历数组时可终止 2 方法返回值为 true 或 false。</p>
<ol>
<li>使用 some 方法遍历数组，并将 some 方法的返回值作为判赢函数的返回结果。</li>
<li>在 some 方法的回调函数中，获取到每种获胜情况对应的 3 个单元格元素。</li>
<li>判断这 3 个单元格元素是否同时包含当前玩家的类名。</li>
<li>如果包含（玩家获胜），就在回调函数中返回 true 停止循环；否则，返回 false，继续下一次循环。</li>
</ol>
<p>先把判赢数组写上：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 10.3.5-1判赢数组</span></span><br><span class="line"><span class="keyword">let</span> winsArr = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], <span class="comment">//横</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>], [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>], [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>], <span class="comment">// 竖</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>] <span class="comment">//斜</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 获取到所有的单元格列表</span></span><br><span class="line"><span class="keyword">let</span> cells = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.cell&#x27;</span>)</span><br><span class="line"><span class="comment">// console.log(cells)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3-1. 创建字符串枚举（Player），提供 X 和 O 两个成员</span></span><br><span class="line"><span class="built_in">enum</span> Player &#123;</span><br><span class="line">    X = <span class="string">&#x27;x&#x27;</span>,</span><br><span class="line">    O = <span class="string">&#x27;o&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3-2. 将所有用到 x 和 o 的地方全部使用枚举成员代替。</span></span><br><span class="line"><span class="comment">//let currentPlayer = &#x27;x&#x27;</span></span><br><span class="line"><span class="keyword">let</span> currentPlayer = Player.X</span><br><span class="line"><span class="keyword">let</span> gameBord = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#bord&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach_1</span>(<span class="params">item: HTMLDivElement</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(item)</span></span><br><span class="line">    <span class="comment">// 2.1 给每一个单元格添加点击事件</span></span><br><span class="line">    <span class="comment">// let cell_2 = item as HTMLDivElement</span></span><br><span class="line">    item.addEventListener(<span class="string">&#x27;click&#x27;</span>, clickCell, &#123; once: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="comment">// console.log(&#x27;click&#x27;) // 打印出点击事件本身</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickCell</span>(<span class="params">event: MouseEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 3. 给当前被点击的单元格添加类名 x</span></span><br><span class="line">    <span class="keyword">let</span> target_3 = event.target <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">    target_3.classList.add(currentPlayer)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 10.3.4-2. 调用判赢函数，判断是否获胜;因为是在玩家下棋时判断，所以在点击事件函数里面</span></span><br><span class="line">    <span class="keyword">let</span> isWin = checkWin(currentPlayer)</span><br><span class="line">    <span class="keyword">if</span> (isWin = <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 此时用console.log(&#x27;当前玩家获胜&#x27;, currentPlayer)来检测一下编码是否正确，有效</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;当前玩家获胜&#x27;</span>, currentPlayer)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据当前玩家，得到另一个玩家</span></span><br><span class="line">    currentPlayer = currentPlayer === Player.X ? Player.O : Player.X</span><br><span class="line">    <span class="comment">// 改变下一步提示；</span></span><br><span class="line">    gameBord.classList.remove(Player.X, Player.O)</span><br><span class="line">    gameBord.classList.add(currentPlayer)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 伪数组cells的遍历；</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach_cells</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.3.4-1. 封装判赢函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkWin</span>(<span class="params">player: Player</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 10.3.5-2. 取消写死的 判赢返回值</span></span><br><span class="line">      <span class="comment">// return true</span></span><br><span class="line">      <span class="comment">// 10.3.5-3. 使用 some 方法遍历数组，并将 some 方法的返回值作为判赢函数的返回结果。</span></span><br><span class="line">    <span class="keyword">let</span> isWin = winsArr.some(some_isWin)</span><br><span class="line">    <span class="keyword">return</span> isWin</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">some_isWin</span> (<span class="params">item</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 10.3.5-4. 在 some 方法的回调函数中，获取到每种获胜情况对应的 3 个单元格元素。</span></span><br><span class="line">  <span class="comment">// 4.1 先拿到每种获胜情况的三个索引</span></span><br><span class="line">  <span class="comment">// 4.1.1 看一下item拿到winsArr的元素没</span></span><br><span class="line">  <span class="comment">// 4.1.2 要注意，checkWin在函数 clickCell 里面，是一个点击事件，点击才有效果</span></span><br><span class="line">  <span class="built_in">console</span>.log(item) </span><br><span class="line">  <span class="comment">// 继续 4.1</span></span><br><span class="line">  <span class="keyword">let</span> cellIndex1 = item[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> cellIndex2 = item[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">let</span> cellIndex3 = item[<span class="number">2</span>]</span><br><span class="line">  <span class="comment">// 4.1.3 打印实验，拿到每种获胜情况的三个索引</span></span><br><span class="line">  <span class="comment">//console.log(cellIndex1,cellIndex2,cellIndex3)</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 4.2 通过这三个索引，从cells中获取到对应的单元格元素</span></span><br><span class="line">  <span class="comment">// 从 4.1.3 过来后</span></span><br><span class="line">  <span class="comment">// 前面拿索引，这一步拿格子</span></span><br><span class="line">  <span class="keyword">let</span> cell1 = cells[cellIndex1]</span><br><span class="line">  <span class="keyword">let</span> cell2 = cells[cellIndex2]</span><br><span class="line">  <span class="keyword">let</span> cell3 = cells[cellIndex3]</span><br><span class="line">  <span class="comment">// console.log(cell1, cell2, cell3)</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 4.2 完成后干嘛？拿到了格子，要判断格子是否满足条件；</span></span><br><span class="line">  <span class="comment">// 我们看我们的函数，是some_isWin,它被let isWin = winsArr.some(some_isWin)用着</span></span><br><span class="line">  <span class="comment">// 被一个some用着，那必须要返回布尔值；</span></span><br><span class="line">  <span class="comment">// 那么这个判断依然在这里面写；</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 10.3.5-5 </span></span><br><span class="line">  <span class="comment">// 判断这 3 个单元格元素是否同时包含当前玩家的类名。</span></span><br><span class="line">  <span class="comment">// 重点：</span></span><br><span class="line">  <span class="comment">// 5.1. 元素是否包含类名 classList.contains();可以去文章1查</span></span><br><span class="line">  <span class="comment">// 5.2. 同时包含（第一个包含 并且 第二个包含，第三个包含）</span></span><br><span class="line">  <span class="comment">// 5.3. 逻辑运算符 &amp;&amp; 逻辑与，表示并且</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">      cell1.classList.contains(player) &amp;&amp;</span><br><span class="line">    cell2.classList.contains(player) &amp;&amp;</span><br><span class="line">    cell3.classList.contains(player)</span><br><span class="line">    <span class="comment">// 此处player报错，千方百计，只好把全部重写回调里面去；</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 遍历单元格列表</span></span><br><span class="line">cells.forEach(forEach_1)</span><br><span class="line"><span class="comment">// cells.forEach(forEach_cells)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此处player报错，千方百计，只好把全部重写回调里面去；</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 10.3.5-1判赢数组</span></span><br><span class="line"><span class="keyword">let</span> winsArr = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], <span class="comment">//横</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>], [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>], [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>], <span class="comment">// 竖</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>] <span class="comment">//斜</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3-1. 创建字符串枚举（Player），提供 X 和 O 两个成员</span></span><br><span class="line"><span class="built_in">enum</span> Player &#123;</span><br><span class="line">    X = <span class="string">&#x27;x&#x27;</span>,</span><br><span class="line">    O = <span class="string">&#x27;o&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 获取到所有的单元格列表</span></span><br><span class="line"><span class="keyword">let</span> cells = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.cell&#x27;</span>)</span><br><span class="line"><span class="comment">// console.log(cells)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3-2. 将所有用到 x 和 o 的地方全部使用枚举成员代替。</span></span><br><span class="line"><span class="comment">// let currentPlayer = &#x27;x&#x27;</span></span><br><span class="line"><span class="keyword">let</span> currentPlayer = Player.X</span><br><span class="line"><span class="keyword">let</span> gameBord = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#bord&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach_1 &gt; clickCell &gt; checkWin &gt; some_isWin</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach_1</span>(<span class="params">item: HTMLDivElement</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log(item)</span></span><br><span class="line">    <span class="comment">// 2.1 给每一个单元格添加点击事件</span></span><br><span class="line">    <span class="comment">// let cell_2 = item as HTMLDivElement</span></span><br><span class="line">    item.addEventListener(<span class="string">&#x27;click&#x27;</span>, clickCell, &#123; once: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="comment">// console.log(&#x27;click&#x27;) // 打印出点击事件本身</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickCell</span>(<span class="params">event: MouseEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 3. 给当前被点击的单元格添加类名 x</span></span><br><span class="line">    <span class="keyword">let</span> target_3 = event.target <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">    target_3.classList.add(currentPlayer)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 10.3.4-2. 调用判赢函数，判断是否获胜;因为是在玩家下棋时判断，所以在点击事件函数里面</span></span><br><span class="line">    <span class="keyword">let</span> isWin = checkWin(currentPlayer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isWin = <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 此时用console.log(&#x27;当前玩家获胜&#x27;, currentPlayer)来检测一下编码是否正确，有效</span></span><br><span class="line">        <span class="comment">// console.log(&#x27;当前玩家获胜&#x27;, currentPlayer)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据当前玩家，得到另一个玩家</span></span><br><span class="line">    currentPlayer = currentPlayer === Player.X ? Player.O : Player.X</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 改变下一步提示；</span></span><br><span class="line">    gameBord.classList.remove(Player.X, Player.O)</span><br><span class="line">    gameBord.classList.add(currentPlayer)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.3.4-1. 封装判赢函数</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">checkWin</span>(<span class="params"> player: Player </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 10.3.5-2. 取消写死的 判赢返回值</span></span><br><span class="line">  <span class="comment">// return true</span></span><br><span class="line">  <span class="comment">// 10.3.5-3. 使用 some 方法遍历数组，并将 some 方法的返回值作为判赢函数的返回结果。</span></span><br><span class="line">  <span class="keyword">let</span> isWin = winsArr.some(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 10.3.5-4. 在 some 方法的回调函数中，获取到每种获胜情况对应的 3 个单元格元素。</span></span><br><span class="line">    <span class="comment">// 4.1 先拿到每种获胜情况的三个索引</span></span><br><span class="line">    <span class="comment">// 看一下item拿到winsArr的元素没</span></span><br><span class="line">    <span class="comment">// 要注意，checkWin在函数 clickCell 里面，是一个点击事件，点击才有效果</span></span><br><span class="line">    <span class="built_in">console</span>.log(item) </span><br><span class="line">    <span class="keyword">let</span> cellIndex1 = item[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> cellIndex2 = item[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">let</span> cellIndex3 = item[<span class="number">2</span>]</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 4.1.1 打印实验：每种获胜情况的三个索引</span></span><br><span class="line">    <span class="comment">// console.log(cellIndex1,cellIndex2,cellIndex3)</span></span><br><span class="line">    <span class="comment">// 4.2 通过这三个索引，从cells中获取到对应的单元格元素</span></span><br><span class="line">    <span class="comment">// 从 4.1.3 过来后</span></span><br><span class="line">    <span class="comment">// 前面拿索引，这一步拿格子</span></span><br><span class="line">    <span class="keyword">let</span> cell1 = cells[cellIndex1]</span><br><span class="line">    <span class="keyword">let</span> cell2 = cells[cellIndex2]</span><br><span class="line">    <span class="keyword">let</span> cell3 = cells[cellIndex3]</span><br><span class="line">    <span class="built_in">console</span>.log(cell1, cell2, cell3)</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 4.2 完成后干嘛？拿到了格子，要判断格子是否满足条件；</span></span><br><span class="line">    <span class="comment">// 我们看我们的函数，是some_isWin,它被let isWin = winsArr.some(some_isWin)用着</span></span><br><span class="line">    <span class="comment">// 被一个some用着，那必须要返回布尔值；</span></span><br><span class="line">    <span class="comment">// 那么这个判断依然在这里面写；</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 10.3.5-5 </span></span><br><span class="line">    <span class="comment">// 判断这 3 个单元格元素是否同时包含当前玩家的类名。</span></span><br><span class="line">    <span class="comment">// 重点：</span></span><br><span class="line">    <span class="comment">// 5.1. 元素是否包含类名 classList.contains();可以去文章1查</span></span><br><span class="line">    <span class="comment">// 5.2. 同时包含（第一个包含 并且 第二个包含，第三个包含）</span></span><br><span class="line">    <span class="comment">// 5.3. 逻辑运算符 &amp;&amp; 逻辑与，表示并且</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      cell1.classList.contains(player) &amp;&amp;</span><br><span class="line">      cell1.classList.contains(player) &amp;&amp;</span><br><span class="line">      cell1.classList.contains(player)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> isWin</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 伪数组cells的遍历；</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach_cells</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 遍历单元格列表</span></span><br><span class="line">cells.forEach(forEach_1)</span><br><span class="line"><span class="comment">// cells.forEach(forEach_cells)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>如果，你遇到每点一下，就出一个 当前玩家获胜 x or o 获胜</p>
<p><img src="https://i.loli.net/2020/08/10/EPnOxswypDKLN2g.png" alt="1"></p>
<p>也许是你代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    cell1.classList.<span class="built_in">contains</span>(player) &amp;&amp;</span><br><span class="line">    cell1.classList.<span class="built_in">contains</span>(player) &amp;&amp;</span><br><span class="line">    cell1.classList.<span class="built_in">contains</span>(player)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cell1，全不写成了 1</span></span><br></pre></td></tr></table></figure>

<p>改正：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    cell1.classList.contains(player) &amp;&amp;</span><br><span class="line">    cell2.classList.contains(player) &amp;&amp;</span><br><span class="line">    cell3.classList.contains(player)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cell1，全不写成了 1</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/08/10/akC13UyTKwn9SJX.png" alt="2"></p>
<p>…</p>
</li>
</ol>
<p>回顾：</p>
<ol>
<li><p>使用 some 方法遍历数组，并将 some 方法的返回值作为判赢函数的返回结果。</p>
<blockquote>
<p>1.1 为什么要使用some，应为返回true后就停止</p>
<p>它的作用是用来查找出数组中是否有一个满足条件情况。找到一种就返回true停止遍历；</p>
</blockquote>
</li>
<li><p>在 some 方法的回调函数中，获取到每种获胜情况对应的 3 个单元格元素。</p>
<blockquote>
<p>用some，只拿到了winsArr数组中的每个元素；</p>
<p>item拿到的是每个元素是一个数组；</p>
<p>在写 cellIndex拿到每个 item里的 每一个索引；</p>
<p>拿到每一个单元格的索引后；</p>
<p>去伪数组cells拿到每个单元格的元素；</p>
</blockquote>
</li>
<li><p>判断这 3 个单元格元素是否同时包含当前玩家的类名。</p>
<blockquote>
<p>拿到元素后</p>
<p>判断3个单元格中，是否同时包含某玩家类名</p>
<p>用逻辑与</p>
</blockquote>
</li>
<li><p>如果包含（玩家获胜），就在回调函数中返回 true 停止循环；否则，返回 false，继续下一次循环。</p>
<blockquote>
<p>if条件成立，说明三个元素同时包含</p>
<p>返回true终止后面的循环，并返回那个玩家类名</p>
</blockquote>
</li>
</ol>
<hr>
<h4 id="10-3-6-优化判赢函数"><a href="#10-3-6-优化判赢函数" class="headerlink" title="10.3.6 优化判赢函数"></a>10.3.6 优化判赢函数</h4><ol start="0">
<li><p>感觉没必要</p>
</li>
<li><p>去掉判赢函数的中间变量（isWin、cell1、cell2、cell3）。</p>
</li>
<li><p>封装函数（hasClass）：判断 DOM 元素是否包含某个类名。2020-8-10 10:04:03(已经6个小时了）</p>
</li>
<li><p>回到代码；</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isWin = winsArr.some(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>)</span>&#123;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">let</span> cellIndex1 = item[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> cellIndex2 = item[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">let</span> cellIndex3 = item[<span class="number">2</span>]</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">let</span> cell1 = cells[cellIndex1]</span><br><span class="line">  <span class="keyword">let</span> cell2 = cells[cellIndex2]</span><br><span class="line">  <span class="keyword">let</span> cell3 = cells[cellIndex3]</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    cell1.classList.contains(player) &amp;&amp;</span><br><span class="line">    cell2.classList.contains(player) &amp;&amp;</span><br><span class="line">    cell3.classList.contains(player)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> isWin</span><br></pre></td></tr></table></figure>

<blockquote>
<p>3.1 虽然调用了数组的.some方法</p>
<p>目的是返回值，把some方法的返回值存储到了isWin</p>
<p>然后在 return isWin=返回isWin，也就是some方法的返回值</p>
<p>先拿到isWin , 再返回isWin，是一个中转效果，是一个中间变量</p>
<p>∴ 可以改为：</p>
<p>return winsArr.some()</p>
</blockquote>
<p>修改：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> winsArr.some(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>)</span>&#123;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">let</span> cellIndex1 = item[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> cellIndex2 = item[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">let</span> cellIndex3 = item[<span class="number">2</span>]</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">let</span> cell1 = cells[cellIndex1]</span><br><span class="line">  <span class="keyword">let</span> cell2 = cells[cellIndex2]</span><br><span class="line">  <span class="keyword">let</span> cell3 = cells[cellIndex3]</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    cell1.classList.contains(player) &amp;&amp;</span><br><span class="line">    cell2.classList.contains(player) &amp;&amp;</span><br><span class="line">    cell3.classList.contains(player)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line">   </span><br></pre></td></tr></table></figure>
</li>
<li><p>接着是cell1、cell2、cell3</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> winsArr.some(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>)</span>&#123;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">let</span> cellIndex1 = item[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> cellIndex2 = item[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">let</span> cellIndex3 = item[<span class="number">2</span>]</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    cells[cellIndex1].classList.contains(player) &amp;&amp;</span><br><span class="line">    cells[cellIndex2].classList.contains(player) &amp;&amp;</span><br><span class="line">    cells[cellIndex3].classList.contains(player)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<p>不建议把cellIndex1 替换成 item[0]。视频说；</p>
<p>我个人觉得没什么</p>
<hr>
</li>
<li><p>回到 2.封装函数（hasClass）：判断 DOM 元素是否包含某个类名</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">if (</span><br><span class="line">  cells[cellIndex1].classList.contains(<span class="name">player</span>) <span class="symbol">&amp;&amp;</span></span><br><span class="line">  cells[cellIndex2].classList.contains(<span class="name">player</span>) <span class="symbol">&amp;&amp;</span></span><br><span class="line">  cells[cellIndex3].classList.contains(<span class="name">player</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>太重复，可以改；</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">el: Element, name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> el.classList.contains(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>// 用：let a = cells[cellIndex1] 然后鼠标放在a上看类型；<br>// 类型是Element，便可以指定el的类型；<br>// el: Element</p>
<p>参数弄好后；就可以查看 DOM 元素是否包含某个类名</p>
<p>el.classList.contains(name)</p>
<p>contains方法返回的是布尔值；鼠标放上去可以查看；</p>
<p>把：注释掉</p>
<p> // cells[cellIndex1].classList.contains(player) &amp;&amp;<br> // cells[cellIndex2].classList.contains(player) &amp;&amp;<br> // cells[cellIndex3].classList.contains(player)</p>
<p>在if里面调用函数 hasClass（）填入要判断的dom元素：</p>
<p><code>hasClass(cells[cellIndex1])</code></p>
<p>…</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> winsArr.some(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>)</span>&#123;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">let</span> cellIndex1 = item[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> cellIndex2 = item[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">let</span> cellIndex3 = item[<span class="number">2</span>]</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    hasClass(cells[cellIndex1], player) &amp;&amp;</span><br><span class="line">    hasClass(cells[cellIndex2], player) &amp;&amp;</span><br><span class="line">    hasClass(cells[cellIndex3], player) </span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<p>….</p>
<p>我觉得没啥必要；</p>
<hr>
</li>
</ol>
<h4 id="10-3-7-判断平局"><a href="#10-3-7-判断平局" class="headerlink" title="10.3.7 判断平局"></a>10.3.7 判断平局</h4><p>思路：创建变量（steps），记录已下棋的次数，判断 steps 是否等于 9，如果等于说明平局。<br>注意：先判赢，再判断平局！</p>
<p><a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/steps">steps–翻译</a>；</p>
<ol>
<li><p>创建变量（steps），默认值为 0。</p>
</li>
<li><p>在玩家下棋后，让 steps 加 1。</p>
</li>
<li><p>在判赢的代码后面，判断 steps 是否等于 9。</p>
<blockquote>
<p>那这不是，拜拜判断多次；直接是否&gt;8，或者直接判断是否=9</p>
<p>不需要跟着 判赢的代码后面 多次判断；</p>
</blockquote>
</li>
<li><p>如果等于 9 说明是平局，游戏结束，就直接 return，不再执行后续代码。</p>
</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 10.3.7-1. 记录已下棋的次数</span></span><br><span class="line"><span class="keyword">let</span> steps = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 给当前被点击的单元格添加类名 x</span></span><br><span class="line"><span class="keyword">let</span> target_3 = event.target <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">arget_3.classList.add(currentPlayer)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在点击事件后面</span></span><br><span class="line"><span class="comment">// 10.3.7-2. 在玩家下棋后，让 steps 加 1。</span></span><br><span class="line">steps++</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isWin) &#123;</span><br><span class="line">  <span class="comment">// 此时用console.log(&#x27;当前玩家获胜&#x27;, currentPlayer)来检测一下编码是否正确，有效</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;当前玩家获胜&#x27;</span>, currentPlayer)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 10.3.7-3在判赢的代码后面，判断 steps 是否等于 9。</span></span><br><span class="line"> <span class="keyword">if</span> ( steps === <span class="number">9</span>) &#123;</span><br><span class="line">   <span class="comment">// 10.3.7-4.如果等于 9 说明是平局，游戏结束，就直接 return，不再执行后续代码。</span></span><br><span class="line">   <span class="comment">// 因为游戏已经结束，所以，此处直接return</span></span><br><span class="line">   <span class="comment">// 来可以阻止后续代码执行</span></span><br><span class="line">   <span class="keyword">return</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;平局之后&#x27;</span>)</span><br></pre></td></tr></table></figure>

<br />

<hr>
<h4 id="10-3-8-展示获胜信息；"><a href="#10-3-8-展示获胜信息；" class="headerlink" title="10.3.8 展示获胜信息；"></a>10.3.8 展示获胜信息；</h4><p>效果：在获胜或平局时，展示相应信息。</p>
<ol>
<li>获取到与获胜信息相关的两个 DOM 元素：1 #message 2 #winner。</li>
<li>显示获胜信息面板（通过 style 属性实现）。</li>
<li>展示获胜信息：如果获胜，展示“x 赢了！”或“o 赢了！”；如果是平局，展示“平局”。</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> winsArr = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], <span class="comment">//横</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>], [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>], [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>], <span class="comment">// 竖</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>] <span class="comment">//斜</span></span><br><span class="line">]</span><br><span class="line"><span class="built_in">enum</span> Player &#123;</span><br><span class="line">    X = <span class="string">&#x27;x&#x27;</span>,</span><br><span class="line">    O = <span class="string">&#x27;o&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> cells = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.cell&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> gameBord = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#bord&#x27;</span>)</span><br><span class="line"><span class="comment">// 10.3.8-1. 获胜信息面板</span></span><br><span class="line"><span class="keyword">let</span> message = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#message&#x27;</span>) <span class="keyword">as</span> HTMLDivElement</span><br><span class="line"><span class="comment">// 10.3.8-1.2 获胜者</span></span><br><span class="line"><span class="keyword">let</span> winner = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#winner&#x27;</span>) <span class="keyword">as</span> HTMLParagraphElement</span><br><span class="line"><span class="keyword">let</span> currentPlayer = Player.X</span><br><span class="line"><span class="keyword">let</span> steps = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach_1 &gt; clickCell &gt; checkWin &gt; some_isWin</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach_1</span>(<span class="params">item: HTMLDivElement</span>) </span>&#123;</span><br><span class="line">    item.addEventListener(<span class="string">&#x27;click&#x27;</span>, clickCell, &#123; once: <span class="literal">true</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickCell</span>(<span class="params">event: MouseEvent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> target_3 = event.target <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">    target_3.classList.add(currentPlayer)</span><br><span class="line"></span><br><span class="line">    steps++</span><br><span class="line">    <span class="keyword">let</span> isWin = checkWin(currentPlayer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isWin) &#123;</span><br><span class="line">      <span class="comment">// 10.3.8-3.展示获胜信息：如果获胜，展示“x 赢了！”或“o 赢了！”；如果是平局，展示“平局”。</span></span><br><span class="line">      <span class="comment">// 获胜的信息最终要 id=&quot;winner&quot; 里  &lt;p id=&quot;winner&quot;&gt;X 赢了！&lt;/p&gt;</span></span><br><span class="line">      winner.innerText = currentPlayer + <span class="string">&#x27;赢了&#x27;</span></span><br><span class="line">      <span class="comment">// 10.3.8-2.显示信息面板（通过 style 属性实现）。</span></span><br><span class="line">      message.style.display = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( steps === <span class="number">9</span>) &#123;</span><br><span class="line">      <span class="comment">// 10.3.8-2.2.显示信息面板（通过 style 属性实现）。</span></span><br><span class="line">      message.style.display = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">      winner.innerText = <span class="string">&#x27;平局&#x27;</span></span><br><span class="line">      <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;平局之后&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    currentPlayer = currentPlayer === Player.X ? Player.O : Player.X</span><br><span class="line"></span><br><span class="line">    gameBord.classList.remove(Player.X, Player.O)</span><br><span class="line">    gameBord.classList.add(currentPlayer)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">checkWin</span>(<span class="params"> player: Player </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> winsArr.some(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">let</span> cellIndex1 = item[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> cellIndex2 = item[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">let</span> cellIndex3 = item[<span class="number">2</span>]  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> cell1 = cells[cellIndex1]</span><br><span class="line">    <span class="keyword">let</span> cell2 = cells[cellIndex2]</span><br><span class="line">    <span class="keyword">let</span> cell3 = cells[cellIndex3]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      cell1.classList.contains(player) &amp;&amp;</span><br><span class="line">      cell2.classList.contains(player) &amp;&amp;</span><br><span class="line">      cell3.classList.contains(player)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach_cells</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line">cells.forEach(forEach_1)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br />

<hr>
<h3 id="10-4-重开游戏"><a href="#10-4-重开游戏" class="headerlink" title="10.4 重开游戏"></a>10.4 重开游戏</h3><p>效果：点击重新开始按钮，重新开始下棋游戏。</p>
<p>说明：重新开始游戏，实际上就是要<red>重置游戏中的所有数据</red>，恢复到初始状态。</p>
<p>比如：隐藏获胜信息、重置下棋次数、清空棋盘等等。</p>
<ol>
<li>获取到重新开始按钮（#restart），并绑定点击事件。</li>
<li>在点击事件中，重置游戏数据。</li>
<li>隐藏获胜信息、清空棋盘、移除单元格点击事件、重新给单元格绑定点击事件。</li>
<li>重置下棋次数、重置默认玩家为 x、重置下棋提示为 x。</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> winsArr = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], <span class="comment">//横</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>], [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>], [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>], <span class="comment">// 竖</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>] <span class="comment">//斜</span></span><br><span class="line">]</span><br><span class="line"><span class="built_in">enum</span> Player &#123;</span><br><span class="line">    X = <span class="string">&#x27;x&#x27;</span>,</span><br><span class="line">    O = <span class="string">&#x27;o&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> cells = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.cell&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> gameBord = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#bord&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> message = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#message&#x27;</span>) <span class="keyword">as</span> HTMLDivElement</span><br><span class="line"><span class="keyword">let</span> winner = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#winner&#x27;</span>) <span class="keyword">as</span> HTMLParagraphElement</span><br><span class="line"><span class="comment">// 10.4-1. 重新开始按钮</span></span><br><span class="line"><span class="keyword">let</span> restart = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#restart&#x27;</span>) <span class="keyword">as</span> HTMLButtonElement</span><br><span class="line"><span class="built_in">console</span>.log(restart)</span><br><span class="line"><span class="keyword">let</span> currentPlayer = Player.X</span><br><span class="line"><span class="keyword">let</span> steps = <span class="number">0</span></span><br><span class="line"><span class="comment">// 10.4-1.2 绑定点击事件</span></span><br><span class="line">restart.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">  <span class="comment">// restart 是button 要按钮出来后点击才有效；</span></span><br><span class="line">  <span class="comment">// 10.4-3 隐藏获胜信息</span></span><br><span class="line">  message.style.display= <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  <span class="comment">// 10.4-4. 重置下棋次数</span></span><br><span class="line">  steps = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 10.4-4.2 重置默认玩家为x</span></span><br><span class="line">  currentPlayer = Player.X</span><br><span class="line">  <span class="comment">// 10.4-4.3 重置下棋提示为x</span></span><br><span class="line">  gameBord.classList.remove(Player.X, Player.O)</span><br><span class="line">  gameBord.classList.add(Player.X)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 10.4-3.2 清空棋盘</span></span><br><span class="line">  <span class="comment">// 棋盘的内容添加，是通过添加类名而成的：target_3.classList.add(currentPlayer)</span></span><br><span class="line">  <span class="comment">// 遍历每个单元格，清空</span></span><br><span class="line">  cells.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cell = item <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">    <span class="comment">// 移除类名</span></span><br><span class="line">    <span class="comment">// 10.4-3.2 清空棋盘</span></span><br><span class="line">    cell.classList.remove(Player.X, Player.O)</span><br><span class="line">    <span class="comment">// 这个时候，虽然清楚了棋盘上的XO，但是没法，再点，因为&#123; once: true &#125;</span></span><br><span class="line">    <span class="comment">// 10.4-3.3 移除单元格点击事件、重新给单元格绑定点击事件。</span></span><br><span class="line">    cell.removeEventListener(<span class="string">&#x27;click&#x27;</span>, clickCell)</span><br><span class="line">    <span class="comment">// 10.4-3.3.2 重新给单元格绑定点击事件。</span></span><br><span class="line">    cell.addEventListener(<span class="string">&#x27;click&#x27;</span>, clickCell, &#123; once: <span class="literal">true</span> &#125;)</span><br><span class="line">    </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach_1 &gt; clickCell &gt; checkWin &gt; some_isWin</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach_1</span>(<span class="params">item: HTMLDivElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cell = item <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">    cell.addEventListener(<span class="string">&#x27;click&#x27;</span>, clickCell, &#123; once: <span class="literal">true</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickCell</span>(<span class="params">event: MouseEvent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> target_3 = event.target <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">    target_3.classList.add(currentPlayer)</span><br><span class="line"></span><br><span class="line">    steps++</span><br><span class="line">    <span class="keyword">let</span> isWin = checkWin(currentPlayer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isWin) &#123;</span><br><span class="line">      winner.innerText = currentPlayer + <span class="string">&#x27;赢了&#x27;</span></span><br><span class="line">      message.style.display = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( steps === <span class="number">9</span>) &#123;</span><br><span class="line">      message.style.display = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">      winner.innerText = <span class="string">&#x27;平局&#x27;</span></span><br><span class="line">      <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;平局之后&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    currentPlayer = currentPlayer === Player.X ? Player.O : Player.X</span><br><span class="line"></span><br><span class="line">    gameBord.classList.remove(Player.X, Player.O)</span><br><span class="line">    gameBord.classList.add(currentPlayer)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">checkWin</span>(<span class="params"> player: Player </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> winsArr.some(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">let</span> cellIndex1 = item[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> cellIndex2 = item[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">let</span> cellIndex3 = item[<span class="number">2</span>]  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> cell1 = cells[cellIndex1]</span><br><span class="line">    <span class="keyword">let</span> cell2 = cells[cellIndex2]</span><br><span class="line">    <span class="keyword">let</span> cell3 = cells[cellIndex3]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      cell1.classList.contains(player) &amp;&amp;</span><br><span class="line">      cell2.classList.contains(player) &amp;&amp;</span><br><span class="line">      cell3.classList.contains(player)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach_cells</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line">cells.forEach(forEach_1)</span><br></pre></td></tr></table></figure>

<br />

<h4 id="10-4-2-优化重新游戏"><a href="#10-4-2-优化重新游戏" class="headerlink" title="10.4.2 优化重新游戏"></a>10.4.2 优化重新游戏</h4><p>优化重新游戏功能：</p>
<p>原来，下棋分为：1 第一次游戏 2 重新开始游戏。</p>
<p>现在，将第一次游戏，也看做是“重新开始游戏”，就可以去掉第一次游戏时重复的初始化操作了。</p>
<ol>
<li>将重新开始按钮的事件处理程序修改为：函数声明形式（startGame）。</li>
<li>直接调用函数（startGame），来开始游戏。</li>
<li>移除变量 steps、currentPlayer 的默认值，并添加明确的类型注解。</li>
<li>移除给单元格绑定事件的代码。</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> winsArr = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], <span class="comment">//横</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>], [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>], [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>], <span class="comment">// 竖</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>] <span class="comment">//斜</span></span><br><span class="line">]</span><br><span class="line"><span class="built_in">enum</span> Player &#123;</span><br><span class="line">    X = <span class="string">&#x27;x&#x27;</span>,</span><br><span class="line">    O = <span class="string">&#x27;o&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> cells = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.cell&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> gameBord = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#bord&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> message = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#message&#x27;</span>) <span class="keyword">as</span> HTMLDivElement</span><br><span class="line"><span class="keyword">let</span> winner = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#winner&#x27;</span>) <span class="keyword">as</span> HTMLParagraphElement</span><br><span class="line"><span class="keyword">let</span> restart = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#restart&#x27;</span>) <span class="keyword">as</span> HTMLButtonElement</span><br><span class="line"><span class="built_in">console</span>.log(restart)</span><br><span class="line"><span class="comment">// 10.4.2-3.2 移除变量urrentPlayer 的默认值，并添加明确的类型注解。</span></span><br><span class="line"><span class="keyword">let</span> currentPlayer: Player</span><br><span class="line"><span class="comment">// 10.4.2-3.1 移除变量 steps的默认值，并添加明确的类型注解</span></span><br><span class="line"><span class="comment">// let steps = 0</span></span><br><span class="line"><span class="keyword">let</span> steps: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.4.2-1. 将原来的回调函数弄出来，声明新函数</span></span><br><span class="line">restart.addEventListener(<span class="string">&#x27;click&#x27;</span>, startGame)</span><br><span class="line"><span class="comment">// 10.4.2-2. 直接调用函数（startGame）初始化游戏数据，来开始游戏。</span></span><br><span class="line">startGame ()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startGame</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">  message.style.display= <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  steps = <span class="number">0</span></span><br><span class="line">  currentPlayer = Player.X</span><br><span class="line">  gameBord.classList.remove(Player.X, Player.O)</span><br><span class="line">  gameBord.classList.add(Player.X)</span><br><span class="line">  </span><br><span class="line">  cells.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cell = item <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">    cell.classList.remove(Player.X, Player.O)</span><br><span class="line">    cell.removeEventListener(<span class="string">&#x27;click&#x27;</span>, clickCell)</span><br><span class="line">    cell.addEventListener(<span class="string">&#x27;click&#x27;</span>, clickCell, &#123; once: <span class="literal">true</span> &#125;)</span><br><span class="line">    </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach_1 &gt; clickCell &gt; checkWin &gt; some_isWin</span></span><br><span class="line"><span class="comment">// 10.4.2-4.1 移除给单元格绑定事件的代码。</span></span><br><span class="line"><span class="comment">// function forEach_1(item: HTMLDivElement) &#123;</span></span><br><span class="line"><span class="comment">//   let cell = item as HTMLDivElement</span></span><br><span class="line"><span class="comment">//     cell.addEventListener(&#x27;click&#x27;, clickCell, &#123; once: true &#125;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickCell</span>(<span class="params">event: MouseEvent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> target_3 = event.target <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">    target_3.classList.add(currentPlayer)</span><br><span class="line"></span><br><span class="line">    steps++</span><br><span class="line">    <span class="keyword">let</span> isWin = checkWin(currentPlayer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isWin) &#123;</span><br><span class="line">      winner.innerText = currentPlayer + <span class="string">&#x27;赢了&#x27;</span></span><br><span class="line">      message.style.display = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( steps === <span class="number">9</span>) &#123;</span><br><span class="line">      message.style.display = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">      winner.innerText = <span class="string">&#x27;平局&#x27;</span></span><br><span class="line">      <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;平局之后&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    currentPlayer = currentPlayer === Player.X ? Player.O : Player.X</span><br><span class="line"></span><br><span class="line">    gameBord.classList.remove(Player.X, Player.O)</span><br><span class="line">    gameBord.classList.add(currentPlayer)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">checkWin</span>(<span class="params"> player: Player </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> winsArr.some(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">let</span> cellIndex1 = item[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> cellIndex2 = item[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">let</span> cellIndex3 = item[<span class="number">2</span>]  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> cell1 = cells[cellIndex1]</span><br><span class="line">    <span class="keyword">let</span> cell2 = cells[cellIndex2]</span><br><span class="line">    <span class="keyword">let</span> cell3 = cells[cellIndex3]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      cell1.classList.contains(player) &amp;&amp;</span><br><span class="line">      cell2.classList.contains(player) &amp;&amp;</span><br><span class="line">      cell3.classList.contains(player)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach_cells</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 10.4.2-4.1 移除给单元格绑定事件的代码。</span></span><br><span class="line"><span class="comment">// cells.forEach(forEach_1)</span></span><br></pre></td></tr></table></figure>

<br />

<hr>
<h3 id="10-5-总结"><a href="#10-5-总结" class="headerlink" title="10.5 总结"></a>10.5 总结</h3><ol>
<li>使用学到的 TS 、Web 开发知识，从零开始完成了下棋游戏。</li>
<li>TS 知识：变量声明、枚举、类型断言、函数（参数、返回值）等。</li>
<li>枚举：是一组有名字的常量的集合，用来组织有关联的数据。</li>
<li>类型断言：在我们比 TS 更明确变量的类型时，来指定具体类型。</li>
<li>函数封装：主要考虑参数和返回值，也就是接收要处理的数据，返回处理后<br>的结果。</li>
<li>实现功能：分步骤实现，完成一步，验证一步（先实现，再优化）。</li>
<li>DOM 操作：获取元素、添加移除事件、事件对象、样式操作、文本内容。</li>
<li>伪数组：具有长度（length）属性和索引（长得像、操作也像数组）。</li>
</ol>
<p>总代码–有注释版本：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 10.3.5-1判赢数组</span></span><br><span class="line"><span class="keyword">let</span> winsArr = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], <span class="comment">//横</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>], [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>], [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>], <span class="comment">// 竖</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>] <span class="comment">//斜</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3-1. 创建字符串枚举（Player），提供 X 和 O 两个成员</span></span><br><span class="line"><span class="built_in">enum</span> Player &#123;</span><br><span class="line">    X = <span class="string">&#x27;x&#x27;</span>,</span><br><span class="line">    O = <span class="string">&#x27;o&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 获取到所有的单元格列表</span></span><br><span class="line"><span class="keyword">let</span> cells = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.cell&#x27;</span>)</span><br><span class="line"><span class="comment">// console.log(cells)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 游戏面板</span></span><br><span class="line"><span class="keyword">let</span> gameBord = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#bord&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.3.8-1. 获胜信息面板</span></span><br><span class="line"><span class="keyword">let</span> message = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#message&#x27;</span>) <span class="keyword">as</span> HTMLDivElement</span><br><span class="line"><span class="comment">// 10.3.8-1.2 获胜者</span></span><br><span class="line"><span class="keyword">let</span> winner = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#winner&#x27;</span>) <span class="keyword">as</span> HTMLParagraphElement</span><br><span class="line"><span class="comment">// 10.4-1.</span></span><br><span class="line"><span class="keyword">let</span> restart = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#restart&#x27;</span>) <span class="keyword">as</span> HTMLButtonElement</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3-2. 将所有用到 x 和 o 的地方全部使用枚举成员代替。</span></span><br><span class="line"><span class="comment">// let currentPlayer = &#x27;x&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.4.2-3.2 移除变量urrentPlayer 的默认值，并添加明确的类型注解。</span></span><br><span class="line"><span class="comment">// let currentPlayer = Player.X</span></span><br><span class="line"><span class="keyword">let</span> currentPlayer: Player</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.3.7-1. 记录已下棋的次数</span></span><br><span class="line"><span class="comment">// 10.4.2-3.1 移除变量 steps的默认值，并添加明确的类型注解</span></span><br><span class="line"><span class="comment">// let steps = 0</span></span><br><span class="line"><span class="keyword">let</span> steps: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.4-1.2 绑定点击事件</span></span><br><span class="line"><span class="comment">// 10.4.2-1. 将原来的回调函数弄出来，声明新函数startGame</span></span><br><span class="line">restart.addEventListener(<span class="string">&#x27;click&#x27;</span>, startGame)</span><br><span class="line"><span class="comment">// 10.4.2-2. 直接调用函数（startGame）初始化游戏数据，来开始游戏。</span></span><br><span class="line">startGame ()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startGame</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">  <span class="comment">// 10.4-3 隐藏获胜信息</span></span><br><span class="line">  message.style.display= <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  <span class="comment">// 10.4-4. 重置下棋次数</span></span><br><span class="line">  steps = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 10.4-4.2 重置默认玩家为x</span></span><br><span class="line">  currentPlayer = Player.X</span><br><span class="line">  <span class="comment">// 10.4-4.3 重置下棋提示为x</span></span><br><span class="line">  gameBord.classList.remove(Player.X, Player.O)</span><br><span class="line">  gameBord.classList.add(Player.X)</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 10.4-3.2 清空棋盘</span></span><br><span class="line">  <span class="comment">// 棋盘的内容添加，是通过添加类名而成的：target_3.classList.add(currentPlayer)</span></span><br><span class="line">  <span class="comment">// 遍历每个单元格，清空</span></span><br><span class="line">  cells.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cell = item <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">  <span class="comment">// 10.4-3.2 清空棋盘</span></span><br><span class="line">  cell.classList.remove(Player.X, Player.O)</span><br><span class="line">  <span class="comment">// 这个时候，虽然清楚了棋盘上的XO，但是没法，再点，因为&#123; once: true &#125;</span></span><br><span class="line">  <span class="comment">// 10.4-3.3 移除单元格点击事件、重新给单元格绑定点击事件。</span></span><br><span class="line">  cell.removeEventListener(<span class="string">&#x27;click&#x27;</span>, clickCell)</span><br><span class="line">  <span class="comment">// 10.4-3.3.2 重新给单元格绑定点击事件。</span></span><br><span class="line">  cell.addEventListener(<span class="string">&#x27;click&#x27;</span>, clickCell, &#123; once: <span class="literal">true</span> &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach_1 &gt; clickCell &gt; checkWin &gt; some_isWin</span></span><br><span class="line"><span class="comment">// 10.4.2-4.1 移除给单元格绑定事件的代码。</span></span><br><span class="line"><span class="comment">// function forEach_1(item: HTMLDivElement) &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     // console.log(item)</span></span><br><span class="line"><span class="comment">//     // 2.1 给每一个单元格添加点击事件</span></span><br><span class="line"><span class="comment">//     // let cell_2 = item as HTMLDivElement</span></span><br><span class="line"><span class="comment">//     item.addEventListener(&#x27;click&#x27;, clickCell, &#123; once: true &#125;)</span></span><br><span class="line"><span class="comment">//     // console.log(&#x27;click&#x27;) // 打印出点击事件本身</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickCell</span>(<span class="params">event: MouseEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 3. 给当前被点击的单元格添加类名 x</span></span><br><span class="line">    <span class="keyword">let</span> target_3 = event.target <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">    target_3.classList.add(currentPlayer)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在点击事件后面</span></span><br><span class="line">    <span class="comment">// 10.3.7-2. 在玩家下棋后，让 steps 加 1。</span></span><br><span class="line">    steps++</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 10.3.4-2. 调用判赢函数，判断是否获胜;因为是在玩家下棋时判断，所以在点击事件函数里面</span></span><br><span class="line">    <span class="keyword">let</span> isWin = checkWin(currentPlayer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isWin) &#123;</span><br><span class="line">      winner.innerText=currentPlayer + <span class="string">&#x27;赢了&#x27;</span></span><br><span class="line">      message.style.display= <span class="string">&#x27;block&#x27;</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 10.3.7-3在判赢的代码后面，判断 steps 是否等于 9。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( steps === <span class="number">9</span>) &#123;</span><br><span class="line">      <span class="comment">// 10.3.7-4.如果等于 9 说明是平局，游戏结束，就直接 return，不再执行后续代码。</span></span><br><span class="line">      <span class="comment">// 因为游戏已经结束，所以，此处直接return</span></span><br><span class="line">      <span class="comment">// 来可以阻止后续代码执行</span></span><br><span class="line">      winner.innerText= <span class="string">&#x27;平局&#x27;</span></span><br><span class="line">      message.style.display= <span class="string">&#x27;block&#x27;</span></span><br><span class="line">      <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;平局之后&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据当前玩家，得到另一个玩家</span></span><br><span class="line">    currentPlayer = currentPlayer === Player.X ? Player.O : Player.X</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 改变下一步提示；</span></span><br><span class="line">    gameBord.classList.remove(Player.X, Player.O)</span><br><span class="line">    gameBord.classList.add(currentPlayer)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.3.4-1. 封装判赢函数</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">checkWin</span>(<span class="params"> player: Player </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 10.3.5-2. 取消写死的 判赢返回值</span></span><br><span class="line">  <span class="comment">// return true</span></span><br><span class="line">  <span class="comment">// 10.3.5-3. 使用 some 方法遍历数组，并将 some 方法的返回值作为判赢函数的返回结果。</span></span><br><span class="line">  <span class="keyword">return</span> winsArr.some(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 10.3.5-4. 在 some 方法的回调函数中，获取到每种获胜情况对应的 3 个单元格元素。</span></span><br><span class="line">    <span class="comment">// 4.1 先拿到每种获胜情况的三个索引</span></span><br><span class="line">    <span class="comment">// 看一下item拿到winsArr的元素没</span></span><br><span class="line">    <span class="comment">// 要注意，checkWin在函数 clickCell 里面，是一个点击事件，点击才有效果</span></span><br><span class="line">    <span class="comment">// console.log(item) </span></span><br><span class="line">    <span class="keyword">let</span> cellIndex1 = item[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> cellIndex2 = item[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">let</span> cellIndex3 = item[<span class="number">2</span>]</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 4.1.1 打印实验：每种获胜情况的三个索引</span></span><br><span class="line">    <span class="comment">// console.log(cellIndex1,cellIndex2,cellIndex3)</span></span><br><span class="line">    <span class="comment">// 4.2 通过这三个索引，从cells中获取到对应的单元格元素</span></span><br><span class="line">    <span class="comment">// 从 4.1.3 过来后</span></span><br><span class="line">    <span class="comment">// 前面拿索引，这一步拿格子</span></span><br><span class="line">    <span class="keyword">let</span> cell1 = cells[cellIndex1]</span><br><span class="line">    <span class="keyword">let</span> cell2 = cells[cellIndex2]</span><br><span class="line">    <span class="keyword">let</span> cell3 = cells[cellIndex3]</span><br><span class="line">    <span class="comment">// console.log(cell1, cell2, cell3)</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 4.2 完成后干嘛？拿到了格子，要判断格子是否满足条件；</span></span><br><span class="line">    <span class="comment">// 我们看我们的函数，是some_isWin,它被let isWin = winsArr.some(some_isWin)用着</span></span><br><span class="line">    <span class="comment">// 被一个some用着，那必须要返回布尔值；</span></span><br><span class="line">    <span class="comment">// 那么这个判断依然在这里面写；</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 10.3.5-5 </span></span><br><span class="line">    <span class="comment">// 判断这 3 个单元格元素是否同时包含当前玩家的类名。</span></span><br><span class="line">    <span class="comment">// 重点：</span></span><br><span class="line">    <span class="comment">// 5.1. 元素是否包含类名 classList.contains();可以去文章1查</span></span><br><span class="line">    <span class="comment">// 5.2. 同时包含（第一个包含 并且 第二个包含，第三个包含）</span></span><br><span class="line">    <span class="comment">// 5.3. 逻辑运算符 &amp;&amp; 逻辑与，表示并且</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      cell1.classList.contains(player) &amp;&amp;</span><br><span class="line">      cell2.classList.contains(player) &amp;&amp;</span><br><span class="line">      cell3.classList.contains(player)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 伪数组cells的遍历；</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach_cells</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 遍历单元格列表</span></span><br><span class="line"><span class="comment">// cells.forEach(forEach_cells)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动单元格绑定事件</span></span><br><span class="line"><span class="comment">// 10.4.2-4.1 移除给单元格绑定事件的代码。</span></span><br><span class="line"><span class="comment">// cells.forEach(forEach_1)</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>总代码，少注释版本：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 10.3.5-1判赢数组</span></span><br><span class="line"><span class="keyword">let</span> winsArr = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], <span class="comment">//横</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>], [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>], [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>], <span class="comment">// 竖</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>] <span class="comment">//斜</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3-1. 创建字符串枚举（Player），提供 X 和 O 两个成员</span></span><br><span class="line"><span class="built_in">enum</span> Player &#123;</span><br><span class="line">    X = <span class="string">&#x27;x&#x27;</span>,</span><br><span class="line">    O = <span class="string">&#x27;o&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 获取到所有的单元格列表</span></span><br><span class="line"><span class="keyword">let</span> cells = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.cell&#x27;</span>)</span><br><span class="line"><span class="comment">// console.log(cells)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 游戏面板</span></span><br><span class="line"><span class="keyword">let</span> gameBord = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#bord&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.3.8-1. 获胜信息面板</span></span><br><span class="line"><span class="keyword">let</span> message = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#message&#x27;</span>) <span class="keyword">as</span> HTMLDivElement</span><br><span class="line"><span class="comment">// 10.3.8-1.2 获胜者</span></span><br><span class="line"><span class="keyword">let</span> winner = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#winner&#x27;</span>) <span class="keyword">as</span> HTMLParagraphElement</span><br><span class="line"><span class="comment">// 10.4-1.</span></span><br><span class="line"><span class="keyword">let</span> restart = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#restart&#x27;</span>) <span class="keyword">as</span> HTMLButtonElement</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3-2. 将所有用到 x 和 o 的地方全部使用枚举成员代替。</span></span><br><span class="line"><span class="comment">// 10.4.2-3.2 移除变量urrentPlayer 的默认值，并添加明确的类型注解。</span></span><br><span class="line"><span class="keyword">let</span> currentPlayer: Player</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.3.7-1. 记录已下棋的次数</span></span><br><span class="line"><span class="comment">// 10.4.2-3.1 移除变量 steps的默认值，并添加明确的类型注解</span></span><br><span class="line"><span class="keyword">let</span> steps: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.4-1.2 绑定点击事件</span></span><br><span class="line"><span class="comment">// 10.4.2-1. 将原来的回调函数弄出来，声明新函数startGame</span></span><br><span class="line">restart.addEventListener(<span class="string">&#x27;click&#x27;</span>, startGame)</span><br><span class="line"><span class="comment">// 10.4.2-2. 直接调用函数（startGame）初始化游戏数据，来开始游戏。</span></span><br><span class="line">startGame ()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startGame</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">  <span class="comment">// 10.4-3 隐藏获胜信息</span></span><br><span class="line">  message.style.display= <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  <span class="comment">// 10.4-4. 重置下棋次数</span></span><br><span class="line">  steps = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 10.4-4.2 重置默认玩家为x</span></span><br><span class="line">  currentPlayer = Player.X</span><br><span class="line">  <span class="comment">// 10.4-4.3 重置下棋提示为x</span></span><br><span class="line">  gameBord.classList.remove(Player.X, Player.O)</span><br><span class="line">  gameBord.classList.add(Player.X)</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 10.4-3.2 清空棋盘</span></span><br><span class="line">  cells.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cell = item <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">  <span class="comment">// 10.4-3.2 清空棋盘</span></span><br><span class="line">  cell.classList.remove(Player.X, Player.O)</span><br><span class="line">  <span class="comment">// 10.4-3.3 移除单元格点击事件、重新给单元格绑定点击事件。</span></span><br><span class="line">  cell.removeEventListener(<span class="string">&#x27;click&#x27;</span>, clickCell)</span><br><span class="line">  <span class="comment">// 10.4-3.3.2 重新给单元格绑定点击事件。</span></span><br><span class="line">  cell.addEventListener(<span class="string">&#x27;click&#x27;</span>, clickCell, &#123; once: <span class="literal">true</span> &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickCell</span>(<span class="params">event: MouseEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 3. 给当前被点击的单元格添加类名 x</span></span><br><span class="line">    <span class="keyword">let</span> target_3 = event.target <span class="keyword">as</span> HTMLDivElement</span><br><span class="line">    target_3.classList.add(currentPlayer)</span><br><span class="line">    <span class="comment">// 10.3.7-2. 在玩家下棋后，让 steps 加 1。</span></span><br><span class="line">    steps++</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 10.3.4-2. 调用判赢函数，判断是否获胜;因为是在玩家下棋时判断，所以在点击事件函数里面</span></span><br><span class="line">    <span class="keyword">let</span> isWin = checkWin(currentPlayer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isWin) &#123;</span><br><span class="line">      winner.innerText=currentPlayer + <span class="string">&#x27;赢了&#x27;</span></span><br><span class="line">      message.style.display= <span class="string">&#x27;block&#x27;</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 10.3.7-3在判赢的代码后面，判断 steps 是否等于 9。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( steps === <span class="number">9</span>) &#123;</span><br><span class="line">      <span class="comment">// 10.3.7-4.如果等于 9 说明是平局，游戏结束，就直接 return，不再执行后续代码。</span></span><br><span class="line">      winner.innerText= <span class="string">&#x27;平局&#x27;</span></span><br><span class="line">      message.style.display= <span class="string">&#x27;block&#x27;</span></span><br><span class="line">      <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;平局之后&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据当前玩家，得到另一个玩家</span></span><br><span class="line">    currentPlayer = currentPlayer === Player.X ? Player.O : Player.X</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 改变下一步提示；</span></span><br><span class="line">    gameBord.classList.remove(Player.X, Player.O)</span><br><span class="line">    gameBord.classList.add(currentPlayer)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.3.4-1. 封装判赢函数</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">checkWin</span>(<span class="params"> player: Player </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> winsArr.some(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> cellIndex1 = item[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> cellIndex2 = item[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">let</span> cellIndex3 = item[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> cell1 = cells[cellIndex1]</span><br><span class="line">    <span class="keyword">let</span> cell2 = cells[cellIndex2]</span><br><span class="line">    <span class="keyword">let</span> cell3 = cells[cellIndex3]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      cell1.classList.contains(player) &amp;&amp;</span><br><span class="line">      cell2.classList.contains(player) &amp;&amp;</span><br><span class="line">      cell3.classList.contains(player)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach_cells</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>…</p>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>item</tag>
      </tags>
  </entry>
  <entry>
    <title>3-ts&#39;problem</title>
    <url>/1-(0~50)/3-ts_problem/</url>
    <content><![CDATA[<h3 id="7-1-函数调试"><a href="#7-1-函数调试" class="headerlink" title="7.1 函数调试"></a>7.1 函数调试</h3><p>自家电脑vscode调试不起，他要自己运行完，不停下；2020-8-3 21:41:29</p>
<a id="more"></a>

<p>根据：<a href="https://zhuanlan.zhihu.com/p/103334623">https://zhuanlan.zhihu.com/p/103334623</a></p>
<p><a href="https://blog.csdn.net/qq_31487797/article/details/82500720">https://blog.csdn.net/qq_31487797/article/details/82500720</a></p>
<p>等信息使用debugger调试后能成，</p>
<p>可能要多学习了解一下 debugger；</p>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>4-css_个人笔记</title>
    <url>/1-(0~50)/4-css_private_note/</url>
    <content><![CDATA[<h2 id="0-words"><a href="#0-words" class="headerlink" title="0. words"></a>0. words</h2><p><a href="https://fanyi.baidu.com/#en/zh/private">private</a>；<a href="https://fanyi.baidu.com/#en/zh/cell">cell</a>；</p>
<h2 id="1-清除浮动"><a href="#1-清除浮动" class="headerlink" title="1. 清除浮动"></a>1. 清除浮动</h2><ol>
<li><p>额外标签法（在最后一个浮动标签后，新加一个标签，给其设置clear：both；）</p>
<a id="more"></a>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-class">.fahter</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid deeppink;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.big</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background</span>: darkorange;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.small</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">        <span class="attribute">background</span>: darkmagenta;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.footer</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">900px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">background</span>: darkslateblue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.clear</span>&#123;</span><br><span class="line">        <span class="attribute">clear</span>:both;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class=&quot;fahter&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;big&quot;&gt;big&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;small&quot;&gt;small&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;clear&quot;&gt;额外标签法&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>优点：通俗易懂，方便</p>
<p>缺点：添加无意义标签，语义化差</p>
</li>
<li><p>父级添加overflow属性（父元素添加overflow:hidden）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.fahter</span>&#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">     <span class="attribute">border</span>: <span class="number">1px</span> solid deeppink;</span><br><span class="line">     <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优点：代码简洁</p>
<p>缺点：内容增多的时候容易造成不会自动换行导致内容被隐藏掉，无法显示要溢出的元素</p>
</li>
<li><p>使用after伪元素清除浮动（推荐使用）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">    <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;<span class="comment">/*伪元素是行内元素 正常浏览器清除浮动方法*/</span></span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">clear</span>:both;</span><br><span class="line">        <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">        *zoom: 1;/*ie6清除浮动的方式 *号只有IE6-IE7执行，其他浏览器不执行*/</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class=&quot;fahter clearfix&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;big&quot;&gt;big&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;small&quot;&gt;small&lt;/div&gt;</span><br><span class="line">        &lt;!--&lt;div class=&quot;clear&quot;&gt;额外标签法&lt;/div&gt;--&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>   优点：符合闭合浮动思想，结构语义化正确</p>
<p>   缺点：ie6-7不支持伪元素：after，使用zoom:1触发hasLayout.</p>
<p>   推荐使用</p>
<ol start="4">
<li><p>使用before和after双伪元素清除浮动</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="attribute">display</span>: table;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">        <span class="attribute">clear</span>: both;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">        *zoom: 1;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> &lt;div class=&quot;fahter clearfix&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;big&quot;&gt;big&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;small&quot;&gt;small&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>优点：代码更简洁</p>
<p>缺点：用zoom:1触发hasLayout.</p>
<p>推荐使用</p>
<hr>
<p><a href="https://blog.csdn.net/h_qingyi/article/details/81269667">https://blog.csdn.net/h_qingyi/article/details/81269667</a></p>
</li>
</ol>
<hr>
<h2 id="2-padding撑开盒子"><a href="#2-padding撑开盒子" class="headerlink" title="2. padding撑开盒子"></a>2. padding撑开盒子</h2><p>此时有一个问题想问：padding什么时候会撑开盒子</p>
<blockquote>
<p>div有宽度的情况下，会撑开盒子；</p>
<p>但，div总不能一直没宽；</p>
<p>这时，可以用父元素设置宽；子元素继承宽度设置内边距不会撑开</p>
<p><a href="https://www.jianshu.com/p/3e2d76ab9ae8">https://www.jianshu.com/p/3e2d76ab9ae8</a></p>
</blockquote>
<br />

<hr>
<h2 id="3-外边距合并（塌陷）"><a href="#3-外边距合并（塌陷）" class="headerlink" title="3. 外边距合并（塌陷）"></a>3. 外边距合并（塌陷）</h2><p><a href="https://www.cnblogs.com/nigori/p/11184303.html">https://www.cnblogs.com/nigori/p/11184303.html</a></p>
<p>外边距塌陷：两个相邻的元素框垂直相遇时，外边距会合并，合并后的外边距的高度等于两个发生合并的外边距中较高的那个边距值</p>
<p>需要注意的是：只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并。</p>
<p>有点空虚，等实际遇到了问题，应该就会有感触；</p>
<p>这个更概念：<a href="https://www.cnblogs.com/shcrk/p/9311273.html">https://www.cnblogs.com/shcrk/p/9311273.html</a></p>
<hr>
<h2 id="4-zoom"><a href="#4-zoom" class="headerlink" title="4. zoom"></a>4. zoom</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@viewport/zoom">MDN文档</a></p>
<p><strong><code>zoom</code></strong> <a href="https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a> 属性会根据 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@viewport"><code>@viewport</code></a> 来初始化一个缩放因数。</p>
<p>当设置<code>1.0</code> 或 <code>100%</code>时表示不缩放。更大的值放大，更小的值缩小。</p>
<h3 id="4-2-应用所见"><a href="#4-2-应用所见" class="headerlink" title="4.2 应用所见"></a>4.2 应用所见</h3><p><img src="http://bucket-c70.test.upcdn.net/4/1-4-1.png" alt="1"></p>
<hr>
<h2 id="5-css选择器；"><a href="#5-css选择器；" class="headerlink" title="5. css选择器；"></a>5. css选择器；</h2><p><a href="https://www.w3school.com.cn/cssref/css_selectors.asp">链接-w3cschool</a></p>
<p>在 CSS 中，选择器是一种模式，用于选择需要添加样式的元素。</p>
<p>“CSS” 列指示该属性是在哪个 CSS 版本中定义的。（CSS1、CSS2 还是 CSS3。）</p>
<table>
<thead>
<tr>
<th align="left">选择器</th>
<th align="left">例子</th>
<th align="left">例子描述</th>
<th align="left">CSS</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_class.asp">.<em>class</em></a></td>
<td align="left">.intro</td>
<td align="left">选择 class=”intro” 的所有元素。</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_id.asp">#<em>id</em></a></td>
<td align="left">#firstname</td>
<td align="left">选择 id=”firstname” 的所有元素。</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_all.asp">*</a></td>
<td align="left">*</td>
<td align="left">选择所有元素。</td>
<td align="left">2</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_element.asp"><em>element</em></a></td>
<td align="left">p</td>
<td align="left">选择所有 <p> 元素。</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_element_comma.asp"><em>element</em>,<em>element</em></a></td>
<td align="left">div,p</td>
<td align="left">选择所有 <div> 元素和所有 <p> 元素。</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_element_element.asp"><em>element</em> <em>element</em></a></td>
<td align="left">div p</td>
<td align="left">选择 <div> 元素内部的所有 <p> 元素。</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_element_gt.asp"><em>element</em>&gt;<em>element</em></a></td>
<td align="left">div&gt;p</td>
<td align="left">选择父元素为 <div> 元素的所有 <p> 元素。</td>
<td align="left">2</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_element_plus.asp"><em>element</em>+<em>element</em></a></td>
<td align="left">div+p</td>
<td align="left">选择紧接在 <div> 元素之后的所有 <p> 元素。</td>
<td align="left">2</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_attribute.asp">[<em>attribute</em>]</a></td>
<td align="left">[target]</td>
<td align="left">选择带有 target 属性所有元素。</td>
<td align="left">2</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_attribute_value.asp">[<em>attribute</em>=<em>value</em>]</a></td>
<td align="left">[target=_blank]</td>
<td align="left">选择 target=”_blank” 的所有元素。</td>
<td align="left">2</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_attribute_value_contain.asp">[<em>attribute</em>~=<em>value</em>]</a></td>
<td align="left">[title~=flower]</td>
<td align="left">选择 title 属性包含单词 “flower” 的所有元素。</td>
<td align="left">2</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_attribute_value_start.asp">[<em>attribute</em>|=<em>value</em>]</a></td>
<td align="left">[lang|=en]</td>
<td align="left">选择 lang 属性值以 “en” 开头的所有元素。</td>
<td align="left">2</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_link.asp">:link</a></td>
<td align="left">a:link</td>
<td align="left">选择所有未被访问的链接。</td>
<td align="left">1</td>
</tr>
</tbody></table>
<p>等；更多信息，看链接；</p>
<hr>
<h2 id="6-水平垂直居中"><a href="#6-水平垂直居中" class="headerlink" title="6. 水平垂直居中"></a>6. 水平垂直居中</h2><h3 id="6-1-absolute-transform"><a href="#6-1-absolute-transform" class="headerlink" title="6.1 absolute + transform"></a>6.1 absolute + transform</h3><p>还是绝对定位，但这个方法不需要子元素固定宽高，所以不再需要size类了，HTML代码如下</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;wp&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span>&gt;<span class="number">123123</span>&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>修复绝对定位的问题，还可以使用css3新增的transform，transform的translate属性也可以设置百分比，其是相对于自身的宽和高，所以可以讲translate设置为-50%，就可以做到居中了，代码如下</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 此处引用上面的公共代码 */</span></span><br><span class="line"><span class="comment">/* 此处引用上面的公共代码 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定位代码 */</span></span><br><span class="line"><span class="selector-class">.wp</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方法兼容性依赖translate2d的兼容性</p>
<p>出至：<a href="https://www.jianshu.com/p/907f99004c3e">https://www.jianshu.com/p/907f99004c3e</a></p>
<p>里面还有9种方法；</p>
<h3 id="6-2-flex"><a href="#6-2-flex" class="headerlink" title="6.2 flex"></a>6.2 flex</h3><p>flex作为现代的布局方案，颠覆了过去的经验，只需几行代码就可以优雅的做到水平垂直居中</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;wp&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span>&gt;<span class="number">123123</span>&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wp</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>目前在移动端已经完全可以使用flex了，PC端需要看自己业务的兼容性情况</p>
<p>我个人比较在意这两种方法；</p>
<p>作者：南城北港et<br>链接：<a href="https://www.jianshu.com/p/907f99004c3e">https://www.jianshu.com/p/907f99004c3e</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>居中元素定宽高固定</th>
<th>PC兼容性</th>
<th>移动端兼容性</th>
</tr>
</thead>
<tbody><tr>
<td>absolute + 负margin</td>
<td>是</td>
<td>ie6+, chrome4+, firefox2+</td>
<td>安卓2.3+, iOS6+</td>
</tr>
<tr>
<td>absolute + margin auto</td>
<td>是</td>
<td>ie6+, chrome4+, firefox2+</td>
<td>安卓2.3+, iOS6+</td>
</tr>
<tr>
<td>absolute + calc</td>
<td>是</td>
<td>ie9+, chrome19+, firefox4+</td>
<td>安卓4.4+, iOS6+</td>
</tr>
<tr>
<td>absolute + transform</td>
<td>否</td>
<td>ie9+, chrome4+, firefox3.5+</td>
<td>安卓3+, iOS6+</td>
</tr>
<tr>
<td>writing-mode</td>
<td>否</td>
<td>ie6+, chrome4+, firefox3.5+</td>
<td>安卓2.3+, iOS5.1+</td>
</tr>
<tr>
<td>lineheight</td>
<td>否</td>
<td>ie6+, chrome4+, firefox2+</td>
<td>安卓2.3+, iOS6+</td>
</tr>
<tr>
<td>table</td>
<td>否</td>
<td>ie6+, chrome4+, firefox2+</td>
<td>安卓2.3+, iOS6+</td>
</tr>
<tr>
<td>css-table</td>
<td>否</td>
<td>ie8+, chrome4+, firefox2+</td>
<td>安卓2.3+, iOS6+</td>
</tr>
<tr>
<td>flex</td>
<td>否</td>
<td>ie10+, chrome4+, firefox2+</td>
<td>安卓2.3+, iOS6+</td>
</tr>
<tr>
<td>grid</td>
<td>否</td>
<td>ie10+, chrome57+, firefox52+</td>
<td>安卓6+, iOS10.3+</td>
</tr>
</tbody></table>
<h3 id="6-3-transform-translate解析"><a href="#6-3-transform-translate解析" class="headerlink" title="6.3 transform:translate解析"></a>6.3 transform:translate解析</h3><p><a href="https://www.cnblogs.com/yanggeng/p/11286250.html">https://www.cnblogs.com/yanggeng/p/11286250.html</a></p>
<h4 id="6-3-1-word"><a href="#6-3-1-word" class="headerlink" title="6.3.1 word"></a>6.3.1 word</h4><p>1-<a href="https://fanyi.baidu.com/translate?aldtype=16047&query=sticky&keyfrom=baidu&smartresult=dict&lang=auto2zh#en/zh/transform">transform</a></p>
<p>2-<a href="https://fanyi.baidu.com/translate?aldtype=16047&query=sticky&keyfrom=baidu&smartresult=dict&lang=auto2zh#en/zh/translate">translate</a></p>
<p>3-[ratate</p>
<h4 id="6-3-2-MDN文档"><a href="#6-3-2-MDN文档" class="headerlink" title="6.3.2 MDN文档"></a>6.3.2 MDN文档</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function/translate">https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function/translate</a></p>
<ul>
<li><p><strong>语法</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Single &lt;length-percentage&gt; values */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(200<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(50%);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Double &lt;length-percentage&gt; values */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(100<span class="selector-tag">px</span>, 200<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(100<span class="selector-tag">px</span>, 50%);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(30%, 200<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(30%, 50%);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>值</strong></p>
<ul>
<li><p>单个 <code>&lt;length-percentage&gt;</code> 作为参数</p>
<p>该值是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/length">``</a> 或者 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/percentage">``</a> 代表翻译向量的横坐标  (horizontal, x-coordinate) . 而向量的纵坐标 (vertical, y-coordinate) 会被默认为 <code>0</code>. 例如, <code>translate(2)</code> 等价于 <code>translate(2, 0)</code> 。 里面还可以填百分比值，百分比值是指 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-box"><code>transform-box</code></a> 属性定义的参考框的宽度。</p>
</li>
<li><p>参数是两个 <code>&lt;length-percentage&gt;</code> 构成</p>
<p>此值描述两个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/length">``</a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/percentage">``</a> 值，分别代表翻译的横坐标 (x-coordinate)  和纵坐标  (y-coordinate)  向量。 百分比作为第一个值表示宽度，第二个部分表示由 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-box"><code>transform-box</code></a> 属性定义的参考框的高度。</p>
</li>
</ul>
</li>
<li><p>所以：</p>
<p>transform: translate(-50%, -50%);</p>
<p>是自己box（盒子）（DIV）的宽度高度；</p>
<p>出至：里面还可以填百分比值，百分比值是指 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-box"><code>transform-box</code></a> 属性定义的参考框的宽度。</p>
<p>所以，不需要知道自身盒子的高度与宽度；</p>
<ul>
<li>更多解释，看下面的 6.3.2.2 transform-box</li>
</ul>
</li>
</ul>
<h5 id="2-transform-box"><a href="#2-transform-box" class="headerlink" title="2. transform-box"></a>2. transform-box</h5><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-box">transform-box</a></p>
<p>因为默认值是：border-box</p>
<p>而：border-box ，目前找到的是<a href="https://www.runoob.com/cssref/css3-pr-box-sizing.html">box-sizing</a>的属性</p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">content-box</td>
<td align="left">这是 CSS2.1 指定的宽度和高度的行为。指定元素的宽度和高度（最小/最大属性）适用于box的宽度和高度。元素的填充和边框布局和绘制指定宽度和高度除外</td>
</tr>
<tr>
<td align="left">border-box</td>
<td align="left">指定宽度和高度（最小/最大属性）确定元素边框。也就是说，对元素指定宽度和高度包括了 padding 和 border 。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。</td>
</tr>
<tr>
<td align="left">inherit</td>
<td align="left">指定 box-sizing 属性的值，应该从父元素继承</td>
</tr>
</tbody></table>
<p>个人理解：</p>
<ul>
<li><p>盒子的高度，宽度；把border，padding的高度和宽度也算为了盒子的高度和宽度里面；</p>
</li>
<li><p>没有包括外边距</p>
</li>
</ul>
<hr>
<h3 id="6-4-vertical-align"><a href="#6-4-vertical-align" class="headerlink" title="6.4 vertical-align"></a>6.4 vertical-align</h3><p>0.word</p>
<ul>
<li><a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/vertical">vertical</a></li>
</ul>
<p>1.概述</p>
<p>CSS 的 <strong>vertical-align</strong> 属性使用场景： 经常用于设置图片或者表单(行内块元素）和文字垂直对齐。</p>
<p>官方解释： 用于设置一个元素的<strong>垂直对齐方式</strong>，但是它只针对于行内元素或者行内块元素有效。</p>
<p>语法：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">vertical-align : baseline | top | middle | bottom </span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">baseline</td>
<td align="center">默认。元素放置在父元素的基线上</td>
</tr>
<tr>
<td align="center">top</td>
<td align="center">把元素的顶端与行中最高元素的顶端对齐</td>
</tr>
<tr>
<td align="center">middle</td>
<td align="center">把此元素放置在父元素的中部</td>
</tr>
<tr>
<td align="center">bottom</td>
<td align="center">把元素的顶端与行中最低的元素的顶端对齐</td>
</tr>
</tbody></table>
<p><img src="http://bucket-c70.test.upcdn.net/12/69.png" alt="69"></p>
<br />

<hr>
<p>2.默认基线</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/70.png" alt="70"></p>
<p>3.设置成底线</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br />

<p><img src="http://bucket-c70.test.upcdn.net/12/71.png" alt="71"></p>
<p>3.图片与文字垂直居中：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="2-记住"><a href="#2-记住" class="headerlink" title="2. 记住"></a>2. 记住</h4><p>1.它只针对于行内元素或者行内块元素有效。</p>
<p>2.如果不是，则要转换</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/72.png" alt="72"></p>
<ul>
<li><p>不过，<code>&lt;i&gt;</code>是行内元素，应该不需要转换</p>
<p>我实验过，在同一行(行内元素)，且高度宽度无效(不是行内块元素)。是行内元素；</p>
</li>
</ul>
<p>3.即使是文本域，也可以让它与文字居中，文本域是行内块元素</p>
<hr>
<h2 id="7-符号"><a href="#7-符号" class="headerlink" title="7. 符号"></a>7. 符号</h2><ol>
<li>左箭头；<code>&amp;lt</code>，&amp;lt</li>
<li>右箭头；&amp;gt</li>
<li></li>
</ol>
<hr>
<h2 id="8-border-radius"><a href="#8-border-radius" class="headerlink" title="8. border-radius"></a>8. border-radius</h2><p>在 CSS3 中，新增了圆角边框样式，这样我们的盒子就可以变圆角了。</p>
<p>border-radius 属性用于设置元素的外边框圆角。</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/50.png" alt="50"></p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border-radius</span><span class="selector-pseudo">:length</span>;    </span><br></pre></td></tr></table></figure>

<ul>
<li><p>参数值可以为数值或百分比的形式</p>
</li>
<li><p>如果是正方形，想要设置为一个圆，把数值修改为高度或者宽度的一半即可，或者直接写为 50%</p>
</li>
<li><p>该属性是一个简写属性，可以跟四个值，分别代表左上角、右上角、右下角、左下角</p>
</li>
<li><p>分开写：border-top-left-radius、border-top-right-radius、border-bottom-right-radius 和border-bottom-left-radius</p>
</li>
<li><p>兼容性 ie9+ 浏览器支持, 但是不会影响页面布局,可以放心使用</p>
</li>
<li><p><code>&lt;length&gt;</code>定义圆形半径或椭圆的半长轴，半短轴。负值无效。</p>
<p><code>&lt;percentage&gt;</code></p>
<p>使用百分数定义圆形半径或椭圆的半长轴，半短轴。水平半轴相对于盒模型的宽度；垂直半轴相对于盒模型的高度。负值无效。</p>
</li>
</ul>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">border-radius: 1em/5em;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 等价于： */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">border-top-left-radius</span>:     1<span class="selector-tag">em</span> 5<span class="selector-tag">em</span>;</span><br><span class="line"><span class="selector-tag">border-top-right-radius</span>:    1<span class="selector-tag">em</span> 5<span class="selector-tag">em</span>;</span><br><span class="line"><span class="selector-tag">border-bottom-right-radius</span>: 1<span class="selector-tag">em</span> 5<span class="selector-tag">em</span>;</span><br><span class="line"><span class="selector-tag">border-bottom-left-radius</span>:  1<span class="selector-tag">em</span> 5<span class="selector-tag">em</span>;</span><br></pre></td></tr></table></figure>

<br />

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">border-radius: 4px 3px 6px / 2px 4px;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 等价于： */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">border-top-left-radius</span>:     4<span class="selector-tag">px</span> 2<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">border-top-right-radius</span>:    3<span class="selector-tag">px</span> 4<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">border-bottom-right-radius</span>: 6<span class="selector-tag">px</span> 2<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">border-bottom-left-radius</span>:  3<span class="selector-tag">px</span> 4<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure>

<p>椭圆就需要设置 两个属性，一个半长轴，一个半短轴；</p>
<p>3.设置一个xpx属性，就是圆，半长轴=半短轴；</p>
<p>3.1 而百分比不是；</p>
<ul>
<li><p>百分比：x*百分比，Y*百分比</p>
</li>
<li><p>不过，如果是正方形，是个圆；</p>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.w</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果不是正方形，就是椭圆；</p>
</li>
</ul>
<hr>
<h2 id="9-引用css"><a href="#9-引用css" class="headerlink" title="9. 引用css"></a>9. 引用css</h2><p>1.三种方法：</p>
<ul>
<li>外部样式表(External style sheet)</li>
<li>内部样式表(Internal style sheet)</li>
<li>内联样式(Inline style)</li>
</ul>
<h3 id="9-1外部样式表"><a href="#9-1外部样式表" class="headerlink" title="9.1外部样式表"></a>9.1外部样式表</h3><p>1.当样式需要应用于很多页面时，外部样式表将是理想的选择。在使用外部样式表的情况下，你可以通过改变一个文件来改变整个站点的外观。每个页面使用 <code>&lt;link&gt;</code> 标签链接到样式表。 <code>&lt;link&gt;</code> 标签在（文档的）头部：</p>
<ul>
<li><code>&lt;head&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt; &lt;/head&gt;</code></li>
</ul>
<p>2.浏览器会从文件 mystyle.css 中读到样式声明，并根据它来格式文档。</p>
<p>3.外部样式表可以在任何文本编辑器中进行编辑。文件不能包含任何的 html 标签。样式表应该以 .css 扩展名进行保存。下面是一个样式表文件的例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">hr</span> &#123;<span class="attribute">color</span>:sienna;&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>:<span class="number">20px</span>;&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&quot;/images/back40.gif&quot;</span>);&#125;</span><br></pre></td></tr></table></figure>

<p>不要在属性值与单位之间留有空格（如：”margin-left: 20 px” ），正确的写法是 “margin-left: 20px” 。</p>
<hr>
<h3 id="9-2内部样式表"><a href="#9-2内部样式表" class="headerlink" title="9.2内部样式表"></a>9.2内部样式表</h3><p>1.当单个文档需要特殊的样式时，就应该使用内部样式表。你可以使用 <code>&lt;style&gt;</code> 标签在文档头部定义内部样式表，就像这样:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">hr</span> &#123;<span class="attribute">color</span>:sienna;&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>:<span class="number">20px</span>;&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span> &#123;<span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&quot;images/back40.gif&quot;</span>);&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<hr>
<h3 id="9-3-内联样式"><a href="#9-3-内联样式" class="headerlink" title="9.3 内联样式"></a>9.3 内联样式</h3><p>1.由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势。请慎用这种方法，</p>
<p>例如当样式仅需要在一个元素上应用一次时。</p>
<p>2.要使用内联样式，你需要在相关的标签内使用样式（style）属性。Style 属性可以包含任何 </p>
<p>CSS 属性。本例展示如何改变段落的颜色和左外边距：</p>
<p><code>&lt;p style=&quot;color:sienna;margin-left:20px&quot;&gt;这是一个段落。&lt;/p&gt;</code></p>
<hr>
<h3 id="9-4-优先级"><a href="#9-4-优先级" class="headerlink" title="9.4 优先级"></a>9.4 优先级</h3><p>样式表允许以多种方式规定样式信息。样式可以规定在单个的 HTML 元素中，在 HTML 页的头元素中，或在一个外部的 CSS 文件中。甚至可以在同一个 HTML 文档内部引用多个外部样式表。</p>
<p>一般情况下，优先级如下：</p>
<p><strong>内联样式）Inline style &gt; （内部样式）Internal style sheet &gt;（外部样式）External style sheet &gt; 浏览器默认样式</strong></p>
<p><strong>注意</strong>：如果外部样式放在内部样式的后面，则外部样式将覆盖内部样式。</p>
<ul>
<li>因为执行html代码是，从前到后的；</li>
</ul>
<hr>
<h2 id="10-伪类-和伪元素"><a href="#10-伪类-和伪元素" class="headerlink" title="10. 伪类(:)和伪元素(::)"></a>10. 伪类(:)和伪元素(::)</h2><p><a href="https://blog.csdn.net/cuishizun/article/details/89188574">https://blog.csdn.net/cuishizun/article/details/89188574</a></p>
<p>2020-10-30 13:01:41</p>
<h3 id="1-伪元素同级"><a href="#1-伪元素同级" class="headerlink" title="1. 伪元素同级"></a>1. 伪元素同级</h3><p>1.X::after 与X::before ，与X的元素是同级的</p>
<ul>
<li>不能当X元素的子元素；</li>
<li>所以X不能做::after它们的相对定位；</li>
<li>2021-3-21 18:12:49</li>
</ul>
<h2 id="11-行内元素"><a href="#11-行内元素" class="headerlink" title="11. 行内元素"></a>11. 行内元素</h2><p>1.有哪些：</p>
<p>下面的元素都是行内元素：</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/b">b</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/big">big</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/i">i</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/small">small</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/tt">tt</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/abbr">abbr</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/acronym">acronym</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/cite">cite</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/code">code</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/dfn">dfn</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/em">em</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/kbd">kbd</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/strong">strong</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/samp">samp</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/var">var</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/a">a</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/bdo">bdo</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/br">br</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Img">img</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/map">map</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/object">object</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/q">q</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Script">script</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/span">span</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/sub">sub</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/sup">sup</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button">button</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input">input</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/label">label</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/select">select</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/textarea">textarea</a></li>
</ul>
<h2 id="12-居中"><a href="#12-居中" class="headerlink" title="12. 居中"></a>12. 居中</h2><h3 id="12-1-块级元素"><a href="#12-1-块级元素" class="headerlink" title="12.1 块级元素"></a>12.1 块级元素</h3><p>外边距可以让块级盒子水平居中的两个条件：</p>
<ul>
<li>盒子必须指定了宽度（width）。</li>
<li>盒子左右的外边距都设置为 auto 。</li>
</ul>
<p>常见的写法，以下三种都可以：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">margin-left</span>: <span class="selector-tag">auto</span>;   <span class="selector-tag">margin-right</span>: <span class="selector-tag">auto</span>;</span><br><span class="line"><span class="selector-tag">margin</span>: <span class="selector-tag">auto</span>;</span><br><span class="line"><span class="selector-tag">margin</span>: 0 <span class="selector-tag">auto</span>;</span><br></pre></td></tr></table></figure>

<h3 id="12-2-内联元素"><a href="#12-2-内联元素" class="headerlink" title="12.2 内联元素"></a>12.2 内联元素</h3><p>注意：以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加 text-align:center 即可。</p>
<p>不过：在12.3-3.4-3.7处：</p>
<blockquote>
<p>2.2 我用了方法三，给.logo img的父元素，.logo a，设置了text-align:center;</p>
<ul>
<li>无效；</li>
</ul>
<p>2.3 于是我给.logo a的父元素，.logo设置了text-align:center;</p>
<ul>
<li>有效；</li>
</ul>
<p>2.4 难道，父元素不是块级元素的text-align:center;没有效果？</p>
</blockquote>
<h3 id="12-3-区别："><a href="#12-3-区别：" class="headerlink" title="12.3 区别："></a>12.3 区别：</h3><p>1.有感：<a href="https://www.imooc.com/qadetail/263793?t=427483">https://www.imooc.com/qadetail/263793?t=427483</a></p>
<blockquote>
<p>text-align:center是指使父元素里面的文本居中，上面的文字与图片都属于div的文本。而这个div没设置宽度，没设置宽度的块元素默认是100%宽，也就是与浏览器一样宽。。你不信在样式里面加一个width：700px,你看看效果。。然后再加一个margin：0 auto;</p>
</blockquote>
<p>2.text-align: center;是设置内容居中</p>
<ul>
<li>盒子本身位置没变。内容相对于盒子居中。</li>
<li>但盒子本身宽度有页面宽，那么内容居中，就会等于页面居中；不是垂直居中，那个是真正的页面整个的居中；</li>
</ul>
<p>3.margin: 0 auto；是当前整个盒子居中；</p>
<ul>
<li>内容没有变化，例如：图片，文字；但，如果内容本身居中盒子，就会有居中在页面的假象；</li>
</ul>
<h2 id="13-html文本右侧不对齐"><a href="#13-html文本右侧不对齐" class="headerlink" title="13. html文本右侧不对齐"></a>13. html文本右侧不对齐</h2><p>1.代码：</p>
<p>div{<br>    text-align: justify;<br>}</p>
<p>2.来源：<a href="https://blog.csdn.net/didudidudu/article/details/83820155">https://blog.csdn.net/didudidudu/article/details/83820155</a></p>
<ul>
<li>感谢；2021-3-9 16:07:12</li>
</ul>
<p>3.text-align属性指定元素文本的水平对齐方式。</p>
<p>属性：</p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">left</td>
<td align="left">把文本排列到左边。默认值：由浏览器决定。</td>
</tr>
<tr>
<td align="left">right</td>
<td align="left">把文本排列到右边。</td>
</tr>
<tr>
<td align="left">center</td>
<td align="left">把文本排列到中间。</td>
</tr>
<tr>
<td align="left">justify[^1]</td>
<td align="left">实现两端对齐文本效果。</td>
</tr>
<tr>
<td align="left">inherit</td>
<td align="left">规定应该从父元素继承 text-align 属性的值。</td>
</tr>
</tbody></table>
<hr>
<h2 id="14-width-100-与-max-width-100"><a href="#14-width-100-与-max-width-100" class="headerlink" title="14. width:100% 与 max-width:100%"></a>14. width:100% 与 max-width:100%</h2><ol>
<li><strong>width:100% 和 max-width:100%的区别：</strong><br>width: 100%(不包括margin和padding和border)是将所有指定元素的宽度拉伸或收缩到和父元素的宽度一致，<br>而max-width: 100%则是如果指定元素的宽度不超过父元素的宽度，<br>则大小不变，如果超过了父元素的宽度，则将宽度收缩为父元素的宽度。</li>
<li>来源：<a href="https://blog.csdn.net/weixin_42220130/article/details/91383922">https://blog.csdn.net/weixin_42220130/article/details/91383922</a></li>
<li>宽度有用，高度好像不行；2021-3-11 14:48:12</li>
</ol>
<hr>
<h2 id="15-背景图片为什么用上一级"><a href="#15-背景图片为什么用上一级" class="headerlink" title="15. 背景图片为什么用上一级"></a>15. 背景图片为什么用上一级</h2><ol>
<li>如图</li>
</ol>
<p><img src="../../img/4/1.png" alt="1"></p>
<ol start="2">
<li>因为，这是从css开始找的；</li>
</ol>
<ul>
<li>如果是从html开始找，images和html在同一级文件夹。应该./；而没有</li>
<li>开始，几思不得其解；</li>
</ul>
<p>2.1 哦，这是css，应该是从css去找。我觉得这个想法可行！而效果确实也有；</p>
<p>2021-3-11 10:19:50</p>
<hr>
<h2 id="16-背景颜色透明"><a href="#16-背景颜色透明" class="headerlink" title="16. 背景颜色透明"></a>16. 背景颜色透明</h2><p>1.background-color属性设置一个元素的背景颜色。</p>
<p>元素的背景是元素的总大小，包括填充和边界（但不包括边距）。</p>
<p>2.</p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>color</em></td>
<td align="left">指定背景颜色。在<a href="https://www.runoob.com/css/css-colors-legal.html">CSS颜色值</a>近可能的寻找一个颜色值的完整列表。</td>
</tr>
<tr>
<td align="left">transparent</td>
<td align="left">指定背景颜色应该是透明的。这是默认</td>
</tr>
<tr>
<td align="left">inherit</td>
<td align="left">指定背景颜色，应该从父元素继承</td>
</tr>
</tbody></table>
<hr>
<h2 id="17-搜索框"><a href="#17-搜索框" class="headerlink" title="17. 搜索框"></a>17. 搜索框</h2><p>1.不过这个是自己做的；</p>
<p>F:\三次元\7-希望总部-工作\3-代码\2-科技学院就业网2</p>
<p>2.目前就写了个目录；是在笔记本里面；2021-3-12 14:27:11</p>
<p>3.CSS：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.search</span> &#123;</span><br><span class="line">    <span class="attribute">display        </span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">    <span class="attribute">position       </span>: absolute;</span><br><span class="line">    <span class="attribute">top            </span>: <span class="number">37px</span>;</span><br><span class="line">    <span class="attribute">left           </span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform      </span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">height         </span>: <span class="number">39px</span>;</span><br><span class="line">    <span class="attribute">width          </span>: <span class="number">1200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search1</span> &#123;</span><br><span class="line">    <span class="attribute">width   </span>: <span class="number">261px</span>;</span><br><span class="line">    <span class="attribute">height  </span>: <span class="number">39px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search1</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">width           </span>: <span class="number">225px</span>;</span><br><span class="line">    <span class="attribute">height          </span>: <span class="number">37px</span>;</span><br><span class="line">    <span class="attribute">max-height      </span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border          </span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-radius   </span>: <span class="number">17px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: transparent;</span><br><span class="line">    <span class="attribute">color           </span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">padding-left    </span>: <span class="number">17px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search1</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">position  </span>: absolute;</span><br><span class="line">    <span class="attribute">top       </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right     </span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">width     </span>: <span class="number">41px</span>;</span><br><span class="line">    <span class="attribute">height    </span>: <span class="number">41px</span>;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(../images/<span class="number">8</span>-形状.png) center no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="18-z-index无效"><a href="#18-z-index无效" class="headerlink" title="18. z-index无效"></a>18. z-index无效</h2><p>1.给本来的盒子设置不行</p>
<ul>
<li>要给父元素设置；</li>
</ul>
<p>2.来源：<a href="https://blog.csdn.net/u014022865/article/details/53579238?utm_source=blogxgwz6&amp;utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/u014022865/article/details/53579238?utm_source=blogxgwz6&amp;utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&amp;spm=1001.2101.3001.4242</a></p>
<p>3.时间：2021-3-15 20:10:35</p>
<p>4.如果是同一个父元素的，z-index设置成子元素，也有效果；2021-3-19 15:41:49</p>
<ul>
<li>代码写的时候，写出来有效果；2021-3-19 15:41:57</li>
</ul>
<p>5.==应该是在同一个定位里面才相互作用==；</p>
<ul>
<li>比如在A的相对定位里面；</li>
<li>如果在A的相对定位里面的B的绝对定位里面，又有两个绝对定位c与d，那么就是c与d</li>
</ul>
<hr>
<h2 id="19-文本垂直"><a href="#19-文本垂直" class="headerlink" title="19. 文本垂直"></a>19. 文本垂直</h2><p>1.；<a href="https://www.runoob.com/cssref/css-pr-writing-mode.html">https://www.runoob.com/cssref/css-pr-writing-mode.html</a></p>
<p>2.；MDN；<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/writing-mode">https://developer.mozilla.org/zh-CN/docs/Web/CSS/writing-mode</a></p>
<p>3.<strong><code>writing-mode</code></strong> 属性定义了文本水平或垂直排布以及在块级元素中文本的行进方向。为整个文档设置书时，应在根元素上设置它（对于 HTML 文档应该在 <code>html</code> 元素上设置）</p>
<p>此属性指定块流动方向，即块级容器堆叠的方向，以及行内内容在块级容器中的流动方向。因此，它也确定块级内容的顺序。</p>
<p>4.属性：</p>
<ul>
<li>horizontal-tb：水平方向自上而下的书写方式。即 left-right-top-bottom</li>
<li>vertical-rl：垂直方向自右而左的书写方式。即 top-bottom-right-left</li>
<li>vertical-lr：垂直方向内内容从上到下，水平方向从左到右<ul>
<li>这解释怎么有点拗口？到底文本是垂直方向还是水平的方向？</li>
</ul>
</li>
<li>sideways-rl：内容垂直方向从上到下排列</li>
<li>sideways-lr：内容垂直方向从下到上排列</li>
</ul>
<p>5.value-MDN：</p>
<ul>
<li><p><code>horizontal-tb</code></p>
<p>对于左对齐(ltr)脚本，内容从左到右水平流动。对于右对齐(rtr)脚本，内容从右到左水平流动。下一水平行位于上一行下方。</p>
</li>
<li><p><code>vertical-rl</code></p>
<p>对于左对齐(ltr)脚本，内容从上到下垂直流动，下一垂直行位于上一行左侧。对于右对齐(rtr)脚本，内容从下到上垂直流动，下一垂直行位于上一行右侧。</p>
</li>
<li><p><code>vertical-lr</code></p>
<p>对于左对齐(ltr)脚本，内容从上到下垂直流动，下一垂直行位于上一行右侧。对于右对齐(rtr)脚本，内容从下到上垂直流动，下一垂直行位于上一行左侧。</p>
</li>
<li><p><code>sideways-rl</code></p>
<p>对于左对齐(ltr)脚本，内容从下到上垂直流动。对于右对齐(rtr)脚本，内容从上到下垂直流动。所有字形（即使是垂直脚本中的字形）都朝向右侧。</p>
</li>
<li><p><code>sideways-lr</code></p>
<p>对于左对齐(ltr)脚本，内容从上到下垂直流动。对于右对齐(rtr)脚本，内容从下到上垂直流动。所有字形（即使是垂直脚本中的字形）都朝向左侧。</p>
</li>
<li><p><code>lr</code> </p>
<p>除 SVG1 文档外，已弃用。对于 CSS，请改用 <code>horizontal-tb</code>。</p>
</li>
<li><p><code>lr-tb</code> </p>
<p>除 SVG1 文档外，已弃用。对于 CSS，请改用 <code>horizontal-tb</code>。</p>
</li>
<li><p><code>rl</code> </p>
<p>除 SVG1 文档外，已弃用。对于 CSS，请改用 <code>horizontal-tb</code>。</p>
</li>
<li><p><code>tb</code> </p>
<p>除 SVG1 文档外，已弃用。对于 CSS，请改用 <code>vertical-lr</code>。</p>
</li>
<li><p><code>tb-rl</code> </p>
<p>除 SVG1 文档外，已弃用。对于 CSS，请改用 <code>vertical-rl</code>。</p>
</li>
</ul>
<hr>
<h2 id="20-字体"><a href="#20-字体" class="headerlink" title="20. 字体"></a>20. 字体</h2><h3 id="1-添加字体"><a href="#1-添加字体" class="headerlink" title="1. 添加字体"></a>1. 添加字体</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">            <span class="attribute">font-family</span>: <span class="string">&#x27;hzgb&#x27;</span>;</span><br><span class="line">            <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;./font/汉真广标艺术字体.ttf&#x27;</span>)<span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="attribute">font-family</span>: <span class="string">&#x27;pmzd&#x27;</span>;</span><br><span class="line">            <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;./font/庞门正道标题体.ttf&#x27;</span>)<span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>format[^2]</p>
<h3 id="2-字体的高"><a href="#2-字体的高" class="headerlink" title="2. 字体的高"></a>2. 字体的高</h3><p>1.font-size: xxpx；</p>
<p>这个px，是字体的宽；</p>
<p>2.那么高怎么算？2021-3-24 16:22:13</p>
<ul>
<li>居然没百度到；</li>
<li>2021-3-24 16:23:58</li>
</ul>
<p>3.</p>
<h3 id="3-css-开头"><a href="#3-css-开头" class="headerlink" title="3. css@开头"></a>3. css@开头</h3><p>1.在css里面，这个@到底是什么东西？</p>
<ul>
<li>2021-4-25 17:23:02</li>
</ul>
<hr>
<h2 id="21-input"><a href="#21-input" class="headerlink" title="21. input"></a>21. input</h2><h3 id="1-有搜索type"><a href="#1-有搜索type" class="headerlink" title="1. 有搜索type"></a>1. 有搜索type</h3><table>
<thead>
<tr>
<th>search</th>
<th>定义用于输入搜索字符串的文本字段。</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p><a href="https://www.runoob.com/tags/att-input-type.html">https://www.runoob.com/tags/att-input-type.html</a></p>
</blockquote>
<h2 id="22-四边阴影"><a href="#22-四边阴影" class="headerlink" title="22. 四边阴影"></a>22. 四边阴影</h2><p>1.box-shadow，怎么设置单边的阴影呢？</p>
<p>2.好像是偏移就可以了，2333；</p>
<ul>
<li>这么说，阴影一直都有背景那么大；</li>
</ul>
<p>3.代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en-US&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>box-shadow设置单边阴影效果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box-shadow</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            border-radius: 5px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">            margin: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.top</span> &#123;</span></span><br><span class="line">            box-shadow: 0 -2px 0 red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            box-shadow: 2px 0 0 green;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.bottom</span> &#123;</span></span><br><span class="line">            box-shadow: 0 2px 0 blue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">            box-shadow: -2px 0 0 orange;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-shadow top&quot;</span>&gt;</span>div&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-shadow right&quot;</span>&gt;</span>div&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-shadow bottom&quot;</span>&gt;</span>div&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-shadow left&quot;</span>&gt;</span>div&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.1 来源：</p>
<p><a href="https://blog.csdn.net/x619y/article/details/77774659">https://blog.csdn.net/x619y/article/details/77774659</a></p>
<h2 id="23-行内元素有宽高"><a href="#23-行内元素有宽高" class="headerlink" title="23. 行内元素有宽高"></a>23. 行内元素有宽高</h2><p>1.display：block；</p>
<p>2.定位：大概是绝对定位，absolute;相对的不知道行不行；</p>
<ul>
<li>2021-3-22 15:25:36</li>
</ul>
<p>2.1 更多信息：<a href="https://blog.csdn.net/m0_37686205/article/details/90896964">https://blog.csdn.net/m0_37686205/article/details/90896964</a></p>
<hr>
<h2 id="24-光标"><a href="#24-光标" class="headerlink" title="24. 光标"></a>24. 光标</h2><blockquote>
<p><a href="https://www.w3school.com.cn/cssref/pr_class_cursor.asp">https://www.w3school.com.cn/cssref/pr_class_cursor.asp</a></p>
</blockquote>
<p>1.定义和用法</p>
<p>cursor 属性规定要显示的光标的类型（形状）。</p>
<p>该属性定义了鼠标指针放在一个元素边界范围内时所用的光标形状（不过 CSS2.1 没有定义由哪个边界确定这个范围）。</p>
<h2 id="25-字母间距"><a href="#25-字母间距" class="headerlink" title="25. 字母间距"></a>25. 字母间距</h2><blockquote>
<p><a href="https://www.runoob.com/cssref/pr-text-letter-spacing.html">https://www.runoob.com/cssref/pr-text-letter-spacing.html</a></p>
</blockquote>
<p>letter-spacing</p>
<h2 id="26-文字对顶"><a href="#26-文字对顶" class="headerlink" title="26. 文字对顶"></a>26. 文字对顶</h2><p>1.文字对顶。</p>
<p>2.平常不对顶。</p>
<p><img src="../../img/4/2.png" alt="2"></p>
<p>3.<strong>设置行高，一般和高度一样即可</strong>；</p>
<ul>
<li>块元素也行；</li>
<li>不用去用，行内，行内块元素的，基线那些；</li>
</ul>
<p>4.当然可能没基线那么专业，但方便；</p>
<ul>
<li>块元素之间方便排版；2021-3-26 12:06:04</li>
</ul>
<p>5.==是不是还是没效果==？；2021-4-9 16:01:35</p>
<p>看了MDN文档后，发现没有说文字对顶；</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/vertical-align">https://developer.mozilla.org/zh-CN/docs/Web/CSS/vertical-align</a></p>
<p><img src="../../img/4/3.png" alt="2"></p>
<hr>
<h2 id="27-linear-gradient"><a href="#27-linear-gradient" class="headerlink" title="27. linear-gradient"></a>27. linear-gradient</h2><p>1.是background-image的属性，渐变；</p>
<p>2.MDN：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/linear-gradient()">https://developer.mozilla.org/zh-CN/docs/Web/CSS/linear-gradient()</a></p>
<p>3.里面的度数，不是从 默认的 从上到下 的 初始方向为 0度；</p>
<ul>
<li>而是反着的，从下往上是0度。</li>
<li>默认的是180deg；</li>
</ul>
<p>4.</p>
<h2 id="28-object-fit"><a href="#28-object-fit" class="headerlink" title="28. object-fit"></a>28. object-fit</h2><p>1.object-fit 属性指定元素的内容应该如何去适应指定容器的高度与宽度。</p>
<p>object-fit 一般用于 img 和 video 标签，一般可以对这些元素进行保留原始比例的剪切、缩放或者直接进行拉伸等。</p>
<p>您可以通过使用 <a href="https://www.runoob.com/cssref/pr-object-position.html">object-position</a> 属性来切换被替换元素的内容对象在元素框内的对齐方式。</p>
<p>2.<a href="https://www.runoob.com/cssref/pr-object-fit.html">https://www.runoob.com/cssref/pr-object-fit.html</a></p>
<p>3.MDN:<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/object-fit">https://developer.mozilla.org/zh-CN/docs/Web/CSS/object-fit</a></p>
<p>2021-4-8 10:27:36</p>
<hr>
<h2 id="29-background"><a href="#29-background" class="headerlink" title="29. background"></a>29. background</h2><h3 id="1-菜鸟教程"><a href="#1-菜鸟教程" class="headerlink" title="1.菜鸟教程:"></a>1.菜鸟教程:</h3><p><a href="https://www.runoob.com/cssref/css3-pr-background.html">https://www.runoob.com/cssref/css3-pr-background.html</a></p>
<h4 id="1-1-标签的定义"><a href="#1-1-标签的定义" class="headerlink" title="1.1 标签的定义"></a>1.1 标签的定义</h4><p>背景缩写属性可以在一个声明中设置所有的背景属性。</p>
<p>可以设置的属性分别是：background-color、background-position、background-size、background-repeat、background-origin、background-clip、background-attachment 和 background-image。</p>
<p>各值之间用空格分隔，不分先后顺序。可以只有其中的某些值，例如 <strong>background：＃FF0000 URL（smiley.gif);</strong> 是允许的。</p>
<h3 id="2-MDN"><a href="#2-MDN" class="headerlink" title="2. MDN"></a>2. MDN</h3><blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background">https://developer.mozilla.org/zh-CN/docs/Web/CSS/background</a></p>
</blockquote>
<p>1.<strong><code>background</code></strong> 是一种 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a> 简写属性，用于一次性集中定义各种背景属性，包括 color, image, origin 与 size, repeat 方式等等</p>
<h2 id="30-button"><a href="#30-button" class="headerlink" title="30. button"></a>30. button</h2><h3 id="1-button可以与form联用吗？"><a href="#1-button可以与form联用吗？" class="headerlink" title="1. button可以与form联用吗？"></a>1. button可以与form联用吗？</h3><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/276289903">https://zhuanlan.zhihu.com/p/276289903</a></p>
</blockquote>
<p>1.看到了a与form的区别：</p>
<ul>
<li><strong>a标签和form标签的区别：</strong><br>a标签跳转页面时发起的是 <strong>http get</strong> 请求。<br>form标签跳转页面时发起的请求方式可以通过 <strong>method</strong> 设置；</li>
</ul>
<p>2.在form表单中，如果button没有加type属性，则默认type为submit。</p>
<ul>
<li>看来是能使用的</li>
<li>2.不过也看到有网友出错；2021-4-25 16:56:25</li>
</ul>
<h3 id="2-单独的button也有form效果"><a href="#2-单独的button也有form效果" class="headerlink" title="2. 单独的button也有form效果"></a>2. 单独的button也有form效果</h3><p>1.<a href="https://www.runoob.com/tags/tag-button.html">https://www.runoob.com/tags/tag-button.html</a></p>
<ul>
<li><p>不过麻烦很多</p>
</li>
<li><p>2021-4-25 17:00:04</p>
</li>
</ul>
<h2 id="31-input与label不对齐"><a href="#31-input与label不对齐" class="headerlink" title="31. input与label不对齐"></a>31. input与label不对齐</h2><p>1.html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;u_name&quot;</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;u_name&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">form</span> &#123;</span><br><span class="line">    <span class="attribute">width      </span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height     </span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">36px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">form</span>&gt;<span class="selector-tag">label</span> &#123;</span><br><span class="line">    <span class="attribute">font-size     </span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">line-height   </span>: <span class="number">46px</span>;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">color         </span>: <span class="number">#333333</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#u_name</span> &#123;</span><br><span class="line">    <span class="attribute">width           </span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height          </span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f9f9f9</span>;</span><br><span class="line">    <span class="attribute">border-radius   </span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border          </span>: solid <span class="number">1px</span> <span class="number">#e6e6e6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3.给label添加：vertical-align: middle;</p>
<ul>
<li>对齐了</li>
</ul>
<p>4.但是：</p>
<ul>
<li><p>1.单独给input加vertical-align: middle;</p>
<ul>
<li><p>input变高了？？</p>
</li>
<li><p>没有对齐</p>
</li>
</ul>
</li>
<li><p>2.可以说给input加无效；</p>
</li>
</ul>
<p>5.查看vertical-align效果；</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/vertical-align">https://developer.mozilla.org/zh-CN/docs/Web/CSS/vertical-align</a></p>
</blockquote>
<ul>
<li>1.这里是，相对父元素</li>
<li>2.那么给label设置，怎么与input有关系了？</li>
<li>3.难道input有自动对齐的效果？</li>
</ul>
<p>6.在F12找到了input的默认属性：vertical-align：baseline；</p>
<ul>
<li><p>1.相对父元素的值</p>
<p>这些值使元素相对其父元素垂直对齐：</p>
<ul>
<li><p><code>baseline</code></p>
<p>使元素的基线与父元素的基线对齐。HTML规范没有详细说明部分<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Replaced_element">可替换元素</a>的基线这意味着这些元素使用此值的表现因浏览器而异。</p>
</li>
</ul>
</li>
<li><p>2.那么父元素，form的基线是怎样的？</p>
<ul>
<li>1.卡主；</li>
</ul>
</li>
</ul>
<h3 id="2-结论"><a href="#2-结论" class="headerlink" title="2. 结论"></a>2. 结论</h3><p>1.就是能对齐，不知道原因；2021-4-25 18:45:27</p>
<h2 id="X-题注"><a href="#X-题注" class="headerlink" title="X. 题注"></a>X. 题注</h2><p>[^1]:justify 英 [ˈdʒʌstɪfaɪ]   美 [ˈdʒʌstɪfaɪ]<br>v.证明…正确(或正当、有理);对…作出解释;为…辩解(或辩护);调整使全行排满;使每行排齐;使齐行</p>
<p>[^2]:format 英 [ˈfɔːmæt]   美 [ˈfɔːrmæt]<br>n.总体安排;计划;设计;(出版物的)版式，开本;格式<br>v.格式化;安排…的版式</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>5-Markdown_note</title>
    <url>/1-(0~50)/5-md%E8%AF%AD%E6%B3%95%E4%B8%8E%E6%8A%80%E5%B7%A7note/</url>
    <content><![CDATA[<p>这是md文件的一些语法；</p>
<h2 id="1-图片题注；"><a href="#1-图片题注；" class="headerlink" title="1. 图片题注；"></a>1. 图片题注；</h2><ul>
<li><p><code>&lt;center style=&quot;font-size:14px;color:#C0C0C0;text-decoration:underline&quot;&gt;图1.知乎&lt;/center&gt;</code></p>
<p>可以不要<code>text-decoration:underline</code> 就没有下划线；</p>
<p><code>&lt;center style=&quot;font-size:15px;color:#C0C0C0;&quot;&gt;图1&lt;/center&gt;</code></p>
<a id="more"></a>
</li>
<li><p>来源：<a href="https://www.zhihu.com/question/42802592">https://www.zhihu.com/question/42802592</a></p>
</li>
<li><p>实例：</p>
<center style="font-size:14px;color:#C0C0C0;text-decoration:underline">图1.知乎</center> 

<center style="font-size:14px;color:#C0C0C0;">图1.知乎</center> 

</li>
</ul>
<hr>
<h2 id="2-删除线"><a href="#2-删除线" class="headerlink" title="2.  删除线"></a>2.  删除线</h2><p>用~~把需要显示删除线的字符包裹起来</p>
<p><code>~~删除~~</code></p>
<p><del>删除</del> ;效果如左；</p>
<hr>
<h2 id="3-链接"><a href="#3-链接" class="headerlink" title="3. 链接"></a>3. 链接</h2><p><a href="https://www.runoob.com/markdown/md-link.html">https://www.runoob.com/markdown/md-link.html</a></p>
<p>链接使用方法如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">链接名称</span>](<span class="link">链接地址</span>)</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">链接地址</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>例如：</p>
<p><code>这是一个链接 [菜鸟教程](https://www.runoob.com)</code></p>
<p>这是一个链接 <a href="https://www.runoob.com">菜鸟教程</a></p>
<hr>
]]></content>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>6-github&#39;s problem_set + gitee</title>
    <url>/1-(0~50)/6-github&amp;&amp;gitee_problem/</url>
    <content><![CDATA[<h2 id="1-github问题集"><a href="#1-github问题集" class="headerlink" title="1. github问题集"></a>1. github问题集</h2><h3 id="1-github挂的网页没有样式"><a href="#1-github挂的网页没有样式" class="headerlink" title="1. github挂的网页没有样式"></a>1. github挂的网页没有样式</h3><p><img src="../../img/13/1.png" alt="Image"></p>
<a id="more"></a>

<div align='center'>
    <h4>
        1.2. 2020-7-22 20:44:31
    </h4>
</div>



<p><img src="../../img/13/2.png" alt="avatar"></p>
<p>仓库的名字不能乱改；</p>
<ul>
<li><p>2020-12-6 17:19:58</p>
</li>
<li><p>1.我现在不清楚这里说的对不对；因为仓库名称应该是不影响什么的；2020-12-6 17:20:25</p>
<p>1.1 在gitee里面仓库名称，随便改，不影响页面；</p>
</li>
</ul>
<p>后面的.github.io得要。</p>
<p>2020-7-22 20:54:09</p>
<p><img src="../../img/13/3.png" alt="Image"></p>
<hr>
<h2 id="2-gitee；"><a href="#2-gitee；" class="headerlink" title="2. gitee；"></a>2. gitee；</h2><h3 id="2-1-gitee显示不了博客了；"><a href="#2-1-gitee显示不了博客了；" class="headerlink" title="2.1 gitee显示不了博客了；"></a>2.1 gitee显示不了博客了；</h3><p>没有切到那个模样的图，差不多啥都没有，就只有个背景</p>
<p>报错的图也没截，记录报错的笔记还是不熟练，写不下笔记，只想着怎么去修改错误；</p>
<ol>
<li><p>以为是部署，gitee要手动部署（当然网上有自动部署的配置，我不会弄）部署后还是那个样子；</p>
</li>
<li><p>emmm，突然看到这句话；</p>
<blockquote>
<p>就是每次上传gitee文件后，还是老的页面，这是因为每次上传后必须手动在pages服务里，再点下更新，进行重新部署，要不然还是之前的页面缓存，我的感觉就是删除缓存……<br> pages pro据说可以自动更新，要99元/年，现在量小，用的也不频繁，先不买吧</p>
<p>作者：小魚傳説<br>链接：<a href="https://www.jianshu.com/p/1f860c8f93ef">https://www.jianshu.com/p/1f860c8f93ef</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<p>让我回想起缓存，于是我F12，在页面左上角刷新按钮，鼠标右键，点击第三个清理缓存；</p>
<p>成功；</p>
<p><img src="https://note.youdao.com/yws/public/resource/20880918385295a41922f241b7b5ca5d/xmlnote/73FFCB97B07B489D996CB6E07DD89597/39737" alt="图片_picture"></p>
<hr>
</li>
</ol>
<hr>
<h3 id="2-2-第二个号添加公匙"><a href="#2-2-第二个号添加公匙" class="headerlink" title="2.2 第二个号添加公匙"></a>2.2 第二个号添加公匙</h3><h4 id="0-哪个号？第二个号是？"><a href="#0-哪个号？第二个号是？" class="headerlink" title="0. 哪个号？第二个号是？"></a>0. 哪个号？第二个号是？</h4><p>1.<code>3293433914@qq.com</code></p>
<h4 id="1-步骤"><a href="#1-步骤" class="headerlink" title="1. 步骤"></a>1. 步骤</h4><p>1.在文章：7-blog’s_problem_set.md——4</p>
<ul>
<li><p>且在目录：C:\Users\Administrator.ssh下的config里</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gitee</span></span><br><span class="line"><span class="attr">Host</span> <span class="string">gitee.com</span></span><br><span class="line"><span class="attr">HostName</span> <span class="string">gitee.com</span></span><br><span class="line"><span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span><br><span class="line"><span class="attr">IdentityFile</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># github</span></span><br><span class="line"><span class="attr">Host</span> <span class="string">github_1.com</span></span><br><span class="line"><span class="attr">HostName</span> <span class="string">github.com</span></span><br><span class="line"><span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span><br><span class="line"><span class="attr">IdentityFile</span> <span class="string">C:/Users/Administrator/.ssh/id_rsa</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># github</span></span><br><span class="line"><span class="attr">Host</span> <span class="string">github.com</span></span><br><span class="line"><span class="attr">HostName</span> <span class="string">github.com</span></span><br><span class="line"><span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span><br><span class="line"><span class="attr">IdentityFile</span> <span class="string">C:/Users/Administrator/.ssh/id_rsa_gitee</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>得出：</p>
<p>id为：id_rsa_gitee，的密匙gitee还没用过；</p>
</li>
</ul>
<p>2.实验：不在config里面配置，直接用，看能行不</p>
<ul>
<li><p>先不部署了，先直接用gitee pages 生成的公匙看行不行；</p>
<p>不行；报错：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">warning</span>: LF will be replaced <span class="keyword">by</span> CRLF <span class="keyword">in</span> tags/blog/<span class="keyword">index</span>.html.</span><br><span class="line">The file will have its original <span class="type">line</span> endings <span class="keyword">in</span> your working directory</span><br><span class="line"><span class="built_in">warning</span>: LF will be replaced <span class="keyword">by</span> CRLF <span class="keyword">in</span> tags/<span class="keyword">index</span>.html.</span><br><span class="line">The file will have its original <span class="type">line</span> endings <span class="keyword">in</span> your working directory</span><br><span class="line"><span class="keyword">On</span> branch master</span><br><span class="line"><span class="keyword">nothing</span> <span class="keyword">to</span> <span class="keyword">commit</span>, working tree clean</span><br><span class="line"><span class="keyword">Access</span> deined: You <span class="keyword">do</span> <span class="keyword">not</span> have permission push <span class="keyword">to</span> this repository</span><br><span class="line">fatal: Could <span class="keyword">not</span> <span class="keyword">read</span> <span class="keyword">from</span> remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct <span class="keyword">access</span> rights</span><br><span class="line"><span class="keyword">and</span> the repository <span class="keyword">exists</span>.</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>3.继续配置</p>
<p>3.1 设置config</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gitee</span></span><br><span class="line">Host gitee_2.com</span><br><span class="line">HostName gitee.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile C:<span class="regexp">/Users/</span>Administrator<span class="regexp">/.ssh/i</span>d_rsa_gitee</span><br></pre></td></tr></table></figure>

<p>3.2 验证：<code>ssh -T git@gitee_2.com</code></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Administrator@</span>SKY<span class="number">-20160609</span>AOR MINGW64 ~/.ssh</span><br><span class="line">$ ssh -T <span class="symbol">git@</span>gitee_2.com</span><br><span class="line"><span class="symbol">git@</span>gitee.com: Permission denied (publickey).</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>git@gitee.com: Permission denied (publickey).</code></p>
<p>含义：<a href="mailto:git@gitee.com">git@gitee.com</a>：权限被拒绝（公钥）。</p>
</li>
</ul>
<p>3.3 是不是因为gitee那边没有配置的原因？</p>
<p>3.4 实验：</p>
<ul>
<li><p>注意：id_rsa.pub是公匙，id_rsa是私匙；</p>
</li>
<li><p>成功：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">Administrator</span><span class="meta">@SKY</span><span class="number">-20160609</span>AOR <span class="type">MINGW64</span> ~/.ssh</span><br><span class="line">$ ssh -<span class="type">T</span> git<span class="meta">@gitee</span>_2.com</span><br><span class="line">git<span class="meta">@gitee</span>.com: <span class="type">Permission</span> denied (publickey).</span><br><span class="line"></span><br><span class="line"><span class="type">Administrator</span><span class="meta">@SKY</span><span class="number">-20160609</span>AOR <span class="type">MINGW64</span> ~/.ssh</span><br><span class="line">$ ssh -<span class="type">T</span> git<span class="meta">@gitee</span>_2.com</span><br><span class="line"><span class="type">Hi</span> qilin2! <span class="type">You</span><span class="symbol">&#x27;ve</span> successfully authenticated, but <span class="type">GITEE</span>.<span class="type">COM</span> does not provide shell access.</span><br><span class="line"></span><br><span class="line"><span class="type">Administrator</span><span class="meta">@SKY</span><span class="number">-20160609</span>AOR <span class="type">MINGW64</span> ~/.ssh</span><br><span class="line">$</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>4.blog的config.yml配置：</p>
<ul>
<li>我的目录：G:\1-sanciyuan\11-qilin_meiyao_luka</li>
</ul>
<p>4.1 主要是：<code>gitee: git@gitee_2.com:qilin2/zkdm-2.git</code></p>
<ul>
<li><p>而不是：<code>gitee: git@gitee.com:qilin2/zkdm-2.git</code></p>
</li>
<li><pre><code>deploy:
  type: git
  #repo: https://gitee.com/qilinclolik/qilinclolik.git
  repo:
        # github: git@github_1.com:qilin-meiyao-luka/qilin-meiyao-luka.git
        gitee: git@gitee_2.com:qilin2/zkdm-2.git

  # example, https://github.com/hexojs/hexojs.github.io
  branch: master
&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;+&lt;/span&gt; 网址：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5.over;2020-9-7 05:28:06&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;#### 2. 疑问：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.如果先在gitee那边配置的公匙；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;+&lt;/span&gt; 不在先C:\Users\Administrator\.ssh下的config里配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;+&lt;/span&gt; 能不能用？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.即使能用，也无法准确的&lt;span class=&quot;code&quot;&gt;`ssh -T git@gitee_2.com`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;+&lt;/span&gt; 因为没那个host&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;#### 3. Host的含义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.在config文件里面，我们知道，是这样的格式：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;quote&quot;&gt;&amp;gt; Host gitee&lt;span class=&quot;emphasis&quot;&gt;_2.com&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;quote&quot;&gt;&lt;span class=&quot;emphasis&quot;&gt;&amp;gt; HostName gitee.com&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;quote&quot;&gt;&lt;span class=&quot;emphasis&quot;&gt;&amp;gt; PreferredAuthentications publickey&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;quote&quot;&gt;&lt;span class=&quot;emphasis&quot;&gt;&amp;gt; IdentityFile C:/Users/Administrator/.ssh/id_&lt;/span&gt;rsa&lt;span class=&quot;emphasis&quot;&gt;_gitee&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;quote&quot;&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;quote&quot;&gt;&lt;span class=&quot;emphasis&quot;&gt;![&lt;span class=&quot;string&quot;&gt;1&lt;/span&gt;](&lt;span class=&quot;link&quot;&gt;../../img/6/1.png&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;quote&quot;&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;quote&quot;&gt;&lt;span class=&quot;emphasis&quot;&gt;![&lt;span class=&quot;string&quot;&gt;2&lt;/span&gt;](&lt;span class=&quot;link&quot;&gt;../../img/6/2.png&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;quote&quot;&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;quote&quot;&gt;&lt;span class=&quot;emphasis&quot;&gt;2.百度翻译：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;quote&quot;&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;quote&quot;&gt;&lt;span class=&quot;emphasis&quot;&gt;Host github_&lt;/span&gt;1.com&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HostName github.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PreferredAuthentications publickey&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IdentityFile C:/Users/Administrator/.ssh/id&lt;span class=&quot;emphasis&quot;&gt;_rsa&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;emphasis&quot;&gt;主机github_&lt;/span&gt;1.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;主机名github.com网站&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;首选身份验证公钥&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IdentityFile C:/Users/Administrator/.ssh/id&lt;span class=&quot;emphasis&quot;&gt;_rsa标识文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;emphasis&quot;&gt;3.主机github_&lt;/span&gt;1.com ？下面那个HostName 虽然翻译是主机名，但应该和用在哪里的网址挂钩；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.作用：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;+&lt;/span&gt; 1.host需要与主题配置文件挂钩；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;+&lt;/span&gt; 2.查看了一下，记错了，没有关系；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;code&quot;&gt;```yaml&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;  deploy:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    type: git&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    #repo: https://gitee.com/qilinclolik/qilinclolik.git&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    repo:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;          github: git@github.com:Cqilin/Cqilin.github.io.git&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;          gitee: git@gitee.com:Cqilin/Cqilin.git&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    # example, https://github.com/hexojs/hexojs.github.io&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    branch: master&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre></li>
<li><p>3.那就是验证那里有猫腻：</p>
<p><img src="../../img/6/003.png" alt="3"></p>
<p>在git@的后面，接的是host ；</p>
</li>
</ul>
<h4 id="4-Hi后面的数据"><a href="#4-Hi后面的数据" class="headerlink" title="4. Hi后面的数据"></a>4. Hi后面的数据</h4><ul>
<li><p>4.新的问题：Hi后面是接的什么？qilin2它们具体是哪里的数据，什么决定它们？</p>
<p>4.1 我们去gitee网上看看，是否能找到一样的数据；</p>
<p>4.2 找到了，是姓名的数据，如图所示，特地看了两个号，减少误差</p>
<p><img src="../../img/6/4.png" alt="3"></p>
<p>4.3 那么github我估计，也是这样的；2020-10-8 02:11:00</p>
</li>
</ul>
<hr>
<h3 id="2-3-不能加载css"><a href="#2-3-不能加载css" class="headerlink" title="2.3. 不能加载css"></a>2.3. 不能加载css</h3><p>1.听说仓库名与个人名要一样</p>
<p><img src="http://bucket-c70.test.upcdn.net/6/1.png" alt="1"></p>
<p>2.试试</p>
<ul>
<li>成功</li>
</ul>
<hr>
<h3 id="2-4-上传"><a href="#2-4-上传" class="headerlink" title="2.4 上传"></a>2.4 上传</h3><p><a href="https://hexo.io/zh-cn/docs/commands">https://hexo.io/zh-cn/docs/commands</a></p>
<p>1.一般是：先 hexo clean,清理一下本地缓存？clean</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo clean</span><br></pre></td></tr></table></figure>

<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>
<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
<p>2.然后：hexo g 本地更新；生成静态文件。</p>
<ul>
<li><p><a href="https://fanyi.baidu.com/translate?aldtype=16047&query=generate&keyfrom=baidu&smartresult=dict&lang=auto2zh#en/zh/generate">generate</a></p>
<p>英 [ˈdʒenəreɪt]   美 [ˈdʒenəreɪt]  v.产生;引起</p>
</li>
</ul>
<p>3.<a href="https://fanyi.baidu.com/translate?aldtype=16047&query=#en/zh/deploy">deploy</a></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo deploy</span><br></pre></td></tr></table></figure>

<p>部署网站。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-g</code>, <code>--generate</code></td>
<td align="left">部署之前预先生成静态文件</td>
</tr>
</tbody></table>
<p>该命令可以简写为：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo d</span><br></pre></td></tr></table></figure>

<ul>
<li>2和3可以快捷为：hexo g -d </li>
</ul>
<hr>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>7-bolg</title>
    <url>/1-(0~50)/7-blog/</url>
    <content><![CDATA[<h1 id="0-使用"><a href="#0-使用" class="headerlink" title="0. 使用"></a>0. 使用</h1><h2 id="0-1-安装"><a href="#0-1-安装" class="headerlink" title="0.1 安装"></a>0.1 安装</h2><h3 id="1-1-前提安装"><a href="#1-1-前提安装" class="headerlink" title="1.1 前提安装"></a>1.1 前提安装</h3><p>1.安装hexo之前，要安装有node.js和git；</p>
<p><a href="https://hexo.io/zh-cn/docs/#安装前提">https://hexo.io/zh-cn/docs/#安装前提</a></p>
<a id="more"></a>

<h3 id="1-2-全局安装hexo"><a href="#1-2-全局安装hexo" class="headerlink" title="1.2 全局安装hexo"></a>1.2 全局安装hexo</h3><p>1.<code>npm install -g hexo-cli</code></p>
<ul>
<li>在cmd，或git bash 都行；我个人喜欢git bash</li>
<li>但两者不完全相同，有些命令不相同。</li>
</ul>
<h3 id="1-3-初始化hexo"><a href="#1-3-初始化hexo" class="headerlink" title="1.3 初始化hexo"></a>1.3 初始化hexo</h3><p>1.初始化，不是格式化，这里应该是新建一个hexo 的意思</p>
<p><code>hexo init &lt;folder&gt;</code></p>
<ul>
<li>我记得，我新建一个文件夹后，直接<code>hexo init</code>没有后面的<code>&lt;folder&gt;</code></li>
<li>folder<br>英 [ˈfəʊldə(r)]  美 [ˈfoʊldər]<br>n.文件夹;纸夹;(某些计算机系统中的)文件夹</li>
</ul>
<p>2.npm install</p>
<ul>
<li>按理说，这里没说安装什么，可能是因为前面初始化了hexo，所以这里就是安装hexo</li>
</ul>
<hr>
<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><p>1.配置，在_config里面配置，blog目录下；怎么配置，配置什么都是按需求的。</p>
<p>2.但是，新手，什么都不知道，即连可以有什么需求都不知道（我）</p>
<p>3.百度；</p>
<p>4.我也没有记录，我配置了些啥。也说不出；</p>
<ul>
<li><p>就算是为了自己，也留个云盘吧。随缘更新</p>
</li>
<li><p><a href="https://wws.lanzous.com/iolVsgk4k2h">配置文件-链接</a>，密码:ay6i</p>
</li>
</ul>
<h2 id="0-2-使用"><a href="#0-2-使用" class="headerlink" title="0.2 使用"></a>0.2 使用</h2><blockquote>
<p><a href="https://hexo.io/zh-cn/docs/commands">https://hexo.io/zh-cn/docs/commands</a></p>
</blockquote>
<p>1.一般改变了本地的东西，要重新静态与上传，要先clean</p>
<p>2.clean</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo clean</span><br></pre></td></tr></table></figure>

<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>
<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
<p>3.</p>
<h1 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h1><h3 id="0-博客注意事项"><a href="#0-博客注意事项" class="headerlink" title="0. 博客注意事项"></a>0. 博客注意事项</h3><hr>
<h4 id="0-1-自定义文件"><a href="#0-1-自定义文件" class="headerlink" title="0.1 自定义文件"></a>0.1 自定义文件</h4><p>1.如果有修改的文件可以自定义，就尽量在一旁新建一个文件使用；</p>
<!--more-->

<p><img src="http://bucket-c70.test.upcdn.net/7/4.png" alt="4"></p>
<h4 id="0-2-有时候hexo-s报错"><a href="#0-2-有时候hexo-s报错" class="headerlink" title="0.2 有时候hexo s报错"></a>0.2 有时候hexo s报错</h4><p>1.有时候hexo s 报错</p>
<ul>
<li>又不知道怎么呢</li>
</ul>
<p>2.或者你知道，刚才有个操作没保存，现在报错了</p>
<ul>
<li>确实修改了东西，但这个修改前后，之前都没报错</li>
<li>而现在修改就报错了</li>
</ul>
<p>3.你用了 hexo g</p>
<p>4.hexo clean 即可</p>
<p>5.具体为什么不知。</p>
<p>6.例如：</p>
<p>配置了加密</p>
<ul>
<li><pre><code>password: muyiio
abstract: 这里有东西被加密了，需要输入密码查看哦。
message: 您好，这里需要密码。
wrong_pass_message: 抱歉，这个密码看着不太对，请再试试。
wrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容
&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;如果hexo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;g过，不hexo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;clean，修改其中配置，hexo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;就会报错。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;明明没改博客的config，等其他系统配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;当时还有点慌，毕竟没改系统方面的配置怎么在报错？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#### 0.3 往下滑，页面缩小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.鼠标右键左上角刷新&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;选择清空缓存，并硬件刷新（其实我想清空缓存刷新，可都是硬件刷新）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;### 1. 博客图片不显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;![1.png](/img/14/1.png)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;绝对路径的&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;“/”号会被&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;变成%，无法识别；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;相对路径，不知道为什么没有用；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;但比较迷惑性的是，在Typora里面是看的到的；2020-7-22&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;:09:37&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;![1.png](../img/14/2.png)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#### 1.2. 最终&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.无意中发现了这个：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;![1.png](../img/14/3.png)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;虽然在typora里面看不到；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;但是hexo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;s能看到；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;组队说了：不能同时的，解析规则不一样；2020-9-5&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;:37:00&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;![1.png](/img/14/4.png)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.之后hexo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;试试；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;有效；2020-7-23&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;:24:50&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#### 1.3. 还是用网络&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;空间问题，还是把图片弄到网络上；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;目前用的有道云笔记&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;；2020-8-3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;:25:21&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#### 1.4 让typore可以预览&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.在上面1.2里，说了不能预览&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.因为，permalink没配置好&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;hexo的_config.yml&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;```yaml&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# URL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;## If your site is put in a subdirectory, set url as &amp;#x27;http://yoursite.com/child&amp;#x27; and root as &amp;#x27;/child/&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;url:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;https://qilinclolik.gitee.io&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#http://yoursite.com&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;root:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 永久链接格式：分类/文件名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;permalink:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;:title/&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;#:category/:title/ ; :lang/:title/ &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;permalink_defaults:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;pretty_urls:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;trailing_index:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Set to false to remove trailing &amp;#x27;index.html&amp;#x27; from permalinks&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;trailing_html:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Set to false to remove trailing &amp;#x27;.html&amp;#x27; from permalinks&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;


</code></pre></li>
</ul>
<ul>
<li><p>之前permalink那里是 :category/:title/</p>
</li>
<li><p>让每次url都多了一个category（分类名)</p>
</li>
</ul>
<p>3.改成<code>permalink: :title/</code>就好了</p>
<ul>
<li><p>为什么呢？</p>
</li>
<li><p>你看相对路径：例如：</p>
<ul>
<li><p>../img/14/2.png；</p>
</li>
<li><p>含义是：文字的上一级目录；</p>
<p><img src="../img/7/1.png" alt="1"></p>
<p>上一级目录是source，文章在_posts目录里面；</p>
</li>
</ul>
<p>3.3 好，回到source，然后进入img，进入14，获取2.png；</p>
<p>3.4 这就是相对路径的含义；<br>3.5 而以前的永久链接格式：</p>
<p>permalink: :category/:title/ ;让url多了一个category(分类名)</p>
<p>3.6 这样相对路径就找不到img了</p>
<ul>
<li>写成<code>../img/category/14/2.png</code>才可以；</li>
</ul>
</li>
</ul>
<h3 id="2-密匙已经被使用；"><a href="#2-密匙已经被使用；" class="headerlink" title="2. 密匙已经被使用；"></a>2. 密匙已经被使用；</h3><ol>
<li><p>也许在github，一个账户正在使用了一个ssh密匙后，那个ssh就会被记录。</p>
<p>而gitee那边不冲突；</p>
<p>一个ssh密匙，分别可以在github与gitee都使用；</p>
<!--more-->

<p>但一个密匙应该不能在两个github号上用；</p>
</li>
<li><p>只有这样假设了。去追求是否正确就不用了。</p>
</li>
<li><p>第二个github号：qilin-meiyao-luka，用的是3293-ssh密匙</p>
<p>唯一的gitee号也是这个密匙；</p>
<p>大号github，用的7920ssh密匙；</p>
<p>2020-8-7 18:35:45</p>
<hr>
</li>
</ol>
<h3 id="3-报错–not-found：git；"><a href="#3-报错–not-found：git；" class="headerlink" title="3. 报错–not found：git；"></a>3. 报错–not found：git；</h3><p><img src="https://i.loli.net/2020/08/07/rC3tXaVGJubNLBo.png" alt=""></p>
<p>那手动创建一个试试；</p>
<p><code>npm install hexo-deployer-git --save</code></p>
<p>不对，这是个插件，单纯的没安装这个插件。没有这个，应该就不能生成本地静态文件吧；</p>
<hr>
<h3 id="4-hexo-d-报错-–第二个github账号–ssh冲突；"><a href="#4-hexo-d-报错-–第二个github账号–ssh冲突；" class="headerlink" title="4. hexo d 报错 –第二个github账号–ssh冲突；"></a>4. hexo d 报错 –第二个github账号–ssh冲突；</h3><p>报错内容：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ERROR</span>: Permission to qilin-meiyao-luka/qilin-meiyao-luka.git denied to Cqilin.</span><br><span class="line"><span class="attribute">fatal</span>: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (G:\1-sanciyuan\11-qilin_meiyao_luka\node_modu</span><br><span class="line"><span class="attribute">les\hexo-deployer-git\node_modules\hexo-util\lib\spawn.js:51:21)</span></span><br><span class="line">      at ChildProcess.emit (events.js:210:5)</span><br><span class="line">      at ChildProcess.cp.emit (G:\1-sanciyuan\11-qilin_meiyao_luka\node_modules\</span><br><span class="line"><span class="attribute">cross-spawn\lib\enoent.js:34:29)</span></span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:272:12)</span><br><span class="line">&#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/do</span><br><span class="line"><span class="attribute">cs/troubleshooting.html</span></span><br></pre></td></tr></table></figure>

<br />

<p>貌似是找不到仓库地址；不弄了，累了；2020-8-7 19:18:14</p>
<h4 id="4-1-百度，多个ssh对应不同的github账号；"><a href="#4-1-百度，多个ssh对应不同的github账号；" class="headerlink" title="4.1 百度，多个ssh对应不同的github账号；"></a>4.1 百度，多个ssh对应不同的github账号；</h4><ul>
<li><p>虽然gitee用的3293-ssh，而不是大号github用的；</p>
</li>
<li><p>但在config里面有配置。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gitee</span></span><br><span class="line"><span class="attr">Host</span> <span class="string">gitee.com</span></span><br><span class="line"><span class="attr">HostName</span> <span class="string">gitee.com</span></span><br><span class="line"><span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span><br><span class="line"><span class="attr">IdentityFile</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"><span class="comment"># github</span></span><br><span class="line"><span class="attr">Host</span> <span class="string">github.com</span></span><br><span class="line"><span class="attr">HostName</span> <span class="string">github.com</span></span><br><span class="line"><span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span><br><span class="line"><span class="attr">IdentityFile</span> <span class="string">C:/Users/Administrator/.ssh/id_rsa_gitee</span></span><br></pre></td></tr></table></figure>

<p>根据网上资料所说：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">git<span class="meta">@github</span>.<span class="attr">com:</span>name/project.git (这是原来直接复制过来的的url)</span><br><span class="line">这时候要改一下:</span><br><span class="line">git<span class="meta">@github</span>_1.<span class="attr">com:</span>name/project.git </span><br><span class="line">这个github_1就是之前在config配置文件里修改的host</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>因为我配置了config，所以第二个github账号也用到了第一个github账号的ssh，从而第二个号没有权限；</p>
</li>
<li><p>假如我这么设置试试：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gitee</span></span><br><span class="line"><span class="attr">Host</span> <span class="string">gitee.com</span></span><br><span class="line"><span class="attr">HostName</span> <span class="string">gitee.com</span></span><br><span class="line"><span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span><br><span class="line"><span class="attr">IdentityFile</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># github</span></span><br><span class="line"><span class="attr">Host</span> <span class="string">github.com</span></span><br><span class="line"><span class="attr">HostName</span> <span class="string">github.com</span></span><br><span class="line"><span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span><br><span class="line"><span class="attr">IdentityFile</span> <span class="string">C:/Users/Administrator/.ssh/id_rsa_gitee</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># github</span></span><br><span class="line"><span class="attr">Host</span> <span class="string">github_1.com</span></span><br><span class="line"><span class="attr">HostName</span> <span class="string">github.com</span></span><br><span class="line"><span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span><br><span class="line"><span class="attr">IdentityFile</span> <span class="string">C:/Users/Administrator/.ssh/id_rsa</span></span><br></pre></td></tr></table></figure>

<p>虽然第一个gitee与最下面的github用的同一个ssh。</p>
<p>但万一不冲突呢？先实验试试；</p>
<blockquote>
<p>如果不行，就创建第三个ssh；</p>
</blockquote>
</li>
</ul>
<h4 id="4-2-在git-bash里面验证试试："><a href="#4-2-在git-bash里面验证试试：" class="headerlink" title="4.2 在git bash里面验证试试："></a>4.2 在git bash里面验证试试：</h4>  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">Administrator@SKY-<span class="number">20160609</span>AOR MINGW64 ~</span><br><span class="line">$ ssh -T git@gitee.com</span><br><span class="line">Hi Cqilin! Yo<span class="string">u&#x27;ve successfully authenticated, but GITEE.COM does not provide shell access.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Administrator@SKY-20160609AOR MINGW64 ~</span></span><br><span class="line"><span class="string">$ ssh -T git@github.com</span></span><br><span class="line"><span class="string">Hi Cqilin! You&#x27;</span>ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"></span><br><span class="line">Administrator@SKY-<span class="number">20160609</span>AOR MINGW64 ~</span><br><span class="line">$ ssh -T git@github_1.com</span><br><span class="line">Hi qilin-meiyao-luka! Yo<span class="string">u&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Administrator@SKY-20160609AOR MINGW64 ~</span></span><br><span class="line"><span class="string">$</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<p>  成功！</p>
  <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Administrator@</span>SKY<span class="number">-20160609</span>AOR MINGW64 ~</span><br><span class="line">$ ssh -T <span class="symbol">git@</span>github_1.com</span><br><span class="line">Hi qilin-meiyao-luka! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>

<p>  成功获取到第二个github账号：qilin-meiyao-luka;</p>
<p>  3.3  注意远程仓库的url也要改：</p>
  <figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  #<span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//gitee.com/qilinclolik/qilinclolik.git</span></span><br><span class="line">  <span class="attribute">repo</span>:</span><br><span class="line">        <span class="attribute">github</span>: <span class="attribute">https</span>:<span class="comment">//github_1.com/qilin-meiyao-luka/qilin-meiyao-luka.git</span></span><br><span class="line">  # example, <span class="attribute">https</span>:<span class="comment">//github.com/hexojs/hexojs.github.io</span></span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure>

<p>  也要改成github_1 ;</p>
<p>  改了就报错；</p>
<p>  试试不改能不能行；（改是文章里面说的，但既然报错，只有不改试试）</p>
<p>  3.3.1 发现问题，没有用仓库的ssh链接，用的html链接；但也不应该报错；</p>
<ul>
<li><p>改成ssh链接，并遵循文章的修改为github_1，先这么试试；</p>
<p><code>git@github_1.com:qilin-meiyao-luka/qilin-meiyao-luka.git</code></p>
<p>上传失败；</p>
<p>改用 git bash；</p>
<p>上传成功；</p>
<p>但是没有css；</p>
<p>…..</p>
</li>
</ul>
<h4 id="4-3-解决博客没有css"><a href="#4-3-解决博客没有css" class="headerlink" title="4.3 解决博客没有css"></a>4.3 解决博客没有css</h4><ol>
<li><p>老问题，仓库名字：</p>
<p>qilin-meiyao-luka.github.io</p>
<p>它默认的是：qilin-meiyao-luka</p>
<p>必须把.github.io填上；</p>
<p>还有右边的确认；</p>
<p><img src="https://i.loli.net/2020/08/10/EVWGMBmpvRba78S.png" alt="1"></p>
<p>over；2020-8-7 20:19:16</p>
</li>
</ol>
<hr>
<h3 id="5-next主题侧边栏没有统计；"><a href="#5-next主题侧边栏没有统计；" class="headerlink" title="5. next主题侧边栏没有统计；"></a>5. next主题侧边栏没有统计；</h3><p>8.0版本；问题：</p>
<p><img src="https://i.loli.net/2020/08/10/oWJSukc9IrihlUT.png" alt="1"></p>
<p>解决：<a href="https://theme-next.js.org/docs/theme-settings/index.html?highlight=configuring+menu+items#Configuring-Menu-Items">https://theme-next.js.org/docs/theme-settings/index.html?highlight=configuring+menu+items#Configuring-Menu-Items</a></p>
<p>最下面：4.5. Configuring Menu Items</p>
<p>y default NexT shows the icons of menu items without badges.</p>
<ul>
<li><a href="https://theme-next.js.org/docs/getting-started/#menu_settings-1"><code>icons</code></a></li>
<li><a href="https://theme-next.js.org/docs/getting-started/#menu_settings-2"><code>badges</code></a></li>
</ul>
<p>Set the value <code>badges</code> to <code>true</code> to display the count of Posts / Categories / Tags within menu items in <code>menu_settings</code> section in theme config file as following:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">next/_config.yml</span></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>2020-8-10 14:53:55</p>
<p>2.现在不是这个样子了，现在又改了；2020-9-12 11:12:41</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Configuring Menu Items</span><br><span class="line">Menu<span class="built_in"> settings </span>items have format Key: /link/ || icon which contains 3 values:</span><br><span class="line"></span><br><span class="line">Key</span><br><span class="line">link</span><br><span class="line">icon</span><br><span class="line">Key → is the name of menu item (home, archives, etc.).</span><br><span class="line"><span class="keyword">If</span> translate <span class="keyword">for</span> this menu will be found <span class="keyword">in</span> languages, this translate will be loaded; <span class="keyword">if</span> <span class="keyword">not</span>, Key name will be used.</span><br><span class="line"></span><br><span class="line">Key value is case sensitive (e.g. home is <span class="keyword">not</span> same as Home).</span><br><span class="line"></span><br><span class="line">By default, all menu items are commented out <span class="keyword">to</span> ensure that you can override them <span class="keyword">in</span> the Alternate Theme Config.</span><br><span class="line"><span class="keyword">To</span> customize menu items, <span class="builtin-name">edit</span> the following content <span class="keyword">in</span> theme<span class="built_in"> config </span>file:</span><br><span class="line"></span><br><span class="line">next/_config.yml</span><br><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  #about: /about/ || fa fa-user</span><br><span class="line">  #tags: /tags/ || fa fa-tags</span><br><span class="line">  #categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat</span><br><span class="line">Except home <span class="keyword">and</span> archives, all custom pages under menu section need <span class="keyword">to</span> be created manually. See «Custom<span class="built_in"> Page </span>Support».</span><br><span class="line"></span><br><span class="line">Besides, hexo-generator-sitemap plugin is required <span class="keyword">for</span> sitemap support.</span><br><span class="line"></span><br><span class="line">Dynamic sub-menu within hierarchy structure is also supported. <span class="builtin-name">Add</span> your sub-menu items <span class="keyword">in</span> menu section <span class="keyword">in</span> theme<span class="built_in"> config </span>file as following:</span><br><span class="line"></span><br><span class="line">next/_config.yml</span><br><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  Docs:</span><br><span class="line">    default: /docs/ || fa fa-book</span><br><span class="line">    Getting Started:</span><br><span class="line">      default: /getting-started/ || fa fa-flag</span><br><span class="line">      Installation: /installation.html || fa fa-download</span><br><span class="line">      Configuration: /configuration.html || fa fa-wrench</span><br><span class="line">    Third Party Services:</span><br><span class="line">      default: /third-party-services/ || fa fa-puzzle-piece</span><br><span class="line">      Math Equations: /math-equations.html || fa fa-square-root-alt</span><br><span class="line">      Comment Systems: /comments.html || fa fa-comment-alt</span><br><span class="line">A<span class="built_in"> default page </span>is required <span class="keyword">for</span> each sub-menu item.</span><br><span class="line"></span><br><span class="line">By<span class="built_in"> default </span>NexT shows the icons of menu items without badges.</span><br><span class="line"></span><br><span class="line">icons</span><br><span class="line">badges</span><br><span class="line"><span class="builtin-name">Set</span> the value badges <span class="keyword">to</span> <span class="literal">true</span> <span class="keyword">to</span> display the count of Posts / Categories / Tags within menu items <span class="keyword">in</span> menu_settings section <span class="keyword">in</span> theme<span class="built_in"> config </span>file as following:</span><br><span class="line"></span><br><span class="line">next/_config.yml</span><br><span class="line">menu_settings:</span><br><span class="line">  badges: <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br />

<ul>
<li><p>这句话说明：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">Set</span> the value badges <span class="keyword">to</span> <span class="literal">true</span> <span class="keyword">to</span> display the count of Posts / Categories / Tags within menu items <span class="keyword">in</span> menu_settings section <span class="keyword">in</span> theme<span class="built_in"> config </span>file as following:</span><br></pre></td></tr></table></figure>
</li>
<li><p>将值<code>badges</code>设置<code>true</code>为显示其中的帖子/类别/标签的数量菜单 项目在部分<code>menu_settings</code>主题配置文件 如下：</p>
</li>
<li><p>只有  帖子/类别/标签</p>
</li>
</ul>
<hr>
<hr>
<h3 id="6-阅读统计与评论被刷新；"><a href="#6-阅读统计与评论被刷新；" class="headerlink" title="6. 阅读统计与评论被刷新；"></a>6. 阅读统计与评论被刷新；</h3><ol>
<li><p>我估计是因为我在另一个博客上面用了同一个leancloud账号的id和key；</p>
<p>未时间，但根据那个时候的事情；</p>
<p>再上我重复的点击，刷新页面，修改文字title，都没有刷新阅读统计和评论；</p>
<p>想的就应该是这个了；</p>
</li>
<li><p>2020-8-11 05:30:05</p>
</li>
</ol>
<hr>
<h3 id="7-报错hexo-them-next"><a href="#7-报错hexo-them-next" class="headerlink" title="7. 报错hexo-them-next"></a>7. 报错hexo-them-next</h3><p><img src="http://bucket-c70.test.upcdn.net/4/1-7-1.png" alt="1"></p>
<p>直接在node_modules目录下把这个文件夹删了；</p>
<hr>
<h3 id="8-url乱码-过去式"><a href="#8-url乱码-过去式" class="headerlink" title="8. url乱码-过去式"></a>8. url乱码-过去式</h3><p>1.</p>
<hr>
<h3 id="9-如何修改侧边栏标签本身"><a href="#9-如何修改侧边栏标签本身" class="headerlink" title="9. 如何修改侧边栏标签本身"></a>9. 如何修改侧边栏标签本身</h3><p>1.标签本身</p>
<ul>
<li>把关于 改成 关于我</li>
<li><img src="http://bucket-c70.test.upcdn.net/7/2.png" alt="2" style="zoom:80%;" />

</li>
</ul>
<p>2.在哪修改？</p>
<ul>
<li><code>languages</code>文件夹里面的<code>zh-Hans.yml</code>文件，<code>menu</code>子项中修改；</li>
<li>我的路径：G:\1-sanciyuan\8-bolg\themes\next2-8.0\languages</li>
</ul>
<hr>
<h3 id="10-博客目录乱码"><a href="#10-博客目录乱码" class="headerlink" title="10. 博客目录乱码"></a>10. 博客目录乱码</h3><p><img src="http://bucket-c70.test.upcdn.net/4/2.png" alt="2"></p>
<p>可能是因为目录跳级了；</p>
<p>###，下面 写成 #####了</p>
<hr>
<h3 id="11-如果有两个本地blog"><a href="#11-如果有两个本地blog" class="headerlink" title="11. 如果有两个本地blog"></a>11. 如果有两个本地blog</h3><p>1.只另一个本地时，要换一个端口</p>
<p><code>hexo s -p 5000</code></p>
<p>2.预览：</p>
<p><img src="http://bucket-c70.test.upcdn.net/7/3.png" alt="3"></p>
<br/>

<hr>
<h3 id="12-不能显示css"><a href="#12-不能显示css" class="headerlink" title="12. 不能显示css"></a>12. 不能显示css</h3><p>在文章6-github&amp;&amp;gitee_problem有笔记；2020-9-10 05:20:56</p>
<hr>
<h3 id="13-解释插件网站"><a href="#13-解释插件网站" class="headerlink" title="13. 解释插件网站"></a>13. 解释插件网站</h3><p><a href="https://www.npmjs.com/search?q=hexo-blog-encrypt">https://www.npmjs.com/search?q=hexo-blog-encrypt</a></p>
<hr>
<h3 id="14-文章目录多"><a href="#14-文章目录多" class="headerlink" title="14. 文章目录多"></a>14. 文章目录多</h3><p>1.每一篇文章就会在本地建一个文件夹。</p>
<p><img src="http://bucket-c70.test.upcdn.net/7/5.png" alt="5"></p>
<ul>
<li>1.这样hexo d，上传给仓库的时候，也会很多文件夹</li>
</ul>
<p>2.实验得出，是永久链接的问题</p>
<ul>
<li><p>1.如果永久链接是：<code>permalink: :title/</code>，就会在本地文件夹下创建–以文件名称 (relative to “source/_posts/“ folder)为名称的文件夹</p>
<ul>
<li>永久链接规则：<a href="https://hexo.io/zh-cn/docs/permalinks.html">https://hexo.io/zh-cn/docs/permalinks.html</a></li>
</ul>
</li>
<li><p>2.同时因为它是看source/_posts/目录下的文件。</p>
<p>实验得出，在source/_posts/目录下，创建新目录存储md文件，本地也是创建新目录存储新文件。</p>
<ul>
<li>G:\1-sanciyuan\11-qilin_meiyao_luka.deploy_git\1-(0~50)</li>
<li>G:\1-sanciyuan\11-qilin_meiyao_luka\source_posts\1-(0~50)</li>
<li>如果是<code>permalink: :name/</code>只会收录文件名，不会收录这个目录下的文件夹。就算新建一个文件夹把md文件放进去，也不会在本地创建那个文件夹（推理，未实验）</li>
</ul>
</li>
<li><p>3.目前就用这个方法来整理，本地图片需要多一个../</p>
<ul>
<li>例如：../../img/xx/x.png;</li>
</ul>
</li>
</ul>
<hr>
<h2 id="15-断言报错"><a href="#15-断言报错" class="headerlink" title="15. 断言报错"></a>15. 断言报错</h2><p>1.例子：</p>
<p><img src="../../img/7/2.png" alt="2"></p>
<p>2.索引，标题？</p>
<p>2.1 为什么我这么想？</p>
<p>2.2 修改地方：</p>
<p><img src="../../img/7/3.png" alt="3"></p>
<h1 id="2-Function-功能"><a href="#2-Function-功能" class="headerlink" title="2. Function_功能"></a>2. Function_功能</h1><h2 id="1-添加音乐"><a href="#1-添加音乐" class="headerlink" title="1. 添加音乐"></a>1. 添加音乐</h2><p><a href="http://liangzhikai.cn/2020/07/07/hexo-next%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90/">http://liangzhikai.cn/2020/07/07/hexo-next%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90/</a></p>
<p>别人写的资料；</p>
<p>自己还没实验过，所以还没笔记；2020-8-3 06:41:58</p>
<!--more-->

<p><a href="https://blog.csdn.net/soul7y/article/details/105768906?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-1-105768906.nonecase">https://blog.csdn.net/soul7y/article/details/105768906?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-1-105768906.nonecase</a></p>
<p>这个好像也不错；2020-8-3 06:46:51</p>
<hr>
<h2 id="2-文章自定义排序"><a href="#2-文章自定义排序" class="headerlink" title="2. 文章自定义排序"></a>2. 文章自定义排序</h2><p>1.资料网址：</p>
<p><a href="https://blog.csdn.net/stormdony/article/details/86745805">https://blog.csdn.net/stormdony/article/details/86745805</a></p>
<p>然后设置top，越大，越在前面；<a href="http://www.mamicode.com/info-detail-2363262.html">http://www.mamicode.com/info-detail-2363262.html</a></p>
<p>2.修改仓库，使其支持置顶功能</p>
<ul>
<li><p>可以直接运行以下命令进行安装：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ npm <span class="keyword">uninstall</span> hexo-generator-<span class="keyword">index</span> <span class="comment">--save</span></span><br><span class="line">$ npm <span class="keyword">install</span> hexo-generator-<span class="keyword">index</span>-pin-top <span class="comment">--save</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>3.也许<strong>报错</strong></p>
<p>npm uninstall hexo-generator-index –save</p>
<p>后，也许会报错；</p>
<p>是老朋友了；</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">G:\<span class="number">1</span>-sanciyuan\<span class="number">8</span>-bolg&gt;npm uninstall hexo-generator-index --save</span><br><span class="line">added <span class="number">1</span> package <span class="keyword">from</span> <span class="number">1</span> contributor, removed <span class="number">1</span> package <span class="keyword">and</span> audited <span class="number">274</span> packages i</span><br><span class="line">n <span class="number">4.323</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">6</span> packages are looking <span class="keyword">for</span> funding</span><br><span class="line">  run `npm fund` <span class="keyword">for</span> details</span><br><span class="line"></span><br><span class="line">found <span class="number">6</span> vulnerabilities (<span class="number">4</span> low, <span class="number">2</span> high)</span><br><span class="line">  run `npm audit fix` to fix them, <span class="keyword">or</span> `npm audit` <span class="keyword">for</span> details</span><br></pre></td></tr></table></figure>



<p>4.刚开始，我还很在意，想去解决；结果往往会陷入泥潭；</p>
<p>4.1 不过经历过几次换next后，我已经知道，没什么报错是换个next不能解决的</p>
<p>4.2 当时不懂，还以为会损坏hexo；</p>
<p>5.另一种报错</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">G:<span class="symbol">\1</span>-sanciyuan<span class="symbol">\8</span>-bolg&gt;hexo clean</span><br><span class="line">ERROR &#123;</span><br><span class="line">  err: Error: Cannot find module &#x27;gulp&#x27;</span><br><span class="line">  Require stack:</span><br><span class="line">  - G:<span class="symbol">\1</span>-sanciyuan<span class="symbol">\8</span>-bolg<span class="symbol">\n</span>ode_modules<span class="symbol">\h</span>exo-theme-next<span class="symbol">\g</span>ulpfile.js</span><br><span class="line">      at Function.Module._resolveFilename (internal/modules/cjs/loader.js:794:15</span><br><span class="line">)</span><br><span class="line">      at Function.Module._load (internal/modules/cjs/loader.js:687:27)</span><br><span class="line">      at Module.require (internal/modules/cjs/loader.js:849:19)</span><br><span class="line">      at require (G:<span class="symbol">\1</span>-sanciyuan<span class="symbol">\8</span>-bolg<span class="symbol">\n</span>ode_modules<span class="symbol">\h</span>exo<span class="symbol">\l</span>ib<span class="symbol">\h</span>exo<span class="symbol">\i</span>ndex.js:302:</span><br><span class="line">23)</span><br><span class="line">      at G:<span class="symbol">\1</span>-sanciyuan<span class="symbol">\8</span>-bolg<span class="symbol">\n</span>ode_modules<span class="symbol">\h</span>exo-theme-next<span class="symbol">\g</span>ulpfile.js:3:14</span><br><span class="line">      at G:<span class="symbol">\1</span>-sanciyuan<span class="symbol">\8</span>-bolg<span class="symbol">\n</span>ode_modules<span class="symbol">\h</span>exo<span class="symbol">\l</span>ib<span class="symbol">\h</span>exo<span class="symbol">\i</span>ndex.js:315:14</span><br><span class="line">      at tryCatcher (G:<span class="symbol">\1</span>-sanciyuan<span class="symbol">\8</span>-bolg<span class="symbol">\n</span>ode_modules<span class="symbol">\b</span>luebird<span class="symbol">\j</span>s<span class="symbol">\r</span>elease<span class="symbol">\u</span>til</span><br><span class="line">.js:16:23)</span><br><span class="line">      at Promise._settlePromiseFromHandler (G:<span class="symbol">\1</span>-sanciyuan<span class="symbol">\8</span>-bolg<span class="symbol">\n</span>ode_modules<span class="symbol">\b</span></span><br><span class="line">luebird<span class="symbol">\j</span>s<span class="symbol">\r</span>elease<span class="symbol">\p</span>romise.js:547:31)</span><br><span class="line">      at Promise._settlePromise (G:<span class="symbol">\1</span>-sanciyuan<span class="symbol">\8</span>-bolg<span class="symbol">\n</span>ode_modules<span class="symbol">\b</span>luebird<span class="symbol">\j</span>s\</span><br><span class="line">release<span class="symbol">\p</span>romise.js:604:18)</span><br><span class="line">      at Promise._settlePromise0 (G:<span class="symbol">\1</span>-sanciyuan<span class="symbol">\8</span>-bolg<span class="symbol">\n</span>ode_modules<span class="symbol">\b</span>luebird<span class="symbol">\j</span>s</span><br><span class="line"><span class="symbol">\r</span>elease<span class="symbol">\p</span>romise.js:649:10)</span><br><span class="line">      at Promise._settlePromises (G:<span class="symbol">\1</span>-sanciyuan<span class="symbol">\8</span>-bolg<span class="symbol">\n</span>ode_modules<span class="symbol">\b</span>luebird<span class="symbol">\j</span>s</span><br><span class="line"><span class="symbol">\r</span>elease<span class="symbol">\p</span>romise.js:729:18)</span><br><span class="line">      at _drainQueueStep (G:<span class="symbol">\1</span>-sanciyuan<span class="symbol">\8</span>-bolg<span class="symbol">\n</span>ode_modules<span class="symbol">\b</span>luebird<span class="symbol">\j</span>s<span class="symbol">\r</span>elease</span><br><span class="line"><span class="symbol">\a</span>sync.js:93:12)</span><br><span class="line">      at _drainQueue (G:<span class="symbol">\1</span>-sanciyuan<span class="symbol">\8</span>-bolg<span class="symbol">\n</span>ode_modules<span class="symbol">\b</span>luebird<span class="symbol">\j</span>s<span class="symbol">\r</span>elease<span class="symbol">\a</span>sy</span><br><span class="line">nc.js:86:9)</span><br><span class="line">      at Async._drainQueues (G:<span class="symbol">\1</span>-sanciyuan<span class="symbol">\8</span>-bolg<span class="symbol">\n</span>ode_modules<span class="symbol">\b</span>luebird<span class="symbol">\j</span>s<span class="symbol">\r</span>ele</span><br><span class="line">ase<span class="symbol">\a</span>sync.js:102:5)</span><br><span class="line">      at Immediate.Async.drainQueues [as _onImmediate] (G:<span class="symbol">\1</span>-sanciyuan<span class="symbol">\8</span>-bolg<span class="symbol">\n</span>o</span><br><span class="line">de_modules<span class="symbol">\b</span>luebird<span class="symbol">\j</span>s<span class="symbol">\r</span>elease<span class="symbol">\a</span>sync.js:15:14)</span><br><span class="line">      at processImmediate (internal/timers.js:439:21) &#123;</span><br><span class="line">    code: &#x27;MODULE_NOT_FOUND&#x27;,</span><br><span class="line">    requireStack: [</span><br><span class="line">      &#x27;G:<span class="symbol">\\</span>1-sanciyuan<span class="symbol">\\</span>8-bolg<span class="symbol">\\</span>node_modules<span class="symbol">\\</span>hexo-theme-next<span class="symbol">\\</span>gulpfile.js&#x27;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Plugin load failed: <span class="variable">%s hexo-theme-next</span></span><br><span class="line"><span class="variable">INFO  Deleted database.</span></span><br><span class="line"><span class="variable">INFO  Deleted public folder.</span></span><br></pre></td></tr></table></figure>

<p>4.1 把<code>node_modules\hexo-theme-next</code>里的hexo-theme-next删了；</p>
<p>时不时会下载一个hexo-theme-next 到node_modules里面，也不知道为啥；</p>
<h3 id="2-报错"><a href="#2-报错" class="headerlink" title="2. 报错"></a>2. 报错</h3><p>1.报错：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ERROR</span> &#123;</span><br><span class="line">  <span class="attribute">err</span>: [<span class="attribute">Error</span>: <span class="attribute">ENOENT</span>: no such file or directory, open <span class="string">&#x27;G:\1-sanciyuan\11-qilin_meiyao_luka\node_modules\hexo-generator-index-pin-top&#x27;</span>] &#123;</span><br><span class="line">    <span class="attribute">errno</span>: -<span class="number">4058</span>,</span><br><span class="line">    <span class="attribute">code</span>: <span class="string">&#x27;ENOENT&#x27;</span>,</span><br><span class="line">    <span class="attribute">syscall</span>: <span class="string">&#x27;open&#x27;</span>,</span><br><span class="line">    <span class="attribute">path</span>: <span class="string">&#x27;G:\\1-sanciyuan\\11-qilin_meiyao_luka\\node_modules\\hexo-generator-index-pin-top&#x27;</span></span><br></pre></td></tr></table></figure>

<p>2.卸载插件，重新安装，我就好了；2020-11-18 18:46:49</p>
<hr>
<h2 id="3-文章访问统计"><a href="#3-文章访问统计" class="headerlink" title="3. 文章访问统计"></a>3. 文章访问统计</h2><h3 id="3-0-用官网的方法"><a href="#3-0-用官网的方法" class="headerlink" title="3.0 用官网的方法"></a>3.0 用官网的方法</h3><p>1.<strong>重要：next主题配置一定要使用相关的，7.8就用7.8，8.0一定要用8.0的config；</strong></p>
<ul>
<li><p><strong>不能因为是next.yml 或者是现在最新版的在博客目录下的_config.next就用以前的文件；</strong></p>
</li>
<li><p>换了主题8.0的config后就有效了；</p>
</li>
<li><p><a href="https://theme-next.js.org/docs/third-party-services/statistics-and-analytics.html#Firebase">https://theme-next.js.org/docs/third-party-services/statistics-and-analytics.html#Firebase</a></p>
</li>
<li><p>好了使用官方的，都散了吧；2020-8-9 11:52:18</p>
</li>
</ul>
<h4 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2. 步骤:"></a>2. 步骤:</h4><p>1.打开官网</p>
<p>2.有三种计数:</p>
<p><img src="G:%5C1-sanciyuan%5C8-bolg%5Csource%5Cimg%5C8%5C1.png" alt="1"></p>
<p>2.1 如果选择LeanCloud，会报错：</p>
<ul>
<li><p>err: TypeError: serverURL option is required for apps from CN region；</p>
<p>错误：类型错误：来自CN区域的应用程序需要serverURL选项</p>
</li>
<li><p>它要让你验证服务器</p>
</li>
</ul>
<p>2.2 如果你用Busuanzi，下面评论系统的时候又要使用LeanCloud;</p>
<ul>
<li><p>所以这里使用3.1 评论的计数；</p>
</li>
<li><p>相关配置去3.1看；</p>
</li>
<li><p>over；</p>
</li>
</ul>
<p>3.如果简单点，不需要评论，只要计数，或者想快点</p>
<ul>
<li>用Busuanzi；</li>
<li>可按照官网步骤使用；</li>
</ul>
<p>3.1 ok，3是错误的，只是像官网那么配置是无效的</p>
<ul>
<li>还是要在某云端申请账号；</li>
<li>以后都用<code>3.1 用评论的计数</code></li>
</ul>
<p>3.2 哦，首页没有，文章里面有计数；2020-9-7 03:59:08</p>
<p>4.中间的Firebase没用过；</p>
<hr>
<h3 id="3-05-以前的失败经历"><a href="#3-05-以前的失败经历" class="headerlink" title="3.05 以前的失败经历"></a>3.05 以前的失败经历</h3><p>1.这是没使用0时候的卡关</p>
<p>卡在：</p>
<p>err: TypeError: serverURL option is required for apps from CN region；</p>
<p>LeanCloud自己给的<strong>REST API 服务器地址</strong>还是报错；看来要自己用域名解析，来配置LeanCloud的API访问域名</p>
<hr>
<p>0.1 很好，gitee不能被域名解析，要收费；</p>
<p>0.2 只有github速度不行；</p>
<p>0.3 必须要有一个国内的；</p>
<p>0.4 coding可以去试试；2020-8-9 12:11:17</p>
<p>0.5 目前先不去弄了，还有其他事要做；2020-8-9 12:11:37</p>
<hr>
<p>使用的最下面的 <strong>算盘子计数（中国）</strong>；2020-8-9 12:42:14</p>
<p><a href="https://cloud.tencent.com/developer/article/1482008">https://cloud.tencent.com/developer/article/1482008</a></p>
<ol start="2">
<li><p>注意：</p>
<blockquote>
<p>点击创建Class之后，理论上来说名字可以随意取名，只要你交互代码做相应的更改即可，但是为了保证我们前面对NexT主题的修改兼容，此处的新建Class名字必须为Counter。</p>
</blockquote>
<blockquote>
<p>counter；英 [ˈkaʊntə(r)]   美 [ˈkaʊntər]<br>n.(商店、银行等的)柜台;(某些棋盘游戏的)筹码;(电子)计数器，计算器<br>v.反驳;驳斥;抵制;抵消<br>adv.逆向地;相反地;反对地</p>
</blockquote>
<p>但没实验；</p>
</li>
<li><p>本想用：字数统计里面的换行</p>
<p>默认情况下，NexT在单独的行中显示单词计数和估计的阅读时间。您可以通过将in 设置<code>symbols_count_time.separated_meta</code>为<code>false</code>in 来将它们添加到一行中主题配置文件。</p>
<blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span>  </span><br><span class="line"><span class="attr">separated_meta:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>但是没有效果</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在本地访问后，没有回数据；</p>
<p>试试在github那边访问；</p>
<p>4.1 还是没有访问量</p>
<p>连LeanCloud那边也没返回数据，时不时ID和key有错误？</p>
<p>检查看看；</p>
<p>没有问题；</p>
</li>
<li><p>现在也许改版了；不能用了；</p>
<p>网上也找不到教程；</p>
<p>我估计需要配置API访问域名；github的无法连接，gitee等待配置CNAME</p>
<p><img src="https://i.loli.net/2020/08/09/yW5n9HJscECdrlY.png" alt="1"></p>
<p>但是gitee自己部署的page 是无法配置CNAM的。</p>
<p>这需要一个自己的域名；</p>
</li>
<li><p>我记得我有域名，我去试试；</p>
<p>腾讯云启动；</p>
<p>没有域名over；</p>
</li>
<li><p>百度云启动；</p>
<p>有域名，解析配置：cqilin.gitee.io；</p>
<p>主机记录：@ ；类型：CNAME；解析状态正常；</p>
<p>域名访问：<a href="http://www.meiyao.top">www.meiyao.top</a>  403；</p>
<blockquote>
<p>403 Forbidden<br>对不起，您访问的页面或站点不存在。<br>管局备案数据同步可能发生延迟，若您的主机已经完成备案或者为无需备案的香港主机，请进入BCH控制面板 &gt; 常用操作 &gt;域名绑定 中解绑并重新绑定域名，并手动刷新主机状态。</p>
</blockquote>
<p>如果是备案，那就没法了，gitee咋备案；</p>
<p>7.1 是不是绑定域名出错？百度 gitee域名配置，无果，居然说无法配置；</p>
</li>
<li><p>失败告终；2020-8-9 10:50:37 ；问问其他人；</p>
</li>
<li><p><a href="https://blog.csdn.net/qq_43444349/article/details/105282442?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.channel_param">https://blog.csdn.net/qq_43444349/article/details/105282442?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.channel_param</a></p>
<p>没有效果；</p>
<p>默认就是：visitor: false</p>
</li>
<li><p><a href="https://blog.csdn.net/Hodors/article/details/103979281">https://blog.csdn.net/Hodors/article/details/103979281</a></p>
<p>使用文章中的第二种方法</p>
<p>未实验，2020-8-9 11:13:47</p>
</li>
<li><p>试试？</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Another tool to show number of visitors to each article.</span></span><br><span class="line"><span class="comment"># Visit https://console.firebase.google.com/u/0/ to get apiKey and projectId.</span></span><br><span class="line"><span class="comment"># Visit https://firebase.google.com/docs/firestore/ to get more information about firestore.</span></span><br><span class="line"><span class="attr">firestore:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">collection:</span> <span class="string">articles</span> <span class="comment"># Required, a string collection name to access firestore database</span></span><br><span class="line">  <span class="attr">apiKey:</span> <span class="comment"># Required</span></span><br><span class="line">  <span class="attr">projectId:</span> <span class="comment"># Required</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<pre><code>实在不行，还有google这边访问统计；2020-8-9 11:15:03</code></pre><ol start="12">
<li><p><a href="https://leaferx.online/2018/02/11/lc-security/">https://leaferx.online/2018/02/11/lc-security/</a></p>
<p>这个网址里有</p>
<ul>
<li><p>部署云引擎以保证访客数量不被随意篡改；未实验与使用</p>
</li>
<li><p>博客配置文件_config.yml ；其他都没有，就你有…</p>
</li>
<li><p>由于Leancloud免费版的云引擎存在请求线程数和运行时间限制以及休眠机制，很多时候访客数量加载会很慢。如果设置<code>betterPerformance</code>为<code>true</code>，则网页则会在提交请求之前直接显示访客人数为查询到的人数+1，以增加用户体验。</p>
<p>已经在next配置中添加；2020-8-9 11:31:08</p>
</li>
</ul>
</li>
<li><p><a href="https://blog.qust.cc/archives/48665.html">https://blog.qust.cc/archives/48665.html</a></p>
<p>又是一个；更新与2020-06-22的</p>
<p>写得是最详细的；只不过，危险的地方很多</p>
</li>
</ol>
<h3 id="3-1-用评论的计数；"><a href="#3-1-用评论的计数；" class="headerlink" title="3.1 用评论的计数；"></a>3.1 用评论的计数；</h3><ol>
<li><p>用官方的计数，会卡在：err: TypeError: serverURL option is required for apps from CN region；</p>
<p>1.1 它要让你接服务器；</p>
</li>
<li><p>评论系统那边有计数功能，不需要服务器连接；</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appId:</span> <span class="string">l9X7oYVrse5t6umGkFbQyhXs-gzGzoHsz</span> <span class="comment"># Your leancloud application appid</span></span><br><span class="line">  <span class="attr">appKey:</span> <span class="string">dcwRazDbDakW6HdC3xERrYHu</span> <span class="comment"># Your leancloud application appkey</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">Just</span> <span class="string">go</span> <span class="string">go</span> <span class="comment"># Comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># Gravatar style</span></span><br><span class="line">  <span class="attr">meta:</span> [<span class="string">nick</span>, <span class="string">mail</span>, <span class="string">link</span>] <span class="comment"># Custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">language:</span> <span class="comment"># Language, available values: en, zh-cn</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span> <span class="comment"># Article reading statistic</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">true</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">true</span> <span class="comment"># Whether to record the commenter IP</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></span><br><span class="line">  <span class="comment">#post_meta_order: 0</span></span><br></pre></td></tr></table></figure>

<p>其中第十行：</p>
<p><code>visitor: true # Article reading statistic</code>就是控制计数的；</p>
<p>2.2 翻译：</p>
<p>访客：正确＃文章阅读统计</p>
</li>
</ol>
<hr>
<h3 id="3-2-问题：计数被刷新为0"><a href="#3-2-问题：计数被刷新为0" class="headerlink" title="3.2 问题：计数被刷新为0"></a>3.2 问题：计数被刷新为0</h3><p>1.不过昨天遇到一个问题，计数和评论被刷新了；</p>
<p>2.我不知道1.的昨天是哪一天，可惜我没记录时间；2020-9-6 12:07:40</p>
<ul>
<li><p>不过今天又遇到了；2020-9-6 12:07:49</p>
</li>
<li><p>它被刷新的依据是什么？</p>
</li>
<li><p>我的去那边看看，LeanCloud，是记录次数的。</p>
</li>
<li><p>计数是有的，而且在对着本地与gitee的数据时，我发现了url不同</p>
<p><img src="http://bucket-c70.test.upcdn.net/8/4.png" alt="4"></p>
</li>
</ul>
<p>3.也许是我改了blog的_config.yml</p>
<ul>
<li>我改了永久链接permalink:</li>
<li>blog的url改变了</li>
</ul>
<p>3.1 为什么修改了永久链接</p>
<ul>
<li>因为：文章7-1.4；</li>
</ul>
<p>4.是url改变的原因吗？</p>
<ul>
<li>不清楚，但目前只有这么猜想了</li>
<li>不会后端的无奈</li>
</ul>
<hr>
<h2 id="4-评论系统"><a href="#4-评论系统" class="headerlink" title="4. 评论系统"></a>4. 评论系统</h2><p><strong>重要：next主题配置一定要使用相关的，7.8就用7.8，8.0一定要用8.0的config；</strong></p>
<p><strong>不能因为是next.yml 或者是现在最新版的_config.next就用以前的文件；</strong></p>
<p>换了主题8.0的config后就有效了；</p>
<p>官方：<a href="https://theme-next.js.org/docs/third-party-services/comments.html#Valine">https://theme-next.js.org/docs/third-party-services/comments.html#Valine</a></p>
<ul>
<li>leancloud：<a href="https://leancloud.cn/dashboard/applist.html#/apps">https://leancloud.cn/dashboard/applist.html#/apps</a></li>
</ul>
<p>2020-8-9 12:42:42</p>
<ol start="2">
<li><p>评论要新建class-Comment；</p>
<img src="https://i.loli.net/2020/08/10/Wv1adeubTLgcyi8.png" alt="1" style="zoom:80%;" />

<ul>
<li>comment，英 [ˈkɒment]   美 [ˈkɑːment]  ；n.议论;评论;解释;批评;指责；v.表达意见</li>
</ul>
<p>3.同时，计数也需要新建class，否则无法计数；</p>
<ul>
<li>counter：计数；</li>
</ul>
<hr>
</li>
</ol>
<h2 id="5-动态背景；"><a href="#5-动态背景；" class="headerlink" title="5.  动态背景；"></a>5.  动态背景；</h2><h3 id="5-1-让next8-0-canvas-next-有效；"><a href="#5-1-让next8-0-canvas-next-有效；" class="headerlink" title="5.1 让next8.0-canvas_next 有效；"></a>5.1 让next8.0-canvas_next 有效；</h3><ol>
<li><p><a href="https://www.dazhuanlan.com/2019/12/09/5dedf5666dc17/">https://www.dazhuanlan.com/2019/12/09/5dedf5666dc17/</a></p>
<blockquote>
<p>1.1 在这个网站上 <a href="https://github.com/theme-next/theme-next-canvas-nest">https://github.com/theme-next/theme-next-canvas-nest</a> 的README.md清楚地给出了next的背景动态使用：</p>
<ul>
<li>进入<code>themes/next/source/lib</code>路径,输入<code>$ git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</code></li>
<li>在next的<code>_config.yml</code>修改canvas_nest: true</li>
<li>回到themes/next/source/lib/canvas-nest文件夹，git bash：<code>git pull</code></li>
<li><code>hexo clean</code> <code>hexo g</code> <code>hexo s</code>就可以预览了。</li>
</ul>
<p>最后那个语言问题，并不是next官网和google的一堆信息都是把languages改成zh_Hans，这是无效的，需要在站点配置文件_comfig.yml中把languages改成zh_CN。</p>
</blockquote>
<blockquote>
<p>1.2 languages那些不管，以前就经历过，zh_Hans早已被官方删除，只有zh_CN</p>
<p>1.3 <code>themes/next/source/lib</code>这个路径下确实没有canvas-nest文件；</p>
<p>1.4 不过lib里面的似乎和博客目录下的node_modules 不同；</p>
<p>它可以直接复制；于是在：</p>
<p>G:\1-sanciyuan\8-bolg\source\lib 目录下复制了canvas-nest文件夹；</p>
<p>到：G:\1-sanciyuan\8-bolg\themes\next2-8.0\source\lib 下；</p>
<p>没有效果；</p>
</blockquote>
<blockquote>
<p>1.5 文章原话：当然这个方法我也试过了，不行。还是得重新找方法，最后还是使用修改_layout.swig奏效。方法就是在里面加入</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.canvas_nest %&#125;</span><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">color</span>=<span class="string">&quot;0,0,0&quot;</span> <span class="attr">opacity</span>=<span class="string">&#x27;0.5&#x27;</span> <span class="attr">zIndex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">count</span>=<span class="string">&quot;150&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<p>1.6 有效；</p>
<p>不过next8.0，文件后缀名改变；变为：.njk</p>
<p>位置在：G:\1-sanciyuan\8-bolg\themes\next2-8.0\layout</p>
</blockquote>
</li>
<li><p>删除<code>themes/next/source/lib</code>下的canvas-nest文件夹，看是否还有效果；</p>
<blockquote>
<p>有效，既然有效那就删了；</p>
</blockquote>
</li>
<li><p>删除next配置文件里的：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自己添加</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="comment"># 网络背景</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile or not</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&#x27;0,0,0&#x27;</span> <span class="comment"># RGB values, use &#x27;,&#x27; to separate</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.5</span> <span class="comment"># the opacity of line: 0~1</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">150</span> <span class="comment"># the number of lines</span></span><br><span class="line"><span class="comment"># 自己添加</span></span><br></pre></td></tr></table></figure>

<p>可以得出结论到底是_layout.njk在控制，还是上面主题配置里控制着</p>
<blockquote>
<p>有效，<red>确定是_layout.njk在控制</red></p>
</blockquote>
</li>
<li><p>可不可以让线条更多一点？这也是3的目的，为了改变效果，要找准控制的地方；</p>
<p>翻译上面的:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">onmobile:<span class="literal">true</span>？是否在移动设备上显示</span><br><span class="line">color:<span class="string">&#x27;0,0,0&#x27;</span>#RGB值，使用<span class="string">&#x27;&#x27;</span>分隔</span><br><span class="line">不透明度：<span class="number">0.5</span>#线条的不透明度：<span class="number">0</span>~<span class="number">1</span></span><br><span class="line">zIndex:<span class="number">-1</span>#背景的z索引属性</span><br><span class="line">计数：<span class="number">150</span>行</span><br></pre></td></tr></table></figure>

<ul>
<li><p>调整：count，增加线条次数为200条；</p>
</li>
<li><p>虽然文章里面给的，没有 <code>onmobile: true</code>，但添加试试；让移动设备上面能看到也好；使用相同的格式：onmobile=”true”</p>
</li>
<li><p>调整 opacity为0.7；加深颜色；</p>
</li>
<li><p>我最想的是增加粗细，既然里面没有，那先不乱添加；</p>
</li>
<li><p>over；实验开始；先在cmd里ctrl+c，免得报错；2020-8-10 03:36:59</p>
</li>
</ul>
<blockquote>
<ol>
<li><p><red>有效</red>,虽然没有调整线条的粗细，但也许减少了透明度，看起来也粗了一些；</p>
</li>
<li><p>count调整有效，比较后，线条肉眼可看的增加了；</p>
</li>
<li><p>onmobile=”true” 有效，至少在F12的移动查看中有效</p>
</li>
</ol>
<p>很好</p>
</blockquote>
</li>
</ol>
<h3 id="5-2-qilin-meiyao-luka-没效"><a href="#5-2-qilin-meiyao-luka-没效" class="headerlink" title="5.2 qilin_meiyao_luka 没效"></a>5.2 qilin_meiyao_luka 没效</h3><ol>
<li><p>emm，奇怪的地方出现了；</p>
<p>第二个hexo这样配置后，没效果；2020-8-10 16:29:47</p>
<p>5.1 难道是要 hexo g ？</p>
<p>没效；</p>
<p>5.2 把 这个添加了试试</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># 自己添加canvas_nes<span class="variable">t:</span> # 网络背景  enable: true  onmobile: true # <span class="keyword">display</span> <span class="keyword">on</span> mobile <span class="built_in">or</span> not  color: <span class="string">&#x27;0,0,0&#x27;</span> # RGB <span class="built_in">values</span>, use <span class="string">&#x27;,&#x27;</span> <span class="keyword">to</span> separate  opacity: <span class="number">0.5</span> # the opacity of <span class="built_in">line</span>: <span class="number">0</span>~<span class="number">1</span>  zIndex: -<span class="number">1</span> # <span class="keyword">z</span>-<span class="built_in">index</span> property of the background  coun<span class="variable">t:</span> <span class="number">150</span> # the <span class="keyword">number</span> of lines# 自己添加</span><br></pre></td></tr></table></figure>

<p>效…效果出现？？？</p>
<p>什么？什么情况？这不就和上面第三个冲突了？</p>
<p>5.3 再删除试试？是不是因为5.2 把</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.canvas_nest %&#125;</span><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">color</span>=<span class="string">&quot;0,0,0&quot;</span> <span class="attr">opacity</span>=<span class="string">&#x27;0.5&#x27;</span> <span class="attr">zIndex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">count</span>=<span class="string">&quot;150&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<p>激活了？</p>
<p>删除后，没了效果？怎么回事？</p>
<p>难道这里是看next主题配置里的  canvas_nest 配置？</p>
<p>5.4 那把 _layout.njk 里的</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.canvas_nest %&#125;</span><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">color</span>=<span class="string">&quot;0,0,0&quot;</span> <span class="attr">opacity</span>=<span class="string">&#x27;0.5&#x27;</span> <span class="attr">zIndex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">count</span>=<span class="string">&quot;150&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<p>删除实验；</p>
<p>无？？无效？</p>
<p>怎么这里两个都要了？</p>
<p>怎么G:\1-sanciyuan\11-qilin_meiyao_luka 这个博客要两边都要配置？</p>
<p>而：8-blog 学习博客就不用？</p>
<p>lib里的  canvas-nest 一样，主题配置更是从8-blog复制的；</p>
<p>只有config不一样；不对，hexo的config那么少，对照一下就能看出哪里不一样；</p>
</li>
<li><p>对照 hexo的config</p>
<ul>
<li>一样；</li>
<li>emm，没有法子。实现只能到此为止了</li>
</ul>
</li>
<li><p><strong>以后若 光有 _layout.njk 里的配置，而没有效果</strong></p>
<p><strong>就把next主题配置里的 canvas_nest 加上试试</strong>；</p>
</li>
<li></li>
</ol>
<hr>
<h2 id="6-改变高亮颜色"><a href="#6-改变高亮颜色" class="headerlink" title="6. 改变高亮颜色"></a>6. 改变高亮颜色</h2><p>0.注意：</p>
<ul>
<li>如果是中文输入法，====不会马上有效，需要删除一个=号，在给一个=号。</li>
<li>如果是英文输入法，马上生效.</li>
</ul>
<p>网上所说：</p>
<p><a href="https://blog.csdn.net/tl4832194/article/details/107921933">https://blog.csdn.net/tl4832194/article/details/107921933</a></p>
<p>1.位置：</p>
<p>C:\Users\Administrator\AppData\Roaming\Typora\themes</p>
<p>2.这是自己找到过一次了，最开始在这：</p>
<ul>
<li>在typora左上角文件里面</li>
<li>偏好设置</li>
<li>外观</li>
<li>打开主题文件夹；就是上面的路径；</li>
</ul>
<p>3.正文：</p>
<ul>
<li>mark是找不到的，自己添加</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">mark</span> &#123;  <span class="attribute">background</span>: <span class="number">#DC143C</span>;  <span class="comment">/* #DC143C 代表红色 */</span>  <span class="attribute">border-bottom</span>: <span class="number">0px</span> solid <span class="number">#ffffff</span>;  <span class="comment">/* 这里是字体颜色，也可以更改 */</span>  <span class="attribute">padding</span>: <span class="number">0.0px</span>;  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0px</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>不知道border-bottom干嘛，说是字体颜色，也没有变化；虽然知道代码意思是下边框，但删除后又没啥变化</p>
<ul>
<li>注释说是字体颜色，我嗯是不信，也确实不是；</li>
</ul>
<p>难道要把 0px 改为 1px？</p>
<p>我没有多想，直接改为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">mark</span> &#123;    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>);  <span class="comment">/* #DC143C 代表红色 */</span>    <span class="attribute">color</span>:<span class="number">#DC143C</span>;  <span class="comment">/* 这里是字体颜色，也可以更改 */</span>  &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>backgorund是背景色，如果不修改，默认是黄色</p>
<p>而且：修改为：#fafafa，居然有灰色；</p>
<p>就换成255，255，255（也是white）</p>
<p>没有灰色；</p>
</blockquote>
<p>依然有效；</p>
<h3 id="6-2-next主题不解析"><a href="#6-2-next主题不解析" class="headerlink" title="6.2 next主题不解析"></a>6.2 next主题不解析</h3><p>1.如图所示：</p>
<p><img src="G:%5C1-sanciyuan%5C8-bolg%5Csource%5Cimg%5C8%5C2.png" alt="2"></p>
<p>2.目前没找到法子；2020-10-8 00:53:44</p>
<p>3.可用<code>&lt;red&gt;&lt;/red&gt;</code>代替，已经在styles.styl文件中修改；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">red</span> &#123;    <span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure>

<br />

<hr>
<hr>
<h2 id="10-淘宝镜像npm→cnpm"><a href="#10-淘宝镜像npm→cnpm" class="headerlink" title="10. 淘宝镜像npm→cnpm"></a>10. 淘宝镜像npm→cnpm</h2><ol>
<li><p>安装：</p>
<p>(这不是真正的镜像我觉得，只是下载了一个新的“npm”，下面的10.2才是镜像，我个人感觉；2021-3-18 10:31:03)</p>
<p>安装：命令提示符执行<code>npm install -g cnpm --registry=[https://registry.npm.taobao.org](https://link.jianshu.com?t=https://registry.npm.taobao.org)</code>；<br> 注意：安装完后最好查看其版本号cnpm -v或关闭命令提示符重新打开，安装完直接使用有可能会出现错误；<br> 注：cnpm跟npm用法完全一致，只是在执行命令时将npm改为cnpm（以下操作将以cnpm代替npm）。</p>
</li>
</ol>
<p>   作者：lMadman<br>   链接：<a href="https://www.jianshu.com/p/22ca76100155">https://www.jianshu.com/p/22ca76100155</a><br>   来源：简书<br>   著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<ol start="2">
<li><p>官网：<a href="https://developer.aliyun.com/mirror/NPM?from=tnpm">https://developer.aliyun.com/mirror/NPM?from=tnpm</a></p>
</li>
<li><p>自己已安装；</p>
<p><img src="http://bucket-c70.test.upcdn.net/4/2-10-1.png" alt="2"></p>
</li>
<li><p>下载预览：</p>
<p><img src="http://bucket-c70.test.upcdn.net/8/10.png" alt="10"></p>
<ul>
<li>cnpm下载东西的格式与npm不一样</li>
<li>同时 查看cnpm版本时<ul>
<li>还有显示npm的版本</li>
<li>node的版本</li>
<li>npminstall的版本</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="10-1-问题"><a href="#10-1-问题" class="headerlink" title="10.1 问题"></a>10.1 问题</h3><p>1.同时目录下，也多一个文件夹：</p>
<p><img src="http://bucket-c70.test.upcdn.net/8/11.png" alt="11"></p>
<p>   1.3 先看看下载的东西有没有效果；2020-9-7 04:09:56</p>
<ul>
<li><p>应该是有效果；2021-3-18 10:27:20</p>
<p>1.4 没有下载出hexo-theme-next，还不错，免得我去删了；</p>
</li>
<li><p>用npm切换淘宝镜像下载依赖包，不会有这个问题</p>
</li>
</ul>
<p>2.同时，还下载了很多其他的东西</p>
<ul>
<li><p>在我<code>cnpm install --save hexo-blog-encrypt</code>时，发生的；2020-9-9 17:54:50</p>
</li>
<li><p><img src="http://bucket-c70.test.upcdn.net/8/15.png" alt="15"></p>
</li>
</ul>
<ul>
<li>下面还有，没有截图了，不过全部把这种_开头的删了，hexo s 也不报错；</li>
</ul>
<hr>
<h3 id="10-2-npm切换淘宝镜像下载依赖包"><a href="#10-2-npm切换淘宝镜像下载依赖包" class="headerlink" title="10.2 npm切换淘宝镜像下载依赖包"></a>10.2 npm切换淘宝镜像下载依赖包</h3><p>设置：<a href="https://blog.csdn.net/qq_16683689/article/details/89376577">https://blog.csdn.net/qq_16683689/article/details/89376577</a></p>
<p>1.好像是说cnpm有很多坑，但又没说清楚</p>
<p>2.上面下载两个文件，也许是其中之一，没有试验；2020-9-9 17:41:37</p>
<p>3.还有人说：漏掉依赖（目前不懂）</p>
<ul>
<li><a href="https://www.cnblogs.com/lxwphp/p/7754812.html">https://www.cnblogs.com/lxwphp/p/7754812.html</a></li>
</ul>
<p>4.npm get registry，可以查看镜像地址；</p>
<p>设成淘宝的镜像</p>
<p>npm config set registry <a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org/</a></p>
<p>5.这个是，把 npm 获取 资源的 地址，改为 淘宝镜像的；</p>
<ul>
<li>这样就和cnpm拿东西的，地方，一样了；</li>
<li>就可以不用cnpm，用npm；</li>
</ul>
<hr>
<h2 id="11-修改页面字体"><a href="#11-修改页面字体" class="headerlink" title="11. 修改页面字体"></a>11. 修改页面字体</h2><p><a href="https://theme-next.js.org/docs/theme-settings/miscellaneous.html#Fonts-Customization">官网链接</a></p>
<p>预览：</p>
<p><img src="http://bucket-c70.test.upcdn.net/8/3-11.png" alt="3"></p>
<p>next/_config.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="comment"># Use custom fonts families or not.</span></span><br><span class="line">  <span class="comment"># Depended options: `external` and `family`.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Uri of fonts host, e.g. https://fonts.googleapis.com (Default).</span></span><br><span class="line">  <span class="attr">host:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font options:</span></span><br><span class="line">  <span class="comment"># `external: true` will load this font family from `host` above.</span></span><br><span class="line">  <span class="comment"># `family: Times New Roman`. Without any quotes.</span></span><br><span class="line">  <span class="comment"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Global font settings used for all elements inside &lt;body&gt;.</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Monda</span></span><br><span class="line">    <span class="attr">size:</span> <span class="number">1.125</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for site title (.site-title).</span></span><br><span class="line">  <span class="attr">title:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Lobster</span> <span class="string">Two</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span></span><br><span class="line">  <span class="attr">headings:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Amita</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for posts (.post-body).</span></span><br><span class="line">  <span class="attr">posts:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Montserrat</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></span><br><span class="line">  <span class="attr">codes:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">PT</span> <span class="string">Mono</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="12-跳转到其他笔记；"><a href="#12-跳转到其他笔记；" class="headerlink" title="12. 跳转到其他笔记；"></a>12. 跳转到其他笔记；</h2><h3 id="12-1-蒙对；"><a href="#12-1-蒙对；" class="headerlink" title="12.1 蒙对；"></a>12.1 蒙对；</h3><p><a href="../2-ts_first_item/#10-项目：下棋游戏">转移到了 5-ts first item</a></p>
<blockquote>
<p><img src="https://i.loli.net/2020/08/08/e7rOmNwfpD3sdTg.png" alt=""></p>
<p>由这个和：</p>
<p><a href="https://cqilin.github.io/typescript/26-typescript_introduction/">https://cqilin.github.io/typescript/26-typescript_introduction/</a></p>
<p><a href="https://cqilin.github.io/typescript/5-ts_first_item/">https://cqilin.github.io/typescript/5-ts_first_item/</a></p>
<p>而感得出，跳转文件；</p>
<p><code>[转移到了 5-ts first item](../5-ts_first_item/#10-项目：下棋游戏)</code></p>
<p>都在typescript文件下，那先返回上一级：../</p>
<p>然后是5-ts_first_item ：../5-ts_first_item</p>
<p>但这样是无法跳转的；然后早就知道图上①处的地方。但是之前没观察②处</p>
<p>这次看了②处，才知道是url发生了改变；正好有#定位，用之</p>
</blockquote>
<h3 id="12-2-发现分类规则"><a href="#12-2-发现分类规则" class="headerlink" title="12.2 发现分类规则"></a>12.2 发现分类规则</h3><p>笔记：<a href="../../css/4-css_private_note/#6-水平垂直居中">4-css_个人笔记-6. 水平垂直居中</a>；有更多解析；</p>
<blockquote>
<p>这里的跳转：../4-css_private_note/#6-水平垂直居中</p>
<p>没有效果；</p>
<p>使用：../../css/4-css_private_note/#6-水平垂直居中</p>
<p>才有效；</p>
</blockquote>
<p>当初：</p>
<ol>
<li><p>先../4-css_private_note/#6-水平垂直居中</p>
<p>结果跳转的是：</p>
<p><a href="http://localhost:4000/html-css/4-css_private_note/#6-水平垂直居中">http://localhost:4000/html-css/4-css_private_note/#6-水平垂直居中</a></p>
<p>而正确链接是：</p>
<p><a href="http://localhost:4000/css/4-css_private_note/#6-水平垂直居中">http://localhost:4000/css/4-css_private_note/#6-水平垂直居中</a></p>
</li>
<li><p>这让我发现了分类；</p>
<p>因为12.md本身分类于：html_css (url里面变成了html-css)</p>
</li>
<li><p>原来上次1-typescript_introduction-10.项目：下棋游戏；是蒙对的</p>
<p>他们正好都是分类于typescript</p>
</li>
<li><p>怎么办了？既然是在css下面，那么这样行吗？</p>
<p>../css/4-css_private_note/#6-水平垂直居中</p>
<p>跳转的是：</p>
<p><a href="http://localhost:4000/html-css/css/4-css_private_note/#6-水平垂直居中">http://localhost:4000/html-css/css/4-css_private_note/#6-水平垂直居中</a></p>
<p>还是在html-css下面，仍然是错误链接；</p>
</li>
<li><p>怎么办？</p>
<p>没有概念，没有原理；只有实验；</p>
<p>我突发奇想，百度相对连接；</p>
<p><a href="https://blog.csdn.net/LIU_YANZHAO/article/details/78895096?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param">https://blog.csdn.net/LIU_YANZHAO/article/details/78895096?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param</a></p>
<p>找到../../</p>
<p>../../ 代表上两级目录</p>
<p>实验链接：</p>
<p>../../4-css_private_note/#6-水平垂直居中</p>
<p>链接是：<a href="http://localhost:4000/4-css_private_note/#6-水平垂直居中">http://localhost:4000/4-css_private_note/#6-水平垂直居中</a></p>
<p>没有css；</p>
</li>
<li><p>我一度迷茫；</p>
<p>没有发现，这次摆脱了html-css/的束缚；</p>
<p>过了一会，我发现了；</p>
</li>
<li><p>于是，我加上css/实验；</p>
<p>实验链接为：../../css/4-css_private_note/#6-水平垂直居中</p>
<p>成功；</p>
<p>跳转到了：</p>
<p><a href="http://localhost:4000/css/4-css_private_note/#6-水平垂直居中">http://localhost:4000/css/4-css_private_note/#6-水平垂直居中</a></p>
</li>
</ol>
<h3 id="12-3-发现permalink"><a href="#12-3-发现permalink" class="headerlink" title="12.3 发现permalink"></a>12.3 发现permalink</h3><p>1.permalink才是关键之一</p>
<p>2.它构成了url的路径定位；</p>
<hr>
<h2 id="13-进度条"><a href="#13-进度条" class="headerlink" title="13. 进度条"></a>13. 进度条</h2><p>1.上面会有一个条，根据页面的进度</p>
<p>&lt;../img src=”<a href="http://bucket-c70.test.upcdn.net/8/5.png&quot;">http://bucket-c70.test.upcdn.net/8/5.png&quot;</a> alt=”5” style=”zoom:110%;” /&gt;</p>
<p>2.官网</p>
<p><a href="https://theme-next.js.org/docs/third-party-services/external-libraries.html#Progress-Bar">https://theme-next.js.org/docs/third-party-services/external-libraries.html#Progress-Bar</a></p>
<p>3.配置：</p>
<p>next/_config.yml</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="attr">pace:</span>  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="14-滚动百分比"><a href="#14-滚动百分比" class="headerlink" title="14. 滚动百分比"></a>14. 滚动百分比</h2><h3 id="14-1-预览："><a href="#14-1-预览：" class="headerlink" title="14.1 预览："></a>14.1 预览：</h3><p>&lt;../img src=”<a href="http://bucket-c70.test.upcdn.net/8/6.png&quot;">http://bucket-c70.test.upcdn.net/8/6.png&quot;</a> alt=”8” style=”zoom:80%;” /&gt;</p>
<p>在左下角</p>
<h3 id="14-2-配置"><a href="#14-2-配置" class="headerlink" title="14.2 配置"></a>14.2 配置</h3><p>1.在官网上没找到</p>
<p>2.百度</p>
<ul>
<li><p><a href="https://blog.csdn.net/u011236348/article/details/88169113">https://blog.csdn.net/u011236348/article/details/88169113</a></p>
</li>
<li><p>打开 <code>themes/next/_config.yml</code> ,搜索关键字 <code>scrollpercent</code> ,把 <code>false</code> 改为 <code>true</code> </p>
</li>
<li><p>在next.yml文档里，代码的样子是：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span> <span class="comment"># 滚动百分比</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>3.同时，这个箭头（返回最上边）</p>
<p>也是back2top：enable：true 就有了；</p>
<hr>
<h2 id="15-主题添加留言"><a href="#15-主题添加留言" class="headerlink" title="15. 主题添加留言"></a>15. 主题添加留言</h2><h3 id="15-1-预览"><a href="#15-1-预览" class="headerlink" title="15.1 预览"></a>15.1 预览</h3><p><img src="http://bucket-c70.test.upcdn.net/8/7.png" alt="7"></p>
<h3 id="15-2-步骤："><a href="#15-2-步骤：" class="headerlink" title="15.2 步骤："></a>15.2 步骤：</h3><p>1.首先，next主题的_config.yml里面是没有的；</p>
<ul>
<li>自己加:<code>guestbook: /guestbook/ || fa fa-comment #留言</code></li>
</ul>
<p>1.1 加在哪？</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="attr">fa fa-home  about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="attr">fa fa-user  tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="attr">fa fa-tags  categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="attr">fa fa-th  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="attr">fa fa-archive  guestbook:</span> <span class="string">/guestbook/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-comment</span> <span class="comment">#留言  #schedule: /schedule/ || fa fa-calendar  #sitemap: /sitemap.xml || fa fa-sitemap  #commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>

<br />

<p>2.然后要在<code>languages</code>文件夹里面的<code>zh-Hans.yml</code>文件，<code>menu</code>子项中添加：</p>
<ul>
<li><code>guestbook: 留言</code></li>
<li>不然显示的是 guestbook;</li>
</ul>
<p>3.完毕；</p>
<hr>
<h2 id="16-刷新页面-实现加载效果"><a href="#16-刷新页面-实现加载效果" class="headerlink" title="16. 刷新页面-实现加载效果"></a>16. 刷新页面-实现加载效果</h2><h3 id="16-1-预览"><a href="#16-1-预览" class="headerlink" title="16.1 预览"></a>16.1 预览</h3><p><img src="http://bucket-c70.test.upcdn.net/8/9.png" alt="9"></p>
<h3 id="16-2-步骤："><a href="#16-2-步骤：" class="headerlink" title="16.2 步骤："></a>16.2 步骤：</h3><p>1.打开主题配置</p>
<ul>
<li>我的主题配置是<code>next.yml</code></li>
<li>我的路径：G:\1-sanciyuan\8-bolg\source_data</li>
<li>这是一种设置，这里不讲这个</li>
<li>正常情况是，主题目录下的_config.yml</li>
</ul>
<p>2.找到pace</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pace:  enable:</span> <span class="literal">true</span>  <span class="comment"># Themes list:  # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple  # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal  theme: loading-bar # 默认：minimal</span></span><br></pre></td></tr></table></figure>

<p>把them修改为loading-bar;</p>
<p>over;2020-9-7 03:57:17</p>
<hr>
<h2 id="17-文章界面透明"><a href="#17-文章界面透明" class="headerlink" title="17. 文章界面透明"></a>17. 文章界面透明</h2><h3 id="17-1-预览："><a href="#17-1-预览：" class="headerlink" title="17.1 预览："></a>17.1 预览：</h3><p>1.首页文章页面处，透明，能看到背景动态图像</p>
<p><img src="http://bucket-c70.test.upcdn.net/8/12.png" alt="12"></p>
<p>2.点击文章里面，也能看到；</p>
<p><img src="http://bucket-c70.test.upcdn.net/8/13.png" alt="13"></p>
<h3 id="17-2-实现步骤"><a href="#17-2-实现步骤" class="headerlink" title="17.2 实现步骤"></a>17.2 实现步骤</h3><p>1.激活主题配置文件里的custom_file_path: style</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span>  <span class="comment">#head: source/_data/head.njk  #header: source/_data/header.njk  #sidebar: source/_data/sidebar.njk  #postMeta: source/_data/post-meta.njk  #postBodyEnd: source/_data/post-body-end.njk  #footer: source/_data/footer.njk  #bodyEnd: source/_data/body-end.njk  #variable: source/_data/variables.styl  #mixin: source/_data/mixins.styl  #style: source/_data/styles.styl  style: source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>

<p>2.在source/_data/目录下，创建styles.styl</p>
<ul>
<li><p>我的目录是：G:\1-sanciyuan\8-bolg\source_data</p>
<p><img src="http://bucket-c70.test.upcdn.net/8/14.png" alt="14"></p>
</li>
</ul>
<p>3.刚开始里面是空白的，什么都没有</p>
<ul>
<li>是这样的</li>
</ul>
<p>4.修改.post-block.animated.fadeIn</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-block</span><span class="selector-class">.animated</span><span class="selector-class">.fadeIn</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.1 用0.2进行透明</p>
<p>5.这不是当时找的时候做的笔记；</p>
<ul>
<li>所以，为什么修改这个类？</li>
<li>怎么找打的这个类？</li>
</ul>
<p>5.1 具体过程我忘记了</p>
<ul>
<li>印象中，肯定是从F12开始</li>
<li>但总觉得没这么简单</li>
</ul>
<p>6.over；2020-9-7 04:36:14</p>
<hr>
<h2 id="18-文章加密"><a href="#18-文章加密" class="headerlink" title="18. 文章加密"></a>18. 文章加密</h2><p>资料：<a href="https://zhuanlan.zhihu.com/p/113235573">https://zhuanlan.zhihu.com/p/113235573</a></p>
<ul>
<li>这个有一些注释，和插件来源：<a href="https://www.jianshu.com/p/44e211829447">https://www.jianshu.com/p/44e211829447</a></li>
</ul>
<h3 id="18-1-按标签加密"><a href="#18-1-按标签加密" class="headerlink" title="18.1 按标签加密"></a>18.1 按标签加密</h3><ul>
<li><strong>修改文章信息头如下：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">tags:</span><br><span class="line">- 加密文章tag</span><br><span class="line">date: <span class="number">2020</span>-<span class="number">03</span>-<span class="number">13</span> <span class="number">21</span>:<span class="number">12</span>:<span class="number">21</span></span><br><span class="line">password: muyiio</span><br><span class="line"><span class="keyword">abstract</span>: 这里有东西被加密了，需要输入密码查看哦。</span><br><span class="line">message: 您好，这里需要密码。</span><br><span class="line">wrong_pass_message: 抱歉，这个密码看着不太对，请再试试。</span><br><span class="line">wrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>对博客根目录_config添加如下字段：</strong></li>
</ul>
<h3 id="18-2-toc加密"><a href="#18-2-toc加密" class="headerlink" title="18.2 toc加密"></a>18.2 toc加密</h3><p>1.什么是toc？</p>
<ul>
<li>好像是目录，文章目录。例如：<a href="https://yelog.org/2019/09/24/3-hexo-toc/">https://yelog.org/2019/09/24/3-hexo-toc/</a></li>
<li>百度：hexo toc，也有相关信息</li>
</ul>
<p>2.需要额外配置：</p>
<p>如果您有一篇文章使用了TOC，您需要修改模板的部分代码。这里以matery主题作为示例：</p>
<ul>
<li><strong>在hexo/themes/matery/layout/_partial/article.ejs找到article.ejs。</strong></li>
<li><strong>然后找到&lt;％post.content％&gt;这段代码，通常在30行左右。</strong></li>
<li><strong>使用如下的代码来替代它：</strong></li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;% if(post.toc == true)&#123; %&gt;  &lt;div id=&quot;toc-div&quot; class=&quot;toc-article&quot; &lt;% if (post.encrypt == true) &#123; %&gt;style=&quot;display:none&quot; &lt;% &#125; %&gt;&gt;    &lt;strong class=&quot;toc-title&quot;&gt;Index&lt;/strong&gt;      &lt;% if (post.encrypt == true) &#123; %&gt;        &lt;%- toc(post.origin, &#123;list_number: true&#125;) %&gt;      &lt;% &#125; else &#123; %&gt;        &lt;%- toc(post.content, &#123;list_number: true&#125;) %&gt;      &lt;% &#125; %&gt;  &lt;/div&gt;&lt;% &#125; %&gt;&lt;%- post.content %&gt;</span><br></pre></td></tr></table></figure>

<p>…</p>
<p>2.1 我在 G:\1-sanciyuan\8-bolg\themes\next2-8.0\layout_partials 目录下没找到啊</p>
<ul>
<li>是我版本的问题吧？以前旧版本有？</li>
<li>是我主题问题吗？我这里是next主题，上面教程是matery主题？</li>
<li>总之不了了之；</li>
</ul>
<p>2.1.5 应该是不是一个主题的原因</p>
<ul>
<li>作者是想举这个例子，让其他主题使用者，要对着修改自己的主题</li>
<li>而我这种不懂其中原理的，就没法举一反三；2020-9-10 05:18:56</li>
</ul>
<p>2.2 找不到，也没法，先hexo s 本地试试如何；2020-9-9 18:28:45</p>
<h3 id="18-3-问题："><a href="#18-3-问题：" class="headerlink" title="18.3 问题："></a>18.3 问题：</h3><h4 id="18-3-1-没有目录"><a href="#18-3-1-没有目录" class="headerlink" title="18.3.1 没有目录"></a>18.3.1 没有目录</h4><p>1.文章里面的目录没有，就是toc配置</p>
<p>2.但是没有效果，即使找到next主题的配置</p>
<ul>
<li><a href="https://www.jianshu.com/p/be095c5fdeb7">https://www.jianshu.com/p/be095c5fdeb7</a></li>
</ul>
<p>3.没有版本，只有放弃这个方法，另寻加密方法；</p>
<p>4.找到个网页：<a href="https://yuyuforest.com/2018/10/18/encrypt-toc/">https://yuyuforest.com/2018/10/18/encrypt-toc/</a></p>
<ul>
<li>有相关问题，但是很久以前的版本；2020-9-10 05:56:26</li>
<li>文章来源：<a href="https://github.com/MikeCoder/hexo-blog-encrypt/issues/58">https://github.com/MikeCoder/hexo-blog-encrypt/issues/58</a></li>
</ul>
<p>4.1 看了许久的网页；</p>
<ul>
<li><p>根据网页中的最终的解决方案</p>
</li>
<li><p>我把<code>&lt;section class=&quot;site-overview-wrap sidebar-panel&#123;% if not display_toc or page.encrypt == false and toc(page.content).length <= 1 or page.encrypt == true and toc(page.origin).length <= 1 %&#125; sidebar-panel-active&#123;% endif %&#125;&quot;&gt;</code></p>
<p>替换了：</p>
<p><img src="http://bucket-c70.test.upcdn.net/8/16.png" alt="16"></p>
</li>
<li><p>还是没有效果，我应该放弃了；</p>
</li>
</ul>
<hr>
<h3 id="18-4-方法二-简单法"><a href="#18-4-方法二-简单法" class="headerlink" title="18.4 方法二-简单法"></a>18.4 方法二-简单法</h3><p>1.<a href="https://www.jianshu.com/p/44e211829447">https://www.jianshu.com/p/44e211829447</a></p>
<p>2.然后简单的方法…密码错了，也可以进，</p>
<ul>
<li>而且还是没toc，我也是醉了；2020-9-9 20:54:38</li>
</ul>
<hr>
<h2 id="19-next配置文件重置位置"><a href="#19-next配置文件重置位置" class="headerlink" title="19. next配置文件重置位置"></a>19. next配置文件重置位置</h2><p><a href="https://theme-next.js.org/docs/getting-started/configuration.html">https://theme-next.js.org/docs/getting-started/configuration.html</a></p>
<hr>
<h1 id="3-hexo-or-next-config"><a href="#3-hexo-or-next-config" class="headerlink" title="3. hexo or next config"></a>3. hexo or next config</h1><h2 id="1-搜索"><a href="#1-搜索" class="headerlink" title="1. 搜索"></a>1. 搜索</h2><p>之前用的不是这个方法，插件名称也不是这个；少了db；</p>
<p>hexo-generator-search；忽然没了搜索功能，去官网看，又觉得陌生；可惜之前没做笔记；想不起了</p>
<p><a href="https://theme-next.js.org/docs/third-party-services/search-services.html#Local-Search">官网文档</a></p>
<h3 id="本地搜寻"><a href="#本地搜寻" class="headerlink" title="本地搜寻"></a>本地搜寻</h3><p>本地搜索不需要任何外部第三方服务，并且可以由搜索引擎额外索引。建议大多数用户使用此搜索方法。</p>
<ul>
<li><p><a href="https://theme-next.js.org/docs/third-party-services/search-services.html#local-search-1">安装→</a></p>
<p><code>hexo-generator-searchdb</code>通过执行以下命令来安装站点根目录：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">npm</span>安装hexo-generator-searchdb</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p><a href="https://theme-next.js.org/docs/third-party-services/search-services.html#local-search-2">六方配置→</a></p>
<p>Edit site config file and add following content:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">hexo/_config.yml</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://theme-next.js.org/docs/third-party-services/search-services.html#local-search-3">NexT配置</a></p>
<p>Edit theme config file to enable Local Search:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">next/_config.yml</span></span><br><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h2 id="2-next配置文件重置位置"><a href="#2-next配置文件重置位置" class="headerlink" title="2. next配置文件重置位置"></a>2. next配置文件重置位置</h2><p><a href="https://theme-next.js.org/docs/getting-started/configuration.html">https://theme-next.js.org/docs/getting-started/configuration.html</a></p>
<hr>
<h2 id="3-页脚修改"><a href="#3-页脚修改" class="headerlink" title="3. 页脚修改"></a>3. 页脚修改</h2><p><a href="https://theme-next.js.org/docs/theme-settings/footer.html">官网介绍</a></p>
<h3 id="3-1-可能会用于又拍云领取；"><a href="#3-1-可能会用于又拍云领取；" class="headerlink" title="3.1 可能会用于又拍云领取；"></a>3.1 可能会用于又拍云领取；</h3><p><a href="https://www.upyun.com/league；领取免费额度与存储空间">https://www.upyun.com/league；领取免费额度与存储空间</a></p>
<hr>
<h2 id="4-归档页面页数"><a href="#4-归档页面页数" class="headerlink" title="4. 归档页面页数"></a>4. 归档页面页数</h2><h3 id="4-1-在hexo的配置中"><a href="#4-1-在hexo的配置中" class="headerlink" title="4.1 在hexo的配置中"></a>4.1 在hexo的配置中</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment"># 归档一页多少</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">17</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br></pre></td></tr></table></figure>

<ul>
<li>大概第85行</li>
</ul>
<h3 id="4-2-首页一页文章数"><a href="#4-2-首页一页文章数" class="headerlink" title="4.2 首页一页文章数"></a>4.2 首页一页文章数</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">7</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br></pre></td></tr></table></figure>

<ul>
<li>大约56行</li>
</ul>
<p>如果添加了新的东西，行数都会变化；2020-9-12 10:57:29</p>
<hr>
<br />

<h1 id="4-npm’s-order"><a href="#4-npm’s-order" class="headerlink" title="4. npm’s order"></a>4. npm’s order</h1><h2 id="1-卸载插件"><a href="#1-卸载插件" class="headerlink" title="1. 卸载插件"></a>1. 卸载插件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">npm uninstall <span class="tag">&lt;<span class="name">你的插件名</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一般都我是在blog_博客目录下用的npm命令；</p>
<p><img src="http://bucket-c70.test.upcdn.net/4/1-8-1.png" alt="1"></p>
<hr>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
  </entry>
  <entry>
    <title>9-website_collect</title>
    <url>/1-(0~50)/9-Function_website/</url>
    <content><![CDATA[<h2 id="1-功能网站"><a href="#1-功能网站" class="headerlink" title="1. 功能网站"></a>1. 功能网站</h2><h3 id="1-压缩图片网"><a href="#1-压缩图片网" class="headerlink" title="1. 压缩图片网"></a>1. 压缩图片网</h3><p><a href="https://tinypng.com/">https://tinypng.com/</a></p>
<a id="more"></a>

<hr>
<h3 id="2-特殊符号网"><a href="#2-特殊符号网" class="headerlink" title="2.  特殊符号网"></a>2.  特殊符号网</h3><p><a href="https://www.jiuwa.net/fuhao/agg/16/">https://www.jiuwa.net/fuhao/agg/16/</a></p>
<h3 id="3-划词翻译"><a href="#3-划词翻译" class="headerlink" title="3. 划词翻译"></a>3. 划词翻译</h3><p>1.<a href="https://hcfy.limingkai.cn/">https://hcfy.limingkai.cn/</a></p>
<p>2.2020-10-2 00:59:27</p>
<p>3.来源：灵逗士；</p>
<p>4.预览：</p>
<p><img src="../../img/9/1.png" alt="1"></p>
<p>5.</p>
<hr>
<h3 id="4-百度脑图"><a href="#4-百度脑图" class="headerlink" title="4. 百度脑图"></a>4. 百度脑图</h3><p>1.用来画思维导图的；2020-11-9 10:17:31</p>
<p>2.陈文杰分享的；</p>
<p><img src="../../img/9/3.png" alt="3"></p>
<p>3.<a href="https://naotu.baidu.com/file/a6b937d7869000a5fd27a57e0153e53b">https://naotu.baidu.com/file/a6b937d7869000a5fd27a57e0153e53b</a></p>
<p>2020-11-9 11:03:50</p>
<hr>
<h2 id="2-学习网"><a href="#2-学习网" class="headerlink" title="2. 学习网"></a>2. 学习网</h2><h3 id="2-1-MyBatis-Plus"><a href="#2-1-MyBatis-Plus" class="headerlink" title="2.1 MyBatis-Plus"></a>2.1 MyBatis-Plus</h3><p><a href="https://mp.baomidou.com/">https://mp.baomidou.com/</a></p>
<h3 id="2-1-1-myBatis"><a href="#2-1-1-myBatis" class="headerlink" title="2.1.1  myBatis"></a>2.1.1  myBatis</h3><p><a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p>
<hr>
<h3 id="2-2-VUE后台"><a href="#2-2-VUE后台" class="headerlink" title="2.2 VUE后台"></a>2.2 VUE后台</h3><p><a href="https://github.com/PanJiaChen/vue-admin-template/blob/master/README-zh.md">https://github.com/PanJiaChen/vue-admin-template/blob/master/README-zh.md</a></p>
<p>这是一个极简的 vue admin 管理后台。它只包含了 Element UI &amp; axios &amp; iconfont &amp; permission control &amp; lint，这些搭建后台必要的东西。</p>
<p>1.这是灵逗士自己做的；2020-9-23 03:01:35</p>
<hr>
<h3 id="2-2-牛客网"><a href="#2-2-牛客网" class="headerlink" title="2.2 牛客网"></a>2.2 牛客网</h3><p><a href="https://www.nowcoder.com/">https://www.nowcoder.com</a></p>
<p>上面有题可以做；例如我，可以去上面找web前端的题做；2020-9-23 03:01:59</p>
<hr>
<h3 id="2-3-图灵社区-书店"><a href="#2-3-图灵社区-书店" class="headerlink" title="2.3 图灵社区-书店"></a>2.3 图灵社区-书店</h3><p>1.网址：<a href="https://www.ituring.com.cn">https://www.ituring.com.cn</a></p>
<ul>
<li>2021-1-1 15:26:12</li>
</ul>
<hr>
<hr>
<h2 id="3-云盘"><a href="#3-云盘" class="headerlink" title="3. 云盘"></a>3. 云盘</h2><h3 id="3-1-蓝奏云"><a href="#3-1-蓝奏云" class="headerlink" title="3.1 蓝奏云"></a>3.1 蓝奏云</h3><p><a href="https://www.baidu.com/link?url=D1rMAyldiFnTci0fG81_N045SMGguJvE87Rkg_AMe2mANeabYS3yw3RRymasGC12&amp;wd=&amp;eqid=9440a9510014caf8000000065f597f7e">https://www.baidu.com/link?url=D1rMAyldiFnTci0fG81_N045SMGguJvE87Rkg_AMe2mANeabYS3yw3RRymasGC12&amp;wd=&amp;eqid=9440a9510014caf8000000065f597f7e</a></p>
<ul>
<li>注意：蓝奏云，只能上传100mb以内的文件</li>
<li>空间无限；</li>
</ul>
<h3 id="3-2-云盘出租"><a href="#3-2-云盘出租" class="headerlink" title="3.2 云盘出租"></a>3.2 云盘出租</h3><p>1.<a href="https://www.svipzu.com/">https://www.svipzu.com/</a></p>
<p>2.预览：</p>
<p><img src="../../img/9/2.png" alt="1"></p>
<p>2020-10-7 17:04:00</p>
<hr>
<h2 id="4-开拓视野"><a href="#4-开拓视野" class="headerlink" title="4. 开拓视野"></a>4. 开拓视野</h2><h3 id="4-1-IETF"><a href="#4-1-IETF" class="headerlink" title="4.1 IETF"></a>4.1 IETF</h3><p>1.<a href="http://www.ruanyifeng.com/blog/2011/03/ietf.html">http://www.ruanyifeng.com/blog/2011/03/ietf.html</a></p>
<h2 id="5-娱乐"><a href="#5-娱乐" class="headerlink" title="5. 娱乐"></a>5. 娱乐</h2><h3 id="5-1-日小说-ESJ"><a href="#5-1-日小说-ESJ" class="headerlink" title="5.1 日小说-ESJ"></a>5.1 日小说-ESJ</h3><p>1.<a href="https://www.esjzone.cc/forum/1546223660/4256.html">https://www.esjzone.cc/forum/1546223660/4256.html</a></p>
<h2 id="6-配置"><a href="#6-配置" class="headerlink" title="6. 配置"></a>6. 配置</h2><h3 id="6-1-水晶路由器"><a href="#6-1-水晶路由器" class="headerlink" title="6.1 水晶路由器"></a>6.1 水晶路由器</h3><p>1.<a href="http://melogin.cn/">http://melogin.cn/</a></p>
<p>2.配置；2020-10-7 19:08:02</p>
<hr>
<h2 id="7-出行"><a href="#7-出行" class="headerlink" title="7. 出行"></a>7. 出行</h2><h3 id="7-1-四川客车票"><a href="#7-1-四川客车票" class="headerlink" title="7.1 四川客车票"></a>7.1 四川客车票</h3><p><a href="https://www.tz12306.com">https://www.tz12306.com</a></p>
]]></content>
      <categories>
        <category>website_网站</category>
      </categories>
      <tags>
        <tag>Function_website</tag>
      </tags>
  </entry>
  <entry>
    <title>10-PicGo_图床</title>
    <url>/1-(0~50)/10-PicGo/</url>
    <content><![CDATA[<h2 id="0-下载安装"><a href="#0-下载安装" class="headerlink" title="0.  下载安装"></a>0.  下载安装</h2><ol>
<li><p>下载</p>
<a id="more"></a>

<p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85">https://picgo.github.io/PicGo-Doc/zh/guide/#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85</a></p>
<p><a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p>
<p>下载速度很慢，即使用IDM；</p>
<p>在笔记本上面下载的时候忘记了用梯子；（前来笔记）</p>
<p><strong>记得梯子</strong></p>
<blockquote>
<p>如果不是电信网，picgo的网址打不开；</p>
</blockquote>
</li>
<li><p>安装</p>
<p>选路径安装，没配置，配置在安装后的里面；</p>
</li>
<li><p>有空记得去赞助一下；2020-8-22 18:05:54</p>
</li>
</ol>
<h2 id="1-设置图床"><a href="#1-设置图床" class="headerlink" title="1. 设置图床"></a>1. 设置图床</h2><ol>
<li><p>辛苦，给腾讯云弄了子账号后；</p>
<p><img src="https://i.loli.net/2020/08/04/2WmcELx4HbgrGFU.png" alt="有时效"></p>
<hr>
</li>
</ol>
<ol start="2">
<li><p>本想用国产，去弄默认的SM.MS图床吧，既然是默认的，估计有东西。</p>
<p>根据说明配置后：</p>
<p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#smms">https://picgo.github.io/PicGo-Doc/zh/guide/config.html#smms</a></p>
<p><img src="https://i.loli.net/2020/08/04/WAJoxiHZdvn57aD.png" alt=""></p>
<p>去下载插件，没下载插件的时候也能正常使用。甚至不配置也可以；</p>
<p>不过还是去下载了吧</p>
</li>
<li><p>因为：</p>
<p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/#%E5%BA%94%E7%94%A8%E6%A6%82%E8%BF%B0">https://picgo.github.io/PicGo-Doc/zh/guide/#%E5%BA%94%E7%94%A8%E6%A6%82%E8%BF%B0</a></p>
<ul>
<li><code>微博图床</code> v1.0 <strong>微博图床从 2019 年 4 月开始进行防盗链，不建议继续使用</strong></li>
<li><code>七牛图床</code> v1.0</li>
<li><code>腾讯云 COS v4\v5版本</code> v1.1 &amp; v1.5.0</li>
<li><code>又拍云</code> v1.2.0</li>
<li><code>GitHub</code> v1.5.0</li>
<li><code>SM.MS</code> v1.5.1 <strong>由于官方不再支持V1版本，暂时请使用<a href="https://github.com/xlzy520/picgo-plugin-smms-user">smms-user</a>插件</strong></li>
<li><code>阿里云 OSS</code> v1.6.0</li>
<li><code>Imgur</code> v1.6.0</li>
</ul>
</li>
<li><p>说什么不再支持V1，不懂；然后就去下载了</p>
</li>
<li><p>下载</p>
<p>为 <a href="https://github.com/Molunerfinn/PicGo">PicGo</a> 开发的一款插件，新增了<a href="https://sm.ms/home/">SM.MS注册用户</a> 图床。 使用SM.MS V2的API上传，适用于注册了SM.MS的用户。填写<code>Authorization</code>即可</p>
<ul>
<li><p>在线安装</p>
<p>打开 <a href="https://github.com/Molunerfinn/PicGo">PicGo</a> 详细窗口，选择<strong>插件设置</strong>，搜索<strong>smms-user</strong>安装，然后重启应用即可。</p>
</li>
</ul>
</li>
</ol>
<hr>
<h3 id="1-2-SM-ms"><a href="#1-2-SM-ms" class="headerlink" title="1.2 SM.ms"></a>1.2 SM.ms</h3><h4 id="1-2-1-概述"><a href="#1-2-1-概述" class="headerlink" title="1.2.1 概述"></a>1.2.1 概述</h4><ul>
<li><p>配置完后，在SM.MS官网上就能看到上传的图片了，免费空间有5个g</p>
</li>
<li><p>不过没有试验在没有安装插件时，能不能上传到SM.MS</p>
</li>
<li><p>反正前两张图片，在没有配置SM.MS的API时，是没有上传在SM.MS里面的，估计是本地？</p>
<img src="https://i.loli.net/2020/08/04/MRr3Ly2bnzIjYqP.png" alt="没有1和2" style="zoom:150%;" />

</li>
</ul>
<hr>
<h4 id="1-2-2-没有配置却还是可以上传与使用"><a href="#1-2-2-没有配置却还是可以上传与使用" class="headerlink" title="1.2.2 没有配置却还是可以上传与使用"></a>1.2.2 没有配置却还是可以上传与使用</h4><p>试验一下，如果把本地的1和2删除，那么md里面的链接还有效吗？</p>
<p>如果没效，说明就是弄在本地了。如果有效，那…也不知道啥情况；</p>
<ol>
<li><p>试验开始，删除本地图片；</p>
</li>
<li><p>查看md文件图片显示；</p>
</li>
<li><p>没有影响，也许是没有刷新，关闭Typora，重新打开试验；</p>
<ul>
<li>还是有效果，但是我忽然想到，连本地都加载不出来了，Tyora上面都能看到，没有要探索它的价值。从Ty上面获得的信息，没有价值</li>
<li>建议跳过第三步</li>
</ul>
</li>
<li><p>hexo s 本地查看图片效果；还是先 hexo clean 一下；2020-8-4 02:12:34</p>
</li>
<li><p>有效，非常恐怖。那么问题来了，本地没有，SM.MS上面没有，那么这个图片的地基在哪里？</p>
<ul>
<li>如果hexo g -d部署后还有效果，那么这个问题将正式提出，虽然只能说个不晓得；</li>
</ul>
</li>
<li><p><font color='red'>有效！</font>可怕，不知道怎么回事，这样的话，我一直上传，空间无限？只是SM.MS那边没有数据不好管理；因为PicGo软件里面图片没有名字；</p>
<p>6.1 有没有可能让PicGo图片有名字，这样方便看，也方便管理；百度；</p>
<p>6.2 似乎找到：super-prefix：用于自定义图像文件名和前缀</p>
<p>6.3 <a href="https://zhuanlan.zhihu.com/p/128014135">https://zhuanlan.zhihu.com/p/128014135</a></p>
<p>6.4 下载后不知道如何使用</p>
<p>6.5 百度后，无果。倒是发现了b站图床的可能；</p>
</li>
<li><p>picgo-plugin-bilibili</p>
<p>7.1 <a href="https://www.npmjs.com/package/picgo-plugin-bilibili">https://www.npmjs.com/package/picgo-plugin-bilibili</a></p>
<p>7.2 日后再弄吧。2020-8-4 02:31:18</p>
<hr>
</li>
</ol>
<h3 id="1-3-又拍云"><a href="#1-3-又拍云" class="headerlink" title="1.3 又拍云"></a>1.3 又拍云</h3><p>辣鸡移动宽带无法连接sm.ms，需要翻墙。我也是笑了；2020-8-18 16:25:16</p>
<ol>
<li><p>在<a href="https://www.upyun.com/，创建账号；">https://www.upyun.com/，创建账号；</a></p>
</li>
<li><p>进入控制台；</p>
</li>
<li><p>云存储，立即使用；</p>
</li>
<li><p>没有，就创建服务</p>
</li>
<li><p>配置：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;bucket&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="regexp">//</span> 存储空间名，及你的服务名</span><br><span class="line">  <span class="string">&quot;operator&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="regexp">//</span> 操作员</span><br><span class="line">  <span class="string">&quot;password&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="regexp">//</span> 密码</span><br><span class="line">  <span class="string">&quot;options&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="regexp">//</span> 针对图片的一些后缀处理参数</span><br><span class="line">  <span class="string">&quot;path&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="regexp">//</span> 自定义存储路径，比如img/</span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;&quot;</span> <span class="regexp">//</span> 加速域名，注意要加http:<span class="regexp">//</span>或者https:<span class="regexp">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>移动网连PicGo的网址都打不开；</p>
<p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html">https://picgo.github.io/PicGo-Doc/zh/guide/config.html</a></p>
<br />

</li>
</ol>
<h4 id="1-3-2-注意"><a href="#1-3-2-注意" class="headerlink" title="1.3.2 注意"></a>1.3.2 注意</h4><ol>
<li><p>如果是https，Typora是无法看到图的，本地和部署没有实验；</p>
<p><img src="http://bucket-c70.test.upcdn.net/12-html+css_introdictin-pink/7-%E6%B3%A8%E6%84%8F.png" alt="1"></p>
</li>
<li><p>在PicGo图床设置–又拍云这里设置</p>
<p><img src="http://bucket-c70.test.upcdn.net/12-html+css_introdictin-pink/8-7.2.png" alt="2"></p>
</li>
<li></li>
</ol>
<hr>
<h2 id="2-暂时的相册的文件名字"><a href="#2-暂时的相册的文件名字" class="headerlink" title="2. 暂时的相册的文件名字"></a>2. 暂时的相册的文件名字</h2><p>PicGo图片里面看不到文件名，暂时在这里序列</p>
<p>2-腾讯云cos没免费.png</p>
<p>3-sm.ms配置.png</p>
<p>4-1.2 SM.ms.png</p>
<p>5-3.1 無感情冷.png</p>
<p>26-8.2-图一.png  忘记前面的6- 了</p>
]]></content>
      <categories>
        <category>图片_picture</category>
      </categories>
      <tags>
        <tag>图片_picture</tag>
      </tags>
  </entry>
  <entry>
    <title>11-git</title>
    <url>/1-(0~50)/11-git/</url>
    <content><![CDATA[<h2 id="1-git上传项目到码云-gitee"><a href="#1-git上传项目到码云-gitee" class="headerlink" title="1. git上传项目到码云(gitee)"></a>1. git上传项目到码云(gitee)</h2><p><a href="https://www.cnblogs.com/uudon/p/12618043.html">git上传项目到码云(gitee)</a></p>
<p>码云官方：<a href="https://gitee.com/help/articles/4114">https://gitee.com/help/articles/4114</a></p>
<p>使用成功：<a href="https://www.jianshu.com/p/287ab9f46035">https://www.jianshu.com/p/287ab9f46035</a></p>
<blockquote>
<p>如果本地仓库出错，可以马上再另外创建文件夹，再建一个即可；</p>
<p>这不是hexo+next，随便新建，目前；2020-8-10 15:21:50</p>
</blockquote>
<a id="more"></a>

<p>1.建立本地git仓库</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">cd 到你的本地项目根目录下，执行git命令<span class="string">``</span>git init</span><br></pre></td></tr></table></figure>

<p> 2.第二步：将本地项目工作区的所有文件添加到暂存区</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">add</span> .  <span class="comment">// . 表示所有文件, 如果想添加项目中的指定文件，那就把 . 改为指定文件名即可</span></span><br></pre></td></tr></table></figure>

<p>3.第三步：将暂存区的文件提交到本地仓库</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;&quot;</span>  <span class="regexp">//</span>冒号里面写注释语句 eg:git commit -m <span class="string">&quot;init project&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>参数<code>-m</code>后为当次提交的备注信息</li>
<li><code>git status -s</code>可以查看提交成功没有，（A：提交成功；AM：文件在添加到缓存之后又有改动）</li>
<li>好像这里必须要双引号，别把js里面单双引号一个意思拿到其他地方用；2020-10-6 17:31:22</li>
</ul>
<p>4.将本地仓库关联到码云上</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git remote add origin https:<span class="regexp">//gi</span>tee.com<span class="regexp">/tyb321/</span>leopard.git     <span class="regexp">//</span>后面的URL地址就是我在第四步最后图片时复制的那个https地址</span><br></pre></td></tr></table></figure>

<ul>
<li>这不是我的地址，只是复制别人的的笔记　　</li>
</ul>
<p>在这一步时如果出现错误：fatal:remote origin already exists 意思是路径存在了，就需要删除原来的路径从新添加</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">那就先输入  git remote rm origin</span><br><span class="line">再输入     git remote add origin https:<span class="regexp">//gi</span>tee.com<span class="regexp">/tyb321/</span>leopard.git 就不会报错了。</span><br></pre></td></tr></table></figure>

<p>5.最后一步，将代码由本地仓库上传到Github远程仓库</p>
<p>git push -u origin master</p>
<ul>
<li><p>如果没有第四步关联，这样也行，出至：gitee官网</p>
<p><code>git push https://gitee.com/***/test.git</code></p>
</li>
</ul>
<p>5.1 理解一下代码的单词；</p>
<ul>
<li>push<br>英 [pʊʃ]   美 [pʊʃ]<br>v.推动(人或物);移动(身体部位);推进(道路);挤开;推动;促使(达到某程度或状态)<br>n.推;搡;进攻;攻势;挺进;矢志的追求;坚定的努力</li>
<li>-u 可能是 you？</li>
<li>origin<br>英 [ˈɒrɪdʒɪn]   美 [ˈɔːrɪdʒɪn]<br>n.起源;源头;起因;身世;出身 </li>
</ul>
<p>5.2 <strong>报错</strong>：</p>
<p>1.如果报failed to push some refs to git 错误出现错误的主要原因是码云中的README.md文件不在本地代码目录</p>
<p><img src="../../img/11/5.png" alt="5"></p>
<p>2.可以通过如下命令进行代码合并【注：pull=fetch+merge]</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">git pull <span class="comment">--rebase origin master</span></span><br></pre></td></tr></table></figure>

<p>2.1 执行上面代码后可以看到本地代码库中多了README.md文件</p>
<p>3.此时再执行语句 git push -u origin master即可完成代码上传到github</p>
<p>4.信息来源：<a href="https://www.cnblogs.com/uudon/p/12618043.html">https://www.cnblogs.com/uudon/p/12618043.html</a></p>
<p>5.成功；2020-10-6 18:19:02</p>
<p><img src="../../img/11/6.png" alt="6"></p>
<br />

<h3 id="1-2-第二次上传"><a href="#1-2-第二次上传" class="headerlink" title="1.2 第二次上传"></a>1.2 第二次上传</h3><p>1.除了第一次，要初始化；后面都不需要初始化；</p>
<p>2.然后是关联仓库不需要了，上面的第4步可以不用了。</p>
<p>来源：<a href="https://blog.csdn.net/TTTTT2017/article/details/78564147?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param">链接</a></p>
<p>3.输入git status 查看项目中哪些文件发生了变化，可以当做验证使用</p>
<ul>
<li>这个最好是开始就用；</li>
</ul>
<p>4.顺序可以是：</p>
<ul>
<li><p>1.输入git status 查看项目中哪些文件发生了变化</p>
</li>
<li><p>2.git add . 将所有变更文件添加进来（没变更应该也会吧）</p>
</li>
<li><p>3.<code>git commit -m &quot;&quot;</code>，将暂存区的文件提交到本地仓库</p>
<p>3.1 实际操作中看了看，确实只有变更的东西提交到了本地仓库</p>
<p>3.2 说明上面2，确实；2020-10-6 18:53:20</p>
<p>3.3 示例：</p>
<p><img src="../../img/11/7.png" alt="7"></p>
</li>
<li><p>4.<code>git push -u origin master</code>，将代码由本地仓库上传到远程仓库</p>
<p>好像也可以简写：<code>git push</code>，没试验</p>
</li>
</ul>
<hr>
<h2 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2. 安装git"></a>2. 安装git</h2><p><a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">https://www.cnblogs.com/xueweisuoyong/p/11914045.html</a></p>
<p>在第9步后面，多了一个：</p>
<p>Choose the default behavior of ‘git pull’</p>
<p>随后还多了一个管理证书的；</p>
<p><img src="http://bucket-c70.test.upcdn.net/11/1-2-1.png" alt=""></p>
<p>我选的中间的；</p>
<blockquote>
<ul>
<li><p>Git Credential Managert</p>
<p>Git凭据Managert</p>
</li>
<li><p>The Git Credential Manager for Windows handles credentials e.g. for AzureDevOps and GitHub (requires .NET framework v4.5.1 or later).</p>
<p>Windows的Git凭据管理器处理AzureDevOps和GitHub的凭据(需要. net framework v4.5.1或更高版本)。</p>
</li>
</ul>
</blockquote>
<p>第三个选项是：</p>
<blockquote>
<ul>
<li><p>Git Credential Manager Core</p>
<p>Git Credential管理器核心</p>
</li>
<li><p>(NEW!)Use the new, cross-platform version of the Git Credential Manager.</p>
<p>(新!)使用新的、跨平台版本的Git凭据管理器。</p>
</li>
<li><p>See more information about the future of Git Credential Manager here.</p>
<p>有关Git Credential Manager未来的更多信息，请点击这里。</p>
</li>
</ul>
</blockquote>
<p>后面的大同小异；</p>
<p>在安装后的界面（也是最后一个界面）勾选View Release Notes 会给一个说明html；不过是本地的；</p>
<p>file:///C:/Program%20Files/Git/ReleaseNotes.html</p>
<p>这里有2.27版本的安装：</p>
<p><a href="https://blog.csdn.net/qq_19394437/article/details/107250235">https://blog.csdn.net/qq_19394437/article/details/107250235</a></p>
<hr>
<h2 id="3-git-remote-v"><a href="#3-git-remote-v" class="headerlink" title="3. git remote -v"></a>3. git remote -v</h2><p>1.查看当前仓库对应的远程仓库地址</p>
<p>2.这条命令能显示你当前仓库中已经添加了的仓库名和对应的仓库地址，通常来讲，会有两条一模一样的记录，分别是fetch和push，其中fetch是用来从远程同步 push是用来推送到远程</p>
<p>3.<a href="https://gitee.com/help/articles/4114#查看当前仓库对应的远程仓库地址">出至</a>：</p>
<p>4.实验：</p>
<p><img src="../img/11/4.png" alt="4"></p>
<br />

<hr>
<h2 id="4-git-clone"><a href="#4-git-clone" class="headerlink" title="4. git clone"></a>4. git clone</h2><p>1.git clone <a href="https://github.com/×××">https://github.com/×××</a>  从远程库中克隆,克隆一个版本库到新的目录，可以在当前目录新建一个文件夹，也可以git clone [地址] [本地目录]</p>
<p>2.git clone ssh://igerrit.storm:29418/tools/repo.git // 同上，</p>
<p>3.之后 git pull origin master //origin是远程主机，master是默认分支</p>
<p>4.要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。</p>
<p>5.Git支持多种协议，包括<code>https</code>，但通过<code>ssh</code>支持的原生<code>git</code>协议速度最快</p>
<p>6.单一仓库的更新可以使用git pull命令。</p>
<hr>
<h2 id="5-git挂代理"><a href="#5-git挂代理" class="headerlink" title="5. git挂代理"></a>5. git挂代理</h2><h3 id="5-1-代码"><a href="#5-1-代码" class="headerlink" title="5.1 代码"></a>5.1 代码</h3><p><img src="../../img/11/2.png" alt="2"></p>
<h3 id="5-2-gitconfig文件"><a href="#5-2-gitconfig文件" class="headerlink" title="5.2 gitconfig文件"></a>5.2 gitconfig文件</h3><p>1.这个文件在：C:\Documents and Settings\Administrator</p>
<p>2.Documents and Settings文件夹不一定有权限，需要改；</p>
<ul>
<li>权限笔记：文章21-3</li>
</ul>
<p>3.组队的例子：</p>
<p><img src="../../img/11/3.png" alt="3"></p>
<ul>
<li>现在有点困，睡觉了，下次再来解析；2020-9-14 03:54:39</li>
</ul>
<hr>
<h2 id="6-git常用命令"><a href="#6-git常用命令" class="headerlink" title="6. git常用命令"></a>6. git常用命令</h2><p>切换分支：git checkout name</p>
<p>撤销修改：git checkout – file</p>
<p>删除文件：git rm file</p>
<p>查看状态：git status</p>
<p>添加记录：git add file 或 git add .</p>
<p>添加描述：git commit -m “miao shu nei rong”</p>
<p>同步数据：git pull</p>
<p>提交数据：git push origin name</p>
<p>分支操作</p>
<p>查看分支：git branch</p>
<p>创建分支：git branch name</p>
<p>切换分支：git checkout name</p>
<p>创建+切换分支：git checkout -b name</p>
<p>合并某分支到当前分支：git merge name</p>
<p>删除分支：git branch -d name</p>
<p>删除远程分支：git push origin :name</p>
<hr>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>12-前篇</title>
    <url>/1-(0~50)/12-before/</url>
    <content><![CDATA[<h2 id="1-HTML简介"><a href="#1-HTML简介" class="headerlink" title="1. HTML简介"></a>1. HTML简介</h2><h3 id="1-1-网页"><a href="#1-1-网页" class="headerlink" title="1.1 网页"></a>1.1 网页</h3><a id="more"></a>

<h4 id="1-什么是网页"><a href="#1-什么是网页" class="headerlink" title="1. 什么是网页"></a>1. 什么是网页</h4><p>1.网站是指在因特网上根据一定的规则，使用 HTML 等制作的用于展示特定内容相关的网页集合。</p>
<p>2.网页是网站中的一“页”，通常是 HTML 格式的文件，它要通过浏览器来阅读。</p>
<p>3.网页是构成网站的基本元素，它通常由图片、链接、文字、声音、视频等元素组成。通常我们看到的网页，常见以 .htm 或 .html 后缀结尾的文件，因此将其俗称为 HTML 文件。</p>
<h4 id="2-什么是HTML"><a href="#2-什么是HTML" class="headerlink" title="2 .什么是HTML"></a>2 .什么是HTML</h4><p>1.HTML 指的是超文本标记语言 (Hyper Text Markup Language) ，它是用来描述网页的一种语言。</p>
<p>2.HTML 不是一种编程语言，而是一种标记语言 (markup language)。</p>
<p>3.标记语言是一套标记标签 (markup tag)。</p>
<p>4.所谓超文本，有 2 层含义：</p>
<ul>
<li>它可以加入图片、声音、动画、多媒体等内容（超越了文本限制 ）。</li>
<li>它还可以从一个文件跳转到另一个文件，与世界各地主机的文件连接（超级链接文本 ）。</li>
</ul>
<h4 id="3-网页的形成"><a href="#3-网页的形成" class="headerlink" title="3. 网页的形成"></a>3. 网页的形成</h4><p>1.网页是由网页元素组成的，这些元素是利用 html 标签描述出来，然后通过浏览器解析来显示给用户的。</p>
<p>2.前端人员开发代码 —-&gt; 浏览器显示代码（解析、渲染） —–&gt; 生成最后的 Web 页面</p>
<h4 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h4><p>1.网页是图片、链接、文字、声音、视频等元素组成, 其实就是一个html文件(后缀名为html)<br>2.网页生成制作: 有前端人员书写 HTML 文件, 然后浏览器打开,就能看到了网页.<br>3.HTML: 超文本标记语言, 用来制作网页的一门语言. 有标签组成的. 比如 图片标签 链接标签 视频标签等…</p>
<h3 id="1-2-常用浏览器"><a href="#1-2-常用浏览器" class="headerlink" title="1.2 常用浏览器"></a>1.2 常用浏览器</h3><p>1.网页是通过浏览器来展示的, 关于浏览器我们要介绍以下两点:</p>
<ul>
<li>常用的浏览器</li>
<li>浏览器内核</li>
</ul>
<p>2.浏览器是网页显示、运行的平台。常用的浏览器有 IE、火狐（Firefox）、谷歌（Chrome）、Safari和Opera等。<br>平时称为五大浏览器。</p>
<p>3.查看浏览器市场份额：<a href="http://tongji.baidu.com/data/browser">http://tongji.baidu.com/data/browser</a></p>
<h4 id="2-内核"><a href="#2-内核" class="headerlink" title="2. 内核"></a>2. 内核</h4><p>1.浏览器内核（渲染引擎）： 负责读取网页内容，整理讯息，计算网页的显示方式并显示页面。</p>
<table>
<thead>
<tr>
<th>浏览器</th>
<th>内核</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>IE</td>
<td>Trident</td>
<td>IE、猎豹安全、360极速浏览器、百度浏览器</td>
</tr>
<tr>
<td>firefox</td>
<td>Gecko</td>
<td>火狐浏览器内核</td>
</tr>
<tr>
<td>Safari</td>
<td>Webkit</td>
<td>苹果浏览器内核</td>
</tr>
<tr>
<td>chrome/Opera</td>
<td>Blink</td>
<td>chrome/opera浏览器内核。Blink其实WebKit的分支</td>
</tr>
</tbody></table>
<ul>
<li>目前国内一般浏览器都会采用 Webkit/Blink 内核，如 360、UC、QQ、搜狗等。</li>
</ul>
<h3 id="1-3-Web标准"><a href="#1-3-Web标准" class="headerlink" title="1.3 Web标准"></a>1.3 Web标准</h3><p>1.Web 标准是由 W3C 组织和其他标准化组织制定的一系列标准的集合。W3C（万维网联盟）是国际最著名的标准化组织。</p>
<h4 id="1-为何需要"><a href="#1-为何需要" class="headerlink" title="1. 为何需要"></a>1. 为何需要</h4><p>1.为什么需要 Web 标准？</p>
<ul>
<li>浏览器不同，它们显示页面或者排版就有些许差异</li>
</ul>
<p>2.由于不同浏览器解析出来的效果可能不一致，开发者常常需要为多版本的开发而艰苦工作。</p>
<p>3.遵循 Web 标准除了可以让不同的开发人员写出的页面更标准、更统一外，还有以下优点：</p>
<ul>
<li>1.让 Web 的发展前景更广阔。</li>
<li>2.内容能被更广泛的设备访问。</li>
<li>3.更容易被搜寻引擎搜索。</li>
<li>4.降低网站流量费用。</li>
<li>5.使网站更易于维护。</li>
<li>6.提高页面浏览速度。</li>
</ul>
<h4 id="2-Web标准的构成"><a href="#2-Web标准的构成" class="headerlink" title="2. Web标准的构成"></a>2. Web标准的构成</h4><p>1.主要包括结构（Structure） 、表现（Presentation）和行为（Behavior）三个方面。</p>
<table>
<thead>
<tr>
<th>标准</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>结构</td>
<td>结构用于对网页元素进行整理和分类，现阶段主要学HTML。</td>
</tr>
<tr>
<td>表现</td>
<td>表现用于设置网页元素的版式、颜色、大小等外观样式，主要指的是CSS</td>
</tr>
<tr>
<td>行为</td>
<td>行为是指网页模型的定义及交互的编写，现阶段主要学JavaScript</td>
</tr>
</tbody></table>
<p>2.Web 标准提出的最佳体验方案：结构、样式、行为相分离。</p>
<ul>
<li>简单理解： 结构写到 HTML 文件中， 表现写到 CSS 文件中， 行为写到 JavaScript 文件中。</li>
</ul>
<hr>
<h2 id="2-标签-上"><a href="#2-标签-上" class="headerlink" title="2. 标签-上"></a>2. 标签-上</h2><h3 id="2-1-HTML-语法规范"><a href="#2-1-HTML-语法规范" class="headerlink" title="2.1 HTML 语法规范"></a>2.1 HTML 语法规范</h3><h4 id="1-基本语法概述"><a href="#1-基本语法概述" class="headerlink" title="1. 基本语法概述"></a>1. 基本语法概述</h4><ol>
<li>HTML 标签是由尖括号包围的关键词，例如 <code>&lt;html&gt;</code>。</li>
<li>HTML 标签通常是成对出现的，例如 <code>&lt;html&gt;</code> 和 <code>&lt;/html&gt;</code> ，我们称为双标签。标签对中的第一个标签是<br>开始标签，第二个标签是结束标签。</li>
<li>有些特殊的标签必须是单个标签（极少情况），例如 <code>&lt;br /&gt;</code>，我们称为单标签。</li>
</ol>
<h4 id="2-标签关系"><a href="#2-标签关系" class="headerlink" title="2. 标签关系"></a>2. 标签关系</h4><p>1.双标签关系可以分为两类：包含关系和并列关系。</p>
<ul>
<li><p>包含关系</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>并列关系</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<br />

<h3 id="2-2-基本结构标签"><a href="#2-2-基本结构标签" class="headerlink" title="2.2 基本结构标签"></a>2.2 基本结构标签</h3><h4 id="1-第一个-HTML-网页"><a href="#1-第一个-HTML-网页" class="headerlink" title="1. 第一个 HTML 网页"></a>1. 第一个 HTML 网页</h4><p>1.每个网页都会有一个基本的结构标签（也称为骨架标签），页面内容也是在这些基本标签上书写。HTML页面也称为 HTML 文档.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一个页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        你我之间,黑马洗练,月薪过万,一飞冲天</span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th>标签名</th>
<th>定义</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;html&gt;&lt;/html&gt;</code></td>
<td>HTML标签</td>
<td>页面中最大的标签，我们称为根标签</td>
</tr>
<tr>
<td><code>&lt;head&gt;&lt;/head&gt;</code></td>
<td>文档的头部</td>
<td>注意在head标签中我们必须要设置的标签是title</td>
</tr>
<tr>
<td><code>&lt;title&gt;&lt;/title&gt;</code></td>
<td>文档的标题</td>
<td>让页面拥有一个属于自己的网页标题</td>
</tr>
<tr>
<td><code>&lt;body&gt;&lt;/body&gt;</code></td>
<td>文档的主体</td>
<td>元素包含文档的所有内容，页面内容基本都是放到body里面的</td>
</tr>
</tbody></table>
<p>2.HTML 文档的的后缀名必须是 .html 或 .htm ，浏览器的作用是读取 HTML 文档，并以网页的形式显示出它们。此时，用浏览器打开这个网页，我们就可以预览我们写的第一个 HTML 文件了。</p>
<h4 id="2-总结"><a href="#2-总结" class="headerlink" title="2. 总结"></a>2. 总结</h4><img src="../../img/12.b/4.png" alt="4" style="zoom:80%;" />

<h3 id="2-3-开发工具"><a href="#2-3-开发工具" class="headerlink" title="2.3 开发工具"></a>2.3 开发工具</h3><h4 id="1-VSCode的使用"><a href="#1-VSCode的使用" class="headerlink" title="1. VSCode的使用"></a>1. VSCode的使用</h4><ol>
<li>双击打开软件。</li>
<li>新建文件（Ctrl + N ）。</li>
<li>保存（Ctrl + S ）, 注意移动要保存为 .html 文件</li>
<li>Ctrl + 加号键 ，Ctrl + 减号键 可以放大缩小视图</li>
<li>生成页面骨架结构。<br>输入! 按下 Tab 键。</li>
<li>利用插件在浏览器中预览页面：单击鼠标右键，在弹出窗口中点击“Open In Default Browser”。</li>
</ol>
<h4 id="2-VSCode新增代码"><a href="#2-VSCode新增代码" class="headerlink" title="2. VSCode新增代码"></a>2. VSCode新增代码</h4><p>0.全名：VSCode工具生成骨架标签新增代码</p>
<ol>
<li><!DOCTYPE><p> 标签</p>
</li>
<li><p>lang 语言</p>
</li>
<li><p>charset 字符集</p>
</li>
</ol>
<h5 id="2-1-文档类型声明标签"><a href="#2-1-文档类型声明标签" class="headerlink" title="2.1 文档类型声明标签"></a>2.1 文档类型声明标签</h5><p>1.&lt;!DOCTYPE&gt; 文档类型声明，作用就是告诉浏览器使用哪种HTML版本,来显示网页。</p>
<p><code>&lt;!DOCTYPE html&gt;</code></p>
<p>2.<strong>这句代码的意思是</strong>: 当前页面采取的是 HTML5 版本来显示网页.<br>注意:</p>
<ol>
<li><code>&lt;!DOCTYPE&gt;</code> 声明位于文档中的最前面的位置，处于 <code>&lt;html&gt;</code> 标签之前。</li>
<li><code>&lt;!DOCTYPE&gt;</code><strong>不是</strong>一个 HTML 标签，它就是 文档类型声明标签。</li>
</ol>
<h5 id="2-2-lang语言种类"><a href="#2-2-lang语言种类" class="headerlink" title="2.2 lang语言种类"></a>2.2 lang语言种类</h5><p>1.用来定义当前文档显示的语言。</p>
<ol>
<li>en定义语言为英语</li>
<li>zh-CN定义语言为中文</li>
<li>简单来说,定义为en 就是英文网页, 定义为 zh-CN 就是中文网页其实对于文档显示来说，定义成en的文档也可以显示中文，定义成zh-CN的文档也可以显示英文这个属性对浏览器和搜索引擎(百度.谷歌等)还是有作用的</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<h5 id="2-3-字符集"><a href="#2-3-字符集" class="headerlink" title="2.3 字符集"></a>2.3 字符集</h5><p>1.字符集 (Character set)是多个字符的集合。以便计算机能够识别和存储各种文字。在<code>&lt;head&gt;</code>标签内，可以通过<code>&lt;meta&gt;</code> 标签的 charset 属性来规定 HTML 文档应该使用哪种字符编码。</p>
<p>2.<code>&lt;meta charset=&quot; UTF-8&quot; /&gt;</code></p>
<p>3.charset 常用的值有：GB2312 、BIG5 、GBK 和 UTF-8，其中 UTF-8 也被称为万国码，基本包含了全世界所有国家需要用到的字符.</p>
<p>4.注意：上面语法是必须要写的代码，否则可能引起乱码的情况。一般情况下，统一使用“UTF-8”编码，尽量<br>统一写成标准的 “UTF-8”，不要写成 “utf8” 或 “UTF8”。</p>
<h5 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h5><ol>
<li><p>以上三个代码 vscode 自动生成,基本不需要我们重写.</p>
</li>
<li><!DOCTYPE html><p> 文档类型声明标签,告诉浏览器这个页面采取html5版本来显示页面.</p>
</li>
<li><p><code>&lt;html lang=&quot;en&quot;&gt;</code> 告诉浏览器或者搜索引擎这是一个英文网站. 本页面采取英文来显示.</p>
</li>
<li><p><code>&lt;meta charset=“ UTF-8” /&gt;</code> 必须写. 采取 UTF-8来保存文字. 如果不写就会乱码.具体原理后面分析.</p>
</li>
</ol>
<hr>
<h3 id="2-4-常用标签"><a href="#2-4-常用标签" class="headerlink" title="2.4 常用标签"></a>2.4 常用标签</h3><h4 id="1-标签语义"><a href="#1-标签语义" class="headerlink" title="1. 标签语义"></a>1. 标签语义</h4><p>1.学习标签是有技巧的，重点是记住每个标签的语义。简单理解就是指标签的含义，即这个标签是用来干嘛的。根据标签的语义，在合适的地方给一个最为合理的标签，可以让页面结构更清晰。</p>
<h4 id="2-标题标签"><a href="#2-标题标签" class="headerlink" title="2. 标题标签"></a>2. 标题标签</h4><p>1.为了使网页更具有语义化，我们经常会在页面中用到标题标签。HTML 提供了 6 个等级的网页标题，即<code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code>。</p>
<p><code>&lt;h1&gt; 我是一级标题 &lt;/h1&gt;</code></p>
<p>2.单词 head 的缩写，意为头部、标题。标签语义：作为标题使用，并且依据重要性递减。</p>
<p>3.特点：</p>
<ol>
<li>加了标题的文字会变的加粗，字号也会依次变大。</li>
<li>一个标题独占一行。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题一共六级选,<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>文字加粗一行显。<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>由大到小依次减，<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>从重到轻随之变。<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>语法规范书写后，<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>具体效果刷新见。<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">------pink老师</span><br></pre></td></tr></table></figure>

<br />

<h4 id="3-段落"><a href="#3-段落" class="headerlink" title="3. 段落"></a>3. 段落</h4><p>1.在网页中，要把文字有条理地显示出来，就需要将这些文字分段显示。在 HTML 标签中，<code>&lt;p&gt;</code>标签用于定义段落，它可以将整个网页分为若干个段落。</p>
<p><code>&lt;p&gt; 我是一个段落标签 &lt;/p&gt;</code></p>
<p>2.单词 paragraph [ˈpærəgræf] 的缩写，意为段落。</p>
<ul>
<li>标签语义：可以把 HTML 文档分割为若干段落。</li>
</ul>
<p>3.特点：</p>
<ol>
<li>文本在一个段落中会根据浏览器窗口的大小自动换行。</li>
<li>段落和段落之间保有空隙。</li>
</ol>
<hr>
<h4 id="4-换行"><a href="#4-换行" class="headerlink" title="4. 换行"></a>4. 换行</h4><p>1.在 HTML 中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后才自动换行。如果希望某段文本强制换行显示，就需要使用换行标签 <code>&lt;br /&gt;</code>。</p>
<p>2.单词 break 的缩写，意为打断、换行。</p>
<ul>
<li>标签语义：强制换行。</li>
</ul>
<p>3.特点：</p>
<ol>
<li><code>&lt;br /&gt;</code> 是个单标签。</li>
<li><code>&lt;br /&gt;</code> 标签只是简单地开始新的一行，跟段落不一样，段落之间会插入一些垂直的间距。</li>
</ol>
<h4 id="5-文本格式化"><a href="#5-文本格式化" class="headerlink" title="5. 文本格式化"></a>5. 文本格式化</h4><p>1.在网页中，有时需要为文字设置粗体、 斜体  或下划线等效果，这时就需要用到 HTML 中的文本格式化标签，使文字以特殊的方式显示。</p>
<p>2.标签语义: 突出重要性, 比普通文字更重要.</p>
<table>
<thead>
<tr>
<th>语义</th>
<th>标签</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>加粗</td>
<td><code>&lt;strong&gt;&lt;/strong&gt;</code>或者<code>&lt;b&gt;&lt;/b&gt;</code></td>
<td>更推荐使用<code>&lt;strong&gt;</code>标签加粗，语义更强</td>
</tr>
<tr>
<td>倾斜</td>
<td><code>&lt;em&gt;&lt;/em&gt;</code>或者<code>&lt;i&gt;&lt;/i&gt;</code></td>
<td>更推荐使用<code>&lt;em&gt;</code>标签加粗，语义更强</td>
</tr>
<tr>
<td>删除线</td>
<td><code>&lt;del&gt;&lt;/del&gt;</code>或者<code>&lt;s&gt;&lt;/s&gt;</code></td>
<td>更推荐使用<code>&lt;del&gt;</code>标签加粗，语义更强</td>
</tr>
<tr>
<td>下划线</td>
<td><code>&lt;ins&gt;&lt;/ins&gt;</code>或者<code>&lt;u&gt;&lt;/u&gt;</code></td>
<td>更推荐使用<code>&lt;ins&gt;</code>标签加粗，语义更强</td>
</tr>
</tbody></table>
<ul>
<li>同学们重点记住 加粗 和  倾斜</li>
</ul>
<hr>
<h4 id="6-div和span"><a href="#6-div和span" class="headerlink" title="6. div和span"></a>6. div和span</h4><p>1.<code>&lt;div&gt;</code>和 <code>&lt;span&gt;</code> 是没有语义的，它们就是一个盒子，用来装内容的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> 这是头部 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span> 今日价格 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1.1 div 是 division 的缩写，表示分割、分区。span 意为跨度、跨距。</p>
<p>2.特点：</p>
<ol>
<li><code>&lt;div&gt;</code> 标签用来布局，但是现在一行只能放一个<code>&lt;div&gt;</code>。 大盒子</li>
<li><code>&lt;span&gt;</code> 标签用来布局，一行上可以多个 <code>&lt;span&gt;</code>。小盒子</li>
</ol>
<hr>
<h4 id="7-图像标签"><a href="#7-图像标签" class="headerlink" title="7. 图像标签"></a>7. 图像标签</h4><p>1.在 HTML 标签中，<code>&lt;img&gt;</code> 标签用于定义 HTML 页面中的图像。</p>
<p><code>&lt;img src=&quot;图像URL&quot; /&gt;</code></p>
<p>2.单词 image 的缩写，意为图像。src 是<code>&lt;img&gt;</code>标签的必须属性，它用于指定图像文件的路径和文件名。所谓属性：简单理解就是属于这个图像标签的特性。</p>
<p>3.其他属性</p>
<p><img src="../../img/12.b/5.png" alt="5"></p>
<p>4.图像标签属性注意点：<br>① 图像标签可以拥有多个属性，必须写在标签名的后面。<br>② 属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。<br>③ 属性采取键值对的格式，即 key=“value” 的格式，属性 =“属性值”。</p>
<p>5.提问：</p>
<ul>
<li>1.图像标签哪个属性是必须要写的？src</li>
<li>2.图像标签中alt和title属性区别？</li>
</ul>
<hr>
<h4 id="8-路径"><a href="#8-路径" class="headerlink" title="8. 路径"></a>8. 路径</h4><p>1.页面中的图片会非常多， 通常我们会新建一个文件夹来存放这些图像文件（images），这时再查找图像，就需要采用“路径”的方式来指定图像文件的位置。</p>
<p>2.路径可以分为：</p>
<ol>
<li>相对路径</li>
<li>绝对路径</li>
</ol>
<h5 id="8-1-相对路径"><a href="#8-1-相对路径" class="headerlink" title="8.1 相对路径"></a>8.1 相对路径</h5><p>1.相对路径：以引用文件所在位置为参考基础，而建立出的目录路径。</p>
<ul>
<li>这里简单来说，图片相对于 HTML 页面的位置</li>
</ul>
<p><img src="../../img/12.b/6.png" alt="6"></p>
<ul>
<li>同一级也可以用：<code>./</code></li>
</ul>
<p>2.相对路径是从代码所在的这个文件出发，去寻找目标文件的，而我们这里所说的上一级 、下一级和同一级就是图片相对于 HTML 页面的位置。</p>
<p>3.接着pdf34–2020-11-4 15:26:52</p>
<h5 id="8-2-绝对路径"><a href="#8-2-绝对路径" class="headerlink" title="8.2 绝对路径"></a>8.2 绝对路径</h5><p>1.绝对路径是指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径。</p>
<p>例如，“D:\web\img\logo.gif”或完整的网络地址“<a href="http://www.itcast.cn/images/logo.gif”。">http://www.itcast.cn/images/logo.gif”。</a></p>
<hr>
<h4 id="9-超链接"><a href="#9-超链接" class="headerlink" title="9. 超链接"></a>9. 超链接</h4><p>1.在 HTML 标签中，<code>&lt;a&gt;</code> 标签用于定义超链接，作用是从一个页面链接到另一个页面。</p>
<ol>
<li>链接的语法格式</li>
<li>链接的分类</li>
</ol>
<p>2.语法：</p>
<p><code>&lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口的弹出方式&quot;&gt; 文本或图像 &lt;/a&gt;</code></p>
<ul>
<li><p>单词 anchor [ˈæŋkə(r)] 的缩写，意为：锚。</p>
</li>
<li><p>两个属性的作用如下：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>href</td>
<td>用于指定链接目标的url地址，（必须属性）当为标签应用href属性时，它就具有了超链接的功能</td>
</tr>
<tr>
<td>target</td>
<td>用于指定链接页面的打开方式，其中_self为默认值，_blank为新窗口打开方式。</td>
</tr>
</tbody></table>
</li>
</ul>
<p>3.链接分类：</p>
<ol>
<li>外部链接: 例如 &lt; a href=”http:// <a href="http://www.baidu.com">www.baidu.com</a> “&gt; 百度<code>&lt;/a &gt;</code>。</li>
<li>内部链接:网站内部页面之间的相互链接. 直接链接内部页面名称即可，例如 &lt; a href=”index.html”&gt; 首页 <code>&lt;/a &gt;</code>。</li>
<li>空链接: 如果当时没有确定链接目标时，&lt; a href=”#”&gt; 首页<code>&lt;/a &gt;</code> 。</li>
<li>下载链接: 如果 href 里面地址是一个文件或者压缩包，会下载这个文件。</li>
<li>网页元素链接: 在网页中的各种网页元素，如文本、图像、表格、音频、视频等都可以添加超链接.</li>
<li>锚点链接: 点我们点击链接,可以快速定位到页面中的某个位置.<ul>
<li>在链接文本的 href 属性中，设置属性值为 #名字 的形式，如<code>&lt;a href=&quot;#two&quot;&gt; 第2集 &lt;/a&gt;</code></li>
<li>找到目标位置标签，里面添加一个 id 属性 = 刚才的名字 ，如：<code>&lt;h3 id=&quot;two&quot;&gt;第2集介绍&lt;/h3&gt;</code></li>
</ul>
</li>
</ol>
<br />

<hr>
<h3 id="2-5-注释和特殊字符"><a href="#2-5-注释和特殊字符" class="headerlink" title="2.5 注释和特殊字符"></a>2.5 注释和特殊字符</h3><h4 id="1-注释"><a href="#1-注释" class="headerlink" title="1. 注释"></a>1. 注释</h4><p>1.如果需要在 HTML 文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。</p>
<p>2.HTML中的注释以“<!--”开头，以“ -->”结束。</p>
<p><code>&lt;!-- 注释语句 --&gt; 快捷键: ctrl + /</code></p>
<p>3.注释标签里面的内容是给程序猿看的, 这个代码是不执行不显示到页面中的.</p>
<ul>
<li>添加注释是为了更好地解释代码的功能，便于相关开发人员理解和阅读代码，程序是不会执行注释内容的。</li>
</ul>
<br />

<h4 id="2-特殊字符"><a href="#2-特殊字符" class="headerlink" title="2. 特殊字符"></a>2. 特殊字符</h4><p>1.在 HTML 页面中，一些特殊的符号很难或者不方便直接使用，此时我们就可以使用下面的字符来替代。</p>
<p><img src="../../img/12.b/7.png" alt="7"></p>
<br />

<hr>
<h2 id="3-标签-下"><a href="#3-标签-下" class="headerlink" title="3. 标签-下"></a>3. 标签-下</h2><h3 id="3-1-表格"><a href="#3-1-表格" class="headerlink" title="3.1 表格"></a>3.1 表格</h3><p>表格是实际开发中非常常用的标签:</p>
<ol>
<li>表格的主要作用</li>
<li>表格的基本语法</li>
</ol>
<h4 id="1-主要作用"><a href="#1-主要作用" class="headerlink" title="1. 主要作用"></a>1. 主要作用</h4><p>1.表格主要用于显示、展示数据，因为它可以让数据显示的非常的规整，可读性非常好。特别是后台展示数据的时候，能够熟练运用表格就显得很重要。一个清爽简约的表格能够把繁杂的数据表现得很有条理。</p>
<p>2.总结: 表格<strong>不是</strong>用来布局页面的,而是用来展示数据的.</p>
<h4 id="2-基本语法"><a href="#2-基本语法" class="headerlink" title="2. 基本语法"></a>2. 基本语法</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><table> </table> 是用于定义表格的标签。
</li>
<li><p><code>&lt;tr&gt; &lt;/tr&gt;</code> 标签用于定义表格中的行，必须嵌套在 <code>&lt;table&gt; &lt;/table&gt;</code>标签中。</p>
<p>2.1 表格行：tr：table row；</p>
</li>
<li><p><code>&lt;td&gt; &lt;/td&gt;</code> 用于定义表格中的单元格，必须嵌套在<code>&lt;tr&gt;&lt;/tr&gt;</code>标签中。</p>
</li>
<li><p>字母 td 指表格数据（table data），即数据单元格的内容。</p>
</li>
</ol>
<h4 id="3-表头"><a href="#3-表头" class="headerlink" title="3. 表头"></a>3. 表头</h4><p>1.一般表头单元格位于表格的第一行或第一列，表头单元格里面的文本内容加粗居中显示.<code>&lt;th&gt;</code> 标签表示 HTML 表格的表头部分(table head 的缩写)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span> 姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.表头单元格也是单元格, 常用于表格第一行, 突出重要性, 表头单元格里面的文字会加粗居中显示.</p>
<hr>
<h4 id="4-表格属性"><a href="#4-表格属性" class="headerlink" title="4. 表格属性"></a>4. 表格属性</h4><p>1.表格标签这部分属性我们实际开发我们不常用，后面通过 CSS 来设置.<br>目的有2个:</p>
<ol>
<li>记住这些英语单词,后面 CSS 会使用.</li>
<li>直观感受表格的外观形态.</li>
</ol>
<p><img src="../../img/12.b/2.png" alt="1"></p>
<p>2.居中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.a1</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    transform: translate(-50%, -50%);</span><br><span class="line">  &#125;</span><br><span class="line">  table &#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line">  th &#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>1.这么写的时候没效果：<code>&lt;table width=&quot;500&quot; height=&quot;249&quot; border=&quot;1&quot; align=&quot;center&quot;&gt;</code></p>
<p>1.1 不知道怎么回事；</p>
</li>
<li><p>2.即使写了</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.1 表头th也没居中，就另外又写了表头th居中；</p>
<p>2.2 找到原因了：<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;./6-bootstrap/css/bootstrap.min.css&quot;&gt;</code></p>
<ul>
<li>bootstrap里面有css覆盖了；我注释了就th也能居中了；2020-11-9 18:56:29</li>
</ul>
</li>
</ul>
<h4 id="5-案例"><a href="#5-案例" class="headerlink" title="5. 案例"></a>5. 案例</h4><p>1.预览：</p>
<p><img src="../../img/12.b/1.png" alt="1"></p>
<p>2.思路：</p>
<p>先制作表格的结构.</p>
<ol>
<li>第一行里面是 th 表头单元格</li>
<li>第二行开始里面是 td 普通单元格</li>
<li>单元格里面可以放任何元素,文字链接图片等都可以</li>
</ol>
<p>后书写表格属性.</p>
<ol>
<li>用到宽度高度边框cellpadding 和 cellspacing</li>
<li>表格浏览器中对齐 align</li>
</ol>
<p>3.代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;249&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>排名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>关键词<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>趋势<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>进入搜索<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>最近七日<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>相关链接<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>鬼吹灯<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;down.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>456<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>百科<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>鬼吹灯<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;down.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>456<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>百科<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;up.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>456<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>百科<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>鬼吹灯<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;down.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>456<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>百科<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>鬼吹灯<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;down.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>456<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>百科<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>鬼吹灯<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;down.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>456<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>百科<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span>           </span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<hr>
<h4 id="6-结构标签"><a href="#6-结构标签" class="headerlink" title="6. 结构标签"></a>6. 结构标签</h4><p>1.使用场景:因为表格可能很长,为了更好的表示表格的语义，可以将表格分割成 表格头部和表格主体两大部分.</p>
<p>2.在表格标签中，分别用：<code>&lt;thead&gt;</code>标签 表格的头部区域、<code>&lt;tbody&gt;</code>标签 表格的主体区域. 这样可以更好的分清表<br>格结构。</p>
<img src="../../img/12.b/8.png" alt="8" style="zoom:80%;" />

<p>3.<code>&lt;thead&gt;&lt;/thead&gt;</code>：用于定义表格的头部。<code>&lt;thead&gt;</code> 内部必须拥有 <code>&lt;tr&gt;</code> 标签。 一般是位于第一行。</p>
<p>4.<code>&lt;tbody&gt;&lt;/tbody&gt;</code>：用于定义表格的主体，主要用于放数据本体 。</p>
<p>5.以上标签都是放在 <code>&lt;table&gt;&lt;/table&gt;</code> 标签中。</p>
<hr>
<h4 id="7-合并单元格"><a href="#7-合并单元格" class="headerlink" title="7. 合并单元格"></a>7. 合并单元格</h4><p>1.特殊情况下,可以把多个单元格合并为一个单元格, 这里同学们会最简单的合并单元格即可.</p>
<p>2.合并单元格方式：</p>
<ul>
<li>跨行合并：rowspan=”合并单元格的个数”</li>
<li>跨列合并：colspan=”合并单元格的个数”</li>
</ul>
<p>2.1 例如：</p>
<p><img src="../../img/12.b/9.png" alt="9"></p>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;249&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           </span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">           </span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3.目标单元格：(写合并代码)</p>
<p>跨行：最上侧单元格为目标单元格, 写合并代码<br>跨列：最左侧单元格为目标单元格, 写合并代码</p>
<p>4.合并单元格三步曲</p>
<ul>
<li>先确定是跨行还是跨列合并。</li>
</ul>
<ol start="2">
<li>找到目标单元格. 写上合并方式 = 合并的单元格数量。比如：<code>&lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;</code>。</li>
<li>删除多余的单元格。</li>
</ol>
<hr>
<h4 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h4><p>表格学习整体可以分为三大部分:</p>
<ol>
<li>表格的相关标签</li>
<li>表格的相关属性</li>
<li>合并单元格</li>
</ol>
<br />

<hr>
<h3 id="3-2-列表标签"><a href="#3-2-列表标签" class="headerlink" title="3.2 列表标签"></a>3.2 列表标签</h3><p>1.表格是用来显示数据的，那么列表就是用来布局的。列表最大的特点就是整齐、整洁、有序，它作为布局会更加自由和方便。根据使用</p>
<p>情景不同，列表可以分为三大类：无序列表、有序列表和自定义列表。</p>
<h4 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1. 无序列表"></a>1. 无序列表</h4><p>1.<code>&lt;ul&gt;</code> 标签表示 HTML 页面中项目的无序列表，一般会以项目符号呈现列表项，而列表项使用 <code>&lt;li&gt;</code> 标签定义。<br>无序列表的基本语法格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.无序列表的各个列表项之间没有顺序级别之分，是并列的。</p>
<p>3.<code>&lt;ul&gt;&lt;/ul&gt;</code> 中只能嵌套 <code>&lt;li&gt;&lt;/li&gt;</code>，直接在 <code>&lt;ul&gt;&lt;/ul&gt;</code> 标签中输入其他标签或者文字的做法是不被允许的。</p>
<p>4.<code>&lt;li&gt;</code> 与 <code>&lt;/li&gt;</code> 之间相当于一个容器，可以容纳所有元素。</p>
<p>5.无序列表会带有自己的样式属性，但在实际使用时，我们会使用 CSS 来设置。</p>
<h4 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2. 有序列表"></a>2. 有序列表</h4><p>1.有序列表即为有排列顺序的列表，其各个列表项会按照一定的顺序排列定义。</p>
<p>2.在 HTML 标签中，<code>&lt;ol&gt;</code> 标签用于定义有序列表，列表排序以数字来显示，并且使用 <code>&lt;li&gt;</code> 标签来定义列表项。<br>有序列表的基本语法格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.注意事项：</p>
<ul>
<li>1.<code>&lt;ol&gt;&lt;/ol&gt;</code>中只能嵌套<code>&lt;li&gt;&lt;/li&gt;</code>，直接在<code>&lt;ol&gt;&lt;/ol&gt;</code>标签中输入其他标签或者文字的做法是不被允许的。</li>
<li>2.<code>&lt;li&gt;</code> 与 <code>&lt;/li&gt;</code>之间相当于一个容器，可以容纳所有元素。</li>
<li>3.有序列表会带有自己样式属性，但在实际使用时，我们会使用 CSS 来设置。</li>
</ul>
<hr>
<h4 id="3-自定义列表"><a href="#3-自定义列表" class="headerlink" title="3. 自定义列表"></a>3. 自定义列表</h4><p>1.自定义列表的使用场景：自定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。</p>
<p>2.在 HTML 标签中，<code>&lt;dl&gt;</code> 标签用于定义描述列表（或定义列表），该标签会与 <code>&lt;dt&gt;</code>（定义项目/名字）和<br><code>&lt;dd&gt;</code>（描述每一个项目/名字）一起使用。</p>
<ul>
<li>其基本语法如下：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.注意：</p>
<ul>
<li>1.<code>&lt;dl&gt;&lt;/dl&gt;</code> 里面只能包含 <code>&lt;dt&gt;</code> 和 <code>&lt;dd&gt;</code>。</li>
<li>2.<code>&lt;dt&gt;</code> 和 <code>&lt;dd&gt;</code>个数没有限制，经常是一个<code>&lt;dt&gt;</code> 对应多个<code>&lt;dd&gt;</code>。</li>
</ul>
<hr>
<h4 id="4-总结-1"><a href="#4-总结-1" class="headerlink" title="4. 总结"></a>4. 总结</h4><table>
<thead>
<tr>
<th>标签名</th>
<th>定义</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;ul&gt;&lt;/ul&gt;</code></td>
<td>无序标签</td>
<td>里面只能包含li，没有顺序。li里面可以包含任何标签</td>
</tr>
<tr>
<td><code>&lt;ol&gt;&lt;/ol&gt;</code></td>
<td>有序标签</td>
<td>里面只能包含li，有顺序。i里面可以包含任何标签</td>
</tr>
<tr>
<td><code>&lt;dl&gt;&lt;/dl&gt;</code></td>
<td>指定以列表</td>
<td>里面只能包含dt和dd，dt和dd里面可以放任何标签</td>
</tr>
</tbody></table>
<p>注意：</p>
<ol>
<li>学会什么时候用无序列表， 什么时候用自定义列表。</li>
<li>无序列表和自定义列表代码怎么写？</li>
<li>列表布局在学习完 CSS 后再来完成。</li>
</ol>
<hr>
<h3 id="3-3-表单-form"><a href="#3-3-表单-form" class="headerlink" title="3.3 表单-form"></a>3.3 表单-form</h3><p>1.使用表单目的是为了收集用户信息。</p>
<p>在我们网页中， 我们也需要跟用户进行交互，收集用户资料，此时就需要表单。</p>
<p>2.在 HTML 中，一个完整的表单通常由表单域、表单控件（也称为表单元素）和 提示信息3个部分构成。</p>
<p><img src="../../img/12.b/10.png" alt="10"></p>
<h4 id="1-表单域"><a href="#1-表单域" class="headerlink" title="1. 表单域"></a>1. 表单域</h4><p>1.表单域是一个包含表单元素的区域。</p>
<p>在 HTML 标签中， <code>&lt;form&gt;</code> 标签用于定义表单域，以实现用户信息的收集和传递。</p>
<p>2.<code>&lt;form&gt;</code> 会把它范围内的表单元素信息提交给服务器.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">“url地址”</span> <span class="attr">method</span>=<span class="string">“提交方式”</span> <span class="attr">name</span>=<span class="string">“表单域名称</span>&quot;&gt;</span></span><br><span class="line">    各种表单元素控件</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>action</td>
<td>url地址</td>
<td>用于指定接收并处理表单数据的服务器程序的url地址。</td>
</tr>
<tr>
<td>method</td>
<td>get/post</td>
<td>用于设置表单数据的提交方式。</td>
</tr>
<tr>
<td>name</td>
<td>名称</td>
<td>用于指定表单的名称，以区分同一个页面中的多个表单域。</td>
</tr>
</tbody></table>
<p>3.基础班来说,我们暂时不用表单域提交数据,只需要写上 form 标签即可. 就业班等学习服务器编程阶段会重新讲解</p>
<p>这里只需要记住两点:</p>
<ol>
<li>在我们写表单元素之前,应该有个表单域把他们进行包含.</li>
<li>表单域是 form标签.</li>
</ol>
<ul>
<li>我什么时候能学到就业班，不过我还没就业班的资料；2020-11-11 17:07:48</li>
</ul>
<h5 id="1-1-fieldset"><a href="#1-1-fieldset" class="headerlink" title="1.1 fieldset"></a>1.1 fieldset</h5><p>fieldset[^1] 元素可将表单内的相关元素分组。</p>
<p>&lt;fieldset&gt; 标签将表单内容的一部分打包，生成一组相关表单的字段。</p>
<p>当一组表单元素放到 &lt;fieldset&gt; 标签内时，浏览器会以特殊方式来显示它们，它们可能有特殊的边界、3D 效果，或者甚至可创建一个子表单来处理这些元素。</p>
<ul>
<li>1.在谷歌浏览器中，是一个框：</li>
</ul>
<p><img src="../../img/12/4.png" alt="4"></p>
<ul>
<li>2.查一下legend[^2]；<ul>
<li>1.<a href="https://www.w3school.com.cn/tags/tag_legend.asp">https://www.w3school.com.cn/tags/tag_legend.asp</a></li>
<li>2.legend 元素为 <a href="https://www.w3school.com.cn/tags/tag_fieldset.asp">fieldset 元素</a>定义标题（caption）。</li>
</ul>
</li>
</ul>
<h4 id="2-表单控件-表单元素"><a href="#2-表单控件-表单元素" class="headerlink" title="2. 表单控件(表单元素)"></a>2. 表单控件(表单元素)</h4><p>1.在表单域中可以定义各种表单元素，这些表单元素就是允许用户在表单中输入或者选择的内容控件。<br>接下来我们讲解:</p>
<ol>
<li>input输入表单元素</li>
<li>select下拉表单元素</li>
<li>textarea 文本域元素</li>
</ol>
<h5 id="2-1-lt-input-gt-表单元素"><a href="#2-1-lt-input-gt-表单元素" class="headerlink" title="2.1 &lt;input&gt;表单元素"></a>2.1 <code>&lt;input&gt;</code>表单元素</h5><p>1.在英文单词中，input 是输入的意思，而在表单元素中 <code>&lt;input&gt;</code> 标签用于收集用户信息。</p>
<p>2.在 <code>&lt;input&gt;</code> 标签中，包含一个 type 属性，根据不同的 type 属性值，输入字段拥有很多种形式（可以是文本<br>字段、复选框、掩码后的文本控件、单选按钮、按钮等）。</p>
<p><code>&lt;input type=&quot;属性值&quot; /&gt;</code></p>
<ul>
<li><code>&lt;input /&gt;</code> 标签为单标签</li>
<li>type 属性设置不同的属性值用来指定不同的控件类型</li>
</ul>
<p>3.type 属性的属性值及其描述如下：</p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">button</td>
<td align="left">定义可点击的按钮（通常与 JavaScript 一起使用来启动脚本）。</td>
</tr>
<tr>
<td align="left">checkbox</td>
<td align="left">定义复选框。</td>
</tr>
<tr>
<td align="left">color<strong>New</strong></td>
<td align="left">定义拾色器。</td>
</tr>
<tr>
<td align="left">date<strong>New</strong></td>
<td align="left">定义 date 控件（包括年、月、日，不包括时间）。</td>
</tr>
<tr>
<td align="left">datetime<strong>New</strong></td>
<td align="left">定义 date 和 time 控件（包括年、月、日、时、分、秒、几分之一秒，基于 UTC 时区）。</td>
</tr>
<tr>
<td align="left">datetime-local<strong>New</strong></td>
<td align="left">定义 date 和 time 控件（包括年、月、日、时、分、秒、几分之一秒，不带时区）。</td>
</tr>
<tr>
<td align="left">email<strong>New</strong></td>
<td align="left">定义用于 e-mail 地址的字段。</td>
</tr>
<tr>
<td align="left">file</td>
<td align="left">定义文件选择字段和 “浏览…” 按钮，供文件上传。</td>
</tr>
<tr>
<td align="left">hidden</td>
<td align="left">定义隐藏输入字段。</td>
</tr>
<tr>
<td align="left">image</td>
<td align="left">定义图像作为提交按钮。</td>
</tr>
<tr>
<td align="left">month<strong>New</strong></td>
<td align="left">定义 month 和 year 控件（不带时区）。</td>
</tr>
<tr>
<td align="left">number<strong>New</strong></td>
<td align="left">定义用于输入数字的字段。</td>
</tr>
<tr>
<td align="left">password</td>
<td align="left">定义密码字段（字段中的字符会被遮蔽）。</td>
</tr>
<tr>
<td align="left">radio</td>
<td align="left">定义单选按钮。</td>
</tr>
<tr>
<td align="left">range<strong>New</strong></td>
<td align="left">定义用于精确值不重要的输入数字的控件（比如 slider 控件）。</td>
</tr>
<tr>
<td align="left">reset</td>
<td align="left">定义重置按钮（重置所有的表单值为默认值）。</td>
</tr>
<tr>
<td align="left">search<strong>New</strong></td>
<td align="left">定义用于输入搜索字符串的文本字段。</td>
</tr>
<tr>
<td align="left">submit</td>
<td align="left">定义提交按钮。</td>
</tr>
<tr>
<td align="left">tel<strong>New</strong></td>
<td align="left">定义用于输入电话号码的字段。</td>
</tr>
<tr>
<td align="left">text</td>
<td align="left">默认。定义一个单行的文本字段（默认宽度为 20 个字符）。</td>
</tr>
<tr>
<td align="left">time<strong>New</strong></td>
<td align="left">定义用于输入时间的控件（不带时区）。</td>
</tr>
<tr>
<td align="left">url<strong>New</strong></td>
<td align="left">定义用于输入 URL 的字段。</td>
</tr>
<tr>
<td align="left">week<strong>New</strong></td>
<td align="left">定义 week 和 year 控件（不带时区）。</td>
</tr>
</tbody></table>
<ul>
<li>来源：<a href="https://www.runoob.com/tags/att-input-type.html">https://www.runoob.com/tags/att-input-type.html</a></li>
</ul>
<p>4.除 type 属性外，<code>&lt;input&gt;</code>标签还有其他很多属性，其常用属性如下：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>name</td>
<td>由用户自定义</td>
<td>定义input元素的名称</td>
</tr>
<tr>
<td>value</td>
<td>由用户自定义</td>
<td>规定input元素的值。</td>
</tr>
<tr>
<td>checked</td>
<td>checked</td>
<td>规定此input元素首次加载时应当被选中。</td>
</tr>
<tr>
<td>maxlength</td>
<td>正整数</td>
<td>规定输入字段中的字符的最大长度。</td>
</tr>
</tbody></table>
<ol>
<li>name 和value 是每个表单元素都有的属性值,主要给后台人员使用.</li>
<li>name 表单元素的名字, 要求 单选按钮和复选框要有相同的name值.</li>
<li>checked属性主要针对于单选按钮和复选框, 主要作用一打开页面,就要可以默认选中某个表单元素.</li>
<li>maxlength 是用户可以在表单元素输入的最大字符数</li>
</ol>
<p>5.有些表单元素想刚打开页面就默认显示几个文字怎么做?</p>
<ul>
<li>答：可以给这些表单元素设置 value 属性=“值”</li>
<li><code>用户名: &lt;input type=&quot;text&quot; value=&quot;请输入用户名&quot; /&gt;</code></li>
</ul>
<p>5.1 但我记得有更好的，一个p开头的单词；2021-4-25 16:47:15</p>
<p>6.页面中的表单元素很多，如何区别不同的表单元素?</p>
<p>答: name 属性：当前 input 表单的名字，后台可以通过这个 name 属性找到这个表单。页面中的表单很多，<br>name 的主要作用就是用于区别不同的表单。</p>
<p><code>用户名: &lt;input type=&quot;text&quot; value=&quot;请输入用户名&quot; name=&quot;username&quot; /&gt;</code></p>
<ul>
<li>name 属性后面的值，是自定义的</li>
<li>radio (或者checkbox）如果是一组，我们必须给他们命名相同的名字</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span>女</span><br></pre></td></tr></table></figure>



<p>7.如果页面一打开就让某个单选按钮或者复选框是选中状态?</p>
<p>答: checked 属性：表示默认选中状态。用于单选按钮和复选按钮。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">性 别:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> /&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> /&gt;</span>女</span><br></pre></td></tr></table></figure>



<blockquote>
<p>radio<br>英 [ˈreɪdiəʊ]   美 [ˈreɪdioʊ]<br>n.无线电广播;无线电广播节目;收音机;无线电传送;无线电通信<br>v.(用无线电)发送，传送</p>
</blockquote>
<p>是单选按钮；</p>
<p>8.如何让input表单元素展示不同的形态? 比如单选按钮或者文本框</p>
<p>答: type属性：type属性可以让input表单元素设置不同的形态.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> /&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">“请输入用户名”</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="2-2-lt-label-gt-标签"><a href="#2-2-lt-label-gt-标签" class="headerlink" title="2.2 &lt;label&gt;标签"></a>2.2 <code>&lt;label&gt;</code>标签</h5><p><code>&lt;label&gt;</code> 标签为 input 元素定义标注（标签）。</p>
<p><code>&lt;label&gt;</code> 标签用于绑定一个表单元素, 当点击<code>&lt;label&gt;</code> 标签内的文本时，浏览器就会自动将焦点(光标)转到或者<br>选择对应的表单元素上,用来增加用户体验.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>核心： <code>&lt;label&gt;</code> 标签的 for 属性应当与相关元素的 id 属性相同。</p>
<p><img src="../../img/12.b/11.png" alt="11"></p>
<ul>
<li>1.点击文字的时候，按钮也会响应；</li>
</ul>
<p>P46；2020-11-12 17:20:24</p>
<h5 id="2-3-select"><a href="#2-3-select" class="headerlink" title="2.3 select"></a>2.3 select</h5><p>1.使用场景: 在页面中，如果有多个选项让用户选择，并且想要节约页面空间时，我们可以使用<code>&lt;select&gt;</code>标签控件定义下<br>拉列表。</p>
<p><img src="../../img/12.b/12.png" alt="12"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><code>&lt;select&gt;</code> 中至少包含一对<code>&lt;option&gt;</code> 。</li>
<li>在<code>&lt;option&gt;</code> 中定义 selected =“ selected “ 时，当前项即为默认选中项。</li>
</ol>
<h5 id="2-4-lt-textarea-gt-表单元素"><a href="#2-4-lt-textarea-gt-表单元素" class="headerlink" title="2.4 &lt;textarea&gt; 表单元素"></a>2.4 <code>&lt;textarea&gt;</code> 表单元素</h5><p>1.使用场景: 当用户输入内容较多的情况下，我们就不能使用文本框表单了，此时我们可以使用 <code>&lt;textarea&gt;</code>标签。在表单元素中，</p>
<p><code>&lt;textarea&gt;</code> 标签是用于定义多行文本输入的控件。使用多行文本输入控件，可以输入更多的文字，该控件常见于留言板，评论。</p>
<p>1.1[ area]([<a href="https://fanyi.baidu.com/translate?aldtype=16047&amp;query=textarea%0D%0A&amp;keyfrom=baidu&amp;smartresult=dict&amp;lang=auto2zh#en/zh/area]">https://fanyi.baidu.com/translate?aldtype=16047&amp;query=textarea%0D%0A&amp;keyfrom=baidu&amp;smartresult=dict&amp;lang=auto2zh#en/zh/area]</a>(<a href="https://fanyi.baidu.com/translate?aldtype=16047&amp;query=textarea">https://fanyi.baidu.com/translate?aldtype=16047&amp;query=textarea</a> &amp;keyfrom=baidu&amp;smartresult=dict&amp;lang=auto2zh#en/zh/area))<br>英 [ˈeəriə]   美 [ˈeriə]<br>n.(地方、城市、国家、世界的)地区，地域;(房间、建筑物、处所划为某用途的)地方，场地，区;(物体上的)区，部位</p>
<p>2.语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">    文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>通过 <code>&lt;textarea&gt;</code> 标签可以轻松地创建多行文本输入框。</li>
<li>cols=“每行中的字符数” ，rows=“显示的行数”，我们在实际开发中不会使用，都是用 CSS 来改变大小。</li>
</ol>
<p>3.表单元素我们学习了三大组 input 输入表单元素 select 下拉表单元素 textarea 文本域表单元素.</p>
<p>这三组表单元素都应该包含在form表单域里面,并且有 name 属性.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">“text</span> &quot; <span class="attr">name</span>=<span class="string">“username”</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">“jiguan”</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>= <span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<h4 id="3-综合案例"><a href="#3-综合案例" class="headerlink" title="3. 综合案例"></a>3. 综合案例</h4><p>1.预览：</p>
<p><img src="../../img/12.b/13.png" alt="13"></p>
<p>2.代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>综合案例-注册页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>青春不常在，抓紧谈恋爱<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> &gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第一行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nan&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nan&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/man.jpg&quot;</span> &gt;</span> 男 <span class="tag">&lt;/<span class="name">label</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nv&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nv&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/women.jpg&quot;</span> &gt;</span> 女<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第二行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>生日:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>--请选择年份--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>2001<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>2002<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>2003<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span>&gt;</span>--请选择月份--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span>&gt;</span>--请选择日--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第三行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>所在地区<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京思密达&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第四行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>婚姻状况:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;marry&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>未婚  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;marry&quot;</span>&gt;</span>  已婚  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;marry&quot;</span>&gt;</span> 离婚</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 第五行 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">td</span>&gt;</span>学历:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;博士后&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 第六行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>喜欢的类型:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;love&quot;</span> &gt;</span> 妩媚的 </span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;love&quot;</span> &gt;</span> 可爱的 </span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;love&quot;</span> &gt;</span> 小鲜肉 </span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;love&quot;</span> &gt;</span> 老腊肉 </span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;love&quot;</span>  <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span> 都喜欢 </span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 第七行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>个人介绍<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">textarea</span>&gt;</span>个人简介<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第八行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;免费注册&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>  <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>    我同意注册条款和会员加入标准</span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> &gt;</span> 我是会员，立即登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>我承诺<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>年满18岁、单身<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>抱着严肃的态度<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>真诚寻找另一半<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">           </span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<h2 id="4-查阅文档"><a href="#4-查阅文档" class="headerlink" title="4. 查阅文档"></a>4. 查阅文档</h2><p>1.经常查阅文档是一个非常好的学习习惯。<br>推荐的网址：</p>
<ul>
<li>百度: <a href="http://www.baidu.com">http://www.baidu.com</a></li>
<li>W3C : <a href="http://www.w3school.com.cn/">http://www.w3school.com.cn/</a></li>
<li>MDN: <a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></li>
</ul>
<h2 id="5-Emmet-语法"><a href="#5-Emmet-语法" class="headerlink" title="5. Emmet 语法"></a>5. Emmet 语法</h2><p>1.Emmet语法的前身是Zen coding,它使用缩写,来提高html/css的编写速度, Vscode内部已经集成该语法.</p>
<ol>
<li>快速生成HTML结构语法</li>
<li>快速生成CSS样式语法</li>
</ol>
<p>2.快速生成HTML结构语法</p>
<ol>
<li>生成标签 直接输入标签名 按tab键即可 比如 div 然后tab 键， 就可以生成 <code>&lt;div&gt;&lt;/div&gt;</code></li>
<li>如果想要生成多个相同标签 加上 * 就可以了 比如 div*3 就可以快速生成3个div</li>
<li>如果有父子级关系的标签，可以用 &gt; 比如 ul &gt; li就可以了</li>
<li>如果有兄弟关系的标签，用 + 就可以了 比如 div+p</li>
<li>如果生成带有类名或者id名字的， 直接写 .demo 或者 #two tab 键就可以了</li>
<li>如果生成的div 类名是有顺序的， 可以用 自增符号 $</li>
<li>如果想要在生成的标签内部写内容可以用 { } 表示</li>
</ol>
<p>3.快速生成CSS样式语法</p>
<p>3.1 CSS 基本采取简写形式即可.</p>
<ol>
<li>比如 w200 按tab 可以 生成 width: 200px;</li>
<li>比如 lh26px 按tab 可以生成 line-height: 26px;</li>
</ol>
<p>4.快速格式化代码</p>
<p>4.1 <strong>然而不行</strong>；</p>
<p>Vscode 快速格式化代码: shift+alt+f</p>
<p>也可以设置 当我们 保存页面的时候自动格式化代码:</p>
<p>1）文件 ——.&gt;【首选项】———-&gt;【设置】；</p>
<p>2）搜索emmet.include;</p>
<p>3）在settings.json下的【工作区设置】中添加以下语句：</p>
<p>“editor.formatOnType”: true,</p>
<p>“editor.formatOnSave”: true</p>
<p>4.2 行：</p>
<p><img src="../../img/12.b/14.png" alt="14"></p>
<ul>
<li>直接搜索格式化即可；</li>
<li>信息来源：<a href="https://blog.csdn.net/qq_35800306/article/details/72784164?utm_medium=distribute.pc_relevant.none-task-blog-baidulandingword-2&spm=1001.2101.3001.4242">链接</a></li>
</ul>
<hr>
<h2 id="6-css第一天"><a href="#6-css第一天" class="headerlink" title="6. css第一天"></a>6. css第一天</h2><h3 id="6-1-CSS-简介"><a href="#6-1-CSS-简介" class="headerlink" title="6.1 CSS 简介"></a>6.1 CSS 简介</h3><p>1.CSS 的主要使用场景就是美化网页,布局页面的.</p>
<ol>
<li>HTML 的局限性</li>
<li>CSS-网页的美容师</li>
</ol>
<h4 id="1-HTML-的局限性"><a href="#1-HTML-的局限性" class="headerlink" title="1. HTML 的局限性"></a>1. HTML 的局限性</h4><p>说起 HTML，这其实是个非常单纯的家伙，他只关注内容的语义。比如 <code>&lt;h1&gt;</code>表明这是一个大标题，<code>&lt;p&gt;</code> 表明这是一个段落，<code>&lt;img&gt;</code>表明这儿有一个图片，<code>&lt;a&gt;</code> 表示此处有链接。很早的时候，世界上的网站虽然很多，但是他们都有一个共同的特点：丑。虽然 HTML 可以做简单的样式，但是带来的是无尽的臃肿和繁琐……</p>
<h4 id="2-CSS-网页的美容师"><a href="#2-CSS-网页的美容师" class="headerlink" title="2. CSS-网页的美容师"></a>2. CSS-网页的美容师</h4><p>CSS 是层叠样式表 ( Cascading Style Sheets ) 的简称.<br>有时我们也会称之为 CSS 样式表或级联样式表。<br>CSS 是也是一种标记语言<br>CSS 主要用于设置 HTML 页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局和外观显示样式。<br>CSS 让我们的网页更加丰富多彩，布局更加灵活自如。简单理解：CSS 可以美化 HTML , 让 HTML 更漂亮，让页面布局更简单。</p>
<p>总结:</p>
<ol>
<li>HTML 主要做结构,显示元素内容.</li>
<li>CSS 美化 HTML ,布局网页.</li>
<li>CSS 最大价值: 由 HTML 专注去做结构呈现，样式交给 CSS，即 结构 ( HTML ) 与样式( CSS ) 相分离。</li>
</ol>
<h4 id="3-语法规范"><a href="#3-语法规范" class="headerlink" title="3. 语法规范"></a>3. 语法规范</h4><p>1.使用 HTML 时，需要遵从一定的规范，CSS 也是如此。要想熟练地使用 CSS 对网页进行修饰，首先需要了解<br>CSS 样式规则。<br>CSS 规则由两个主要的部分构成：选择器以及一条或多条声明。</p>
<p><img src="../../img/12.b/15.png" alt="15"></p>
<p>选择器是用于指定 CSS 样式的 HTML 标签，花括号内是对该对象设置的具体样式<br>属性和属性值以“键值对”的形式出现<br>属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等<br>属性和属性值之间用英文“:”分开<br>多个“键值对”之间用英文“;”进行区分</p>
<p>2.所有的样式，都包含在 <code>&lt;style&gt;</code> 标签内，表示是样式表。<code>&lt;style&gt;</code> 一般写到 <code>&lt;/head&gt;</code>上方。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        h4 &#123;</span><br><span class="line">        color: blue;</span><br><span class="line">        font-size: 100px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="4-CSS-代码风格"><a href="#4-CSS-代码风格" class="headerlink" title="4. CSS 代码风格"></a>4. CSS 代码风格</h4><p>1.以下代码书写风格不是强制规范,而是符合实际开发书写方式.</p>
<h5 id="4-1-样式格式书写"><a href="#4-1-样式格式书写" class="headerlink" title="4.1 样式格式书写"></a>4.1 样式格式书写</h5><p>① 紧凑格式</p>
<p>h3 { color: deeppink;font-size: 20px;}</p>
<p>② 展开格式</p>
<p>h3 {<br>    color: pink;<br>    font-size: 20px;<br>}</p>
<p>强烈推荐第二种格式， 因为更直观。</p>
<h5 id="4-2-样式大小写"><a href="#4-2-样式大小写" class="headerlink" title="4.2 样式大小写"></a>4.2 样式大小写</h5><p>h3 {<br>    color: pink;<br>}</p>
<p>H3 {<br>    COLOR: PINK;<br>}</p>
<p>强烈推荐样式选择器，属性名，属性值关键字全部使用小写字母，特殊情况除外。</p>
<h5 id="4-3-空格规范"><a href="#4-3-空格规范" class="headerlink" title="4.3 空格规范"></a>4.3 空格规范</h5><p>h3  {<br>    color: pink;<br>}</p>
<p>① 属性值前面，冒号后面，保留一个空格<br>② 选择器（标签）和大括号中间保留空格</p>
<ul>
<li>但不用自己麻烦手写，用写代码软件的格式化代码；2020-11-29 15:35:50</li>
</ul>
<hr>
<h3 id="6-2-CSS基础选择器"><a href="#6-2-CSS基础选择器" class="headerlink" title="6.2 CSS基础选择器"></a>6.2 CSS基础选择器</h3><h4 id="1-CSS-选择器的作用"><a href="#1-CSS-选择器的作用" class="headerlink" title="1. CSS 选择器的作用"></a>1. CSS 选择器的作用</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul里面小li哦<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol里面小li哦<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>我想把 div 里面的文字改为红色?</li>
<li>我想把第一个div 里面的文字改为红色?</li>
<li>我想把ul 里面的 li 文字改为红色?</li>
</ol>
<p>1.选择器(选择符)就是根据不同需求把不同的标签选出来这就是选择器的作用。 简单来说，就是<strong>选择标签</strong>用的。</p>
<p><img src="../../img/12.b/15.png" alt="15"></p>
<p>2.以上 CSS 做了两件事：</p>
<ol>
<li>找到所有的 h1 标签。 选择器（选对人）。</li>
<li>设置这些标签的样式，比如颜色为红色（做对事）。</li>
</ol>
<hr>
<h4 id="2-选择器分类"><a href="#2-选择器分类" class="headerlink" title="2. 选择器分类"></a>2. 选择器分类</h4><p>1.选择器分为基础选择器和复合选择器两个大类，我们这里先讲解一下基础选择器。</p>
<ul>
<li>基础选择器是由单个选择器组成的</li>
<li>基础选择器又包括：标签选择器、类选择器、id 选择器和通配符选择器</li>
</ul>
<h4 id="3-标签选择器"><a href="#3-标签选择器" class="headerlink" title="3. 标签选择器"></a>3. 标签选择器</h4><p>1.标签选择器（元素选择器）是指用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定<br>统一的 CSS 样式。</p>
<p>2.语法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标签名&#123;</span><br><span class="line">    属性1: 属性值1;</span><br><span class="line">    属性2: 属性值2;</span><br><span class="line">    属性3: 属性值3;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.作用</p>
<p>标签选择器可以把某一类标签全部选择出来，比如所有的 <code>&lt;div&gt;</code> 标签和所有的 <code>&lt;span&gt;</code> 标签。</p>
<p>4.优点<br>能快速为页面中同类型的标签统一设置样式。</p>
<p>5.缺点<br>不能设计差异化样式，只能选择全部的当前标签。</p>
<h4 id="4-类选择器"><a href="#4-类选择器" class="headerlink" title="4. 类选择器"></a>4. 类选择器</h4><p>1.如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用类选择器.</p>
<p>2.语法：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">.类名 &#123;</span><br><span class="line">    属性<span class="number">1</span>: 属性值<span class="number">1</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如，将所有拥有 red 类的 HTML 元素均为红色。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.在HTML那边选择类：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">‘red’</span>&gt;</span> 变红色 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4.类选择器在 HTML 中以 class 属性表示，在 CSS 中，类选择器以一个点“.”号显示。</p>
<p>注意：</p>
<p>① 类选择器使用“.”（英文点号）进行标识，后面紧跟类名（自定义，我们自己命名的）。<br>② 可以理解为给这个标签起了一个名字，来表示。<br>③ 长名称或词组可以使用中横线来为选择器命名。<br>④ 不要使用纯数字、中文等命名，尽量使用英文字母来表示。<br>⑤ 命名要有意义，尽量使别人一眼就知道这个类名的目的</p>
<p>⑥ 命名规范：见（Web 前端开发规范手册）</p>
<h2 id="7-Web前端开发规范"><a href="#7-Web前端开发规范" class="headerlink" title="7. Web前端开发规范"></a>7. Web前端开发规范</h2><h3 id="7-1-规范目的"><a href="#7-1-规范目的" class="headerlink" title="7.1 规范目的"></a>7.1 规范目的</h3><p>​    为提高团队协作效率, 便于后台人员添加功能及前端后期优化维护, 输出高质量的文档, 特制订此文档. 本规范文档一经确认, 前端开发人员必须按本文档规范进行前台页面开发. 本文档如有不对或者不合适的地方请及时提出, 经讨论决定后可以更改此文档.</p>
<h3 id="7-2-文件规范"><a href="#7-2-文件规范" class="headerlink" title="7.2 文件规范"></a>7.2 文件规范</h3><h4 id="1-文件命名规则"><a href="#1-文件命名规则" class="headerlink" title="1. 文件命名规则"></a>1. 文件命名规则</h4><p>​    1.文件名称统一用小写的英文字母、数字和下划线的组合，其中不得包含汉字、空格和特殊字符；命名原则的指导思想，一是使得你自己和工作组的每一个成员能够方便的理解每一个文件的意义，二是当我们在文件夹中使用“按名称排例”的命令时，同一种大类的文件能够排列在一起，以便我们查找、修改、替换、计算负载量等等操作。</p>
<p>​    2.HTML的命名原则</p>
<p>引文件统一使用index.htm  index.html  index.asp文件名（小写）<br>各子页命名的原则首先应该以栏目名的英语翻译取单一单词为名称。例如：<br>关于我们 \ aboutus<br>信息反馈 \ feedback<br>产 品 \ product<br>如果栏目名称多而复杂并不好以英文单词命名，则统一使用该栏目名称拼音或拼音的首字母表示；<br>每一个目录中应该包含一个缺省的html 文件，文件名统一用index.htm  index.html  index.asp；</p>
<p>​    3.图片的命名原则</p>
<p>图片的名称分为头尾两部分，用下划线隔开，头部分表示此图片的大类性质<br>例如：广告、标志、菜单、按钮等等。<br>放置在页面顶部的广告、装饰图案等长方形的图片取名： banner<br>标志性的图片取名为： logo<br>在页面上位置不固定并且带有链接的小图片我们取名为 button<br>在页面上某一个位置连续出现，性质相同的链接栏目的图片我们取名： menu<br>装饰用的照片我们取名： pic</p>
<p>不带链接表示标题的图片我们取名： title<br>范例：banner_sohu.gif  banner_sina.gif  menu_aboutus.gif  menu_job.gif  title_news.gif  logo_police.gif   logo_national.gif   pic_people.jpg<br>鼠标感应效果图片命名规范为”图片名+_+on/off”。<br>例如：menu1_on.gif  menu1_off.gif</p>
<p>​    4.</p>
<hr>
<h2 id="X-题注"><a href="#X-题注" class="headerlink" title="X. 题注"></a>X. 题注</h2><p>[^1]:field set英 [fiːld set]   美 [fiːld set]  字段设置;字段集<br>[^2]:legend英 [ˈledʒənd]   美 [ˈledʒənd]  n.传说;传奇故事;(尤指某领域中的)传奇人物;(地图或书中图表的)图例，说明，解释</p>
]]></content>
      <categories>
        <category>html_css</category>
      </categories>
      <tags>
        <tag>html_css</tag>
      </tags>
  </entry>
  <entry>
    <title>12-html+css-入门-pink</title>
    <url>/1-(0~50)/12-html+css_introdiction-pink/</url>
    <content><![CDATA[<h2 id="0-建议使用的软件"><a href="#0-建议使用的软件" class="headerlink" title="0. 建议使用的软件"></a>0. 建议使用的软件</h2><h2 id="3-盒子模型"><a href="#3-盒子模型" class="headerlink" title="3. 盒子模型"></a>3. 盒子模型</h2><p>1.页面布局要学习三大核心, 盒子模型, 浮动 和 定位. 学习好盒子模型能非常好的帮助我们布局页面.</p>
<h3 id="3-1-网页布局的本质"><a href="#3-1-网页布局的本质" class="headerlink" title="3.1 网页布局的本质"></a>3.1 网页布局的本质</h3><p>网页布局的核心本质： 就是利用 CSS 摆盒子。</p>
<a id="more"></a>

<p>网页布局过程：</p>
<ol>
<li>先准备好相关的网页元素，网页元素基本都是盒子 Box 。</li>
<li>利用 CSS 设置好盒子样式，然后摆放到相应位置。</li>
<li>往盒子里面装内容</li>
</ol>
<h3 id="3-2-盒子模型（Box-Model）组成"><a href="#3-2-盒子模型（Box-Model）组成" class="headerlink" title="3.2 盒子模型（Box Model）组成"></a>3.2 盒子模型（Box Model）组成</h3><p>​        盒子模型：把 HTML 页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。</p>
<p>​        CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，它包括：<strong>边框</strong>、<strong>外边距</strong>、<strong>内边距</strong>、和 <strong>实际内容</strong></p>
<h3 id="3-3、边框（border）"><a href="#3-3、边框（border）" class="headerlink" title="3.3、边框（border）"></a>3.3、边框（border）</h3><h4 id="1、边框的使用"><a href="#1、边框的使用" class="headerlink" title="1、边框的使用"></a>1、边框的使用</h4><p>1、border可以设置元素的边框。边框有三部分组成：边框宽度(粗细) 边框样式  边框颜色；</p>
<p>2、语法：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">border : border-width || border-style || border-color;   </span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>border-width</td>
<td>定义边框粗细，单位是px</td>
</tr>
<tr>
<td>border-style</td>
<td>边框的样式</td>
</tr>
<tr>
<td>border-color</td>
<td>边框的颜色</td>
</tr>
</tbody></table>
<p>边框样式 border-style 可以设置如下值：</p>
<ul>
<li>none：没有边框即忽略所有边框的宽度（默认值）</li>
<li>solid：边框为单实线(最为常用的)</li>
<li>dashed：边框为虚线  </li>
<li>dotted：边框为点线</li>
</ul>
<p>3、边框的合写分写</p>
<p>边框简写：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;  </span><br></pre></td></tr></table></figure>

<p>边框分开写法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border-top</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;  <span class="comment">/* 只设定上边框， 其余同理 */</span>   </span><br></pre></td></tr></table></figure>

<h4 id="2、表格的细线边框"><a href="#2、表格的细线边框" class="headerlink" title="2、表格的细线边框"></a>2、表格的细线边框</h4><p>1、border-collapse 属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框。</p>
<p>2、语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border-collapse</span><span class="selector-pseudo">:collapse</span>; </span><br></pre></td></tr></table></figure>

<p>collapse 单词是合并的意思</p>
<p>border-collapse: collapse; 表示相邻边框合并在一起</p>
<h4 id="3、边框会影响盒子实际大小"><a href="#3、边框会影响盒子实际大小" class="headerlink" title="3、边框会影响盒子实际大小"></a>3、边框会影响盒子实际大小</h4><p>边框会额外增加盒子的实际大小。因此我们有两种方案解决：</p>
<ul>
<li>测量盒子大小的时候,不量边框。</li>
<li>如果测量的时候包含了边框,则需要 width/height 减去边框宽度</li>
</ul>
<h4 id="4-圆角边框"><a href="#4-圆角边框" class="headerlink" title="4 圆角边框"></a>4 圆角边框</h4><p>在 CSS3 中，新增了圆角边框样式，这样我们的盒子就可以变圆角了。</p>
<p>border-radius 属性用于设置元素的外边框圆角。</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/50.png" alt="50"></p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border-radius</span><span class="selector-pseudo">:length</span>;    </span><br></pre></td></tr></table></figure>

<ul>
<li><p>参数值可以为数值或百分比的形式</p>
</li>
<li><p>如果是正方形，想要设置为一个圆，把数值修改为高度或者宽度的一半即可，或者直接写为 50%</p>
</li>
<li><p>该属性是一个简写属性，可以跟四个值，分别代表左上角、右上角、右下角、左下角</p>
</li>
<li><p>分开写：border-top-left-radius、border-top-right-radius、border-bottom-right-radius 和border-bottom-left-radius</p>
</li>
<li><p>兼容性 ie9+ 浏览器支持, 但是不会影响页面布局,可以放心使用</p>
</li>
<li><p><code>&lt;length&gt;</code>定义圆形半径或椭圆的半长轴，半短轴。负值无效。</p>
<p><code>&lt;percentage&gt;</code></p>
<p>使用百分数定义圆形半径或椭圆的半长轴，半短轴。水平半轴相对于盒模型的宽度；垂直半轴相对于盒模型的高度。负值无效。</p>
</li>
</ul>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">border-radius: 1em/5em;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 等价于： */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">border-top-left-radius</span>:     1<span class="selector-tag">em</span> 5<span class="selector-tag">em</span>;</span><br><span class="line"><span class="selector-tag">border-top-right-radius</span>:    1<span class="selector-tag">em</span> 5<span class="selector-tag">em</span>;</span><br><span class="line"><span class="selector-tag">border-bottom-right-radius</span>: 1<span class="selector-tag">em</span> 5<span class="selector-tag">em</span>;</span><br><span class="line"><span class="selector-tag">border-bottom-left-radius</span>:  1<span class="selector-tag">em</span> 5<span class="selector-tag">em</span>;</span><br></pre></td></tr></table></figure>

<br />

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">border-radius: 4px 3px 6px / 2px 4px;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 等价于： */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">border-top-left-radius</span>:     4<span class="selector-tag">px</span> 2<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">border-top-right-radius</span>:    3<span class="selector-tag">px</span> 4<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">border-bottom-right-radius</span>: 6<span class="selector-tag">px</span> 2<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">border-bottom-left-radius</span>:  3<span class="selector-tag">px</span> 4<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure>

<p>椭圆就需要设置 两个属性，一个半长轴，一个半短轴；</p>
<p>3.设置一个xpx属性，就是圆，半长轴=半短轴；</p>
<p>3.1 而百分比不是；</p>
<ul>
<li>百分比：x*百分比，Y*百分比</li>
</ul>
<hr>
<h4 id="5、边框透明"><a href="#5、边框透明" class="headerlink" title="5、边框透明"></a>5、边框透明</h4><h4 id="6-边框图片"><a href="#6-边框图片" class="headerlink" title="6. 边框图片"></a>6. 边框图片</h4><blockquote>
<p><a href="https://blog.csdn.net/qq_41903941/article/details/90259306">https://blog.csdn.net/qq_41903941/article/details/90259306</a></p>
</blockquote>
<hr>
<h3 id="4、内边距（padding）"><a href="#4、内边距（padding）" class="headerlink" title="4、内边距（padding）"></a>4、内边距（padding）</h3><h4 id="4-1、内边距的使用方式"><a href="#4-1、内边距的使用方式" class="headerlink" title="4.1、内边距的使用方式"></a>4.1、内边距的使用方式</h4><p>1、padding 属性用于设置内边距，即边框与内容之间的距离。</p>
<p>2、语法：</p>
<p>合写属性：</p>
<p><img src="G:/%E4%B8%89%E6%AC%A1%E5%85%83/2-%E5%AD%A6%E4%B9%A0/11-web/6-html5%E4%B8%8Ecss3%E7%9A%84%E5%A4%8D%E4%B9%A0/1-%E8%B5%84%E6%96%99/3-%E8%B5%84%E6%96%99%E5%85%A8/05-%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80CSS%E7%AC%AC%E4%B8%89%E5%A4%A9/%E7%AC%94%E8%AE%B0/images/1571493298248.png" alt="1571493298248"></p>
<p>分写属性：</p>
<p><img src="G:/%E4%B8%89%E6%AC%A1%E5%85%83/2-%E5%AD%A6%E4%B9%A0/11-web/6-html5%E4%B8%8Ecss3%E7%9A%84%E5%A4%8D%E4%B9%A0/1-%E8%B5%84%E6%96%99/3-%E8%B5%84%E6%96%99%E5%85%A8/05-%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80CSS%E7%AC%AC%E4%B8%89%E5%A4%A9/%E7%AC%94%E8%AE%B0/images/1571493260536.png" alt="1571493260536"></p>
<h4 id="4-2、内边距会影响盒子实际大小"><a href="#4-2、内边距会影响盒子实际大小" class="headerlink" title="4.2、内边距会影响盒子实际大小"></a>4.2、内边距会影响盒子实际大小</h4><p>1、当我们给盒子指定 padding 值之后，发生了 2 件事情：</p>
<ol>
<li>内容和边框有了距离，添加了内边距。</li>
<li>padding影响了盒子实际大小。</li>
</ol>
<p>2、内边距对盒子大小的影响：</p>
<ul>
<li>如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子。</li>
<li>如何盒子本身没有指定width/height属性, 则此时padding不会撑开盒子大小。</li>
</ul>
<p>3、解决方案：</p>
<p>​        如果保证盒子跟效果图大小保持一致，则让 width/height 减去多出来的内边距大小即可。</p>
<h3 id="5、外边距（margin）"><a href="#5、外边距（margin）" class="headerlink" title="5、外边距（margin）"></a>5、外边距（margin）</h3><h4 id="5-1、外边距的使用方式"><a href="#5-1、外边距的使用方式" class="headerlink" title="5.1、外边距的使用方式"></a>5.1、外边距的使用方式</h4><p>margin 属性用于设置外边距，即控制盒子和盒子之间的距离。</p>
<p><img src="G:/%E4%B8%89%E6%AC%A1%E5%85%83/2-%E5%AD%A6%E4%B9%A0/11-web/6-html5%E4%B8%8Ecss3%E7%9A%84%E5%A4%8D%E4%B9%A0/1-%E8%B5%84%E6%96%99/3-%E8%B5%84%E6%96%99%E5%85%A8/05-%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80CSS%E7%AC%AC%E4%B8%89%E5%A4%A9/%E7%AC%94%E8%AE%B0/images/1571493741272.png" alt="1571493741272"></p>
<h4 id="5-2、外边距典型应用"><a href="#5-2、外边距典型应用" class="headerlink" title="5.2、外边距典型应用"></a>5.2、外边距典型应用</h4><p>外边距可以让块级盒子水平居中的两个条件：</p>
<ul>
<li>盒子必须指定了宽度（width）。</li>
<li>盒子左右的外边距都设置为 auto 。</li>
</ul>
<p>常见的写法，以下三种都可以：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">margin-left</span>: <span class="selector-tag">auto</span>;   <span class="selector-tag">margin-right</span>: <span class="selector-tag">auto</span>;</span><br><span class="line"><span class="selector-tag">margin</span>: <span class="selector-tag">auto</span>;</span><br><span class="line"><span class="selector-tag">margin</span>: 0 <span class="selector-tag">auto</span>;</span><br></pre></td></tr></table></figure>

<p>注意：以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加 text-align:center 即可。</p>
<h4 id="5-3、外边距合并"><a href="#5-3、外边距合并" class="headerlink" title="5.3、外边距合并"></a>5.3、外边距合并</h4><p>使用 margin 定义块元素的垂直外边距时，可能会出现外边距的合并。</p>
<p>主要有两种情况:</p>
<p>1、相邻块元素垂直外边距的合并</p>
<p>​        当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top ，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和。取两个值中的较大者这种现象被称为相邻块元素垂直外边距的合并。</p>
<p>解决方案：<br>尽量只给一个盒子添加 margin 值。</p>
<p>2、嵌套块元素==垂直外边距==的塌陷</p>
<p>​        对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值。</p>
<p>解决方案：</p>
<ul>
<li>可以为父元素定义上边框。</li>
<li>可以为父元素定义上内边距。</li>
<li>可以为父元素添加 overflow:hidden。</li>
</ul>
<h4 id="5-4、清除内外边距"><a href="#5-4、清除内外边距" class="headerlink" title="5.4、清除内外边距"></a>5.4、清除内外边距</h4><p>​        网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此我们在布局前，首先要清除下网页元素的内外边距。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   <span class="attribute">padding</span>:<span class="number">0</span>;   <span class="comment">/* 清除内边距 */</span></span><br><span class="line">   <span class="attribute">margin</span>:<span class="number">0</span>;    <span class="comment">/* 清除外边距 */</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>​        注意：行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以了</p>
<hr>
<h2 id="4-CSS浮动"><a href="#4-CSS浮动" class="headerlink" title="4. CSS浮动"></a>4. CSS浮动</h2><h3 id="4-1-浮动"><a href="#4-1-浮动" class="headerlink" title="4.1 浮动"></a>4.1 浮动</h3><h4 id="1-传统网页布局的三种方式"><a href="#1-传统网页布局的三种方式" class="headerlink" title="1.传统网页布局的三种方式"></a>1.传统网页布局的三种方式</h4><p>CSS 提供了三种传统布局方式(简单说,就是盒子如何进行排列顺序)：</p>
<ul>
<li><p>普通流（标准流）</p>
</li>
<li><p>浮动</p>
</li>
<li><p>定位</p>
<p>这三种布局方式都是用来摆放盒子的，盒子摆放到合适位置，布局自然就完成了。</p>
</li>
</ul>
<p>注意：实际开发中，一个页面基本都包含了这三种布局方式（后面移动端学习新的布局方式） 。</p>
<h4 id="2-标准流"><a href="#2-标准流" class="headerlink" title="2. 标准流"></a>2. 标准流</h4><p>1.所谓的标准流: 就是标签按照规定好默认方式排列.</p>
<p>2.块级元素会独占一行，从上向下顺序排列。</p>
<ul>
<li>常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table</li>
</ul>
<p>3.行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行。</p>
<ul>
<li>常用元素：span、a、i、em 等</li>
</ul>
<p>4.以上都是标准流布局，我们前面学习的就是标准流，标准流是最基本的布局方式。</p>
<p>5.这三种布局方式都是用来摆放盒子的，盒子摆放到合适位置，布局自然就完成了。</p>
<p>6.注意：实际开发中，一个页面基本都包含了这三种布局方式（后面移动端学习新的布局方式） 。</p>
<hr>
<h4 id="3-为什么需要浮动"><a href="#3-为什么需要浮动" class="headerlink" title="3. 为什么需要浮动"></a>3. 为什么需要浮动</h4><p>1.提问：我们用标准流能很方便的实现如下效果吗？</p>
<p>1.1 如何让多个块级盒子(div)水平排列成一行？</p>
<p>1.2 比较难，虽然转换为行内块元素可以实现一行显示，但是他们之间会有大的空白缝隙，很难控制。</p>
<p>2.提问：我们用标准流能很方便的实现如下效果吗？</p>
<p>2.1 如何实现两个盒子的左右对齐？</p>
<img src="http://bucket-c70.test.upcdn.net/12/95.png" alt="95" style="zoom:80%;" />

<p>3.总结：</p>
<p>有很多的布局效果，标准流没有办法完成，此时就可以利用浮动完成布局。 因为浮动可以改变元素标签默认的排列方式.</p>
<p>浮动最典型的应用：可以让多个块级元素一行内排列显示。</p>
<p>网页布局第一准则：<strong>多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动</strong>。</p>
<hr>
<h4 id="4-什么是浮动"><a href="#4-什么是浮动" class="headerlink" title="4. 什么是浮动"></a>4. 什么是浮动</h4><p>1.float 属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。</p>
<p>2.语法：</p>
<p><code>选择器 &#123; float: 属性值; &#125;</code></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td>元素不浮动（默认值）</td>
</tr>
<tr>
<td>left</td>
<td>元素向左浮动</td>
</tr>
<tr>
<td>right</td>
<td>向右浮动</td>
</tr>
</tbody></table>
<br />

<hr>
<h4 id="5-浮动的特性"><a href="#5-浮动的特性" class="headerlink" title="5. 浮动的特性"></a>5. 浮动的特性</h4><p>1.加了浮动之后的元素,会具有很多特性,需要我们掌握的.</p>
<ul>
<li>浮动元素会脱离标准流(脱标)</li>
<li>浮动的元素会一行内显示并且元素顶部对齐</li>
<li>浮动的元素会具有行内块元素的特性.</li>
</ul>
<p>2.设置了浮动（float）的元素最重要特性：</p>
<ul>
<li>1.脱离标准普通流的控制（浮） 移动到指定位置（动）, （俗称脱标）</li>
<li>2.浮动的盒子不再保留原先的位置</li>
</ul>
<p><img src="http://bucket-c70.test.upcdn.net/12/96.png" alt="96"></p>
<p>3.如果多个盒子都设置了浮动，则它们会按照属性值一行内显示并且顶端对齐排列。</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/97.png" alt="97"></p>
<p>4.浮动的元素是互相贴靠在一起的（不会有缝隙），如果父级宽度装不下这些浮动的盒子， 多出的盒子<br>会另起一行对齐。</p>
<p>5.浮动元素会具有行内块元素特性。</p>
<ul>
<li>1.任何元素都可以浮动。不管原先是什么模式的元素，添加浮动之后具有行内块元素相似的特性。</li>
<li>2.如果块级盒子没有设置宽度，默认宽度和父级一样宽，但是添加浮动后，它的大小根据内容来决定</li>
<li>3.浮动的盒子中间是没有缝隙的，是紧挨着一起的</li>
<li>4.行内元素同理</li>
</ul>
<h4 id="6-搭配"><a href="#6-搭配" class="headerlink" title="6. 搭配"></a>6. 搭配</h4><p>1.为了约束浮动元素位置, 我们网页布局一般采取的策略是:</p>
<ul>
<li>先用标准流的父元素排列上下位置, 之后内部子元素采取浮动排列左右位置. 符合网页布局第一准侧.</li>
</ul>
<p><img src="http://bucket-c70.test.upcdn.net/12/98.png" alt="98"></p>
<hr>
<h4 id="7-注意"><a href="#7-注意" class="headerlink" title="7. 注意"></a>7. 注意</h4><p>1.浮动和标准流的父盒子搭配。</p>
<ul>
<li>先用标准流的父元素排列上下位置, 之后内部子元素采取浮动排列左右位置</li>
</ul>
<p>2.一个元素浮动了，理论上其余的兄弟元素也要浮动。（一浮全浮）</p>
<ul>
<li>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，那么其他兄弟也应该浮动，以防止引起问题。</li>
<li>浮动的盒子只会影响浮动盒子后面的标准流,不会影响前面的标准流。</li>
</ul>
<hr>
<h3 id="4-2-清除浮动"><a href="#4-2-清除浮动" class="headerlink" title="4.2 清除浮动"></a>4.2 清除浮动</h3><h4 id="1-为什么？"><a href="#1-为什么？" class="headerlink" title="1. 为什么？"></a>1. 为什么？</h4><p>1.为什么需要清除浮动？</p>
<ul>
<li>由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为 0 时，就会<br>影响下面的标准流盒子。</li>
</ul>
<p><img src="http://bucket-c70.test.upcdn.net/12/99.png" alt="99"></p>
<p>2.由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响</p>
<h4 id="2-本质"><a href="#2-本质" class="headerlink" title="2. 本质"></a>2. 本质</h4><p>1.清除浮动的本质是清除浮动元素造成的影响</p>
<p>2.如果父盒子本身有高度，则不需要清除浮动</p>
<p>3.清除浮动之后，父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了</p>
<h4 id="3-清除"><a href="#3-清除" class="headerlink" title="3. 清除"></a>3. 清除</h4><p>1.语法：<code>选择器&#123;clear:属性值;&#125;</code></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>left</td>
<td>不允许左侧有浮动元素（清除左侧浮动的影响）</td>
</tr>
<tr>
<td>right</td>
<td>不允许右侧有浮动元素（清除右侧浮动的影响）</td>
</tr>
<tr>
<td>both</td>
<td>同时清除左右两侧浮动的影响</td>
</tr>
</tbody></table>
<p>1.1 我们实际工作中， 几乎只用 clear: both;  清除浮动的策略是: 闭合浮动.</p>
<p>2.方法：</p>
<ol>
<li>额外标签法也称为隔墙法，是 W3C 推荐的做法。</li>
<li>父级添加 overflow 属性</li>
<li>父级添加after伪元素</li>
<li>父级添加双伪元素</li>
</ol>
<h5 id="3-1-额外标签法"><a href="#3-1-额外标签法" class="headerlink" title="3.1 额外标签法"></a>3.1 额外标签法</h5><p>1.额外标签法也称为隔墙法，是 W3C 推荐的做法。<br>2.额外标签法会在浮动元素末尾添加一个空的标签。例如 <code>&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</code>，或者其他标签<br>（如<code>&lt;br /&gt;</code>等）。</p>
<ul>
<li>优点： 通俗易懂，书写方便</li>
<li>缺点： 添加许多无意义的标签，结构化较差</li>
<li>注意： 要求这个新的空标签必须是块级元素。</li>
</ul>
<h5 id="3-2-overflow"><a href="#3-2-overflow" class="headerlink" title="3.2 overflow"></a>3.2 overflow</h5><p>可以给父级添加 overflow 属性，将其属性值设置为 hidden、 auto 或 scroll 。<br>子不教,父之过,注意是给父元素添加代码</p>
<ul>
<li>优点：代码简洁</li>
<li>缺点：无法显示溢出的部分</li>
</ul>
<h5 id="3-3-after-伪元素法"><a href="#3-3-after-伪元素法" class="headerlink" title="3.3 :after 伪元素法"></a>3.3 :after 伪元素法</h5><p>1，:after 方式是额外标签法的升级版。也是给父元素添加</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123; <span class="comment">/* IE6、7 专有 */</span></span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优点：没有增加标签，结构更简单<br>缺点：照顾低版本浏览器<br>代表网站： 百度、淘宝网、网易等</p>
<h5 id="3-4-双伪元素"><a href="#3-4-双伪元素" class="headerlink" title="3.4 双伪元素"></a>3.4 双伪元素</h5><p>1.也是给给父元素添加</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优点：代码更简洁<br>缺点：照顾低版本浏览器<br>代表网站：小米、腾讯等</p>
<h5 id="3-5-总结"><a href="#3-5-总结" class="headerlink" title="3.5 总结"></a>3.5 总结</h5><p>1.为什么需要清除浮动？</p>
<p>① 父级没高度。<br>② 子盒子浮动了。<br>③ 影响下面布局了，我们就应该清除浮动了。</p>
<table>
<thead>
<tr>
<th>清除浮动的方式</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>额外标签法（隔墙法）</td>
<td>通俗易懂，书写方便</td>
<td>添加许多无意义的标签，结构化较差</td>
</tr>
<tr>
<td>父级overflow:hidden;</td>
<td>书写简单</td>
<td>溢出隐藏</td>
</tr>
<tr>
<td>父级after伪元素</td>
<td>结构语义化正确</td>
<td>IE6~7不支持:after,兼容性问题</td>
</tr>
<tr>
<td>父级双伪元素</td>
<td>结构语义化正确</td>
<td>IE6~7不支持:after,兼容性问题</td>
</tr>
</tbody></table>
<h4 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h4><ol>
<li>清除浮动本质是?<br>清除浮动的本质是清除浮动元素脱离标准流造成的影响</li>
<li>清除浮动策略是?<br>闭合浮动. 只让浮动在父盒子内部影响,不影响父盒子外面的其他盒子.</li>
<li>额外标签法?<br>隔墙法, 就是在最后一个浮动的子元素后面添加一个额外标签, 添加 清除浮动样式.<br>实际工作可能会遇到,但是不常用</li>
</ol>
<br />

<h2 id="5-学成在线案例"><a href="#5-学成在线案例" class="headerlink" title="5. 学成在线案例"></a>5. 学成在线案例</h2><h3 id="5-0-PS切图"><a href="#5-0-PS切图" class="headerlink" title="5.0 PS切图"></a>5.0 PS切图</h3><p>1.PS 有很多的切图方式：图层切图、切片切图、PS 插件切图等。</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV14J4114768?p=192&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV14J4114768?p=192&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<h3 id="5-1-页面布局整体思路"><a href="#5-1-页面布局整体思路" class="headerlink" title="5.1 页面布局整体思路"></a>5.1 页面布局整体思路</h3><p>为了提高网页制作的效率，布局时通常有以下的整体思路：</p>
<ol>
<li><p>必须确定页面的版心（可视区），我们测量可得知。</p>
</li>
<li><p>分析页面中的行模块，以及每个行模块中的列模块。其实页面布局第一准则.</p>
</li>
<li><p>一行中的列模块经常浮动布局, 先确定每个列的大小,之后确定列的位置. 页面布局第二准则</p>
</li>
<li><p>制作 HTML 结构。我们还是遵循，先有结构，后有样式的原则。结构永远最重要.</p>
</li>
<li><p>所以, 先理清楚<red>布局结构</red>,再写代码尤为重要. 这需要我们多写多积累.</p>
</li>
<li><p>视频：<a href="https://www.bilibili.com/video/BV14J4114768?p=198">https://www.bilibili.com/video/BV14J4114768?p=198</a></p>
</li>
</ol>
<hr>
<h3 id="5-2-确定版心"><a href="#5-2-确定版心" class="headerlink" title="5.2 确定版心"></a>5.2 确定版心</h3><p>因为这里资料里面给了 学成网首页.psd 材料，所以可以在PS里面截取宽度查看；</p>
<p>平常我们没有这类资料，应该是直接在ta人网页F12，查看；</p>
<ol>
<li><p>这个页面的版心是 1200 像素，每个版心都要水平居中对齐，可以定义版心为公共类：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.w</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<br />

<h3 id="5-3-头部制作"><a href="#5-3-头部制作" class="headerlink" title="5.3 头部制作"></a>5.3 头部制作</h3><p><img src="https://i.loli.net/2020/08/11/LJ3vYGbqMw8rfmP.png" alt="1"></p>
<ol>
<li><p>1 号是版心盒子 header 1200 * 42 的盒子水平居中对齐，上下给一个 margin 值就可以</p>
</li>
<li><p>版心盒子里面包含 2 号盒子 logo</p>
<blockquote>
<p>导航栏注意点:<br><strong>实际开发中，我们不会直接用链接a 而是用 li 包含链接(li+a)的做法。</strong></p>
<ol>
<li>li+a 语义更清晰，一看这就是有条理的列表型内容。</li>
<li>如果直接用a，搜索引擎容易辨别为有堆砌关键字嫌疑（故意堆砌关键字容易被搜索引擎有降权的风险），从而影响网站排名</li>
</ol>
<blockquote>
<p>seo网站优化？网站优化的重点之一；</p>
</blockquote>
<p>注意:</p>
<ol>
<li>让导航栏一行显示, 给 li 加浮动, 因为 li 是块级元素, 需要一行显示.</li>
<li>这个nav导航栏可以不给宽度,将来可以继续添加其余文字</li>
<li>因为导航栏里面文字不一样多,所以最好给链接 a 左右padding 撑开盒子,而不是指定宽度</li>
</ol>
</blockquote>
</li>
<li><p>版心盒子里面包含 3 号盒子 nav 导航栏</p>
<blockquote>
<p>3.1 xxx</p>
<p>….</p>
<p>3.5 a放上去有下边框效果；</p>
<p>3.6 光有a的pdding还是有点近，给li也设置padding 0 10px；</p>
<p>padding在不断的撑开盒子，a的padding撑开一次，li的padding也撑开一次；P203</p>
</blockquote>
</li>
<li><p>版心盒子里面包含 4 号盒子 search 搜索框</p>
<blockquote>
<p>4.1 先是框架：</p>
<p><img src="https://i.loli.net/2020/08/12/G529DpBHdKtMvb1.png" alt="2"></p>
<p>一个是input文本框，一个是button按钮；</p>
<p>文本框不需要右边框；</p>
<p>4.2 找到最外层.search的宽度；412px；高度统一价：42px</p>
<p>4.3 一浮全浮</p>
<p>4.4 量测input文本框的宽度；360px；</p>
<p>高度不是42，因为有上下边框，所以是42-2=40px；</p>
<p>4.5 placeholder=”输入关键词”</p>
<p>4.6 将”输入关键词”右移一些，padding-left: 15px；</p>
<p>但此时input有实际的宽度360px，内边距会撑大盒子；</p>
<p><img src="https://i.loli.net/2020/08/13/7Lq5wlPSX3eijIp.png" alt="3"></p>
<p>这需要把width：360px - 15px，345px；</p>
<p>4.7  按道理说，input和button的宽度合适，不会让button掉下</p>
<p>也是行内块元素。</p>
<p>但是行内块元素之间有一个缝隙。所以还是得用浮动；</p>
</blockquote>
</li>
<li><p>版心盒子里面包含 5 号盒子 user 个人信息</p>
<blockquote>
<p>5.1 html的框架：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/index2/user-h.png&quot;</span>&gt;</span></span><br><span class="line">   li-webchong</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>…</p>
<p>5.2 css</p>
<p>图片此时不居中，后面再讲；</p>
<p>5.3 最后整体背景颜色；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f3f5f7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.4 去掉以前为了方便看模块的背景图；</p>
</blockquote>
</li>
<li><p>注意：要求里面的 4 个盒子必须都是浮动</p>
</li>
</ol>
<p>word:</p>
<p>1-<a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/decoration">decoration</a></p>
<br />

<h4 id="5-3-2-自写"><a href="#5-3-2-自写" class="headerlink" title="5.3.2 自写"></a>5.3.2 自写</h4><ol>
<li>html 没啥变化，不是没啥。没有变化；</li>
<li>css句数明显少了一些。</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<br />

<h4 id="5-3-3-问题："><a href="#5-3-3-问题：" class="headerlink" title="5.3.3 问题："></a>5.3.3 问题：</h4><p>img点击下边有框。而background-image没有；</p>
<br />

<h3 id="5-4-banner-制作"><a href="#5-4-banner-制作" class="headerlink" title="5.4 banner 制作"></a>5.4 banner 制作</h3><h4 id="5-4-1-单词"><a href="#5-4-1-单词" class="headerlink" title="5.4.1 单词"></a>5.4.1 单词</h4><p><a href="https://fanyi.baidu.com/translate?aldtype=16047&query=banner&keyfrom=baidu&smartresult=dict&lang=auto2zh#en/zh/banner">banner</a></p>
<p><a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/course">course</a></p>
<h4 id="5-4-2-思路"><a href="#5-4-2-思路" class="headerlink" title="5.4.2 思路"></a>5.4.2 思路</h4><p><img src="https://i.loli.net/2020/08/18/SDCeEnQv4bPHB2d.png" alt="1"></p>
<p><img src="https://i.loli.net/2020/08/18/vu3VwmaX9PhUqAW.png" alt="2"></p>
<ol>
<li><p>1号盒子是通栏的大盒子<strong>banner</strong>， 不给宽度，给高度，给一个蓝色背景。</p>
<p>1.1 背景颜色#1c036c</p>
<p>1.2 背景图片不重复，居中；</p>
<p>1.3 若在紧靠盒子上面，可以加top</p>
<p><code>background: url(../2-img/index4/banner2.png) no-repeat top center;</code></p>
</li>
<li><p>2号盒子是版心 <strong>w</strong>， 要水平居中对齐。</p>
<p>2.1 宽度190px，高度421px</p>
</li>
<li><p>3号盒子版心内，左对齐 <strong>subnav</strong> 侧导航栏。</p>
<p>3.1 subnav 盒子 背景色 黑色半透明</p>
<p>3.2 重要的导航栏，li 包 a ，行高45px</p>
<blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;subnav&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>前端开发<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>前端开发<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>前端开发<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>前端开发<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>前端开发<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>前端开发<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>前端开发<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>前端开发<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>前端开发<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样后全在一排；</p>
<p>css那边display：block;</p>
<p>有点感觉了；</p>
<p>3.2.2  设置 li高度为45px；不设置a；</p>
<p>3.2.3  左右两边有间距；</p>
<p><img src="http://bucket-c70.test.upcdn.net/12-html+css_introdictin-pink/6-12HCIP-5.4.2-3.png" alt="3"></p>
<p><code>padding:0 20px</code></p>
<p>此时有一个问题想问：padding什么时候会撑开盒子</p>
<blockquote>
<p>div有宽度的情况下，会撑开盒子；</p>
<p>但，div总不能一直没宽；</p>
<p>这时，可以用父元素设置宽；</p>
<p><a href="https://www.jianshu.com/p/3e2d76ab9ae8">https://www.jianshu.com/p/3e2d76ab9ae8</a></p>
</blockquote>
<p>在这里：</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.subnav</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">190px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">421px</span>;</span><br><span class="line">    <span class="comment">/* 2-2.3 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.subnav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>li没有宽度，subnav设置的宽度，ul设置宽度应该也行。</p>
<p>实验一下；</p>
<p>虽然效果一样：</p>
<p><img src="http://bucket-c70.test.upcdn.net/12-html+css_introdictin-pink/9-5.4.2-3.2.3-1.png" alt=""></p>
<p>但由于subnav没有设置宽度，它自动继承父元素的宽度，占领了整个w(class)</p>
<p><img src="http://bucket-c70.test.upcdn.net/12-html+css_introdictin-pink/10-5.4.2-3.2.3-2.png" alt="10"></p>
</blockquote>
<p>所以还是设置subnav的；</p>
</blockquote>
<p>3.3 a里面包含文字和span，span右浮动</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.subnav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为是在a里面，a在li里面，li已经设置好了padding；</p>
<p>所以完事；</p>
</blockquote>
<p>3.4 当鼠标经过a ，a里面的内容（文字和span）变蓝色</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.subnav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00a4ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="4">
<li><p>4号盒子版心内，右对齐  <strong>course</strong> 课程。</p>
<p>4.1 一浮全浮。如果subnav没有浮动，course就会被挤在下面；</p>
<p><img src="http://bucket-c70.test.upcdn.net/12-html+css_introdictin-pink/11-5.4.2-4-1.png" alt="11"></p>
<p>4.2 外边距合并，塌陷问题；</p>
<p><a href="https://www.cnblogs.com/nigori/p/11184303.html">https://www.cnblogs.com/nigori/p/11184303.html</a></p>
<p>不过，浮动的盒子是不会塌陷的；</p>
<p>只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并。<a href="https://www.cnblogs.com/shcrk/p/9311273.html">链接</a></p>
<hr>
<p>4.3 上面h2，下面div</p>
<p>4.3.2 .bd 分为2部分；</p>
<img src="http://bucket-c70.test.upcdn.net/12-html+css_introdictin-pink/12-5.4.3-4.3.2.png" alt="12" style="zoom:50%;" />

<p>上面用li；下面用<a></p>
<blockquote>
<p>li上h4，下P</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>继续学习 程序语言设计<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>正在学习-使用对象<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>继续学习 程序语言设计<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>正在学习-使用对象<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>继续学习 程序语言设计<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>正在学习-使用对象<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>若css<code>.bd .more</code>没有效果；</p>
<p>看是不是把a写在.bd的外面了；…</p>
</li>
</ol>
<h4 id="5-4-3-编程"><a href="#5-4-3-编程" class="headerlink" title="5.4.3 编程"></a>5.4.3 编程</h4><h5 id="1-html"><a href="#1-html" class="headerlink" title="1. html"></a>1. html</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./3-css/css4.css&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1 头部 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header w&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1.1 logo --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/1-logo-h.png&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1.2 nav_导航 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>课程<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>职业规划<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1.3 搜索_search --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;关键词&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1.4 user --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/index4/user-h.png&quot;</span> &gt;</span></span><br><span class="line">            li-youlail</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1. 头部结束 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2. banner_横幅 start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;w&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 2.1 subnav --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;subnav&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>前端开发<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>前端开发<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>前端开发<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>前端开发<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>前端开发<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>前端开发<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>前端开发<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>前端开发<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>前端开发<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 2.2 course --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;course&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我的课程表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 5.4.2-4.3.2 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bd&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>继续学习 程序语言设计<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">p</span>&gt;</span>正在学习-使用对象<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>继续学习 程序语言设计<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">p</span>&gt;</span>正在学习-使用对象<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>继续学习 程序语言设计<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">p</span>&gt;</span>正在学习-使用对象<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;more&quot;</span>&gt;</span>全部课程<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span>               </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2. banner_横幅 end --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-css"><a href="#2-css" class="headerlink" title="2. css"></a>2. css</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.w</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 全局js */</span></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &lt;!-- 1.2 nav_导航 --&gt; */</span></span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="comment">/* a是行内元素没有高度宽度，转换成块级元素 */</span></span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#050505</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">42px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#0097fd</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0097fd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;!-- 1.3 搜索_search --&gt; */</span></span><br><span class="line"><span class="selector-class">.search</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">412px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">70px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.search</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">345px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#00a4ff</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.search</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(../<span class="number">2</span>-img/index4/fa-search2.png);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.user</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666666</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 2. banner */</span></span><br><span class="line"><span class="comment">/* 2-1 */</span></span><br><span class="line"><span class="selector-class">.banner</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">421px</span>;</span><br><span class="line">    <span class="comment">/* background-image: url(../2-img/index4/banner2.png);</span></span><br><span class="line"><span class="comment">    background-repeat: no-repeat;</span></span><br><span class="line"><span class="comment">    background-position: center; */</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#1c036c</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.w</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">421px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(../<span class="number">2</span>-img/index4/banner2.png) no-repeat top center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.subnav</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">190px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">421px</span>;</span><br><span class="line">    <span class="comment">/* 2-2.3 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.subnav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="comment">/* 3.2.3 */</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.subnav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 3.3 */</span></span><br><span class="line"><span class="selector-class">.subnav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.subnav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00a4ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 5.4.2-4 */</span></span><br><span class="line"><span class="selector-class">.course</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">230px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 5.4.2-4.3 */</span></span><br><span class="line"><span class="selector-class">.course</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#9bceea</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">48px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 5.4.2-4.3.2 */</span></span><br><span class="line"><span class="selector-class">.bd</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">14px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#4e4e4e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#a5a5a5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bd</span> <span class="selector-class">.more</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">38px</span>; <span class="comment">/*&lt;a&gt;是行内元素没有高度宽度*/</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#00a4ff</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00a4ff</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 5.4.2-4.3.2 - :end*/</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="5-5-推荐小模块"><a href="#5-5-推荐小模块" class="headerlink" title="5.5 推荐小模块"></a>5.5 推荐小模块</h3><p><img src="http://bucket-c70.test.upcdn.net/12-html+css_introdictin-pink/13-5.5.png" alt="13"></p>
<ul>
<li><strong>复习点：</strong>  因为里面三个盒子都要垂直居中，我们利用 继承性，给 最大的盒子 一个垂直居中的代码就好了，还记得 那些 样式可以继承吗？？？ font-  line-  text- color</li>
</ul>
<ul>
<li><p>大盒子水平居中 goods  精品 ，注意此处有个盒子阴影</p>
<blockquote>
<p><a href="https://www.runoob.com/cssref/css3-pr-box-shadow.html">box-shadow</a>:</p>
<p>语法:box-shadow: h-shadow v-shadow blur spread color inset;</p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>h-shadow</em></td>
<td align="left">必需的。水平阴影的位置。允许负值</td>
</tr>
<tr>
<td align="left"><em>v-shadow</em></td>
<td align="left">必需的。垂直阴影的位置。允许负值</td>
</tr>
<tr>
<td align="left"><em>blur</em></td>
<td align="left">可选。模糊距离</td>
</tr>
<tr>
<td align="left"><em>spread</em></td>
<td align="left">可选。阴影的大小</td>
</tr>
<tr>
<td align="left"><em>color</em></td>
<td align="left">可选。阴影的颜色。在<a href="https://www.runoob.com/cssref/css_colors_legal.aspx">CSS颜色值</a>寻找颜色值的完整列表</td>
</tr>
<tr>
<td align="left">inset</td>
<td align="left">可选。从外层的阴影（开始时）改变阴影内侧阴影</td>
</tr>
</tbody></table>
</blockquote>
</li>
<li><p>1号盒子是标题 H3  左侧浮动</p>
</li>
<li><p>2号盒子 里面放链接  左侧浮动  goods-item    距离可以控制链接的 左右外边距（注意行内元素只给左右内外边距）</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.goods</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>css没效果？是不是把goods写成good了；</p>
</blockquote>
</li>
<li><p>3号盒子 右浮动 mod 修改</p>
</li>
</ul>
<h4 id="5-5-2-步骤"><a href="#5-5-2-步骤" class="headerlink" title="5.5.2 步骤"></a>5.5.2 步骤</h4><ol start="0">
<li><p>….（前面没有记录）</p>
</li>
<li><p>大盒子内边距；</p>
<p><img src="http://bucket-c70.test.upcdn.net/12-html+css_introdictin-pink/14-5.5.2.png" alt="14"></p>
<p>因为有width；padding需要减宽度；</p>
<p>这里用精品推荐和修改兴趣的外边距；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 精品推荐 */</span></span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 修改兴趣 */</span></span><br><span class="line"><span class="selector-class">.mod</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="http://bucket-c70.test.upcdn.net/12-html+css_introdictin-pink/15-5.5.2-2.png" alt="15"></p>
</li>
</ol>
<ol start="2">
<li><p>修改 精品推荐和修改兴趣 的 样式；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 精品推荐 */</span></span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00a4ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 修改兴趣 */</span></span><br><span class="line"><span class="selector-class">.mod</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00a4ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://bucket-c70.test.upcdn.net/12-html+css_introdictin-pink/16-5.5.2-3.png" alt="16"></p>
</li>
<li><p>中间：</p>
<p><img src="http://bucket-c70.test.upcdn.net/12-html+css_introdictin-pink/17-5.5.2-4.png" alt="17"></p>
<p>3.1 先要分开；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.goods</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#050505</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.2 然后与精品推荐 隔开；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.goods</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<br />

<hr>
<h3 id="5-6-精品推荐大模块"><a href="#5-6-精品推荐大模块" class="headerlink" title="5.6 精品推荐大模块"></a>5.6 精品推荐大模块</h3><h4 id="5-6-1-words"><a href="#5-6-1-words" class="headerlink" title="5.6.1 words"></a>5.6.1 words</h4><ol>
<li><a href="https://fanyi.baidu.com/translate?aldtype=16047&query=item&keyfrom=baidu&smartresult=dict&lang=auto2zh#en/zh/outside">outside</a></li>
</ol>
<hr>
<p><img src="http://bucket-c70.test.upcdn.net/12-html+css_introdictin-pink/18-5.6-1.png" alt="18"></p>
<ul>
<li>1号盒子为最大的盒子 <strong>box</strong>  版心水平居中对齐</li>
<li>2号盒子为上面部分 <strong>box-hd</strong>  – 里面   左侧标题H3 左浮动   右侧 链接 a 右浮动</li>
<li>3号盒子为底下部分 <strong>box-bd</strong> — 里面是无序列表 有 10个 小li 组成</li>
<li>小li 外边距的问题， 这里有个小技巧。  给box-hd 宽度为 1215 就可以一行装开5个 li了</li>
<li>复习点：我们用到清除浮动，因为 box-hd 里面的盒子个数不一定是多少，所以我们就不给高度了，但是里面的盒子浮动会影响下面的布局，因此需要清除浮动。</li>
</ul>
<h4 id="5-6-2-步骤："><a href="#5-6-2-步骤：" class="headerlink" title="5.6.2 步骤："></a>5.6.2 步骤：</h4><ol>
<li><p>建立div，.box;</p>
</li>
<li><p>创建 .box-hd</p>
<p>2.1 写 <code>精品推荐</code> 与<code>查看全部</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box w&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-hd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>精品推荐<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>查看全部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.2 左，右；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-hd</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-hd</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.3 .box-hd高度45px；</p>
<p>2.4 <code>精品推荐</code>字号为20px；字体颜色#494949；</p>
<p>2.5  查看全部；字号12px；字体颜色#a5a5a5；</p>
<p>2.6 <code>查看全部</code>上外边距10px；浮动的盒子不考虑塌陷；右外边距30px；</p>
</li>
<li><p>box 分为上下，上为box-hd，下为box-bd；</p>
<p><img src="http://bucket-c70.test.upcdn.net/12-html+css_introdictin-pink/19-5.6-2.png" alt="19"></p>
</li>
</ol>
<p>   3.1 建立box-bd;</p>
<p>   <code>&lt;div class=&quot;box-bd&quot;&gt;abc&lt;/div&gt;</code></p>
<p>   总体目前为：</p>
   <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box w&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-hd clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>精品推荐<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>查看全部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-bd&quot;</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ol start="4">
<li><p>box-bd里面由li组成；</p>
<p>4.1 每个li宽度228px；高度270px；</p>
<p>4.2 先给个背景颜色，方便看，后面再删除；</p>
<p>4.3 页面高度见底，给body设置高度3000px；3000多了，1500即可</p>
</li>
<li><p>有10个li；建立10个</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-bd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>每个li需要浮动，不然就是竖着一排；</p>
<p>li原本的外部显示类型为：</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display-listitem">display-list_item</a></p>
<p>将这个元素的外部显示类型变为 block 盒，并将内部显示类型变为多个 list-item inline 盒。</p>
<p>单个值<code>list-item</code>将导致元素的行为类似于列表项。可以与<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type"><code>list-style-type</code></a>和一起使用<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-position"><code>list-style-position</code></a>。</p>
<p><code>list-item</code>也可以与任何<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display-outside">``</a>关键字和<code>flow</code>或<code>flow-root</code> <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display-inside">``</a>关键字组合。</p>
<p><strong>注意</strong>：在支持二值语法的浏览器中，如果未指定内部值，则默认为<code>flow</code>。如果未指定外部值，则主体框的外部显示类型为<code>block</code>。</p>
</li>
<li><p>每个li都有小缝隙15px；</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/20-5.6-6-3.png" alt="20"></p>
<p>margin-right: 15px;</p>
</li>
<li><p>第五个与第十个不需要右外边距；以为要用children了；结果</p>
<p>7.1 因为右边是空白；</p>
<p>7.2 把li的ul修改足够宽，装5个盒子；</p>
</li>
<li><p>但是，我要用:nth-chlid();</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-child">MDN文档</a></p>
<p><strong><code>:nth-child(an+b)</code></strong> 这个 <a href="https://developer.mozilla.org/en-US/docs/CSS/Pseudo-classes">CSS 伪类</a>首先找到所有当前元素的兄弟元素，然后按照位置先后顺序从1开始排序，选择的结果为CSS伪类:nth-child括号中表达式（an+b）匹配到的元素集合（n=0，1，2，3…）。示例：</p>
<ul>
<li><code>0n+3</code> 或简单的 <code>3</code> 匹配第三个元素。</li>
<li><code>1n+0</code> 或简单的 <code>n</code> 匹配每个元素。（兼容性提醒：在 Android 浏览器 4.3 以下的版本 <code>n</code> 和 <code>1n</code> 的匹配方式不一致。<code>1n</code> 和 <code>1n+0</code> 是一致的，可根据喜好任选其一来使用。）</li>
<li><code>2n+0</code> 或简单的 <code>2n</code> 匹配位置为 2、4、6、8…的元素（n=0时，2n+0=0，第0个元素不存在，因为是从1开始排序)。你可以使用关键字 <strong><code>even</code></strong> 来替换此表达式。</li>
<li><code>2n+1</code> 匹配位置为 1、3、5、7…的元素。你可以使用关键字 <strong><code>odd</code></strong> 来替换此表达式。</li>
<li><code>3n+4</code> 匹配位置为 4、7、10、13…的元素。</li>
</ul>
<p><code>*a*</code> 和 <code>*b*</code> 都必须为整数，并且元素的第一个子元素的下标为 1。换言之就是，该伪类匹配所有下标在集合 { an + b; n = 0, 1, 2, …} 中的子元素。另外需要特别注意的是，<code>*an*</code> 必须写在 <code>*b*</code> 的前面，不能写成 <code>*b+an*</code> 的形式。</p>
</li>
</ol>
<ol start="9">
<li><p>6~8代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">228px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">270px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(5n)</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="10">
<li><p>.box-bd ul li下外边距15px；</p>
</li>
<li><p>到li里面了；li里面分为三部分；</p>
<img src="http://bucket-c70.test.upcdn.net/12/21-5.6.2_11-4.png" alt="21" style="zoom:80%;" />

<p>11-1. 先是 img；没用div；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/index4/pic.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是图片宽度233px，比li的228px大；</p>
<p>设置:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<pre><code>11-2. 

第二个部分，用h4，还是没用div；

左外边距25px；右20px；

字号14px；颜色#050505；

字体不加粗;font-weight: 400;

上下外边距20px；



11-3.

第三部分；div，.info ；

左外边距25px；右20px；

字号12px；颜色#999；

不过高级是另一个颜色

给高级加一个span标签；设置颜色#ff7c2d;</code></pre><ol start="12">
<li><p>去掉之前用来查看的背景颜色pink后；</p>
<p>发现，融入了一体；不分明；</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/22-5.6.2_12-5.png" alt="22"></p>
<p>而视频里面，是分明的，总体背景颜色有可能不对劲，不是#fff；</p>
<p>截图捕捉后，颜色是#f1f5f7；在body这是背景颜色；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1500px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f1f5f7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<pre><code>分明；

![24](http://bucket-c70.test.upcdn.net/12/23-5.6.2.png)</code></pre><hr>
<h3 id="5-7-底部模块"><a href="#5-7-底部模块" class="headerlink" title="5.7 底部模块"></a>5.7 底部模块</h3><p>  <img src="http://bucket-c70.test.upcdn.net/12/24-5.7.png" alt="24"></p>
<ul>
<li>1号盒子通栏大盒子 底部 <strong>footer</strong>  给高度  底色是白色</li>
<li>2号盒子版心水平居中</li>
<li>3号盒子版权 <strong>copyright</strong>  左对齐 </li>
<li>4号盒子 链接组 <strong>links</strong>  右对齐</li>
</ul>
<h4 id="5-7-2-步骤；"><a href="#5-7-2-步骤；" class="headerlink" title="5.7.2 步骤；"></a>5.7.2 步骤；</h4><ol>
<li><p>准备大盒子.footer</p>
<p><code>&lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;</code></p>
<p>高度415px；</p>
<p>用背景颜色pink观察模板；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">415px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>问题：</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/25-5.7.png" alt="25"></p>
<p>div-footer跑到了上面去；</p>
<p>浮动；</p>
<p>box盒子里的子元素有浮动，box本身又没有高度height；</p>
<p>所以，其实box子元素的内容也没装在box盒子里，而是浮在上面，视觉假象；box高度是0</p>
<p>更多信息可以查看视频<a href="https://www.bilibili.com/video/BV14J4114768?p=172">链接</a>说的很好；</p>
<p>2.1 </p>
<p>那么就要清除浮动；</p>
<p>给浮动元素的父元素ul添加清除浮动；</p>
<p><code>&lt;ul class=&quot;clearfix&quot;&gt;</code></p>
<p>成功，有效；</p>
</li>
<li><p>建立模块2，添加.w</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;w&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>w上边距35px；</p>
<p>但是会塌陷；</p>
<p>用内上边距；这里w应该是没设置高度，所以没有撑大；</p>
<p>设置高度试试会不会撑大；</p>
<p>也没撑大高度本身；去css笔记那边看看padding撑大的信息；</p>
<p>好像是宽度会撑开，高度没具体说，大概是不会影响高度；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.w</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">35px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立模块3，div+class=”copyright”</p>
<p><a href="https://fanyi.baidu.com/translate?aldtype=16047&query=item&keyfrom=baidu&smartresult=dict&lang=auto2zh#en/zh/copyright">copyright-单词</a></p>
<p>左侧对齐，左浮动；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;w&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;copyright&quot;</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.copyright</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol start="6">
<li><p>建立模块4</p>
<p><code>&lt;div class=&quot;links&quot;&gt;&lt;/div&gt;</code></p>
<p>右对齐；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.link</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="7">
<li><p>做模块3的内容；</p>
<p>浮动的盒子可以不给宽度，用内容撑；</p>
<p>7.1  logo；</p>
<p>7.2 文字P；</p>
<p>字号12px；颜色#666；</p>
<p>上外边距20，下外边距15px；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;copyright&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/index4/1-logo-h.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>学成在线致力于普及中国最好的教育它与中国一流大学和机构合作提供在线课程。<span class="tag">&lt;<span class="name">br</span>&gt;</span> © 2017年XTCG Inc.保留所有权利。-沪ICP备15025210号             <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span>下载APP<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.copyright</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">15px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>   7.3 .app;</p>
<p>   <code>&lt;a href=&quot;#&quot; class=&quot;app&quot;&gt;下载APP&lt;/a&gt;</code></p>
<p>   宽度118px；高度33px；</p>
<p>   边框1px 实线 #00a4ff;</p>
<p>   没有效果：</p>
<p>   <img src="http://bucket-c70.test.upcdn.net/12/26-5.7.png" alt="26"></p>
<p>   因为<code>&lt;a&gt;</code>是行内元素，没有宽高；</p>
<p>   改为块级元素；</p>
<p>   <code>display: block;</code></p>
<p>   文字大小16px；文字水平居中；颜色#00a4ff;</p>
   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.copyright</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">118px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">33px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#00a4ff</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">33px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00a4ff</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol start="8">
<li><p>模块4的内容；</p>
<p>三个dr；</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/27-5.7-8.png" alt="27"></p>
<p>不过我自己对dl没啥印象；….</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>关于学成网<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>管理团队<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>工作机会<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>客户服务<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>帮助<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>dt字号16px，颜色#333；</p>
<p>dd&gt;a,字号12px；颜色#333；</p>
<p>dt下外边距5px；</p>
<blockquote>
<p>dd&gt;a的写法似乎有点错误；</p>
<p>含义不是dd的子元素a；</p>
<table>
<thead>
<tr>
<th><a href="https://www.w3school.com.cn/cssref/selector_element.asp"><em>element</em></a></th>
<th>p</th>
<th>选择所有 <p> 元素。</th>
<th>1</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.w3school.com.cn/cssref/selector_element_comma.asp"><em>element</em>,<em>element</em></a></td>
<td>div,p</td>
<td>选择所有 <div> 元素和所有 <p> 元素。</td>
<td>1</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/cssref/selector_element_element.asp"><em>element</em> <em>element</em></a></td>
<td>div p</td>
<td>选择 <div> 元素内部的所有 <p> 元素。</td>
<td>1</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/cssref/selector_element_gt.asp"><em>element</em>&gt;<em>element</em></a></td>
<td>div&gt;p</td>
<td>选择父元素为 <div> 元素的所有 <p> 元素。</td>
<td>2</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/cssref/selector_element_plus.asp"><em>element</em>+<em>element</em></a></td>
<td>div+p</td>
<td>选择紧接在 <div> 元素之后的所有 <p> 元素。</td>
<td>2</td>
</tr>
</tbody></table>
<p>不过含义差不多；</p>
<p>div p ；的写法，可以隔代；</p>
<p>比如 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>而：div&gt;p应该是不能隔代的；</p>
</blockquote>
<p>8.2  3个dl；</p>
<p>复制3份；</p>
<blockquote>
<p>因为dl是块级元素；排在了一竖；</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/28-5.7-8.2.png" alt="28"></p>
<p>使用浮动；</p>
</blockquote>
<p>左外边距100px；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.links</span> <span class="selector-tag">dl</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把背景颜色pink去掉；</p>
</li>
<li><p>个人操作：</p>
<p>注释掉body的高度1500px；</p>
<p>修改.footer的高度415px改为315px试试效果；</p>
<p>再减少50px试试；265px；</p>
<p>265px可以；</p>
</li>
</ol>
<h3 id="5-8-代码："><a href="#5-8-代码：" class="headerlink" title="5.8 代码："></a>5.8 代码：</h3><h4 id="5-8-1-html"><a href="#5-8-1-html" class="headerlink" title="5.8.1 html"></a>5.8.1 html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./3-css/css4.css&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1 头部 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header w&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1.1 logo --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/1-logo-h.png&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1.2 nav_导航 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>课程<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>职业规划<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1.3 搜索_search --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;关键词&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1.4 user --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/index4/user-h.png&quot;</span> &gt;</span></span><br><span class="line">            li-youlail</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1. 头部结束 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2. banner_横幅 start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;w&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 2.1 subnav --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;subnav&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>前端开发<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>后端开发<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>移动开发<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>人工智能<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>商业预测<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>云计算&amp;大数据<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>运维&amp;从测试<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>UI设计<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>产品<span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 2.2 course --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;course&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我的课程表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 5.4.2-4.3.2 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bd&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>继续学习 程序语言设计<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">p</span>&gt;</span>正在学习-使用对象<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>继续学习 程序语言设计<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">p</span>&gt;</span>正在学习-使用对象<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>继续学习 程序语言设计<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">p</span>&gt;</span>正在学习-使用对象<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;more&quot;</span>&gt;</span>全部课程<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span>               </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>           </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2. banner_横幅 end --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3. 精品推荐模块-start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;goods w&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>精品推荐<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Html<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>TyoeScript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>AXJX<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mod&quot;</span>&gt;</span>修改兴趣<span class="tag">&lt;/<span class="name">a</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3. 精品推荐模块-end--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4. box核心内容-start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box w&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-hd clearfix&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>精品推荐<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>查看全部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-bd&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/index4/pic.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span>·1125人学习<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/index4/pic.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span>·1125人学习<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/index4/pic.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span>·1125人学习<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/index4/pic.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span>·1125人学习<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/index4/pic.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span>·1125人学习<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/index4/pic.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span>·1125人学习<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/index4/pic.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span>·1125人学习<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/index4/pic.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span>·1125人学习<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/index4/pic.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span>·1125人学习<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/index4/pic.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span>·1125人学习<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4. box核心内容-end --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 5. footer 模块制作 - start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;w&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;copyright&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/index4/1-logo-h.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>学成在线致力于普及中国最好的教育它与中国一流大学和机构合作提供在线课程。<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    © 2017年XTCG Inc.保留所有权利。-沪ICP备15025210号<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span>下载APP<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>关于学成网<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>管理团队<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>工作机会<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>客户服务<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>帮助<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>关于学成网<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>管理团队<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>工作机会<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>客户服务<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>帮助<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>关于学成网<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>管理团队<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>工作机会<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>客户服务<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>帮助<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 5. footer 模块制作 - end --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-8-2-css"><a href="#5-8-2-css" class="headerlink" title="5.8.2 css"></a>5.8.2 css</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.w</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="comment">/* height: 1500px; */</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f1f5f7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 全局js */</span></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &lt;!-- 1.2 nav_导航 --&gt; */</span></span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="comment">/* a是行内元素没有高度宽度，转换成块级元素 */</span></span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#050505</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">42px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#0097fd</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0097fd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;!-- 1.3 搜索_search --&gt; */</span></span><br><span class="line"><span class="selector-class">.search</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">412px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">70px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.search</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">345px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#00a4ff</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.search</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(../<span class="number">2</span>-img/index4/fa-search2.png);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.user</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666666</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 2. banner */</span></span><br><span class="line"><span class="comment">/* 2-1 */</span></span><br><span class="line"><span class="selector-class">.banner</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">421px</span>;</span><br><span class="line">    <span class="comment">/* background-image: url(../2-img/index4/banner2.png);</span></span><br><span class="line"><span class="comment">    background-repeat: no-repeat;</span></span><br><span class="line"><span class="comment">    background-position: center; */</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#1c036c</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.w</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">421px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(../<span class="number">2</span>-img/index4/banner2.png) no-repeat top center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.subnav</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">190px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">421px</span>;</span><br><span class="line">    <span class="comment">/* 2-2.3 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.subnav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="comment">/* 3.2.3 */</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.subnav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 3.3 */</span></span><br><span class="line"><span class="selector-class">.subnav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.subnav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00a4ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 5.4.2-4 */</span></span><br><span class="line"><span class="selector-class">.course</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">230px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 5.4.2-4.3 */</span></span><br><span class="line"><span class="selector-class">.course</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#9bceea</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">48px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 5.4.2-4.3.2 */</span></span><br><span class="line"><span class="selector-class">.bd</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">14px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#4e4e4e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#a5a5a5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bd</span> <span class="selector-class">.more</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">38px</span>; <span class="comment">/*&lt;a&gt;是行内元素没有高度宽度*/</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#00a4ff</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00a4ff</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 5.4.2-4.3.2 - :end*/</span></span><br><span class="line"><span class="comment">/* 3. 精品推荐模块-start */</span></span><br><span class="line"><span class="selector-class">.goods</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">3px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 精品推荐 */</span></span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00a4ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#050505</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 修改兴趣 */</span></span><br><span class="line"><span class="selector-class">.mod</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00a4ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 3. 精品推荐模块-end */</span></span><br><span class="line"><span class="comment">/* 4. box核心内容-start */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-hd</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">45px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-hd</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#494949</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-hd</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#a5a5a5</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">228px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">270px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(5n)</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#050505</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-class">.info</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span> <span class="number">0</span> <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-class">.info</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff7c2d</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 4. box核心内容-end */</span></span><br><span class="line"><span class="comment">/* 5. footer 模块制作 - start */</span></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">265px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.w</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">35px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.copyright</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.copyright</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">15px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.copyright</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">118px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">33px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#00a4ff</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">33px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00a4ff</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.links</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.links</span> <span class="selector-tag">dl</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.links</span> <span class="selector-tag">dl</span> <span class="selector-tag">dt</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.links</span> <span class="selector-tag">dl</span> <span class="selector-tag">dd</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 5. footer 模块制作 - end */</span></span><br></pre></td></tr></table></figure>




<hr>
<h2 id="6-定位"><a href="#6-定位" class="headerlink" title="6. 定位"></a>6. 定位</h2><h3 id="6-1-目标"><a href="#6-1-目标" class="headerlink" title="6.1 目标"></a>6.1 目标</h3><ul>
<li>能够说出 为什么要用定位</li>
<li>能够说出 定位的 4 种分类</li>
<li>能够说出 4 种定位各自的特点</li>
<li>能够说出 为什么常用子绝父相布局</li>
<li>能够写出 淘宝轮播图布局</li>
<li>能够说出 显示隐藏的 3 种方式以及区别</li>
</ul>
<h3 id="6-2-定位"><a href="#6-2-定位" class="headerlink" title="6.2 定位"></a>6.2 定位</h3><h4 id="6-2-1-为什么使用定位"><a href="#6-2-1-为什么使用定位" class="headerlink" title="6.2.1 为什么使用定位"></a>6.2.1 为什么使用定位</h4><blockquote>
<p>我们先来看一个效果，同时思考一下<strong>用标准流或浮动能否实现类似的效果</strong>？</p>
</blockquote>
<p><strong>场景1</strong>： 某个元素可以自由的在一个盒子内移动位置，并且压住其他盒子.</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/29-6.2.1-1.gif" alt="29"></p>
<p><strong>场景2</strong>：当我们滚动窗口的时候，盒子是固定屏幕某个位置的。</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/30-6.2.1-2.png" alt="30"></p>
<blockquote>
<p>结论<strong>：要实现以上效果，</strong>标准流 或 浮动都无法快速实现</p>
</blockquote>
<p>所以：</p>
<p>1.浮动可以让多个块级盒子一行没有缝隙排列显示， 经常用于横向排列盒子。</p>
<p>2.定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。</p>
<hr>
<h4 id="6-2-2-定位的组成"><a href="#6-2-2-定位的组成" class="headerlink" title="6.2.2 定位的组成"></a>6.2.2 定位的组成</h4><p><strong>定位</strong>：将盒子<strong>定</strong>在某一个位置，所以<strong>定位也是在摆放盒子， 按照定位的方式移动盒子</strong></p>
<p>定位也是用来布局的，它有两部分组成：</p>
<blockquote>
<p><strong>定位 = 定位模式 + 边偏移</strong>  </p>
</blockquote>
<p><strong>定位模式</strong> 用于指定一个元素在文档中的定位方式。<strong>边偏移</strong>则决定了该元素的最终位置。</p>
<hr>
<h5 id="1-边偏移（方位名词）"><a href="#1-边偏移（方位名词）" class="headerlink" title="1. 边偏移（方位名词）"></a>1. 边偏移（方位名词）</h5><p><strong>边偏移</strong> 就是定位的盒子移动到最终位置。有 top、bottom、left 和 right  4 个属性。</p>
<table>
<thead>
<tr>
<th>边偏移属性</th>
<th align="left">示例</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>top</code></td>
<td align="left"><code>top: 80px</code></td>
<td><strong>顶端</strong>偏移量，定义元素相对于其父元素<strong>上边线的距离</strong>。</td>
</tr>
<tr>
<td><code>bottom</code></td>
<td align="left"><code>bottom: 80px</code></td>
<td><strong>底部</strong>偏移量，定义元素相对于其父元素<strong>下边线的距离</strong>。</td>
</tr>
<tr>
<td><code>left</code></td>
<td align="left"><code>left: 80px</code></td>
<td><strong>左侧</strong>偏移量，定义元素相对于其父元素<strong>左边线的距离</strong>。</td>
</tr>
<tr>
<td><code>right</code></td>
<td align="left"><code>right: 80px</code></td>
<td><strong>右侧</strong>偏移量，定义元素相对于其父元素<strong>右边线的距离</strong></td>
</tr>
</tbody></table>
<p>定位的盒子有了边偏移才有价值。 一般情况下，凡是有定位地方必定有边偏移。</p>
<hr>
<h5 id="2-定位模式-position"><a href="#2-定位模式-position" class="headerlink" title="2. 定位模式 (position)"></a>2. 定位模式 (position)</h5><p>在 CSS 中，通过 <code>position</code> 属性定义元素的<strong>定位模式</strong>，语法如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">    <span class="attribute">position</span>: 属性值; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定位模式是有不同分类的，在不同情况下，我们用到不同的定位模式。</p>
<p>定位模式决定元素的定位方式 ，它通过 CSS 的 position 属性来设置，其值可以分为四个：</p>
<table>
<thead>
<tr>
<th>值</th>
<th align="center">语义</th>
</tr>
</thead>
<tbody><tr>
<td><code>static</code></td>
<td align="center"><strong>静态</strong>定位</td>
</tr>
<tr>
<td><code>relative</code></td>
<td align="center"><strong>相对</strong>定位</td>
</tr>
<tr>
<td><code>absolute</code></td>
<td align="center"><strong>绝对</strong>定位</td>
</tr>
<tr>
<td><code>fixed</code></td>
<td align="center"><strong>固定</strong>定位</td>
</tr>
</tbody></table>
<p> <img src="http://bucket-c70.test.upcdn.net/12/31-6.2.2.2.png" alt="31"></p>
<hr>
<h4 id="6-2-3-定位模式介绍"><a href="#6-2-3-定位模式介绍" class="headerlink" title="6.2.3 定位模式介绍"></a>6.2.3 定位模式介绍</h4><h5 id="1-静态定位-static-了解"><a href="#1-静态定位-static-了解" class="headerlink" title="1. 静态定位(static) - 了解"></a>1. 静态定位(static) - 了解</h5><ul>
<li><p><strong>静态定位</strong>是元素的<strong>默认</strong>定位方式，<strong>无定位的意思</strong>。它相当于 border 里面的none，静态定位static，不要定位的时候用。</p>
</li>
<li><p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">    <span class="attribute">position</span>: static; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>静态定位 按照标准流特性摆放位置，它没有边偏移。</p>
</li>
<li><p>静态定位在布局时我们几乎不用的 </p>
</li>
</ul>
<h5 id="2-相对定位-relative-重要"><a href="#2-相对定位-relative-重要" class="headerlink" title="2. 相对定位(relative) - 重要"></a>2. 相对定位(relative) - 重要</h5><ul>
<li><strong>相对定位</strong>是元素在移动位置的时候，是相对于它自己<strong>原来的位置</strong>来说的（自恋型）。</li>
<li>语法：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">    <span class="attribute">position</span>: relative; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>相对定位的特点：（务必记住）</p>
<ul>
<li><p>1.它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）。</p>
</li>
<li><p>2.<strong>原来</strong>在标准流的<strong>位置</strong>继续占有，后面的盒子仍然以标准流的方式对待它。</p>
<p>因此，<strong>相对定位并没有脱标</strong>。它最典型的应用是给绝对定位当爹的。。。</p>
</li>
</ul>
</li>
<li><p>效果图：</p>
</li>
</ul>
<p><img src="http://bucket-c70.test.upcdn.net/12/32-6.2.3-2.png" alt="32"></p>
<ol start="3">
<li><p>代码练习</p>
</li>
<li><p>先建立html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: deeppink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>把box1改为相对定位；</p>
<p>加 边偏移；上100px，左100px；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>相对原来的位置移动，原位置也继续占有；</p>
</li>
</ol>
<hr>
<h5 id="3-绝对定位-absolute（重要）"><a href="#3-绝对定位-absolute（重要）" class="headerlink" title="3. 绝对定位 absolute（重要）"></a>3. 绝对定位 absolute（重要）</h5><ul>
<li><p>绝对定位是元素在移动位置的时候，相对于祖先元素来说的。</p>
<p>语法：<code>选择器&#123; position: absolute;&#125;</code></p>
</li>
<li><p><strong>特点</strong>：</p>
<p>1.如果<strong>没有父级元素</strong>或者<strong>父级元素没有定位</strong>，则以浏览器为基准定位（Document 文档）。</p>
<blockquote>
<p>即使有父元素，父元素没定位还是以浏览器为基准定位</p>
</blockquote>
<p>2.如果祖先元素有定位（相对、绝对、固定定位），则以最近一级的有定位祖先元素为参考点移动位置。</p>
<p>3.绝对定位<strong>不再占有原先的位置</strong>。所以绝对定位是脱离标准流的。（脱标）</p>
</li>
<li><p><strong>代码练习</strong>：</p>
<ol>
<li>左上角：</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>右上角：</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>左下角于右下角同理；</p>
<ol start="3">
<li>父级元素没定位，还是浏览器为基准；</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>如果父元素有定位，就能以父元素为基准：</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>如果父元素没有，祖元素有，就以祖元素为基准；</li>
</ol>
</li>
</ul>
<hr>
<h5 id="4-子绝父相"><a href="#4-子绝父相" class="headerlink" title="4. 子绝父相"></a>4. 子绝父相</h5><h6 id="4-1-讲解"><a href="#4-1-讲解" class="headerlink" title="4.1 讲解"></a>4.1 讲解</h6><p>弄清楚这个口诀，就明白了绝对定位和相对定位的使用场景。</p>
<p>这个<strong>“子绝父相”</strong>太重要了，是我们学习定位的<strong>口诀</strong>，是定位中最常用的一种方式这句话的意思是：<strong>子级是绝对定位的话，父级要用相对定位。</strong></p>
<p>绝对定位的基准是看父元素的，所以要和父级搭配一起来使用。</p>
<p>①子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。</p>
<p>②父盒子需要加定位限制子盒子在父盒子内显示。</p>
<p>③父盒子布局时，需要占有位置，因此父元素只能是相对定位。</p>
<p>这就是子绝父相的由来，所以<strong>相对定位经常用来作为绝对定位的父级</strong>。</p>
<p>总结： <strong>因为父级需要占有位置，因此是相对定位， 子盒子不需要占有位置，则是绝对定位</strong></p>
<p>当然，子绝父相不是永远不变的，如果父元素不需要占有位置，<strong>子绝父绝</strong>也会遇到。</p>
<p><strong>疑问</strong>：为什么在布局时，<strong>子级元素</strong>使用<strong>绝对定位</strong>时，<strong>父级元素</strong>就要用<strong>相对定位</strong>呢？</p>
<p>观察下图，思考一下在布局时，<strong>左右两个方向的箭头图片</strong>以及<strong>父级盒子</strong>的定位方式。</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/33-6.2.3-4.png" alt="33"></p>
<p><strong>分析</strong>：</p>
<ol>
<li><strong>方向箭头</strong>叠加在其他图片上方，应该使用<strong>绝对定位</strong>，因为<strong>绝对定位完全脱标</strong>，完全不占位置。</li>
<li><strong>父级盒子</strong>应该使用<strong>相对定位</strong>，因为<strong>相对定位不脱标</strong>，后续盒子仍然以标准流的方式对待它。<ul>
<li>如果父级盒子也使用<strong>绝对定位</strong>，会完全脱标，那么下方的<strong>广告盒子</strong>会上移，这显然不是我们想要的。</li>
</ul>
</li>
</ol>
<p><strong>结论</strong>：<strong>父级要占有位置，子级要任意摆放</strong>，这就是<strong>子绝父相</strong>的由来。</p>
<hr>
<h6 id="4-2-案例"><a href="#4-2-案例" class="headerlink" title="4.2 案例"></a>4.2 案例</h6><p>学成在线-hot new模块添加；</p>
<ul>
<li><p>步骤</p>
<ol>
<li>在li中先添加图片，先不管位置；</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">em</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/index4/hot.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/index4/pic.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span>·1125人学习<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>问题：</li>
</ol>
<img src="http://bucket-c70.test.upcdn.net/12/34-6.2.3-4.2.png" style="zoom:80%;" />

<p>因为CSS：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="http://bucket-c70.test.upcdn.net/12/35.png" style="zoom:80%;" />



</li>
</ul>
<ol start="3">
<li><p>标准流，独占一行。使用绝对定位不占位置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">em</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但，因为没给父元素设置相对定位；而父以上的元素都没有定位；</p>
<p>hot跑到了页面右上角；</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/36.png" alt="36"></p>
</li>
<li><p>给父元素，li添加相对定位；</p>
</li>
<li><p>调整hot位置；<code>right: -4px;</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">em</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后复制到每个li中；over</p>
</li>
</ol>
<hr>
<h5 id="5-固定定位-fixed"><a href="#5-固定定位-fixed" class="headerlink" title="5. 固定定位(fixed)"></a>5. 固定定位(fixed)</h5><ul>
<li><p>浏览器页面滚动时元素的位置不会改变。</p>
</li>
<li><p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">    <span class="attribute">position</span>: fixed; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>固定定位的特点：（务必记住）：</p>
<p>1.以浏览器的可视窗口为参照点移动元素。</p>
<ul>
<li>跟父元素没有任何关系</li>
<li>不随滚动条滚动。</li>
</ul>
<p>2.固定定位<strong>不再占有原先的位置</strong>。</p>
</li>
<li><p>固定定位也是<strong>脱标</strong>的，其实<strong>固定定位也可以看做是一种特殊的绝对定位</strong>。（认死理型） </p>
<ul>
<li><strong>完全脱标</strong>—— 完全不占位置；</li>
<li>只认<strong>浏览器的可视窗口</strong> —— <code>浏览器可视窗口 + 边偏移属性</code> 来设置元素的位置；<ul>
<li>跟父元素没有任何关系；单独使用的</li>
<li>不随滚动条滚动。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h6 id="5-2-固定在盒子"><a href="#5-2-固定在盒子" class="headerlink" title="5.2 固定在盒子"></a>5.2 固定在盒子</h6><p>固定在版心，或者某盒子附近；</p>
<ol start="0">
<li><p>例如右侧位置。</p>
</li>
<li><p>让固定定位的盒子left：50%。走到浏览器可视区的一半的位置；</p>
</li>
<li><p>让固定定位的盒子 margin-left: 版心宽度的一半距离。  多走 版心宽度的一半位置</p>
<p>就可以让固定定位的盒子<strong>贴着版心右侧对齐</strong>了</p>
<img src="http://bucket-c70.test.upcdn.net/12/37.png" alt="37" style="zoom:50%;" />

<img src="http://bucket-c70.test.upcdn.net/12/38.png" alt="38" style="zoom:67%;" />

<p>案例效果：</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/39.png" alt="39"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.w</span> &#123;</span></span><br><span class="line">            width: 800px;</span><br><span class="line">            height: 1400px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.fixed</span> &#123;</span></span><br><span class="line">            position: fixed;</span><br><span class="line"><span class="css">            <span class="comment">/* 1. 走浏览器宽度的一半 */</span></span></span><br><span class="line">            left: 50%;</span><br><span class="line"><span class="css">            <span class="comment">/* 2. 利用margin 走版心盒子宽度的一半距离 */</span></span></span><br><span class="line">            margin-left: 405px;</span><br><span class="line">            width: 50px;</span><br><span class="line">            height: 150px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;w&quot;</span>&gt;</span>版心盒子 800像素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<h5 id="6-粘性定位-sticky"><a href="#6-粘性定位-sticky" class="headerlink" title="6. 粘性定位(sticky)"></a>6. 粘性定位(sticky)</h5><ul>
<li><a href="https://www.bilibili.com/video/BV14J4114768?p=232">视频讲解链接</a></li>
</ul>
<ul>
<li><p><strong>粘性定位</strong>可以被认为是相对定位和固定定位的混合。 Sticky  粘性的 </p>
</li>
<li><p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">    <span class="attribute">position</span>: sticky; </span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>粘性定位的特点：</p>
<p>1.以浏览器的可视窗口为参照点移动元素（固定定位特点）</p>
<p>2.粘性定位占有原先的位置（相对定位特点）</p>
<p>3.必须添加 top 、left、right、bottom <strong>其中一个</strong>才有效</p>
<p>跟页面滚动搭配使用。 兼容性较差，IE 不支持。</p>
</li>
</ul>
<h6 id="6-2-案例"><a href="#6-2-案例" class="headerlink" title="6.2 案例"></a>6.2 案例</h6><ol>
<li><p>建立基本html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            height: 3000px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.nav</span> &#123;</span></span><br><span class="line">            width: 800px;</span><br><span class="line">            height: 50px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span>我是导航栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置粘性定位</p>
<p><a href="https://fanyi.baidu.com/translate?aldtype=16047&query=sticky&keyfrom=baidu&smartresult=dict&lang=auto2zh#en/zh/sticky">sticky-百度翻译</a></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>必须添加 top 、left、right、bottom <strong>其中一个</strong>才有效</p>
<p>设置top：0；</p>
<ul>
<li><p>含义：</p>
<p>当top=0px的时候就成为粘性定位；</p>
<p>本身有margin-top的100px；</p>
</li>
</ul>
</li>
</ol>
<hr>
<h5 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h5><table>
<thead>
<tr>
<th><strong>定位模式</strong></th>
<th><strong>是否脱标</strong></th>
<th><strong>移动位置</strong></th>
<th><strong>是否常用</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static   静态定位</td>
<td>否</td>
<td>不能使用边偏移</td>
<td>很少</td>
</tr>
<tr>
<td><strong>relative 相对定位</strong></td>
<td><strong>否 (占有位置)</strong></td>
<td><strong>相对于自身位置移动</strong></td>
<td><strong>基本单独使用</strong></td>
</tr>
<tr>
<td><strong>absolute绝对定位</strong></td>
<td><strong>是（不占有位置）</strong></td>
<td><strong>带有定位的父级</strong></td>
<td><strong>要和定位父级元素搭配使用</strong></td>
</tr>
<tr>
<td><strong>fixed 固定定位</strong></td>
<td><strong>是（不占有位置）</strong></td>
<td><strong>浏览器可视区</strong></td>
<td><strong>单独使用，不需要父级</strong></td>
</tr>
<tr>
<td>sticky 粘性定位</td>
<td>否   (占有位置)</td>
<td>浏览器可视区</td>
<td>当前阶段少(其实不少)</td>
</tr>
</tbody></table>
<ul>
<li><p>一定记住 相对定位、固定定位、绝对定位 两个大的特点： 1. 是否占有位置（脱标否） 2. 以谁为基准点移动位置。</p>
</li>
<li><p>学习定位重点学会子绝父相。</p>
</li>
<li><p>注意：</p>
</li>
</ul>
<ol>
<li><strong>边偏移</strong>需要和<strong>定位模式</strong>联合使用，<strong>单独使用无效</strong>；</li>
<li><code>top</code> 和 <code>bottom</code> 不要同时使用；</li>
<li><code>left</code> 和 <code>right</code> 不要同时使用。</li>
</ol>
<hr>
<h4 id="6-2-4-堆叠顺序（z-index）"><a href="#6-2-4-堆叠顺序（z-index）" class="headerlink" title="6.2.4 堆叠顺序（z-index）"></a>6.2.4 堆叠顺序（z-index）</h4><ul>
<li><p>在使用<strong>定位</strong>布局时，可能会<strong>出现盒子重叠的情况</strong>。此时，可以使用 <strong>z-index</strong> 来控制盒子的前后次序 (z轴)</p>
</li>
<li><p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p><code>z-index</code> 的特性如下：</p>
<ol>
<li><strong>属性值</strong>：<strong>正整数</strong>、<strong>负整数</strong>或 <strong>0</strong>，默认值是 0，数值越大，盒子越靠上；    </li>
<li>如果<strong>属性值相同</strong>，则按照书写顺序，<strong>后来居上</strong>；</li>
<li>数字后面<strong>不能加单位</strong>。</li>
</ol>
<p><strong>注意</strong>：<code>z-index</code> 只能应用于<strong>相对定位</strong>、<strong>绝对定位</strong>和<strong>固定定位</strong>的元素，其他<strong>标准流</strong>、<strong>浮动</strong>和<strong>静态定位</strong>无效。</p>
</li>
<li><p>应用 <code>z-index</code> 层叠等级属性可以<strong>调整盒子的堆叠顺序</strong>。如下图所示：</p>
</li>
</ul>
<p><img src="http://bucket-c70.test.upcdn.net/12/40-6.2.4-1.png" alt="40"></p>
<h5 id="2-实验"><a href="#2-实验" class="headerlink" title="2. 实验"></a>2. 实验</h5><p>1.建立基本html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box a1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box a2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box a3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.给css</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.a1</span> &#123;</span></span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.a2</span> &#123;</span></span><br><span class="line">            background-color: green;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.a3</span> &#123;</span></span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box a1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box a2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box a3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.此时是正常的排列；</p>
<img src="http://bucket-c70.test.upcdn.net/12/41.png" style="zoom:50%;" />

<p>4.给.box添加觉得定位；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>特点：后来居上；蓝色在最上面；</p>
<p>5.谁想最上面，就把z-index设置成最大；<del>默认是0</del>；</p>
<p>6.默认不是0；默认是auto；而auto；</p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">auto</td>
<td align="left">默认。堆叠顺序与父元素相等。</td>
</tr>
<tr>
<td align="left"><em>number</em></td>
<td align="left">设置元素的堆叠顺序。</td>
</tr>
<tr>
<td align="left">inherit</td>
<td align="left">规定应该从父元素继承 z-index 属性的值。</td>
</tr>
</tbody></table>
<p>….全都没有写z-index，那z-index是多少？</p>
<p>在谷歌浏览器F12看看，看能看到不；</p>
<p>看不到，我也不知道默认是多少….</p>
<hr>
<h4 id="6-2-5-定位的拓展"><a href="#6-2-5-定位的拓展" class="headerlink" title="6.2.5 定位的拓展"></a>6.2.5 定位的拓展</h4><h5 id="1-绝对定位居中"><a href="#1-绝对定位居中" class="headerlink" title="1. 绝对定位居中"></a>1. 绝对定位居中</h5><p><strong>注意</strong>：加了<strong>绝对定位/固定定位的盒子</strong>不能通过设置 <code>margin: auto</code> 设置<strong>水平居中</strong>。</p>
<p>但是可以通过以下计算方法实现水平和垂直居中，可以按照下图的方法：</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/42.png" alt=""></p>
<ol>
<li><code>left: 50%;</code>：让<strong>盒子的左侧</strong>移动到<strong>父级元素的水平中心位置</strong>；</li>
<li><code>margin-left: -100px;</code>：让盒子<strong>向左</strong>移动<strong>自身宽度的一半</strong>。</li>
</ol>
<h6 id="1-2-盒子水平垂直居中"><a href="#1-2-盒子水平垂直居中" class="headerlink" title="1.2 盒子水平垂直居中"></a><strong>1.2 盒子水平垂直居中</strong></h6><ol start="3">
<li><code>top:50%</code></li>
<li>margin-top: -50px; (高度的一半)</li>
</ol>
<h6 id="1-3-方法二-transform"><a href="#1-3-方法二-transform" class="headerlink" title="1.3.方法二-transform"></a>1.3.方法二-transform</h6><p>1.方法二-transform: translate(-50%, -50%);</p>
<ul>
<li>这种方法应该需要有绝对定位存在。</li>
</ul>
<p>绝对定位，这个方法不需要子元素固定宽高，所以不再需要size类了，HTML代码如下</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;wp&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span>&gt;<span class="number">123123</span>&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>修复绝对定位的问题，还可以使用css3新增的transform，transform的translate属性也可以设置百分比，其是相对于自身的宽和高，所以可以讲translate设置为-50%，就可以做到居中了，代码如下</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 此处引用上面的公共代码 */</span></span><br><span class="line"><span class="comment">/* 此处引用上面的公共代码 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定位代码 */</span></span><br><span class="line"><span class="selector-class">.wp</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方法兼容性依赖translate2d的兼容性</p>
<p>出至：<a href="https://www.jianshu.com/p/907f99004c3e">https://www.jianshu.com/p/907f99004c3e</a></p>
<p>里面还有9种方法；</p>
<p>笔记：<a href="../../css/4-css_private_note/#6-水平垂直居中">4-css_个人笔记-6. 水平垂直居中</a>；有更多解析；</p>
<blockquote>
<p>这里的跳转：../4-css_private_note/#6-水平垂直居中</p>
<p>没有效果；</p>
<p>使用：../../css/4-css_private_note/#6-水平垂直居中</p>
<p>才有效；</p>
</blockquote>
<p>当初：</p>
<ol>
<li><p>先../4-css_private_note/#6-水平垂直居中</p>
<p>结果跳转的是：</p>
<p><a href="http://localhost:4000/html-css/4-css_private_note/#6-水平垂直居中">http://localhost:4000/html-css/4-css_private_note/#6-水平垂直居中</a></p>
<p>而正确链接是：</p>
<p><a href="http://localhost:4000/css/4-css_private_note/#6-水平垂直居中">http://localhost:4000/css/4-css_private_note/#6-水平垂直居中</a></p>
</li>
<li><p>这让我发现了分类；</p>
<p>因为12.md本身分类于：html_css (url里面变成了html-css)</p>
</li>
<li><p>原来上次1-typescript_introduction-10.项目：下棋游戏；是蒙对的</p>
<p>他们正好都是分类于typescript</p>
</li>
<li><p>怎么办了？既然是在css下面，那么这样行吗？</p>
<p>../css/4-css_private_note/#6-水平垂直居中</p>
<p>跳转的是：</p>
<p><a href="http://localhost:4000/html-css/css/4-css_private_note/#6-水平垂直居中">http://localhost:4000/html-css/css/4-css_private_note/#6-水平垂直居中</a></p>
<p>还是在html-css下面，仍然是错误链接；</p>
</li>
<li><p>怎么办？</p>
<p>没有概念，没有原理；只有实验；</p>
<p>我突发奇想，百度相对连接；</p>
<p><a href="https://blog.csdn.net/LIU_YANZHAO/article/details/78895096?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param">https://blog.csdn.net/LIU_YANZHAO/article/details/78895096?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param</a></p>
<p>找到../../</p>
<p>../../ 代表上两级目录</p>
<p>实验链接：</p>
<p>../../4-css_private_note/#6-水平垂直居中</p>
<p>链接是：<a href="http://localhost:4000/4-css_private_note/#6-水平垂直居中">http://localhost:4000/4-css_private_note/#6-水平垂直居中</a></p>
<p>没有css；</p>
</li>
<li><p>我一度迷茫；</p>
<p>没有发现，这次摆脱了html-css/的束缚；</p>
<p>过了一会，我发现了；</p>
</li>
<li><p>于是，我加上css/实验；</p>
<p>实验链接为：../../css/4-css_private_note/#6-水平垂直居中</p>
<p>成功；</p>
<p>跳转到了：</p>
<p><a href="http://localhost:4000/css/4-css_private_note/#6-水平垂直居中">http://localhost:4000/css/4-css_private_note/#6-水平垂直居中</a></p>
<hr>
</li>
</ol>
<br>

<h6 id="1-4-案例-学成在线的user"><a href="#1-4-案例-学成在线的user" class="headerlink" title="1.4 案例-学成在线的user"></a>1.4 案例-学成在线的user</h6><p>步骤：</p>
<ol>
<li><p>找到位置；.user</p>
</li>
<li><p>查看代码；</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/index4/user-h.png&quot;</span> &gt;</span></span><br><span class="line">    li-youlail</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>建立新的css，控制img；</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.user</span> <span class="selector-tag">img</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>使用1.3方法二；</p>
<p>4.1 在.user设置相对定位；</p>
<p>4.2  在.user img {}使用：</p>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line"><span class="selector-tag">top</span>: 50%;</span><br><span class="line"><span class="selector-tag">left</span>: 50%;</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(<span class="selector-tag">-50</span>%, <span class="selector-tag">-50</span>%);</span><br></pre></td></tr></table></figure>
<ol start="5">
<li><p>出错；</p>
<p>5.1 图片与字符串重叠；</p>
</li>
<li><p>寻找原因；查看6.2.3.3</p>
<p>找到：绝对定位不会保留位置。</p>
</li>
</ol>
<p><strong>7. 这个时候，就要理解代码，灵活使用；</strong></p>
<p>​    7.1 相对定位不会脱标</p>
<p>​    7.2 相对定位不需要父元素有定位属性支持。删除.user的定位；</p>
<p>​    7.3 设置.user img{}</p>
<ol start="8">
<li><p>成功；代码如下：</p>
<p>8.1 .user没变化；</p>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.user</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666666</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.user</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://bucket-c70.test.upcdn.net/12/44-6.2.5-1.4.png" alt="44"></p>
<br />

<hr>
<h5 id="2-定位与display的关系"><a href="#2-定位与display的关系" class="headerlink" title="2. 定位与display的关系"></a>2. 定位与display的关系</h5><p>绝对定位和固定定位也和浮动类似。</p>
<p>1.行内元素添加绝对或者固定定位，可以直接设置高度和宽度。</p>
<p>2.块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小。</p>
<p>2.1 原本块级元素的宽度是父元素的100%，给了相应的定位，宽度只有内容大小了</p>
<p>前面我们讲过， display 是 显示模式， 可以改变显示模式有以下方式:</p>
<ul>
<li>可以用inline-block  转换为行内块</li>
<li>可以用浮动 float 默认转换为行内块（类似，并不完全一样，因为浮动是脱标的）</li>
<li>绝对定位和固定定位也和浮动类似， 默认转换的特性 转换为行内块。</li>
</ul>
<p>所以说， 一个行内的盒子，如果加了<strong>浮动</strong>、<strong>固定定位</strong>和<strong>绝对定位</strong>，不用转换，就可以给这个盒子直接设置宽度和高度等。</p>
<hr>
<h5 id="3-脱标的盒子不会触发外边距塌陷"><a href="#3-脱标的盒子不会触发外边距塌陷" class="headerlink" title="3. 脱标的盒子不会触发外边距塌陷"></a>3. 脱标的盒子不会触发外边距塌陷</h5><p>浮动元素、<strong>绝对定位(固定定位）</strong>的元素都不会触发外边距合并的问题。 （我们以前是用padding border overflow解决的）</p>
<p>也就是说，我们给盒子改为了浮动或者定位，就不会有垂直<strong>外边距合并的问题</strong>了。</p>
<hr>
<h5 id="4-绝对定位（固定定位）会完全压住盒子"><a href="#4-绝对定位（固定定位）会完全压住盒子" class="headerlink" title="4. 绝对定位（固定定位）会完全压住盒子"></a>4. 绝对定位（固定定位）会完全压住盒子</h5><ul>
<li><p>浮动元素不同，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（图片）</p>
<p>1.案例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>阁下何不同风起，扶摇直上九万里<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.说明：</p>
<p>2.1 box因浮动压住了盒子；</p>
<p>2.2 但没有压住盒子中的内容，把内容挤了出来；</p>
<img src="http://bucket-c70.test.upcdn.net/12/45.png" alt="45" style="zoom:80%;" />



</li>
</ul>
<ul>
<li><p>但是绝对定位（固定定位） 会压住下面标准流所有的内容。</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/46.png" alt="46"></p>
</li>
</ul>
<ul>
<li><p>为什么浮动不会压住文字？</p>
<p>浮动之所以不会压住文字，因为浮动产生的目的最初是为了做文字环绕效果的。 文字会围绕浮动元素</p>
</li>
</ul>
<hr>
<h3 id="6-3-综合案例"><a href="#6-3-综合案例" class="headerlink" title="6.3 综合案例"></a>6.3 综合案例</h3><h4 id="6-3-1-预览图"><a href="#6-3-1-预览图" class="headerlink" title="6.3.1 预览图"></a>6.3.1 预览图</h4><img src="http://bucket-c70.test.upcdn.net/12/47.png" alt="47" style="zoom:67%;" />

<h4 id="6-3-2-布局分析"><a href="#6-3-2-布局分析" class="headerlink" title="6.3.2 布局分析"></a>6.3.2 布局分析</h4><p><img src="http://bucket-c70.test.upcdn.net/12/48.png" alt="48"></p>
<h4 id="6-3-3-思路"><a href="#6-3-3-思路" class="headerlink" title="6.3.3 思路"></a>6.3.3 思路</h4><ol>
<li><p>大盒子我们类名为：  tb-promo      淘宝广告</p>
</li>
<li><p>里面先放一张图片。</p>
</li>
<li><p>左右两个按钮 用链接就好了。   左箭头 prev    右箭头  next   </p>
<p>​    左按钮样式（border-radius：左上，右上，右下，左下），</p>
<p>​    右按钮定位，提取左右按钮共同的样式代码（并集选择器）</p>
</li>
<li><p>底侧小圆点ul 继续做。 类名为 promo-nav     </p>
<p>​    中间长方形椭圆 ul的定位（水平居中，离底部15px）  </p>
<p>​    长方形需要五个小圆点，ul无序列表，li浮动，椭圆中小圆点的样式</p>
</li>
</ol>
<h4 id="6-3-4-知识点："><a href="#6-3-4-知识点：" class="headerlink" title="6.3.4 知识点："></a>6.3.4 知识点：</h4><h5 id="1-圆角矩形设置4个角"><a href="#1-圆角矩形设置4个角" class="headerlink" title="1. 圆角矩形设置4个角"></a>1. 圆角矩形设置4个角</h5><p>圆角矩形可以为4个角分别设置圆度， 但是是有顺序的</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">border-<span class="built_in">top</span>-<span class="built_in">left</span>-radius:<span class="number">20</span>px;</span><br><span class="line">border-<span class="built_in">top</span>-<span class="built_in">right</span>-radius:<span class="number">20</span>px;</span><br><span class="line">border-<span class="built_in">bottom</span>-<span class="built_in">right</span>-radius:<span class="number">20</span>px;</span><br><span class="line">border-<span class="built_in">bottom</span>-<span class="built_in">left</span>-radius:<span class="number">20</span>px;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果4个角，数值相同</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border-radius</span>: 15<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>里面数值不同，我们也可以按照简写的形式，具体格式如下:</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border-radius</span>: 左上角 右上角  右下角  左下角;</span><br></pre></td></tr></table></figure>

<p>还是遵循的顺时针。</p>
<h5 id="2-圆角边框"><a href="#2-圆角边框" class="headerlink" title="2. 圆角边框"></a>2. 圆角边框</h5><p>在 CSS3 中，新增了圆角边框样式，这样我们的盒子就可以变圆角了。</p>
<p>border-radius 属性用于设置元素的外边框圆角。</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/50.png" alt="50"></p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border-radius</span><span class="selector-pseudo">:length</span>;    </span><br></pre></td></tr></table></figure>

<ul>
<li>参数值可以为数值或百分比的形式</li>
<li>如果是正方形，想要设置为一个圆，把数值修改为高度或者宽度的一半即可，或者直接写为 50%</li>
<li>该属性是一个简写属性，可以跟四个值，分别代表左上角、右上角、右下角、左下角</li>
<li>分开写：border-top-left-radius、border-top-right-radius、border-bottom-right-radius 和border-bottom-left-radius</li>
<li>兼容性 ie9+ 浏览器支持, 但是不会影响页面布局,可以放心使用</li>
<li>如果是正方形；border-radius: 50%是圆形</li>
</ul>
<h4 id="6-3-5-步骤"><a href="#6-3-5-步骤" class="headerlink" title="6.3.5 步骤"></a>6.3.5 步骤</h4><p>0.word</p>
<p><a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/promo">promo</a></p>
<p>1.建立html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.tb-promo</span> &#123;</span></span><br><span class="line">            width: 520px;</span><br><span class="line">            height: 280px;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tb-promo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.加入图片</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tb-promo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/2-tb/tb.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.2 设置css，即使图片大一点也没问题（不知道小一点能放大吗？）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tb-promo</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">520px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">280px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.左箭头</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tb-promo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/2-tb/tb.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 左侧箭头 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;prev&quot;</span>&gt;</span> <span class="symbol">&amp;lt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.1 宽度20px；高度30px；</p>
<p>3.2 绝对定位；垂直居中；</p>
<blockquote>
<p>刚开始绝对定位时，没有边偏移是没有效果的；</p>
</blockquote>
<p>3.3 父元素相对定位；</p>
<p>3.4 背景颜色 rgba(0,0,0, 0.3);</p>
<p>3.5 内容水平垂直居中，颜色#fff；</p>
<p>3.6 右上角，右下角，圆弧</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.prev</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">15px</span> <span class="number">15px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.右箭头；</p>
<p>4.1 复制左箭头，修改得；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.next</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.两者代码重复多，且代码本身多，合并</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.prev</span>, <span class="selector-class">.next</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.prev</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">15px</span> <span class="number">15px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.next</span> &#123;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.1 小注意：</p>
<ul>
<li><p>如果一个盒子定位时，既有left，也有right。</p>
<ul>
<li>则默认left；</li>
</ul>
</li>
<li><p>既有top和bottom</p>
<ul>
<li>则top；</li>
</ul>
</li>
<li><p>类之间有逗号，不然注入不了css；</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/51.png" alt="51"></p>
<p>网页那边：</p>
<img src="http://bucket-c70.test.upcdn.net/12/52.png" style="zoom:80%;" />



</li>
</ul>
<p>6.下面的小圆点；</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/49-6.3.5.6.png" alt="49"></p>
<p>6.1 创建外形.promo-nav，用ul li 做；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;promo-nav&quot;</span>&gt;</span></span><br><span class="line">            </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>6.2 css：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.promo-nav</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>, <span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">7px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6.3 小圆点；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;promo-nav&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;selected&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.promo-nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果是正方形；border-radius: 50%是圆形</p>
<hr>
<h4 id="6-3-6-代码"><a href="#6-3-6-代码" class="headerlink" title="6.3.6 代码"></a>6.3.6 代码</h4><p>1.html+css：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        a &#123;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        &#125;</span><br><span class="line">        li &#123;</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.tb-promo</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 520px;</span><br><span class="line">            height: 280px;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.tb-promo</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            width: 520px;</span><br><span class="line">            height: 280px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.prev</span>, <span class="selector-class">.next</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line"><span class="css">            <span class="comment">/* 绝对定位垂直居中 */</span></span></span><br><span class="line">            top: 50%;</span><br><span class="line">            transform: translateY(-50%);</span><br><span class="line"><span class="css">            <span class="comment">/* 加了绝对定位或固定定位的盒子可以直接设置高度宽度 */</span></span></span><br><span class="line">            width: 20px;</span><br><span class="line">            height: 30px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-tag">rgba</span>(0,0,0, 0<span class="selector-class">.3</span>);</span></span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 30px;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.prev</span> &#123;</span></span><br><span class="line">            border-radius: 0 15px 15px 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.next</span> &#123;</span></span><br><span class="line">            right: 0;</span><br><span class="line">            border-radius: 15px 0 0 15px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.promo-nav</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            bottom: 10px;</span><br><span class="line">            left: 50%;</span><br><span class="line">            transform: translateX(-50%);</span><br><span class="line">            width: 70px;</span><br><span class="line">            height: 13px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-tag">rgba</span>(255,255,255, 0<span class="selector-class">.3</span>);</span></span><br><span class="line">            border-radius: 7px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.promo-nav</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            width: 8px;</span><br><span class="line">            height: 8px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            border-radius: 50%;</span><br><span class="line">            margin: 3px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/* 不要忘记权重问题 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.promo-nav</span> <span class="selector-class">.selected</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#ff5000</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tb-promo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/2-tb/tb.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 左侧箭头 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;prev&quot;</span>&gt;</span> <span class="symbol">&amp;lt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 右箭头 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;next&quot;</span>&gt;</span> <span class="symbol">&amp;gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 小圆点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;promo-nav&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;selected&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<hr>
<h3 id="6-4-网页布局总结"><a href="#6-4-网页布局总结" class="headerlink" title="6.4 网页布局总结"></a>6.4 网页布局总结</h3><p>通过盒子模型，清楚知道大部分html标签是一个盒子。</p>
<p>通过CSS浮动、定位 可以让每个盒子排列成为网页。</p>
<p>一个完整的网页，是标准流、浮动、定位一起完成布局的，每个都有自己的专门用法。</p>
<h4 id="6-4-1-标准流"><a href="#6-4-1-标准流" class="headerlink" title="6.4.1 标准流"></a>6.4.1 标准流</h4><p>可以让盒子上下排列或者左右排列，<strong>垂直的块级盒子显示就用标准流布局</strong>。</p>
<h4 id="6-4-2-浮动"><a href="#6-4-2-浮动" class="headerlink" title="6.4.2 浮动"></a>6.4.2 浮动</h4><p>可以让多个块级元素一行显示或者左右对齐盒子，<strong>多个块级盒子水平显示就用浮动布局</strong></p>
<h4 id="6-4-3-定位"><a href="#6-4-3-定位" class="headerlink" title="6.4.3 定位"></a>6.4.3 定位</h4><p>定位最大的特点是有层叠的概念，就是可以让多个盒子前后叠压来显示。<strong>如果元素自由在某个盒子内移动就用定位布局。</strong></p>
<hr>
<h2 id="7-元素的显示与隐藏"><a href="#7-元素的显示与隐藏" class="headerlink" title="7. 元素的显示与隐藏"></a>7. 元素的显示与隐藏</h2><ul>
<li><p>目的（本质）</p>
<p>​    让一个元素在页面中消失或者显示出来</p>
</li>
<li><p>场景</p>
<p>​    类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现</p>
</li>
</ul>
<h3 id="7-1-display-显示（重点）"><a href="#7-1-display-显示（重点）" class="headerlink" title="7.1 display 显示（重点）"></a>7.1 display 显示（重点）</h3><ul>
<li><p>display 设置或检索对象是否及如何显示。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: none 隐藏对象</span><br><span class="line"></span><br><span class="line">display：block 除了转换为块级元素之外，同时还有显示元素的意思。</span><br></pre></td></tr></table></figure>
</li>
<li><p>特点： display 隐藏元素后，<strong>不再占</strong>有原来的位置。</p>
</li>
<li><p>后面应用及其广泛，搭配 JS 可以做很多的网页特效。实际开发场景：</p>
<blockquote>
<p>配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛</p>
</blockquote>
</li>
</ul>
<img src="http://bucket-c70.test.upcdn.net/12/53.png" alt="53" style="zoom:80%;" />

<h3 id="7-2-visibility-可见性-（了解）"><a href="#7-2-visibility-可见性-（了解）" class="headerlink" title="7.2. visibility 可见性 （了解）"></a>7.2. visibility 可见性 （了解）</h3><blockquote>
<p><a href="https://www.bilibili.com/video/BV14J4114768?p=246">https://www.bilibili.com/video/BV14J4114768?p=246</a></p>
</blockquote>
<ul>
<li><p>visibility[^1] 属性用于指定一个元素应可见还是隐藏。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">visibility</span>：visible ; 　元素可视</span><br><span class="line"></span><br><span class="line"><span class="attribute">visibility</span>：hidden; 　  元素隐藏</span><br></pre></td></tr></table></figure>
</li>
<li><p>特点：<strong>visibility 隐藏元素后，继续占有原来的位置</strong>。（停职留薪）</p>
</li>
</ul>
<ul>
<li><p>如果隐藏元素想要原来位置， 就用 visibility：hidden</p>
</li>
<li><p>如果隐藏元素不想要原来位置， 就用 display：none  (用处更多 重点）</p>
</li>
</ul>
<img src="http://bucket-c70.test.upcdn.net/12/54-visibility.png" alt="54" style="zoom:80%;" />

<h3 id="7-3-overflow-溢出（重点）"><a href="#7-3-overflow-溢出（重点）" class="headerlink" title="7.3. overflow 溢出（重点）"></a>7.3. overflow 溢出（重点）</h3><ul>
<li>overflow 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度） 时，会发生什么。</li>
</ul>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>visible</strong></td>
<td>不剪切内容也不添加滚动条</td>
</tr>
<tr>
<td><strong>hidden</strong></td>
<td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td>
</tr>
<tr>
<td><strong>scroll</strong></td>
<td>不管超出内容否，总是显示滚动条</td>
</tr>
<tr>
<td><strong>auto</strong></td>
<td>超出自动显示滚动条，不超出不显示滚动条</td>
</tr>
</tbody></table>
<ul>
<li>一般情况下，我们都不想让溢出的内容显示出来，因为溢出的部分会影响布局。</li>
<li>但是如果有定位的盒子， 请慎用overflow:hidden  因为它会隐藏多余的部分。</li>
</ul>
<p><img src="http://bucket-c70.test.upcdn.net/12/55-overflow.png" alt="55"></p>
<ul>
<li>实际开发场景：</li>
</ul>
<ol>
<li>清除浮动</li>
<li>隐藏超出内容，隐藏掉,  不允许内容超过父盒子。</li>
</ol>
<hr>
<h3 id="7-4-案例"><a href="#7-4-案例" class="headerlink" title="7.4 案例"></a>7.4 案例</h3><h4 id="7-4-1-效果图"><a href="#7-4-1-效果图" class="headerlink" title="7.4.1 效果图"></a>7.4.1 效果图</h4><h4 id="7-4-2-案例目标"><a href="#7-4-2-案例目标" class="headerlink" title="7.4.2 案例目标"></a>7.4.2 案例目标</h4><ol>
<li>练习元素的显示与隐藏</li>
<li>练习元素的定位</li>
</ol>
<h4 id="7-4-3-核心原理"><a href="#7-4-3-核心原理" class="headerlink" title="7.4.3 核心原理"></a>7.4.3 核心原理</h4><p>原先半透明的黑色遮罩看不见， 鼠标经过 大盒子，就显示出来。</p>
<p>遮罩的盒子不占有位置， 就需要用绝对定位 和 display  配合使用。</p>
<h4 id="7-4-4-步骤"><a href="#7-4-4-步骤" class="headerlink" title="7.4.4 步骤"></a>7.4.4 步骤</h4><p>1.创建盒子，建立基本html</p>
<p>类名：tudou</p>
<p>宽444px，高320px，背景颜色pink用来观测盒子；</p>
<p>盒子居中：上下100px，左右auto；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>隐藏练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.tudou</span> &#123;</span></span><br><span class="line">            width: 444px;</span><br><span class="line">            height: 320px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tudou&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/img.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.图片大了，设置imgcss，width:100%,height:100%;</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tudou</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.建立纱幕的盒子</p>
<p>3.1 类名：mask；<br>    mask<br>    英 [mɑːsk]   美 [mæsk]<br>    n.面具;面罩;假面具;护肤膜;面膜<br>    v.掩饰;掩藏</p>
<p>3.2 高度宽度100%；背景颜色：rgba(0,0,0, 0.3);</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.mask</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>4.盒子是标准流，把图片挤了下去</p>
<p>4.1 绝对定位，边偏移top：0，left：0</p>
<p>4.2 父元素，相对定位；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tudou</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">444px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">320px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mask</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.添加纱幕中央播放按钮图片</p>
<p>5.1这里我们在background里面添加；</p>
<p>background: url;</p>
<p>5.2 图片重复，堆满了盒子；</p>
<p>no-repeat;</p>
<p>5.3 垂直居中；</p>
<p>在这里面，一个center就可以垂直居中，也是在bg里面写的好处；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.mask</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, <span class="number">0.3</span>) <span class="built_in">url</span>(./<span class="number">2</span>-img/arr.png) no-repeat center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6.隐藏mask；</p>
<p>6.1 隐藏且不保留位置，选在display；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.mask</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>7.显示mask，鼠标放在盒子上面时，显示；</p>
<p>7.1 在.mask:hover;是无效的；可能是因为盒子不保留；</p>
<p>7.2 在tudou：hover；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tudou</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.mask</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-4-5-代码"><a href="#7-4-5-代码" class="headerlink" title="7.4.5 代码"></a>7.4.5 代码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>隐藏练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.tudou</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 444px;</span><br><span class="line">            height: 320px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.tudou</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.mask</span> &#123;</span></span><br><span class="line">            display: none;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">            background: rgba(0,0,0, 0.3) url(./2-img/arr.png) no-repeat center;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.tudou</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.mask</span> &#123;</span></span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tudou&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./2-img/img.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br />

<hr>
<h2 id="8-css高级技巧"><a href="#8-css高级技巧" class="headerlink" title="8. css高级技巧"></a>8. css高级技巧</h2><h3 id="8-1-精灵图"><a href="#8-1-精灵图" class="headerlink" title="8.1 精灵图"></a>8.1 精灵图</h3><h4 id="8-1-1-为什么需要精灵图"><a href="#8-1-1-为什么需要精灵图" class="headerlink" title="8.1.1 为什么需要精灵图"></a>8.1.1 为什么需要精灵图</h4><img src="http://bucket-c70.test.upcdn.net/12/56.png" alt="56" style="zoom:60%;" />

<p>一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接收和发送请求图片，造成服务器请求压力过大，这将大大降低页面的加载速度。</p>
<p><strong>为什么使用精灵图（==目的==）：</strong></p>
<p>​    <strong>为了有效地减少服务器接收和发送请求的次数</strong>，<strong>提高</strong>页面的<strong>加载速度</strong>，出现了 <strong>CSS 精灵技术</strong>（也称 CSS Sprites、CSS 雪碧）。<a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/sprites">sprites</a></p>
<p><strong>核心原理</strong>：</p>
<p>​    将网页中的一些小背景图像整合到一张大图中 ，这样服务器只需要一次请求就可以了。</p>
<p><strong>精灵图举例</strong>:</p>
<img src="http://bucket-c70.test.upcdn.net/12/57.png" alt="57" style="zoom:67%;" />



<h4 id="8-1-2-精灵图-sprites-的使用"><a href="#8-1-2-精灵图-sprites-的使用" class="headerlink" title="8.1.2 精灵图(sprites)的使用"></a>8.1.2 精灵图(sprites)的使用</h4><p>使用精灵图核心：</p>
<ol>
<li>精灵技术主要针对于背景图片使用。就是把多个小背景图片整合到一张大图片中。</li>
<li>这个大图片也称为 sprites  精灵图  或者 雪碧图</li>
<li>移动背景图片位置， 此时可以使用 background-position 。<ul>
<li>这里不好笔记；<a href="https://www.bilibili.com/video/BV14J4114768?p=252">视频解析</a>,讲解bg-p的使用原理；</li>
</ul>
</li>
<li>移动的距离就是这个目标图片的 x 和 y 坐标。注意网页中的坐标有所不同</li>
<li>因为一般情况下都是往上往左移动，所以数值是负值。</li>
<li>使用精灵图的时候需要精确测量，每个小背景图片的大小和位置。</li>
</ol>
<p>使用精灵图核心总结：</p>
<ol>
<li>精灵图主要<strong>针对于小的背景图片</strong>使用。</li>
<li>主要借助于背景位置来实现—<strong>background-position</strong> 。</li>
<li>一般情况下精灵图都是<strong>负值</strong>。（千万注意网页中的坐标： x轴右边走是正值，左边走是负值， y轴往下是正，网上是负。）</li>
</ol>
<h5 id="2-实验-1"><a href="#2-实验-1" class="headerlink" title="2. 实验"></a>2. 实验</h5><p>1.用王者荣耀的精灵图；</p>
<p>1.1 建立基本html；</p>
<p>.box1与.box2；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.把要使用的精灵图用ps打开</p>
<p>2.1 使用切图工具，选择你要使用的小图；</p>
<p>2.2 双击你切图的图片，也许要在切图那里右键选择 切片选择工具</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/58.png" alt="58"></p>
<p>然后能看到X与Y轴的数据，一般取反；</p>
<p>能看到宽度与高度，让你设置盒子的大小；</p>
<p>3.我们就试试取这个切片的图片</p>
<p>3.1 设置宽56px，高57px</p>
<p>3.2 用background一条龙服务；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">56px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">57px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(./<span class="number">2</span>-img/sprites.png) no-repeat -<span class="number">184px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.3 可以回顾一下background有哪些属性；</p>
<p>语法：</p>
<p>background:bg-color bg-image position/bg-size bg-repeat bg-origin bg-clip bg-attachment initial|inherit;</p>
<p>3.4 应该没有顺序要求；</p>
<p>3.5 3.2处的<code>background: url(./2-img/sprites.png) no-repeat -184px 0;</code></p>
<p>按语法来是：background: bg-image bg-repeat bg-position;</p>
<p>4.代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>精灵图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line">            width: 56px;</span><br><span class="line">            height: 57px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            background: url(./2-img/sprites.png) no-repeat -184px 0;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<hr>
<h4 id="8-1-3-案例"><a href="#8-1-3-案例" class="headerlink" title="8.1.3 案例"></a>8.1.3 案例</h4><h5 id="1-效果"><a href="#1-效果" class="headerlink" title="1. 效果"></a>1. 效果</h5><p><img src="http://bucket-c70.test.upcdn.net/12/59.png" alt="59"></p>
<h5 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2. 步骤"></a>2. 步骤</h5><p>1.使用能在一排的span，就不用浮动了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1.1因为span是行内元素，没有宽度高度，所以转换成行内块元素；</p>
<p>2.给span设置独立的类名，用PS切片获取x，y，w，h数据</p>
<p>例如C</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.c</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">110px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(./<span class="number">2</span>-img/abcd.jpg) no-repeat -<span class="number">241px</span> -<span class="number">9px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.其他字同理；</p>
<hr>
<h3 id="8-2-字体图标"><a href="#8-2-字体图标" class="headerlink" title="8.2 字体图标"></a>8.2 字体图标</h3><h4 id="8-2-1-字体图标的产生"><a href="#8-2-1-字体图标的产生" class="headerlink" title="8.2.1 字体图标的产生"></a>8.2.1 字体图标的产生</h4><p>字体图标使用场景：  主要用于显示网页中通用、常用的一些小图标。</p>
<p>精灵图是有诸多优点的，但是缺点很明显。</p>
<p>1.图片文件还是比较大的。</p>
<p>2.图片本身放大和缩小会失真。</p>
<p>3.一旦图片制作完毕想要更换非常复杂。</p>
<p>此时，有一种技术的出现很好的解决了以上问题，就是<strong>字体图标 iconfont</strong>。</p>
<p><strong>字体图标</strong>可以为前端工程师提供一种方便高效的图标使用方式，<strong>展示的是图标，本质属于字体</strong>。</p>
<h4 id="8-2-2-字体图标的优点"><a href="#8-2-2-字体图标的优点" class="headerlink" title="8.2.2 字体图标的优点"></a>8.2.2 字体图标的优点</h4><p><strong>轻量级</strong>：一个图标字体要比一系列的图像要小。一旦字体加载了，图标就会马上渲染出来，减少了服务器请求</p>
<ul>
<li>灵活性：本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果、旋转等</li>
<li>兼容性：几乎支持所有的浏览器，请放心使用</li>
<li>==注意==： 字体图标不能替代精灵技术，只是对工作中图标部分技术的提升和优化。</li>
</ul>
<p><strong>总结：</strong></p>
<p>1.如果遇到一些结构和样式比较简单的小图标，就用字体图标。</p>
<p>2.如果遇到一些结构和样式复杂一点的小图片，就用精灵图。</p>
<h4 id="8-2-3-使用步骤"><a href="#8-2-3-使用步骤" class="headerlink" title="8.2.3 使用步骤"></a>8.2.3 使用步骤</h4><p>字体图标是一些网页常见的小图标，我们直接网上下载即可。 因此使用可以分为：</p>
<p>1.字体图标的下载 </p>
<p>2.字体图标的引入 （引入到我们html页面中）</p>
<p>3.字体图标的追加 （以后添加新的小图标）</p>
<h4 id="8-2-4-字体图标的下载"><a href="#8-2-4-字体图标的下载" class="headerlink" title="8.2.4 字体图标的下载"></a>8.2.4 字体图标的下载</h4><p><strong>推荐下载网站：</strong></p>
<ul>
<li><strong>icomoon</strong> <strong>字库</strong>  <a href="http://icomoon.io">http://icomoon.io</a>    推荐指数  <strong>★★★★★</strong></li>
</ul>
<p>IcoMoon 成立于 2011 年，推出了第一个自定义图标字体生成器，它允许用户选择所需要的图标，使它们成一字型。该字库内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。</p>
<p>使用介绍，不好笔记，看视频-<a href="https://www.bilibili.com/video/BV14J4114768?p=257">链接</a></p>
<ul>
<li><strong>阿里</strong> <strong>iconfont</strong> <strong>字库</strong>   <a href="http://www.iconfont.cn/">http://www.iconfont.cn/</a>   推荐指数   <strong>★★★★★</strong> </li>
</ul>
<p>这个是阿里妈妈 M2UX 的一个 iconfont 字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用 AI制作图标上传生成。 重点是，免费！</p>
<ul>
<li><strong>font Awesome 中文网</strong> <a href="http://www.fontawesome.com.cn/">http://www.fontawesome.com.cn/</a> 这是以前 忧郁的弟弟的时候用过的。可惜没有笔记；</li>
</ul>
<hr>
<h4 id="8-2-5-字体图标的使用"><a href="#8-2-5-字体图标的使用" class="headerlink" title="8.2.5 字体图标的使用"></a>8.2.5 字体图标的使用</h4><h5 id="1-放入文件夹"><a href="#1-放入文件夹" class="headerlink" title="1. 放入文件夹"></a>1. 放入文件夹</h5><p><strong>下载完毕之后，注意原先的文件不要删，后面会用</strong>。</p>
<ol>
<li><p>把下载包里面的 <strong>fonts</strong> 文件夹放入页面根目录下</p>
</li>
<li><p>为什么fonts里面有很多文件？</p>
<p>这里用以前下载过的 font Awesome举例；</p>
<p>不过icomoon字库也一样；</p>
<p>2.1 因为：兼容</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/60.png" alt="60"></p>
</li>
</ol>
<ul>
<li><strong>字体文件格式</strong></li>
</ul>
<p>不同浏览器所支持的字体格式是不一样的，字体图标之所以兼容，就是因为包含了主流浏览器支持的字体文件。</p>
<p>1).TureType(  <strong>.ttf</strong>  )格式.ttf字体是Windows和Mac的最常见的字体，支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome4+、Safari3+、Opera10+、iOS Mobile、Safari4.2+；</p>
<p>2).Web Open Font Format( <strong>.woff</strong> )格式woff字体，支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome6+、Safari3.6+、Opera11.1+；</p>
<p>3).Embedded Open Type( <strong>.eot</strong> )格式.eot字体是IE专用字体，支持这种字体的浏览器有IE4+；</p>
<p>4).SVG(  .<strong>svg</strong>  )格式.svg字体是基于SVG字体渲染的一种格式，支持这种字体的浏览器有Chrome4+、Safari3.1+、Opera10.0+、iOS Mobile Safari3.2+；</p>
<p>其中还有一些没有介绍的：.woff2 , .otf , .eot ;可以自行百度；</p>
<p>这里我理解了为什么有这么多文件，就没去了解了；</p>
<hr>
<h5 id="2-css引入"><a href="#2-css引入" class="headerlink" title="2. css引入"></a>2. css引入</h5><h6 id="2-1-icmoon"><a href="#2-1-icmoon" class="headerlink" title="2.1 icmoon"></a>2.1 icmoon</h6><p>在 CSS 样式中全局声明字体： 简单理解把这些字体文件通过css引入到我们页面中。</p>
<p>一定注意字体文件路径的问题；</p>
<blockquote>
<p>直接在html里申明</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;icomoon&#x27;</span>;</span><br><span class="line">  <span class="attribute">src</span>:  <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.eot?7kkyc2&#x27;</span>);</span><br><span class="line">  <span class="attribute">src</span>:  <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.eot?7kkyc2#iefix&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.ttf?7kkyc2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.woff?7kkyc2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.svg?7kkyc2#icomoon&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是icomoon的做法；</p>
<p>2.在demo.html里面，可以看到我们选择的图标；</p>
<p>在里面选择要使用的图标的小框；</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/61.png" alt="61"></p>
<p>在要使用的地方复制；例如<code>&lt;span&gt;&lt;/span&gt;</code></p>
<p>3.给标签定义字体</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">     <span class="attribute">font-family</span>: <span class="string">&quot;icomoon&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>注意：务必保证 这个字体和上面@font-face里面的font-family字体保持一致 </p>
<p><a href="https://www.bilibili.com/video/BV14J4114768?p=258">视频讲解</a></p>
<p>4.字体图标的追加</p>
<p>如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标到原来的字体文件中。</p>
<p>把压缩包里面的 <strong>selection.json</strong> 从新上传，然后选中自己想要新的图标，从新下载压缩包，并替换原来的文件即可。</p>
<img src="http://bucket-c70.test.upcdn.net/12/62.png" alt="62" style="zoom:80%;" />

<p>5.字体图标加载的原理</p>
<img src="http://bucket-c70.test.upcdn.net/12/63.gif" alt="63" style="zoom:80%;" />

<br />

<hr>
<h6 id="2-2-font-Awesome"><a href="#2-2-font-Awesome" class="headerlink" title="2.2 font-Awesome"></a>2.2 font-Awesome</h6><ol>
<li><p>复制<code>font-awesome</code>目录到你的项目中</p>
</li>
<li><p>在<code>&lt;head&gt;</code>处加载font-awesome.min.css如下。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attribute">href</span>=<span class="string">&quot;path/to/font-awesome/css/font-awesome.min.css&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><a href="http://www.fontawesome.com.cn/get-started/">http://www.fontawesome.com.cn/get-started/</a></p>
<p>例如使用 fa-camera-retro</p>
<p>你可以通过设置CSS前缀<code>fa</code>和图标的具体名称，来把Font Awesome 图标放在任意位置。Font Awesome 被设计为用于行内元素（我们喜欢用更简短的<code>&lt;i&gt;</code>标签，它的语义更加精准）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-camera-retro&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> fa-camera-retro</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果您修改了图标容器的字体大小，图标大小会随之改变。同样也适用于颜色，阴影，阴影等其它任何CSS支持的效果上。</p>
</blockquote>
<p><a href="http://www.fontawesome.com.cn/examples/">http://www.fontawesome.com.cn/examples/</a></p>
<p>3.查看css文件，是否使用到了font目录下</p>
<p>能在里面看到 <strong>font申明</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;FontAwesome&#x27;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;../fonts/fontawesome-webfont.eot?v=4.7.0&#x27;</span>);</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;../fonts/fontawesome-webfont.eot?#iefix&amp;v=4.7.0&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;../fonts/fontawesome-webfont.woff2?v=4.7.0&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff2&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;../fonts/fontawesome-webfont.woff?v=4.7.0&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;../fonts/fontawesome-webfont.ttf?v=4.7.0&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;../fonts/fontawesome-webfont.svg?v=4.7.0#fontawesomeregular&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.找图标好像要去官网找？</p>
<p>5.实验一下；</p>
<p>就用这个<code>&lt;i class=&quot;fa fa-camera-retro&quot;&gt;&lt;/i&gt; fa-camera-retro</code></p>
<p>有效；</p>
<p>6.查看了css</p>
<p>fa与fa-camera-retro都没有font-family: ‘FontAwesome’</p>
<p>这一点雨icmoon的使用不同，那边要设置family;</p>
<hr>
<h3 id="8-3-CSS三角型"><a href="#8-3-CSS三角型" class="headerlink" title="8.3 CSS三角型"></a>8.3 CSS三角型</h3><h4 id="8-3-1-步骤"><a href="#8-3-1-步骤" class="headerlink" title="8.3.1 步骤"></a>8.3.1 步骤</h4><p>1.建立.box1</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.配置box1的css</p>
<p>高度宽度0，四个边框10px solid 颜色各异；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">50px</span> solid pink;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">50px</span> solid skyblue;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid greenyellow;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">50px</span> solid orange;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.如图：</p>
<img src="http://bucket-c70.test.upcdn.net/12/64.png" alt="64" style="zoom:80%;" />

<p><strong>4.如果只要最上面的三角形，把右下左透明；</strong></p>
<p>4.1 新建.box2，复制box1的css</p>
<p>4.2 border的透明是transparent;</p>
<blockquote>
<p>是border-color的属性；<a href="https://www.w3school.com.cn/cssref/pr_border-color.asp">w3school-文档</a>；<a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/transparent">transparent-翻译</a></p>
</blockquote>
<p>5.不过给右下左分别加入transparent，代码多；</p>
<p>5.1 可以先border: 10px solid transparent，然后上单独border-top-color设置颜色；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top-color</span>: pink;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6.如果要兼容性 低版本的浏览器；可以加上：font-size: 0;  line-height: 0;</p>
<hr>
<h4 id="8-3-2-京东三角"><a href="#8-3-2-京东三角" class="headerlink" title="8.3.2 京东三角"></a>8.3.2 京东三角</h4><p><img src="http://bucket-c70.test.upcdn.net/12/65.png" alt="65"></p>
<p>步骤:</p>
<p>1.原理：用定位；</p>
<p>1.1 建立.jd的盒子；</p>
<p><code>&lt;div class=&quot;jd&quot;&gt;&lt;/div&gt;</code></p>
<p>1.2 配置css</p>
<p>宽120px，高度200px，背景颜色pink，用于观测；居中；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jd</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.在jd里面span</p>
<p><code>&lt;div class=&quot;jd&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;</code></p>
<p>2.1 设置css；</p>
<p>绝对定位；父元素相对定位；</p>
<p>w0，h0, ont-size: 0;  line-height: 0;</p>
<p>2.2 边偏移，right 10px；自己调整；</p>
<p>top有规律，是2倍border；因为border有上下，所以其实有10px高；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jd</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br />

<h4 id="8-3-3-三角强化-案例"><a href="#8-3-3-三角强化-案例" class="headerlink" title="8.3.3 三角强化-案例"></a>8.3.3 三角强化-案例</h4><blockquote>
<p><a href="https://www.bilibili.com/video/BV14J4114768?p=271">https://www.bilibili.com/video/BV14J4114768?p=271</a></p>
</blockquote>
<p>1.盒子一般只有矩形和圆形</p>
<p>2.预览：</p>
<ul>
<li><p><img src="http://bucket-c70.test.upcdn.net/8/80.png" alt="80"></p>
</li>
<li><p><img src="http://bucket-c70.test.upcdn.net/8/79.png" alt="79"></p>
</li>
</ul>
<p>3.把蓝色的三角做成白色，就可以了</p>
<ul>
<li>不过怎么才能做出这种三角？</li>
</ul>
<h5 id="1-做直角三角形"><a href="#1-做直角三角形" class="headerlink" title="1. 做直角三角形"></a>1. 做直角三角形</h5><p>4.把border-bottom为0px时，会这样：</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/81.png" alt="81"></p>
<ul>
<li><p>从中间以下都没了…</p>
</li>
<li><p>代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">50px</span> solid pink;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">50px</span> solid skyblue;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">0</span> solid greenyellow;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">50px</span> solid orange;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>4.1 ==为什么?==我一直以为border-bottom只管下面绿色的。怎么一半以下都没了？</p>
<img src="http://bucket-c70.test.upcdn.net/12/64.png" alt="64" style="zoom:80%;" />

<ul>
<li><p>用F12，点来点去实验；</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/82.png" alt="82"></p>
</li>
<li><p>发现上下左右，各为一方，互相重叠着，应该是重合。</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/83.png" alt="83"></p>
<ul>
<li>1.上可以是，左上，右上。</li>
<li>2.右，可以是上右和下右。</li>
<li>3.下，可以是，左下+右下。</li>
<li>4.而左，可以是，上左加下左；</li>
</ul>
</li>
<li><p>但颜色不是；2021-4-2 11:36:43</p>
</li>
</ul>
<p>4.2 如果不好理解，自己实验一下，即可</p>
<p>5.这样，在下面没了后，设置与left为0px，top为100px+透明，</p>
<ul>
<li><pre><code class="css"><span class="selector-class">.box1</span> &#123;
    <span class="attribute">width</span>: <span class="number">0</span>;
    <span class="attribute">height</span>: <span class="number">0</span>;
    <span class="attribute">border-top</span>: <span class="number">100px</span> solid transparent;
    <span class="attribute">border-right</span>: <span class="number">50px</span> solid skyblue ;
    <span class="attribute">border-bottom</span>: <span class="number">0px</span> solid greenyellow;
    <span class="attribute">border-left</span>: <span class="number">0px</span> solid orange;
    <span class="attribute">margin</span>: <span class="number">100px</span> auto;
&#125;
&lt;!--hexoPostRenderEscape:&lt;figure class="highlight markdown"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="bullet"&gt;+&lt;/span&gt; ![&lt;span class="string"&gt;84&lt;/span&gt;](&lt;span class="link"&gt;http://bucket-c70.test.upcdn.net/12/84.png&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="bullet"&gt;+&lt;/span&gt; 优化写法：&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;span class="code"&gt;```css&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="code"&gt;  .box1 &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="code"&gt;      width: 0;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="code"&gt;      height: 0;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="code"&gt;      border-color: transparent skyblue transparent transparent;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="code"&gt;      border-style: solid;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="code"&gt;      border-width: 100px 50px 0 0;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="code"&gt;      margin: 100px auto;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="code"&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="code"&gt;  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;
</code></pre>
</li>
</ul>
<hr>
<h5 id="2-与矩形拼接"><a href="#2-与矩形拼接" class="headerlink" title="2. 与矩形拼接"></a>2. 与矩形拼接</h5><p>1.先写矩形盒子</p>
<p>2.然后里面两个span，写价格</p>
<p>2.1 .miaosha文本居中，.price垂直居中。<a href="https://fanyi.baidu.com/translate?aldtype=16047&query=price&keyfrom=baidu&smartresult=dict&lang=auto2zh#en/zh/price">price</a></p>
<p>2.2 文字加粗，颜色白色</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>三角形<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.price</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 160px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.miaosha</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            width: 90px;</span><br><span class="line">            height: 100%;</span><br><span class="line">            background-color: red;</span><br><span class="line">              font-weight: 700;</span><br><span class="line"><span class="css">              <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;miaosha&quot;</span>&gt;</span>¥1688<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>¥5688<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>因为文字环绕，所以只给.miaosha浮动，也能实现效果，不需要全浮动</li>
</ul>
<p>3.写三角</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/85.png" alt="85"></p>
<p>3.1 不写边偏移的时候是紧贴着文字</p>
<p>3.2 三角改为白色；</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/86.png" alt="86"></p>
<ul>
<li>左边与边框有点缝隙，是浏览器问题，已经换浏览器实验过；2020-9-11 23:43:54</li>
</ul>
<p>3.3 右边的太近了，给.miaosha一个右外边距8px；</p>
<p>3.4 给5688灰色，删除线，减小大小；</p>
<p>4.代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>三角形<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.price</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 160px;</span><br><span class="line">            height: 26px;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            line-height: 26px;</span><br><span class="line">            </span><br><span class="line">        &#125;     </span><br><span class="line"><span class="css">        <span class="selector-class">.miaosha</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            float: left;</span><br><span class="line">            width: 50%;</span><br><span class="line">            height: 100%;</span><br><span class="line">            background-color: red;</span><br><span class="line">            font-weight: 700;</span><br><span class="line"><span class="css">              <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            text-align: center;</span><br><span class="line"><span class="css">            <span class="comment">/* 2-3.3 */</span></span></span><br><span class="line">            margin-right: 8px;  </span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/* 2-3 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.miaosha</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line"><span class="css">            <span class="comment">/* 2-3.1 */</span></span></span><br><span class="line">            top: 0;</span><br><span class="line">            right: 0;</span><br><span class="line">            width: 0;</span><br><span class="line">            height: 0;</span><br><span class="line"><span class="css">            <span class="comment">/* 2-3.2 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-color</span>: <span class="selector-tag">transparent</span> <span class="selector-id">#fff</span> <span class="selector-tag">transparent</span> <span class="selector-tag">transparent</span>;</span></span><br><span class="line">            border-style: solid;</span><br><span class="line">            border-width: 26px 12px 0 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/* 2-3.4 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.origin</span> &#123;</span></span><br><span class="line">            font-size: 13px;</span><br><span class="line">            color: gray;</span><br><span class="line">            text-decoration: line-through;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;miaosha&quot;</span>&gt;</span>¥1688</span><br><span class="line">            <span class="comment">&lt;!-- 2-3 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;origin&quot;</span>&gt;</span>¥5688<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li><p><a href="https://fanyi.baidu.com/translate?aldtype=16047&query=price&keyfrom=baidu&smartresult=dict&lang=auto2zh#en/zh/through">through</a></p>
<p>读音难理解，多听听音标</p>
</li>
</ul>
<hr>
<h4 id="4-边框三角形解析"><a href="#4-边框三角形解析" class="headerlink" title="4. 边框三角形解析"></a>4. 边框三角形解析</h4><p>1.边框不是边上的四边形，而是一个由里面的四边形的对角，发散出去的一个梯形</p>
<p><img src="../../img/12/2.png" alt="2"></p>
<p>2.所以才有可能做出三角行；</p>
<ul>
<li><p>如果把盒子的长宽设置为0</p>
</li>
<li><p>那么每个边框中间的矩形就不在了；</p>
</li>
</ul>
<p><img src="../../img/12/3.gif" alt="2"></p>
<hr>
<h3 id="8-4-CSS用户界面样式"><a href="#8-4-CSS用户界面样式" class="headerlink" title="8.4 CSS用户界面样式"></a>8.4 CSS用户界面样式</h3><p><strong>什么是界面样式</strong></p>
<p>所谓的界面样式，就是更改一些用户操作样式，以便提高更好的用户体验。</p>
<ul>
<li>更改用户的鼠标样式 </li>
<li>表单轮廓</li>
<li>防止表单域拖拽</li>
</ul>
<h4 id="8-4-1-鼠标样式-cursor"><a href="#8-4-1-鼠标样式-cursor" class="headerlink" title="8.4.1 鼠标样式 cursor"></a>8.4.1 鼠标样式 cursor</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>default</td>
<td>小白 默认</td>
</tr>
<tr>
<td>pointer</td>
<td>小手</td>
</tr>
<tr>
<td>move</td>
<td>移动</td>
</tr>
<tr>
<td>text</td>
<td>文本</td>
</tr>
<tr>
<td>not-allowed</td>
<td>禁止</td>
</tr>
</tbody></table>
<br />

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>鼠标样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#f1f5f7</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;cursor: default&quot;</span>;&gt;</span>默认样式<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;cursor: pointer&quot;</span>;&gt;</span>小手样式<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;cursor: move&quot;</span>;&gt;</span>移动样式<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;cursor: text&quot;</span>;&gt;</span>文本样式<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;cursor: not-allowed&quot;</span>;&gt;</span>禁止样式<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="8-4-2-轮廓线-outline"><a href="#8-4-2-轮廓线-outline" class="headerlink" title="8.4.2 轮廓线 outline"></a>8.4.2 轮廓线 outline</h4><p>给表单添加 outline: 0;   或者  outline: none; 样式之后，就可以去掉默认的蓝色边框。</p>
<p>不过去掉后，我反而觉得没那么好看；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">     <span class="attribute">outline</span>: none; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<br />

<hr>
<h4 id="8-4-3-防止拖拽文本域-resize"><a href="#8-4-3-防止拖拽文本域-resize" class="headerlink" title="8.4.3 防止拖拽文本域 resize"></a>8.4.3 防止拖拽文本域 resize</h4><ol start="0">
<li>单词：<a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/resize">resize</a></li>
</ol>
<p><img src="http://bucket-c70.test.upcdn.net/12/66.png" alt="66"></p>
<p>1.文本域<code>&lt;textarea&gt;</code>右下角可以拖大拖小。</p>
<p>2.resize: none;可以设置不能拖</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span>&#123; </span><br><span class="line">     <span class="attribute">resize</span>: none;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>3.注意</p>
<ul>
<li><p>如果<code>&lt;textarea&gt;</code>分行写，生成的页面会有区域</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/67.png" alt="67"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;textarea name=&quot;&quot; id=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot;&gt;</span><br><span class="line">&lt;/textarea&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>要没区域，只能写一行；</p>
</li>
</ul>
<hr>
<h3 id="8-5-vertical-align-属性应用"><a href="#8-5-vertical-align-属性应用" class="headerlink" title="8.5 vertical-align 属性应用"></a>8.5 vertical-align 属性应用</h3><p>0.word</p>
<ul>
<li><p><a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/vertical">vertical</a></p>
<p>vertical  英 [ˈvɜːtɪkl]   美 [ˈvɜːrtɪkl]  </p>
<p>adj.竖的;垂直的;直立的;纵向的<br>n.垂直线;垂直位置</p>
</li>
</ul>
<p>记住要设置行高</p>
<p>记住要设置行高</p>
<p>记住要设置行高；2021-3-26 11:51:04</p>
<ul>
<li><p>2021-4-9 16:08:25，结论更新，不是设置了行高就有了效果</p>
<p>而是行高本身带的效果与vertiacal无关</p>
</li>
</ul>
<p>1.概述</p>
<p>CSS 的 <strong>vertical-align</strong> 属性使用场景： 经常用于设置图片或者表单(行内块元素）和文字垂直对齐。</p>
<p>官方解释： 用于设置一个元素的<strong>垂直对齐方式</strong>，但是它只针对于行内元素或者行内块元素有效。</p>
<p>语法：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">vertical-align : baseline | top | middle | bottom </span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">baseline</td>
<td align="center">默认。元素放置在父元素的基线上</td>
</tr>
<tr>
<td align="center">top</td>
<td align="center">把元素的顶端与行中最高元素的顶端对齐</td>
</tr>
<tr>
<td align="center">middle</td>
<td align="center">把此元素放置在父元素的中部</td>
</tr>
<tr>
<td align="center">bottom</td>
<td align="center">把元素的顶端与行中最低的元素的顶端对齐</td>
</tr>
</tbody></table>
<p><img src="http://bucket-c70.test.upcdn.net/12/69.png" alt="69"></p>
<br />

<hr>
<p>2.默认基线</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/70.png" alt="70"></p>
<p>3.设置成底线</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br />

<p><img src="http://bucket-c70.test.upcdn.net/12/71.png" alt="71"></p>
<p>3.图片与文字垂直居中：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="2-记住"><a href="#2-记住" class="headerlink" title="2. 记住"></a>2. 记住</h4><p>1.它只针对于行内元素或者行内块元素有效。</p>
<p>2.如果不是，则要转换</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/72.png" alt="72"></p>
<ul>
<li><p>不过，<code>&lt;i&gt;</code>是行内元素，应该不需要转换</p>
<p>我实验过，在同一行(行内元素)，且高度宽度无效(不是行内块元素)。是行内元素；</p>
</li>
</ul>
<p>3.即使是文本域，也可以让它与文字居中，文本域是行内块元素</p>
<hr>
<h4 id="3-解决图片底部默认空白缝隙问题"><a href="#3-解决图片底部默认空白缝隙问题" class="headerlink" title="3. 解决图片底部默认空白缝隙问题"></a>3. 解决图片底部默认空白缝隙问题</h4><p>1.图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐。</p>
<p>2.主要解决方法有两种：</p>
<ul>
<li><p>1.<strong>给图片</strong>添加 <strong>vertical-align:middle | top| bottom</strong> 等。 （提倡使用的）</p>
<p>2.把图片转换为块级元素  <strong>display: block</strong>; </p>
</li>
</ul>
<p>2.1. 因为这是<code>vertical-align</code>属性默认问题</p>
<ul>
<li>只有行内元素，与行内块元素才有的</li>
<li>所以<code>display:block</code>有效</li>
</ul>
<hr>
<h3 id="8-6-溢出的文字省略号显示"><a href="#8-6-溢出的文字省略号显示" class="headerlink" title="8.6 溢出的文字省略号显示"></a>8.6 溢出的文字省略号显示</h3><h4 id="8-6-1-单行本溢出显示省略号"><a href="#8-6-1-单行本溢出显示省略号" class="headerlink" title="8.6.1 单行本溢出显示省略号"></a>8.6.1 单行本溢出显示省略号</h4><p>1.例如：</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/73.png" alt="73"></p>
<p>2.三步：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*1. 先强制一行内显示文本*/</span></span><br><span class="line"> <span class="selector-tag">white-space</span>: <span class="selector-tag">nowrap</span>;  （ 默认 <span class="selector-tag">normal</span> 自动换行）</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*2. 超出的部分隐藏*/</span></span><br><span class="line"> <span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*3. 文字用省略号替代超出的部分*/</span></span><br><span class="line"> <span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</span><br></pre></td></tr></table></figure>

<p>2.1 资料</p>
<ul>
<li><a href="https://www.runoob.com/cssref/pr-text-white-space.html">white-space教程</a></li>
<li><a href="https://www.runoob.com/cssref/css3-pr-text-overflow.html">text-overflow</a></li>
</ul>
<p>2.2 word</p>
<ul>
<li>hidden</li>
<li>ellipsis[^2]</li>
</ul>
<p>3.案例：</p>
<ul>
<li><p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>鼠标样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#f1f5f7</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        div &#123;</span><br><span class="line">            width: 150px;</span><br><span class="line">            height: 80px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            white-space: nowrap;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            text-overflow: ellipsis;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        啥有不说，说啥，玩不玩LOL咕咕。什么时候玩</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<hr>
<h4 id="8-6-2-多行文本溢出显示省略号"><a href="#8-6-2-多行文本溢出显示省略号" class="headerlink" title="8.6.2 多行文本溢出显示省略号"></a>8.6.2 多行文本溢出显示省略号</h4><p>1.多行文本溢出显示省略号，<strong>有较大兼容性问题</strong>，适合于webKit浏览器或移动端（移动端大部分是webkit内核）</p>
<p>2.步骤：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*1. 超出的部分隐藏 */</span></span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2. 文字用省略号替代超出的部分 */</span></span><br><span class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3. 弹性伸缩盒子模型显示 */</span></span><br><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">-webkit-box</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4. 限制在一个块元素显示的文本的行数 */</span></span><br><span class="line"><span class="selector-tag">-webkit-line-clamp</span>: 2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 5. 设置或检索伸缩盒对象的子元素的排列方式 */</span></span><br><span class="line"><span class="selector-tag">-webkit-box-orient</span>: <span class="selector-tag">vertical</span>;</span><br></pre></td></tr></table></figure>

<p>2.1 资料：</p>
<ul>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/-webkit-line-clamp">-webkit-line-clamp</a></p>
<blockquote>
<p><strong><code>-webkit-line-clamp</code></strong> CSS 属性 可以把 <a href="https://developer.mozilla.org/en-US/docs/Glossary/块容器">块容器</a> 中的内容限制为指定的行数.</p>
<p>它只有在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display"><code>display</code></a> 属性设置成 <code>-webkit-box</code> 或者 <code>-webkit-inline-box</code> 并且 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/-webkit-box-orient"><code>-webkit-box-orient</code></a> 属性设置成 <code>vertical</code>时才有效果</p>
<p>在大部分情况下,也需要设置 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow"><code>overflow</code></a> 属性为 <code>hidden</code>, 否则,里面的内容不会被裁减,并且在内容显示为指定行数后还会显示省略号(ellipsis ).</p>
</blockquote>
</li>
<li><p>display: -webkit-box；百度不到</p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-orient">box-orient-MDN文档</a>；<a href="https://www.runoob.com/cssref/css3-pr-box-orient.html">菜鸟教程</a></p>
<ul>
<li><p><strong>非标准</strong><br>该特性是非标准的，请尽量不要在生产环境中使用它！</p>
<p>这是原始的css弹性布局草案的一个属性，已经被最新的标准替代。 查看 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes">flexbox</a> 了解现行标准。</p>
</li>
</ul>
</li>
</ul>
<p>2.2 word:</p>
<ul>
<li><a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/clamp">clamp</a></li>
<li><a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/orient">orient</a></li>
<li><a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/vertical">vertical</a></li>
</ul>
<p>3.问题</p>
<p>3.1 如果行数有3行，那么第三行，依旧显示：</p>
<ul>
<li><p><img src="http://bucket-c70.test.upcdn.net/12/74.png" alt="74"></p>
</li>
<li><p>修改高度，来隐藏第三行，视频里面是这么说的；</p>
</li>
<li><p>腾讯网也是这样的；</p>
</li>
</ul>
<p>4.pink老师建议：</p>
<ul>
<li><strong>更推荐让后台人员来做这个效果，因为后台人员可以设置显示多少个字，操作更简单。</strong></li>
<li>严格控制高度</li>
</ul>
<hr>
<h2 id="9-常见布局技巧"><a href="#9-常见布局技巧" class="headerlink" title="9. 常见布局技巧"></a>9. 常见布局技巧</h2><p><strong>巧妙利用一个技术更快更好的布局：</strong></p>
<ol>
<li>margin负值的运用</li>
<li>文字围绕浮动元素</li>
<li>行内块的巧妙运用</li>
<li>CSS三角强化</li>
</ol>
<h3 id="9-1-mragin负值运用"><a href="#9-1-mragin负值运用" class="headerlink" title="9.1 mragin负值运用"></a>9.1 mragin负值运用</h3><p>1.有边框的盒子，浮动的时候，边框会重叠。</p>
<p>2.而以前的那种，清除左边的边框麻烦。</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/75.png" alt="75"></p>
<p>3.让每个盒子margin 往左侧移动 -1px 正好压住相邻盒子边框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>鼠标样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        ul li &#123;</span><br><span class="line">            float: left;</span><br><span class="line">            list-style: none;</span><br><span class="line">            width: 150px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            border: 1px solid skyblue;</span><br><span class="line">            margin-left: -1px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>第三个盒子的左边，没有压住第二个盒子的右边，而其他是好的。有点奇怪</p>
</li>
<li><p>换个浏览器试试；2020-9-9 01:08:02</p>
<p>换个浏览器就没问题了；</p>
</li>
</ul>
<h4 id="9-1-2-鼠标放入后边框变色"><a href="#9-1-2-鼠标放入后边框变色" class="headerlink" title="9.1.2 鼠标放入后边框变色"></a>9.1.2 鼠标放入后边框变色</h4><p>1.直接:hover,是没有效果的</p>
<ul>
<li>中间边框的右边，是下一个盒子的左边。</li>
</ul>
<p>2.实验：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.如何是好？</p>
<ul>
<li><p>加相对定位</p>
<p>相对定位会压住其他盒子，从而产生效果</p>
</li>
<li><p>但是，如果都有相对定位怎么办？</p>
</li>
</ul>
<p>3.1 这个时候，用z-index，提高层级；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://www.runoob.com/cssref/pr-pos-z-index.html">z-index文档</a></li>
<li>默认值也许是0吧，没有准确的说；</li>
</ul>
<hr>
<h3 id="9-2-文字围绕浮动元素"><a href="#9-2-文字围绕浮动元素" class="headerlink" title="9.2 文字围绕浮动元素"></a>9.2 文字围绕浮动元素</h3><p>1.在一个盒子里面，输入文字。</p>
<p>2.盒子里面加一个img盒子，浮动</p>
<p>3.完毕</p>
<p>4.浮动自带文字环绕，所以不会让文字跑到浮动盒子下面</p>
<p>5.布局示意图：</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/76.png" alt="76"></p>
<hr>
<h3 id="9-3-行内块巧妙运用"><a href="#9-3-行内块巧妙运用" class="headerlink" title="9.3 行内块巧妙运用"></a>9.3 行内块巧妙运用</h3><p>1.假如像这样的模块，怎么做？</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/77.png" alt="77"></p>
<p>1.1 ul&gt;li</p>
<p>2.</p>
<p>3.步骤：</p>
<p>3.1 先建立一个盒子，装8个<code>&lt;a&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>鼠标样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.2 设置a的css</p>
<ul>
<li><p>行内块，高宽36，背景颜色#f7f7f7，border；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f7f7f7</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>内容水平居中，垂直居中，取消下划线，文本颜色改为#333；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f7f7f7</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>3.3 整个水平居中</p>
<ul>
<li><p>给box 设置text-align: center;</p>
</li>
<li><pre><code class="css"><span class="selector-class">.box</span> &#123;
    <span class="attribute">text-align</span>: center;
&#125;
&lt;!--hexoPostRenderEscape:&lt;figure class="highlight angelscript"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="number"&gt;3.4&lt;/span&gt; 建立上一页与，下一页的html&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;```html&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&amp;lt;div &lt;span class="keyword"&gt;class&lt;/span&gt;=&amp;quot;&lt;span class="symbol"&gt;box&lt;/span&gt;&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;        &amp;lt;&lt;span class="symbol"&gt;a&lt;/span&gt; &lt;span class="symbol"&gt;href&lt;/span&gt;=&amp;quot;#&amp;quot;&amp;gt;&amp;amp;&lt;span class="symbol"&gt;lt&lt;/span&gt;&amp;lt;/&lt;span class="symbol"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;        &amp;lt;&lt;span class="symbol"&gt;a&lt;/span&gt; &lt;span class="symbol"&gt;href&lt;/span&gt;=&amp;quot;#&amp;quot;&amp;gt;&lt;span class="symbol"&gt;1&lt;/span&gt;&amp;lt;/&lt;span class="symbol"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;        &amp;lt;&lt;span class="symbol"&gt;a&lt;/span&gt; &lt;span class="symbol"&gt;href&lt;/span&gt;=&amp;quot;#&amp;quot;&amp;gt;&lt;span class="symbol"&gt;2&lt;/span&gt;&amp;lt;/&lt;span class="symbol"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;        &amp;lt;&lt;span class="symbol"&gt;a&lt;/span&gt; &lt;span class="symbol"&gt;href&lt;/span&gt;=&amp;quot;#&amp;quot;&amp;gt;&lt;span class="symbol"&gt;3&lt;/span&gt;&amp;lt;/&lt;span class="symbol"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;        &amp;lt;&lt;span class="symbol"&gt;a&lt;/span&gt; &lt;span class="symbol"&gt;href&lt;/span&gt;=&amp;quot;#&amp;quot;&amp;gt;&lt;span class="symbol"&gt;4&lt;/span&gt;&amp;lt;/&lt;span class="symbol"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;        &amp;lt;&lt;span class="symbol"&gt;a&lt;/span&gt; &lt;span class="symbol"&gt;href&lt;/span&gt;=&amp;quot;#&amp;quot;&amp;gt;&lt;span class="symbol"&gt;5&lt;/span&gt;&amp;lt;/&lt;span class="symbol"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;        &amp;lt;&lt;span class="symbol"&gt;a&lt;/span&gt; &lt;span class="symbol"&gt;href&lt;/span&gt;=&amp;quot;#&amp;quot;&amp;gt;&lt;span class="symbol"&gt;6&lt;/span&gt;&amp;lt;/&lt;span class="symbol"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;        &amp;lt;&lt;span class="symbol"&gt;a&lt;/span&gt; &lt;span class="symbol"&gt;href&lt;/span&gt;=&amp;quot;#&amp;quot;&amp;gt;&lt;span class="symbol"&gt;7&lt;/span&gt;&amp;lt;/&lt;span class="symbol"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;        &amp;lt;&lt;span class="symbol"&gt;a&lt;/span&gt; &lt;span class="symbol"&gt;href&lt;/span&gt;=&amp;quot;#&amp;quot;&amp;gt;&lt;span class="symbol"&gt;8&lt;/span&gt;&amp;lt;/&lt;span class="symbol"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;        &amp;lt;&lt;span class="symbol"&gt;a&lt;/span&gt; &lt;span class="symbol"&gt;href&lt;/span&gt;=&amp;quot;#&amp;quot;&amp;gt;&amp;amp;&lt;span class="symbol"&gt;gt&lt;/span&gt;&amp;lt;/&lt;span class="symbol"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    &amp;lt;/&lt;span class="symbol"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre>
</li>
<li><p>若里面加上文字，超过了宽度，要另起class设置新的宽度</p>
<p>设置多了也没事，行内块元素，只有内容大小</p>
</li>
</ul>
<p>3.5 设置被选择的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;elp&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>css:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.current</span>, <span class="selector-class">.box</span> <span class="selector-class">.elp</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>可以复习一下css选择器；<a href="https://cqilin.gitee.io/4-css_private_note/#5-css选择器；">链接</a></li>
</ul>
<p>3.6 写到几页的html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">到第</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">页</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个模样：</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/78.png" alt="78"></p>
<ul>
<li><p>继续css：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">55px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f7f7f7</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>还可以清楚所有的内边距外边距</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>3.7 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>鼠标样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">            display: inline-block;</span><br><span class="line">            width: 36px;</span><br><span class="line">            height: 36px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#f7f7f7</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 36px;</span><br><span class="line">            text-decoration: none;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> <span class="selector-class">.current</span>, <span class="selector-class">.box</span> <span class="selector-class">.elp</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            border: none;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">            width: 55px;</span><br><span class="line">            height: 36px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> <span class="selector-tag">button</span> &#123;</span></span><br><span class="line">            width: 60px;</span><br><span class="line">            height: 36px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#f7f7f7</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>&amp;lt<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;elp&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>&amp;gt<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        到第</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        页</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<br />

<hr>
<h2 id="10-CSS初始化"><a href="#10-CSS初始化" class="headerlink" title="10. CSS初始化"></a>10. CSS初始化</h2><p>不同浏览器对有些标签的默认值是不同的，为了消除不同浏览器对HTML文本呈现的差异，照顾浏览器的兼容，我们需要对CSS 初始化</p>
<p>简单理解： CSS初始化是指重设浏览器的样式。 (也称为CSS reset）</p>
<p>每个网页都必须首先进行 CSS初始化。</p>
<p>这里我们以 京东CSS初始化代码为例。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 把我们所有标签的内外边距清零 */</span></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* em 和 i 斜体的文字不倾斜 */</span></span><br><span class="line"><span class="selector-tag">em</span>,</span><br><span class="line"><span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: normal</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 去掉li 的小圆点 */</span></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="comment">/* border 0 照顾低版本浏览器 如果 图片外面包含了链接会有边框的问题 */</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 取消图片底侧有空白缝隙的问题 */</span></span><br><span class="line">    <span class="attribute">vertical-align</span>: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="comment">/* 当我们鼠标经过button 按钮的时候，鼠标变成小手 */</span></span><br><span class="line">    <span class="attribute">cursor</span>: pointer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#c81623</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="comment">/* &quot;\5B8B\4F53&quot; 就是宋体的意思 这样浏览器兼容性比较好 */</span></span><br><span class="line">    <span class="attribute">font-family</span>: Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, <span class="string">&quot;\5B8B\4F53&quot;</span>, sans-serif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="comment">/* CSS3 抗锯齿形 让文字显示的更加清晰 */</span></span><br><span class="line">    <span class="attribute">-webkit-font-smoothing</span>: antialiased;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span> Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, <span class="string">&quot;\5B8B\4F53&quot;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hide</span>,</span><br><span class="line"><span class="selector-class">.none</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 清除浮动 */</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;.&quot;</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="comment">/* &quot;\5B8B\4F53&quot; 就是宋体的意思 这样浏览器兼容性比较好 */</span></span><br><span class="line">    <span class="attribute">font-family</span>: Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, <span class="string">&quot;\5B8B\4F53&quot;</span>, sans-serif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="comment">/* CSS3 抗锯齿形 让文字显示的更加清晰 */</span></span><br><span class="line">    <span class="attribute">-webkit-font-smoothing</span>: antialiased;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span> Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, <span class="string">&quot;\5B8B\4F53&quot;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.<code>&quot;\5B8B\4F53&quot;</code>,是什么?</p>
<ul>
<li>是宋体</li>
</ul>
<p>2.<strong>Unicode编码字体：</strong></p>
<p>把中文字体的名称用相应的Unicode编码来代替，这样就可以有效的避免浏览器解释CSS代码时候出现乱码的问题。</p>
<p>比如：</p>
<p>黑体 \9ED1\4F53<br>宋体 \5B8B\4F53<br>微软雅黑 \5FAE\8F6F\96C5\9ED1</p>
<hr>
<p>字数够多了，下面到12_2；2020-9-12 10:45:55</p>
<h2 id="X-题注"><a href="#X-题注" class="headerlink" title="X. 题注"></a>X. 题注</h2><p>[^1]:visibility英 [ˌvɪzəˈbɪləti]   美 [ˌvɪzəˈbɪləti] n.可见度;能见度;能见距离;可见性;明显性<br>[^2]:ellipsis 英 [ɪˈlɪpsɪs]   美 [ɪˈlɪpsɪs]  n.(词在句子中的)省略;省略号</p>
]]></content>
      <categories>
        <category>html_css</category>
      </categories>
      <tags>
        <tag>html_css</tag>
      </tags>
  </entry>
  <entry>
    <title>12-2</title>
    <url>/1-(0~50)/12_2/</url>
    <content><![CDATA[<p>12-html+css_introdiction-pink，字数多了</p>
<p>如果文章也可以换页就好了，不过那样目录也许会出问题；</p>
<a id="more"></a>

<h2 id="11-html5和css3提高"><a href="#11-html5和css3提高" class="headerlink" title="11. html5和css3提高"></a>11. html5和css3提高</h2><p>1.目标：</p>
<ul>
<li>能够说出 3~5 个 HTML5 新增布局和表单标签</li>
<li>能够说出 CSS3 的新增特性有哪些</li>
</ul>
<h3 id="11-1-HTML5新特性"><a href="#11-1-HTML5新特性" class="headerlink" title="11.1 HTML5新特性"></a>11.1 HTML5新特性</h3><p>HTML5 的新增特性主要是针对于以前的不足，增加了一些新的标签、新的表单和新的表单属性等。 </p>
<p>这些新特性都有兼容性问题，基本是 <strong>IE9+ 以上版本的浏览器</strong>才支持，如果不考虑兼容性问题，可以大量使用这些新特性。</p>
<h4 id="11-1-1-布局"><a href="#11-1-1-布局" class="headerlink" title="11.1.1 布局"></a>11.1.1 布局</h4><p>1.以前布局，我们基本用 div 来做。div 对于搜索引擎来说，是没有语义的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">“header”</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">“nav”</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">“content”</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">“footer”</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>发展到了HTML5后，新增了一些语义化标签，这样的话更加有利于浏览器的搜索引擎搜索，也方便了网站的seo（Search Engine Optimization，搜索引擎优化），下面就是新增的一些语义化标签</p>
<blockquote>
<p>optimization<br>英 [ˌɒptɪmaɪˈzeɪʃn]   美 [ˌɑːptɪməˈzeɪʃn]<br>n.<br>最佳（优）化；优选法；（使）最恰当（适宜，适合）;最佳条件选择；求最佳参数</p>
</blockquote>
<ul>
<li><p><code>&lt;header&gt;</code> 头部标签</p>
</li>
<li><p><code>&lt;nav&gt;</code> 导航标签</p>
</li>
<li><p><code>&lt;article&gt;</code> 内容标签；<a href="https://fanyi.baidu.com/#en/zh/article">article</a></p>
<blockquote>
<p>article<br>英 [ˈɑːtɪkl]   美 [ˈɑːrtɪkl]<br>n.<br>(报刊上的)文章，论文，报道;(协议、契约的)条款，项;物件，物品(尤指整套中的一件)<br>vi.<br>使受协议条款的约束;以协议（或契约）约束;订约将…收为学徒（或徒弟）;定约雇用进行控告;提出罪状（或指责）(against);签订协议</p>
</blockquote>
</li>
<li><p><code>&lt;section&gt;</code> 定义文档某个区域</p>
<p><a href="https://baijiahao.baidu.com/s?id=1636030964727322199&wfr=spider&for=pc">section-更多信息</a></p>
</li>
<li><p><code>&lt;aside&gt;</code> 侧边栏标签</p>
</li>
<li><p><code>&lt;footer&gt;</code> 尾部标签</p>
</li>
</ul>
<p><img src="http://bucket-c70.test.upcdn.net/12/87.png" alt="87"></p>
<p>2.如果写header与nav，就是这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        header, nav &#123;</span><br><span class="line">            width: 800px;</span><br><span class="line">            height: 150px;</span><br><span class="line">            border-radius: 15px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            margin: 15px auto;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 150px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span>header<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span>nav<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<h5 id="2-注意"><a href="#2-注意" class="headerlink" title="2. 注意"></a>2. 注意</h5><ul>
<li>这种语义化标准，主要是针对==搜索引擎==的</li>
<li>新标签，页面中，可多次使用。</li>
<li>在IE9中，需要把这些元素转换为块级元素。</li>
<li>移动端更喜欢用这些标签</li>
<li>HTML5还增加了很多其他标签。</li>
</ul>
<hr>
<h4 id="11-1-2-多媒体标签"><a href="#11-1-2-多媒体标签" class="headerlink" title="11.1.2 多媒体标签"></a>11.1.2 多媒体标签</h4><p>P276；</p>
<p>1.多媒体标签分为 音频 <strong>audio</strong> 和视频 <strong>video</strong> 两个标签 使用它们，我们可以很方便的在页面中嵌入音频和视频，而不再去使用落后的flash和其他浏览器插件了。</p>
<p>因为多媒体标签的 属性、方法、事件比较多，因此我们需要什么功能的时候，就需要去查找相关的文档进行学习使用。</p>
<h5 id="1-视频标签-video"><a href="#1-视频标签-video" class="headerlink" title="1. 视频标签-video"></a>1. 视频标签-video</h5><p>1.当前 <strong><video></strong> 元素支持三种视频格式： 尽量使用 <strong>mp4格式</strong>，它几乎支持所有浏览器</p>
<p>2.使用语法：</p>
<p><code>&lt;video src=&quot;media/mi.mp4&quot;&gt;&lt;/video&gt;</code></p>
<p>3.浏览器兼容</p>
<table>
<thead>
<tr>
<th align="left">浏览器</th>
<th align="left">MP4</th>
<th align="left">WebM</th>
<th align="left">Ogg</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Internet Explorer</td>
<td align="left">YES</td>
<td align="left">NO</td>
<td align="left">NO</td>
</tr>
<tr>
<td align="left">Chrome</td>
<td align="left">YES</td>
<td align="left">YES</td>
<td align="left">YES</td>
</tr>
<tr>
<td align="left">Firefox</td>
<td align="left">YES 从 Firefox 21 版本开始 Linux 系统从 Firefox 30 开始</td>
<td align="left">YES</td>
<td align="left">YES</td>
</tr>
<tr>
<td align="left">Safari</td>
<td align="left">YES</td>
<td align="left">NO</td>
<td align="left">NO</td>
</tr>
<tr>
<td align="left">Opera</td>
<td align="left">YES 从 Opera 25 版本开始</td>
<td align="left">YES</td>
<td align="left">YES</td>
</tr>
</tbody></table>
<ul>
<li>MP4 = MPEG 4文件使用 H264 视频编解码器和AAC音频编解码器</li>
<li>WebM = WebM 文件使用 VP8 视频编解码器和 Vorbis 音频编解码器</li>
<li>Ogg = Ogg 文件使用 Theora 视频编解码器和 Vorbis音频编解码器</li>
</ul>
<p>3.1 由于各个浏览器的支持情况不同，所以我们会有一种兼容性的写法，这种写法了解一下即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span>  <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>  <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;move.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;move.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span> &gt;</span></span><br><span class="line">    您的浏览器暂不支持 <span class="tag">&lt;<span class="name">video</span>&gt;</span> 标签播放视频</span><br><span class="line"><span class="tag">&lt;/ <span class="attr">video</span> &gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>上面这种写法，浏览器会匹配video标签中的source，如果支持就播放，如果不支持往下匹配，直到没有匹配的格式，就提示文本</li>
</ul>
<p>4.video 常用属性，HTML5 中的新属性。</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.runoob.com/tags/att-video-autoplay.html">autoplay</a>  <strong>New</strong></td>
<td align="left">autoplay</td>
<td align="left">如果出现该属性，则视频在就绪后马上播放。(谷歌浏览器需要添加muted来解决自动播放的问题，不知道现在还是不是这样；2020-9-14 05:30:21)</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/tags/att-video-controls.html">controls</a>  <strong>New</strong></td>
<td align="left">controls</td>
<td align="left">如果出现该属性，则向用户显示控件，比如播放按钮。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/tags/att-video-height.html">height</a>  <strong>New</strong></td>
<td align="left"><em>pixels</em></td>
<td align="left">设置视频播放器的高度。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/tags/att-video-loop.html">loop</a>  <strong>New</strong></td>
<td align="left">loop</td>
<td align="left">如果出现该属性，则当媒介文件完成播放后再次开始播放。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/tags/att-video-muted.html">muted</a>  <strong>New</strong></td>
<td align="left">muted</td>
<td align="left">如果出现该属性，视频的音频输出为静音。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/tags/att-video-poster.html">poster</a>  <strong>New</strong></td>
<td align="left"><em>URL</em></td>
<td align="left">规定视频正在下载时显示的图像，直到用户点击播放按钮。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/tags/att-video-preload.html">preload</a>  <strong>New</strong></td>
<td align="left">auto metadata none</td>
<td align="left">如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/tags/att-video-src.html">src</a>  <strong>New</strong></td>
<td align="left"><em>URL</em></td>
<td align="left">要播放的视频的 URL。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/tags/att-video-width.html">width</a>  <strong>New</strong></td>
<td align="left"><em>pixels</em></td>
<td align="left">设置视频播放器的宽度。</td>
</tr>
</tbody></table>
<br />

<p>4.1 直接写<code>&lt;video src=&quot;media/mi.mp4&quot;&gt;&lt;/video&gt;</code>是静止的一张图片。</p>
<ul>
<li><p>加上autoplay，能自动播放</p>
<p><code>&lt;video src=&quot;./5-video/01.mp4&quot; autoplay=&quot;autoplay&quot;&gt;&lt;/video&gt;</code></p>
</li>
<li><p>如果谷歌浏览器不行，就这样</p>
<p><code>&lt;video src=&quot;./5-video/01.mp4&quot; autoplay=&quot;autoplay&quot; muted=&quot;muted&quot;&gt;&lt;/video&gt;</code></p>
<p>不过本身，会使视频静音播放；可以手动调节，打开音量；</p>
</li>
</ul>
<p>4.2 但是，还没有播放按钮，进度条，调节声音的等等</p>
<ul>
<li><p>加上controls</p>
<p><code>&lt;video src=&quot;./5-video/01.mp4&quot; autoplay=&quot;autoplay&quot; muted=&quot;muted&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt;</code></p>
<ul>
<li><p>已经试验，内部样式表无效</p>
<p>那，外部样式表应该也是没用的</p>
<p>只有内联样式有效</p>
</li>
<li><p>但平常css有的元素是有用的，比如高度，宽度；</p>
</li>
</ul>
</li>
</ul>
<p>4.3 如果播放完了一次，想继续播放，就需要循环</p>
<ul>
<li>内联样式+<code>loop = &quot;loop&quot;</code></li>
</ul>
<p>4.4 如果网页卡，视频加载不出，又不想黑在那，可以预放图片</p>
<ul>
<li><p>内联样式+<code>poster = url</code></p>
</li>
<li><p>但有另外妙用，用了这个属性后，就不会自动播放，显示着你放置的图片，等待你去点击播放；</p>
</li>
<li><p>不过我无法控制图片大小，例如我想放一个播放按钮，就会这样，把图片拉大：</p>
<img src="../../img/12/1.png" alt="1" style="zoom:40%;" />
</li>
<li><p>1.要不干脆用定位，定在中间，用js，点击一下就消失。2020-10-6 04:33:57</p>
</li>
</ul>
<p>5.还以为有自适应大小，貌似没有，就用width与height调整吧。</p>
<hr>
<h5 id="2-音频标签-audio"><a href="#2-音频标签-audio" class="headerlink" title="2. 音频标签-audio"></a>2. 音频标签-audio</h5><p>1.基本使用</p>
<p>当前 <strong><audio></strong> 元素支持三种视频格式： 尽量使用 <strong>mp3格式</strong></p>
<p>2.语法：</p>
<p><code>&lt;audio src=&quot;media/music.mp3&quot;&gt;&lt;/audio&gt;</code></p>
<p>3.浏览器兼容</p>
<p>目前，<audio> 元素支持的3种文件格式：MP3、Wav、Ogg。</p>
<table>
<thead>
<tr>
<th align="left">浏览器</th>
<th align="left">MP3</th>
<th align="left">Wav</th>
<th align="left">Ogg</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Internet Explorer</td>
<td align="left">YES</td>
<td align="left">NO</td>
<td align="left">NO</td>
</tr>
<tr>
<td align="left">Chrome</td>
<td align="left">YES</td>
<td align="left">YES</td>
<td align="left">YES</td>
</tr>
<tr>
<td align="left">Firefox</td>
<td align="left">YES</td>
<td align="left">YES</td>
<td align="left">YES</td>
</tr>
<tr>
<td align="left">Safari</td>
<td align="left">YES</td>
<td align="left">YES</td>
<td align="left">NO</td>
</tr>
<tr>
<td align="left">Opera</td>
<td align="left">YES</td>
<td align="left">YES</td>
<td align="left">YES</td>
</tr>
</tbody></table>
<br />

<p>4.属性：HTML5 中的新属性。</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.runoob.com/tags/att-audio-autoplay.html">autoplay</a></td>
<td align="left">autoplay</td>
<td align="left">如果出现该属性，则音频在就绪后马上播放。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/tags/att-audio-controls.html">controls</a></td>
<td align="left">controls</td>
<td align="left">如果出现该属性，则向用户显示音频控件（比如播放/暂停按钮）。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/tags/att-audio-loop.html">loop</a></td>
<td align="left">loop</td>
<td align="left">如果出现该属性，则每当音频结束时重新开始播放。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/tags/att-audio-muted.html">muted</a></td>
<td align="left">muted</td>
<td align="left">如果出现该属性，则音频输出为静音。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/tags/att-audio-preload.html">preload</a></td>
<td align="left">auto metadata none</td>
<td align="left">规定当网页加载时，音频是否默认被加载以及如何被加载。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/tags/att-audio-src.html">src</a></td>
<td align="left"><em>URL</em></td>
<td align="left">规定音频文件的 URL。</td>
</tr>
</tbody></table>
<br />

<p>4.1 和video一样，<code>&lt;audio src=&quot;media/music.mp3&quot;&gt;&lt;/audio&gt;</code>后，不会有任何东西。需要添加<code>autoplay</code>才有效果；</p>
<ul>
<li>同样的，谷歌浏览器把自动播放声音也去掉了，可能是防止吓到人</li>
</ul>
<p>4.2 不过声音是没有画面的，即使自动播放了，也只有声音，页面啥都没有。</p>
<ul>
<li><p>加上<code>controls</code>能看到一些东西</p>
</li>
<li><p><code>&lt;audio src=&quot;media/music.mp3&quot; autoplay=&quot;autoplay&quot; controls=&quot;controls&quot;&gt;&lt;/audio&gt;</code></p>
</li>
</ul>
<h5 id="3-小节"><a href="#3-小节" class="headerlink" title="3. 小节"></a>3. 小节</h5><ul>
<li>音频标签和视频标签使用方式基本一致</li>
<li>浏览器支持情况不同</li>
<li>谷歌浏览器把音频和视频自动播放禁止了</li>
<li>我们可以给视频标签添加 muted 属性来静音播放视频，音频不可以（可以通过JavaScript解决）</li>
<li>视频标签是重点，我们经常设置自动播放，不使用 controls 控件，循环和设置大小属性</li>
</ul>
<h4 id="11-1-3-新增表单元素"><a href="#11-1-3-新增表单元素" class="headerlink" title="11.1.3 新增表单元素"></a>11.1.3 新增表单元素</h4><p>1.在H5中，帮我们新增加了很多类型的表单，这样方便了程序员的开发</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/88.png" alt="88"></p>
<p>案例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 我们验证的时候必须添加form表单域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>邮箱: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>网址: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>日期: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>时间: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>数量: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>手机号码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>搜索: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>颜色: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当我们点击提交按钮就可以验证表单了 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2.例如email，没输入对</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/89.png" alt="89"></p>
<p>3.date日期，可以选择时间</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/90.png" alt="90"></p>
<p>4.手机端也合适</p>
<img src="http://bucket-c70.test.upcdn.net/12/91.png" alt="91" style="zoom:80%;" />

<br />

<hr>
<h4 id="11-1-4-新增表单属性"><a href="#11-1-4-新增表单属性" class="headerlink" title="11.1.4 新增表单属性"></a>11.1.4 新增表单属性</h4><blockquote>
<p><a href="https://www.bilibili.com/video/BV14J4114768?p=279">https://www.bilibili.com/video/BV14J4114768?p=279</a></p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">required</td>
<td align="center">required</td>
<td>表单拥有该属性表示其内容不能为空，必填</td>
</tr>
<tr>
<td align="center"><a href="https://www.runoob.com/tags/att-input-autofocus.html">autofocus</a></td>
<td align="center">autofocus</td>
<td>属性规定当页面加载时 <code>&lt;input&gt;</code> 元素应该自动获得焦点。</td>
</tr>
<tr>
<td align="center"><a href="https://www.runoob.com/tags/att-input-placeholder.html">placeholder</a></td>
<td align="center"><em>text</em></td>
<td>placeholder[^1] 属性规定可描述输入<code>&lt;input&gt;</code> 字段预期值的简短的提示信息 。</td>
</tr>
<tr>
<td align="center"><a href="https://www.runoob.com/tags/att-input-autocomplete.html">autocomplete</a></td>
<td align="center">on/off</td>
<td>autocomplete[^2] 属性规定 <code>&lt;input&gt;</code> 元素输入字段是否应该启用自动完成功能。默认值是”on”</td>
</tr>
<tr>
<td align="center"><a href="https://www.runoob.com/tags/att-input-multiple.html">multiple</a></td>
<td align="center">multiple[^3]</td>
<td>属性规定允许用户输入到 <code>&lt;input&gt;</code> 元素的多个值。</td>
</tr>
</tbody></table>
<p>0.5  required 预览</p>
<img src="../../img/12.2/16.png"/>

<p>1.placeholder效果预览：</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/92.png" alt="92"></p>
<ul>
<li>预先放有文字，可以做简短的注释</li>
</ul>
<p>1.1 可以css修饰</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::placeholder</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>这不经意让我想到：其他属性也可以这样吗？</li>
<li>去看看有哪些值？额，没看到。也许就特别的几个用得到css吧；</li>
</ul>
<p>2.autofocus，自动焦点</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/93.png" alt="93"></p>
<p>每次打开百度，不需要我们点，就自动有打击了一次的效果；</p>
<p>3.autocomplete，提交成功过的字符会被记录</p>
<p><img src="http://bucket-c70.test.upcdn.net/12/94.png" alt="94"></p>
<p>3.1 如何成功提交？要有name，或，id</p>
<p><code>搜索: &lt;input type=&quot;search&quot; name=&quot;sear&quot; id=&quot;&quot; /&gt;</code></p>
<ul>
<li><p>不过在type=number那里，没有成功；</p>
<p><code>数量: &lt;input type=&quot;number&quot; name=&quot;num&quot; id=&quot;&quot; /&gt;</code></p>
<p>获取这种类型，有隐藏输入记录吧。不不不，应该是autocomplete默认值是off</p>
</li>
</ul>
<p>3.1.1 实验：</p>
<p><code>数量: &lt;input type=&quot;number&quot; name=&quot;num&quot; id=&quot;&quot; autocomplete=&quot;on&quot; /&gt;</code></p>
<p>ok,还是不行；2020-9-14 21:40:29</p>
<p>4.multiple用于可以提交多个文件</p>
<p><code>&lt;input type=&quot;file&quot; name=&quot;&quot; id=&quot;&quot;&gt;</code></p>
<ul>
<li>默认只能提交一个文件，即使用<code>shift</code>和<code>ctrl</code>也无法选择多个</li>
</ul>
<p>4.1 加上multiple就可以了,<a href="https://fanyi.baidu.com/translate?aldtype=16047&query=placeholder&keyfrom=baidu&smartresult=dict&lang=auto2zh#en/zh/multiple">multiple翻译</a></p>
<p><code>&lt;input type=&quot;file&quot; name=&quot;&quot; id=&quot;&quot; multiple=&quot;multiple&quot;&gt;</code></p>
<hr>
<h3 id="11-2-CSS3的新特性"><a href="#11-2-CSS3的新特性" class="headerlink" title="11.2 CSS3的新特性"></a>11.2 CSS3的新特性</h3><h4 id="1-CSS3-的现状"><a href="#1-CSS3-的现状" class="headerlink" title="1. CSS3 的现状"></a>1. CSS3 的现状</h4><p>新增的CSS3特性有兼容性问题，ie9+才支持<br>移动端支持优于 PC 端<br>不断改进中<br>应用相对广泛<br>现阶段主要学习：==新增选择器==和==盒子模型==以及==其他特性==</p>
<h4 id="2-CSS3-新增选择器"><a href="#2-CSS3-新增选择器" class="headerlink" title="2. CSS3 新增选择器"></a>2. CSS3 新增选择器</h4><p>CSS3 给我们新增了选择器，可以更加便捷，更加自由的选择目标元素。</p>
<ol>
<li>属性选择器</li>
<li>结构伪类选择器</li>
<li>伪元素选择器</li>
</ol>
<h4 id="3-属性选择器"><a href="#3-属性选择器" class="headerlink" title="3. 属性选择器"></a>3. 属性选择器</h4><p>1.属性选择器可以根据元素特定属性的来选择元素。 这样就可以不用借助于类或者id选择器。</p>
<table>
<thead>
<tr>
<th>选择符</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>E[att]</td>
<td>选择具有att属性的E元素</td>
</tr>
<tr>
<td>E[att=“val”]</td>
<td>选择具有att属性且属性值等于val的E元素</td>
</tr>
<tr>
<td>E[att^=“val”]</td>
<td>匹配具有att属性且属性值以val开头的E元素</td>
</tr>
<tr>
<td>E[att$=“val”]</td>
<td>匹配具有att属性且属性值以val结尾的E元素</td>
</tr>
<tr>
<td>E[att*=“val”]</td>
<td>匹配具有att属性且属性值中含有val的E元素</td>
</tr>
</tbody></table>
<p>注意：类选择器、属性选择器、伪类选择器，权重为 10。</p>
<ul>
<li>再注意，中括号里面的才是属性选择器，前面的 E，是标签选择器；</li>
</ul>
<p>2.利用属性选择器就可以不用借助于类或者id选择器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- 1. 利用属性选择器就可以不用借助于类或者id选择器 --&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-attr">[required]</span> &#123;</span></span><br><span class="line">            color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;707&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;2333&quot;</span> <span class="attr">required</span>=<span class="string">&#x27;required&#x27;</span> <span class="attr">autofocus</span>=<span class="string">&quot;on&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off</span></span></span><br><span class="line"><span class="tag"><span class="string">        &quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.属性选择器还可以选择属性=值得某些元素，==重点==</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-attr">[type=password]</span> &#123;</span></span><br><span class="line">            color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2. 属性选择器还可以选择属性=值得某些元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4.属性选择器可以选择属性值开头的某些元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/* 选择首先是div，然后具有class属性，并且属性值必须是icon开头的这些元素 */</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-attr">[class^=icon]</span> &#123;</span></span><br><span class="line">            color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.属性选择器可以选择属性值开头的某些元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是打酱油<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;icon1&quot;</span>&gt;</span>小图标1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;icon2&quot;</span>&gt;</span>小图标2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;icon3&quot;</span>&gt;</span>小图标3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;icon4&quot;</span>&gt;</span>小图标4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>5.属性选择器可以选择属性值结尾的某些元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-attr">[class$=data]</span> &#123;</span></span><br><span class="line">            color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4. 属性选择器可以选择属性值结尾的某些元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;icon1-data&quot;</span>&gt;</span>我是阿你啦<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;icon2-data&quot;</span>&gt;</span>我是哥斯拉<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;icon3-ico&quot;</span>&gt;</span>那我是谁<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<hr>
<h4 id="4-结构伪类选择器"><a href="#4-结构伪类选择器" class="headerlink" title="4. 结构伪类选择器"></a>4. 结构伪类选择器</h4><blockquote>
<p><a href="https://www.bilibili.com/video/BV14J4114768?p=282&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV14J4114768?p=282&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.结构伪类选择器主要根据文档结构来选择其元素， 常用于根据父级选择器里面的子元素</p>
<table>
<thead>
<tr>
<th>选择符</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>E:first-child</td>
<td>匹配父元素中的第一个子元素 E</td>
</tr>
<tr>
<td>E:last-child</td>
<td>匹配父元素中最后一个 E 元素</td>
</tr>
<tr>
<td>E:nth-child(n)</td>
<td>匹配父元素中的第 n 个子元素 E</td>
</tr>
<tr>
<td>E:first-of-type</td>
<td>指定类型 E 的第一个</td>
</tr>
<tr>
<td>E:last-of-type</td>
<td>指定类型 E 的最后一个</td>
</tr>
<tr>
<td>E:nth-of-type(n)</td>
<td>指定类型 E 的第n个</td>
</tr>
</tbody></table>
<p>注意：类选择器、属性选择器、伪类选择器，权重为 10。</p>
<p>2.nth-child（n） 选择某个父元素的一个或多个特定的子元素（重点）</p>
<ul>
<li><p>n 可以是数字，关键字和公式</p>
</li>
<li><p>n 如果是数字，就是选择第 n 个子元素， 里面数字从1开始…</p>
</li>
<li><p>n 可以是关键字：even 偶数，odd 奇数</p>
</li>
<li><p>n 可以是公式：常见的公式如下 ( 如果n是公式，则从0开始计算，但是第 0 个元素或者超出了元素的个数会被忽略 )</p>
<p>nth-child(n)从0开始，每次加1，往后面计算，这里面必须是n，不能是其他字母，等于选择了所有的孩子</p>
</li>
</ul>
<p>2.1 主要是n，会自动从0++；</p>
<table>
<thead>
<tr>
<th>公式</th>
<th>取值</th>
</tr>
</thead>
<tbody><tr>
<td>2n</td>
<td>偶数</td>
</tr>
<tr>
<td>2n+1</td>
<td>奇数</td>
</tr>
<tr>
<td>5n</td>
<td>5,10,15…</td>
</tr>
<tr>
<td>n+5</td>
<td>从第5个开始（包含第五个）到最后</td>
</tr>
<tr>
<td>-n+5</td>
<td>前5个（包含第五个）</td>
</tr>
</tbody></table>
<p>2.2 为什么n+5，是&gt;=5？</p>
<ul>
<li>因为n从0++，所以：0+5,1+5,2+5,3+5，n+5；=5,6,7,8，…，n</li>
</ul>
<p>2.3 案例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 1.把所有的偶数，选出来 */</span></span></span><br><span class="line">        /* ul li:nth-child(even) &#123;</span><br><span class="line">            color: pink;</span><br><span class="line">        &#125; */</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 2.把所有的奇数，选出来 */</span></span></span><br><span class="line">        /* ul li:nth-child(odd) &#123;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125; */</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(n)</span> &#123;</span></span><br><span class="line">            color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 4.nth-child(2n)等于选择了所有的偶数孩子，等于even */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ol</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(2n)</span> &#123;</span></span><br><span class="line">            color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>11111111111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>222222222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3333333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>44444<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>55555<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>6666666<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>777777777<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>88888888888<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>11111111111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>222222222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3333333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>44444<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>55555<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>6666666<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>777777777<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>88888888888<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3.E:nth-child(n)与E:nth-of-type(n)的区别；</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV14J4114768?p=285&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV14J4114768?p=285&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<ul>
<li>child不是同孩子也选了；使真正的效果无法；2021-3-17 16:04:16</li>
</ul>
<p>3.1 nth-child 会把所有的盒子都排列序号，执行的时候，首先看：nth-child(1)之后回去看前面div</p>
<p>3.2 nth-of-type 会把指定元素的盒子排列序号，执行的时候首先看，div指定的元素，之后回去看:nth-of-type(1)第几个孩子。</p>
<p>3.3</p>
<p>区别：</p>
<ol>
<li>nth-child 对父元素里面所有孩子排序选择（序号是固定的） 先找到第n个孩子，然后看看是否和E匹配</li>
<li>nth-of-type 对父元素里面指定子元素进行排序选择。 先去匹配E ，然后再根据E 找第n个孩子</li>
</ol>
<p>4.小结</p>
<ul>
<li>结构伪类选择器一般用于选择父级里面的第几个孩子</li>
<li>nth-child 对父元素里面所有孩子排序选择（序号是固定的） 先找到第n个孩子，然后看看是否和E匹配</li>
<li>nth-of-type 对父元素里面指定子元素进行排序选择。 先去匹配E ，然后再根据E 找第n个孩子</li>
<li>关于 nth-child（n） 我们要知道 n 是从 0 开始计算的，要记住常用的公式</li>
<li>如果是无序列表，我们肯定用 nth-child 更多</li>
<li>类选择器、属性选择器、伪类选择器，权重为 10。</li>
</ul>
<h5 id="4-2-问："><a href="#4-2-问：" class="headerlink" title="4.2 问："></a>4.2 问：</h5><p>1.你知道section div:nth-of-type的权重吗？</p>
<img src="../../img/12.2/1.png"/>

<hr>
<h4 id="5-伪元素选择器（重点）"><a href="#5-伪元素选择器（重点）" class="headerlink" title="5. 伪元素选择器（重点）"></a>5. 伪元素选择器（重点）</h4><p>1.伪元素选择器可以帮助我们利用CSS创建新标签元素，而不需要HTML标签，从而简化HTML结构。</p>
<table>
<thead>
<tr>
<th>选择符</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>::before</td>
<td>在元素内部的前面插入内容</td>
</tr>
<tr>
<td>::after</td>
<td>在元素内部的后面插入内容</td>
</tr>
</tbody></table>
<ul>
<li>伪元素，是CSS3新增加的；如果只写了一个 冒号“:”，浏览器也会解析成两个，但是不标准。而且老版本的浏览器不会解析；2021-3-18 14:28:13</li>
</ul>
<p>2.注意：</p>
<ul>
<li>before 和 after 创建一个元素，但是属于行内元素<ul>
<li>不过，可以通过css改变display；</li>
</ul>
</li>
<li>新创建的这个元素在文档树中是找不到的，所以我们称为伪元素</li>
<li>语法： element::before {}</li>
<li>before 和 after 必须有 content 属性</li>
<li>before 在父元素内容的前面创建元素，after 在父元素内容的后面插入元素</li>
<li>伪元素选择器和标签选择器一样，权重为 1<ul>
<li>不过，div::after  或者 div：：before，一起权重是2；</li>
</ul>
</li>
</ul>
<p>3.before和after，虽然是前与后，但都是放在盒子里面的；不是放在盒子外面；</p>
<p><img src="../../img/12.2/2.png" alt="2"></p>
<h5 id="5-1-伪元素选择器使用场景1：伪元素字体图标"><a href="#5-1-伪元素选择器使用场景1：伪元素字体图标" class="headerlink" title="5.1 伪元素选择器使用场景1：伪元素字体图标"></a>5.1 伪元素选择器使用场景1：伪元素字体图标</h5><p>1.代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&#x27;\e91e&#x27;</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.我看了看，卵的；</p>
<p>3.先要找资料；这里用的是：icomoon</p>
<ul>
<li>这个在文档12里面有相关的一些介绍；</li>
<li>还有使用教程233</li>
</ul>
<p>4.教程简单版：</p>
<ul>
<li><p>1.找到资源fonts，放到html同目录下</p>
<blockquote>
<p>笔记本：F:\三次元\8-字体\3-icomoon</p>
</blockquote>
</li>
<li><p>2.在html的style或者css里面引用；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;icomoon&#x27;</span>;</span><br><span class="line">  <span class="attribute">src</span>:  <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.eot?7kkyc2&#x27;</span>);</span><br><span class="line">  <span class="attribute">src</span>:  <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.eot?7kkyc2#iefix&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.ttf?7kkyc2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.woff?7kkyc2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.svg?7kkyc2#icomoon&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li>3.使用：但是，这些符号都有相应的代号；用的是代号哈；</li>
</ul>
<p>5.然后就是上面的代码；</p>
<ul>
<li>“\”，这个符号是关键</li>
</ul>
<h5 id="5-2-伪元素选择器使用场景2：仿土豆效果"><a href="#5-2-伪元素选择器使用场景2：仿土豆效果" class="headerlink" title="5.2 伪元素选择器使用场景2：仿土豆效果"></a>5.2 伪元素选择器使用场景2：仿土豆效果</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 当我们鼠标经过了 土豆这个盒子，就让里面before遮罩层显示出来 */</span></span><br><span class="line"><span class="selector-class">.tudou</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line"><span class="comment">/* 而是显示元素 */</span></span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>伪元素选择器使用场景2-仿土豆网显示隐藏遮罩案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.a1</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 500px;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            margin-top: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.a1</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">            content: &#x27;&#x27;;</span><br><span class="line">            display: none;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-tag">rgba</span>(0, 0, 0, <span class="selector-class">.4</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.a1</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="5-3-伪元素选择器使用场景3：伪元素清除浮动"><a href="#5-3-伪元素选择器使用场景3：伪元素清除浮动" class="headerlink" title="5.3 伪元素选择器使用场景3：伪元素清除浮动"></a>5.3 伪元素选择器使用场景3：伪元素清除浮动</h5><p>1.额外标签法也称为隔墙法，是 W3C 推荐的做法。</p>
<ul>
<li>注意： 要求这个新的空标签必须是块级元素。</li>
</ul>
<p>2.父级添加 overflow 属性</p>
<p>3.父级添加after伪元素</p>
<p>4.父级添加双伪元素</p>
<h6 id="1-隔墙法"><a href="#1-隔墙法" class="headerlink" title="1. 隔墙法"></a>1. 隔墙法</h6><p>1.额外标签法也称为隔墙法，是 W3C 推荐的做法。</p>
<p><img src="../../img/12.2/3.png" alt="3"></p>
<p>注意： 要求这个新的空标签必须是块级元素。block[^4];</p>
<h6 id="2-伪元素"><a href="#2-伪元素" class="headerlink" title="2. 伪元素"></a>2. 伪元素</h6><p>1.后面两种伪元素清除浮动算是第一种额外标签法的一个升级和优化。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">clear</span>: both;</span><br><span class="line"><span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>content，是伪元素必带</p>
</li>
<li><p>display: block; 记得上面的隔墙法吗？必须是 块级元素</p>
</li>
<li><p>height: 0; 可以不看到这个伪元素盒子；</p>
<p>visibility: hidden; 也是</p>
</li>
<li><p>clear: both;  也是隔墙法，同时也是核心 清楚浮动；</p>
</li>
</ul>
<p>2.隔墙法的升级；</p>
<p>3.<strong>双伪</strong></p>
<ul>
<li>同2理，只不过前面后面 都关上了；</li>
</ul>
<p><img src="../../img/12.2/4.png" alt="4"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"><span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.1 table,是为了同一行，+ 块级元素。如果是block，after会换行</p>
<p>3.2 但是，少了height与visibility，而且before没有clear:both</p>
<ul>
<li>以隔墙法为基础，可能是前面不需要吧；</li>
</ul>
<hr>
<h4 id="6-CSS3盒子模型"><a href="#6-CSS3盒子模型" class="headerlink" title="6. CSS3盒子模型"></a>6. CSS3盒子模型</h4><blockquote>
<p><a href="https://www.bilibili.com/video/BV14J4114768?p=291&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV14J4114768?p=291&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.CSS3 中可以通过 box-sizing 来指定盒模型，有2个值：即可指定为 content-box、border-box，这样我们<br>计算盒子大小的方式就发生了改变。</p>
<p>2.可以分成两种情况：</p>
<ol>
<li>box-sizing: content-box 盒子大小为 width + padding + border （以前默认的）</li>
<li>box-sizing: border-box 盒子大小为 width<br>如果盒子模型我们改为了box-sizing: border-box ， 那padding和border就不会撑大盒子了（前提padding<br>和border不会超过width宽度）</li>
</ol>
<h4 id="7-其他特性"><a href="#7-其他特性" class="headerlink" title="7. 其他特性"></a>7. 其他特性</h4><blockquote>
<p><a href="https://www.bilibili.com/video/BV14J4114768?p=292&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV14J4114768?p=292&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.图片变模糊</p>
<p>1.1 CSS3滤镜filter:  </p>
<p>filter CSS属性将模糊或颜色偏移等图形效果应用于元素。[^5]</p>
<ul>
<li><code>filter: 函数(); 例如： filter: blur(5px); blur模糊处理 数值越大越模糊</code></li>
<li><img src="../../img/12.2/5.png" alt="5"></li>
</ul>
<p>1.2 我cao，这个filter不简单，MDN文档上看，还有很多属性，很多东西；2021-3-18 16:52:46</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter">https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter</a></li>
</ul>
<p>1.3 案例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        img &#123;</span><br><span class="line">            filter: blur(15px);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">            filter: blur(0);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/pink.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2.计算盒子宽度 width: calc 函数</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV14J4114768?p=293&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV14J4114768?p=293&amp;spm_id_from=pageDriver</a></p>
<p>03min</p>
</blockquote>
<p>2.1 calc() </p>
<p>此CSS函数让你在声明CSS属性值时执行一些计算。</p>
<p><code>width: calc(100% - 80px);</code></p>
<p>括号里面可以使用 + - * / 来进行计算。<br>CSS3 还增加了一些 动画 2D 3D 等新特性，我们就业班会继续学习。</p>
<h4 id="8-CSS3-过渡（重点）"><a href="#8-CSS3-过渡（重点）" class="headerlink" title="8. CSS3 过渡（重点）"></a>8. CSS3 过渡（重点）</h4><p>1.过渡（transition[^7])</p>
<p>是CSS3中具有颠覆性的特征之一，我们可以在不使用 Flash 动画或JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。</p>
<p>过渡动画： 是从一个状态 渐渐的过渡到另外一个状态</p>
<p>可以让我们页面更好看，更动感十足，虽然 低版本浏览器不支持（ie9以下版本） 但是不会影响页面布局。</p>
<p>我们现在经常和 :hover 一起 搭配使用。</p>
<p>2.语法：</p>
<p><code>transition: 要过渡的属性 花费时间 运动曲线 何时开始;</code></p>
<p>2.1 解释：</p>
<ul>
<li>属性 ： 想要变化的 css 属性， 宽度高度 背景颜色 内外边距都可以 。如果想要所有的属性都变化过渡， 写一个all 就可以。</li>
<li>花费时间： 单位是 秒（必须写单位） 比如 0.5s</li>
<li>运动曲线： 默认是 ease （可以省略）</li>
<li>何时开始 ：单位是 秒（必须写单位）可以设置延迟触发时间 默认是 0s （可以省略）</li>
</ul>
<p>2.2 时间属性图示：</p>
<p><img src="../../img/12.2/6.png" alt="6"></p>
<p>3.多属性：</p>
<p>如果想改两个属性以上，写法是后面加逗号，分行写不行</p>
<p>3.1 第一个就没有过渡效果，直接出现，只有第二个有过渡效果；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">background</span>: pink;</span><br><span class="line">            <span class="attribute">transition</span>: width <span class="number">1.5s</span> ease-in-out <span class="number">0.5s</span>, height <span class="number">1.5s</span> ease-in-out <span class="number">0.5s</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>3.2 不行：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">background</span>: pink;</span><br><span class="line">            <span class="attribute">transition</span>: width <span class="number">1.5s</span> ease-in-out <span class="number">0.5s</span>;</span><br><span class="line">            <span class="attribute">transition</span>: height <span class="number">1.5s</span> ease-in-out <span class="number">0.5s</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>4.全部：</p>
<p>4.1 如果所有属性都想变好，就直接写all</p>
<p><code>transition: all 1.5s ease-in-out 0.5s;</code></p>
<p>4.2 会变化的属性，会在某处设置变化的值，而那边写了什么属性与变化值，才会变化。</p>
<ul>
<li>等于有两个开关，all打开了一个开关，就只需要那边了，否则两边都要添加代码；2021-3-18 17:51:57</li>
</ul>
<p>5.总代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>伪元素选择器使用场景2-仿土豆网显示隐藏遮罩案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background: pink;</span><br><span class="line"><span class="css">            <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 1<span class="selector-class">.5s</span> <span class="selector-tag">ease-in-out</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">            width: 1000px;</span><br><span class="line">            height: 500px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<h5 id="8-2-进度条案例"><a href="#8-2-进度条案例" class="headerlink" title="8.2 进度条案例"></a>8.2 进度条案例</h5><p>1.代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>进度条<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.bar</span> &#123;</span></span><br><span class="line">            width: 150px;</span><br><span class="line">            height: 20px;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            border-radius: 7px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.bar_in</span> &#123;</span></span><br><span class="line">            width: 50%;</span><br><span class="line">            height: 100%;</span><br><span class="line">            background-color: red;</span><br><span class="line"><span class="css">            <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.3s</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.bar</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.bar_in</span> &#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar_in&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h5 id="8-3-小米logo案例"><a href="#8-3-小米logo案例" class="headerlink" title="8.3 小米logo案例"></a>8.3 小米logo案例</h5><blockquote>
<p>代码：F:\三次元\4-学习\7-web\3-html+css\10-前端基础-HTML5CSS3提高\作业\02_仿小米logo</p>
</blockquote>
<p>1.先建立盒子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header-logo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span> <span class="attr">title</span>=<span class="string">&quot;小米官网&quot;</span>&gt;</span>小米官网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1.1 对应的css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header-logo</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.logo</span> &#123;</span><br><span class="line">            <span class="attribute">display</span>: block;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">55px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">55px</span>;</span><br><span class="line">            <span class="attribute">overflow</span>: hidden;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#ff6700</span>;</span><br><span class="line">            <span class="attribute">text-align</span>: left;</span><br><span class="line">            <span class="attribute">text-indent</span>: -<span class="number">9999em</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>1.2 emm，没一步一步了，后面总代码；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>小米logo项目<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.header-logo</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line">            display: block;</span><br><span class="line">            width: 55px;</span><br><span class="line">            height: 55px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#ff6700</span>;</span></span><br><span class="line">            text-align: left;</span><br><span class="line">            text-indent: -9999em;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.logo</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            content: &#x27;&#x27;;</span><br><span class="line">            left: 0;</span><br><span class="line">            top: 0;</span><br><span class="line">            width: 55px;</span><br><span class="line">            height: 55px;</span><br><span class="line"><span class="css">            <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.3s</span>;</span></span><br><span class="line">            background: url(./images/mi-logo.png) center no-repeat;</span><br><span class="line">            opacity: 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 第三步，mi home 的样式 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.logo</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            content: &#x27;&#x27;;</span><br><span class="line">            left: 0;</span><br><span class="line">            top: 0;</span><br><span class="line">            width: 55px;</span><br><span class="line">            height: 55px;</span><br><span class="line"><span class="css">            <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.3s</span>;</span></span><br><span class="line">            background: url(./images/mi-home.png) center no-repeat;</span><br><span class="line">            margin-left: -55px;</span><br><span class="line">            opacity: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 第四步，logo：：before先往右边走55px，并且透明 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.logo</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">            margin-left: 55px;</span><br><span class="line">            opacity: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 第五步，反之 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.logo</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">            margin-left: 0;</span><br><span class="line">            opacity: 1;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header-logo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span> <span class="attr">title</span>=<span class="string">&quot;小米官网&quot;</span>&gt;</span>小米官网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<hr>
<h3 id="11-3-广义的HTML5"><a href="#11-3-广义的HTML5" class="headerlink" title="11.3 广义的HTML5"></a>11.3 广义的HTML5</h3><blockquote>
<p><a href="https://www.bilibili.com/video/BV14J4114768?p=297&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV14J4114768?p=297&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<h4 id="1-狭义的html5"><a href="#1-狭义的html5" class="headerlink" title="1. 狭义的html5"></a>1. 狭义的html5</h4><p>1.HTML5结构标签本身</p>
<p>2.CSS3相关样式</p>
<h4 id="2-广义的HTML5"><a href="#2-广义的HTML5" class="headerlink" title="2. 广义的HTML5"></a>2. 广义的HTML5</h4><ol>
<li>广义的 HTML5 是 HTML5 本身 + CSS3 + JavaScript 。</li>
<li>这个集合有时称为 HTML5 和朋友，通常缩写为 HTML5 。</li>
<li>虽然 HTML5 的一些特性仍然不被某些浏览器支持，但是它是一种发展趋势。</li>
<li>HTML5 MDN 介绍：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML">https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML</a></li>
</ol>
<hr>
<h3 id="11-4-CSS3-2D转换"><a href="#11-4-CSS3-2D转换" class="headerlink" title="11.4 CSS3  2D转换"></a>11.4 CSS3  2D转换</h3><blockquote>
<p><a href="https://www.bilibili.com/video/BV14J4114768?p=356&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV14J4114768?p=356&amp;spm_id_from=pageDriver</a></p>
<p>笔记本ptt：F:\三次元\4-学习\7-web\3-html+css</p>
</blockquote>
<p>1.转换（transform[^8]）是CSS3中具有颠覆性的特征之一，可以实现元素的位移、旋转、缩放等效果</p>
<p>2.转换（transform）你可以简单理解为变形</p>
<p>移动：translate[^9]<br>旋转：rotate[^10]<br>缩放：scale[^11]</p>
<h4 id="1-二维坐标系"><a href="#1-二维坐标系" class="headerlink" title="1. 二维坐标系"></a>1. 二维坐标系</h4><p>1.2D转换是改变标签在二维平面上的位置和形状的一种技术，先来学习二维坐标系</p>
<p><img src="../../img/12.2/17.png" alt="17"></p>
<p>2.</p>
<h4 id="2-2D-转换之移动-translate"><a href="#2-2D-转换之移动-translate" class="headerlink" title="2. 2D 转换之移动 translate"></a>2. 2D 转换之移动 translate</h4><p>1.2D移动是2D转换里面的一种功能，可以改变元素在页面中的位置，类似定位。</p>
<p>2.语法:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(<span class="selector-tag">x</span>,<span class="selector-tag">y</span>); 或者分开写</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateX</span>(<span class="selector-tag">n</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateY</span>(<span class="selector-tag">n</span>);</span><br></pre></td></tr></table></figure>

<p>3.重点 :</p>
<ul>
<li>定义 2D 转换中的移动，沿着 X 和 Y 轴移动元素</li>
<li>translate==最大的优点==：不会影响到其他元素的位置</li>
<li>translate中的百分比单位是相对于自身元素的 translate:(50%,50%);</li>
<li>对行内标签没有效果</li>
</ul>
<p>4.代码演示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: pink;</span><br><span class="line"><span class="css">            <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.3s</span> <span class="selector-tag">ease-in-out</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:first-child</span> &#123;</span></span><br><span class="line">            transform: translate(20px, 10px)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="3-2D-转换之旋转-rotate"><a href="#3-2D-转换之旋转-rotate" class="headerlink" title="3. 2D 转换之旋转 rotate"></a>3. 2D 转换之旋转 rotate</h4><blockquote>
<p><a href="https://www.bilibili.com/video/BV14J4114768?p=358&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV14J4114768?p=358&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.2D旋转指的是让元素在2维平面内顺时针旋转或者逆时针旋转。</p>
<p><img src="../../img/12.2/8.png" alt="8"></p>
<p>2.语法：</p>
<p><code>transform:rotate(度数)</code></p>
<p>3.重点：</p>
<ul>
<li>rotate里面跟度数， 单位是 deg  比如  rotate(45deg)</li>
<li>角度为正时，顺时针，负时，为逆时针</li>
<li>默认旋转的中心点是元素的中心点</li>
</ul>
<p>4.演示代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            position: relative;</span><br><span class="line">            top: 100px;</span><br><span class="line">            left: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        img &#123;</span><br><span class="line">            border: 3px solid pink;</span><br><span class="line">            border-radius: 50%;</span><br><span class="line"><span class="css">            <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.5s</span> <span class="selector-tag">ease-in-out</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">            transform: rotate(360deg);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/1-安详.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<h5 id="1-案例：三角形"><a href="#1-案例：三角形" class="headerlink" title="1. 案例：三角形"></a>1. 案例：三角形</h5><p><img src="../../img/12.2/9.gif" alt="9"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            position: relative;</span><br><span class="line">            width: 249px;</span><br><span class="line">            height: 35px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">            content: &#x27;&#x27;;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 40%;</span><br><span class="line">            right: 13px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border-right</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">            width: 15px;</span><br><span class="line">            height: 15px;</span><br><span class="line">            transform: translateY(-50%) rotate(45deg);</span><br><span class="line"><span class="css">            <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.3s</span> <span class="selector-tag">ease-in-out</span>;</span></span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">            transform: rotate(225deg);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<hr>
<h4 id="4-2D-转换中心点-transform-origin-12"><a href="#4-2D-转换中心点-transform-origin-12" class="headerlink" title="4. 2D 转换中心点 transform-origin[^12]"></a>4. 2D 转换中心点 transform-origin[^12]</h4><blockquote>
<p>菜鸟:<a href="https://www.runoob.com/cssref/css3-pr-transform-origin.html">https://www.runoob.com/cssref/css3-pr-transform-origin.html</a></p>
</blockquote>
<p>1.我们可以设置元素转换的中心点</p>
<p>2.语法：</p>
<p><code>transform-origin: x y;</code></p>
<p>2.1 参数可以是：百分比，px，单词（top等）</p>
<p>3.重点：</p>
<ul>
<li><p>注意后面的参数 x 和 y 用空格隔开</p>
</li>
<li><p>x y 默认转换的中心点是元素的中心点 (50%  50%)，等于（center center)</p>
<p><img src="../../img/12.2/10.png" alt="10"></p>
</li>
<li><p>还可以给x y 设置 像素 或者  方位名词  （top  bottom  left  right  center）</p>
</li>
</ul>
<h5 id="4-1-案例：旋转案例"><a href="#4-1-案例：旋转案例" class="headerlink" title="4.1 案例：旋转案例"></a>4.1 案例：旋转案例</h5><p>1.就在上面的案例：三角形里面，添加代码，就可以试验；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">40%</span>;</span><br><span class="line">            <span class="attribute">right</span>: <span class="number">13px</span>;</span><br><span class="line">            <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">15px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">            <span class="attribute">transition</span>: all .<span class="number">3s</span> ease-in-out;</span><br><span class="line">            <span class="attribute">transform-origin</span>: bottom right;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>2.但是，这里的选择案例，有点小项目；</p>
<p>2.1 预览：</p>
<p><img src="../../img/12.2/11.gif" alt="11"></p>
<p>2.2 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">            content: &#x27;&#x27;;</span><br><span class="line">            display: block;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background: url(./img/1-安详.jpg) center no-repeat;</span><br><span class="line">            background-size: cover;</span><br><span class="line">            transform-origin: bottom left;</span><br><span class="line">            transform: rotate(90deg);</span><br><span class="line"><span class="css">            <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.5s</span> <span class="selector-tag">ease-out</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">            transform: rotate(0deg);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<hr>
<h4 id="5-2D-转换之缩放scale-13"><a href="#5-2D-转换之缩放scale-13" class="headerlink" title="5. 2D 转换之缩放scale[^13]"></a>5. 2D 转换之缩放scale[^13]</h4><p>1.缩放，顾名思义，可以放大和缩小。 只要给元素添加上了这个属性就能控制它放大还是缩小。</p>
<p>2.语法：</p>
<p>transform:scale(x,y);</p>
<p>3.注意其中的x和y用逗号分隔</p>
<ul>
<li>transform:scale(1,1) ：宽和高都放大一倍，相对于没有放大</li>
<li>transform:scale(2,2) ：宽和高都放大了2倍</li>
<li>transform:scale(2) ：只写一个参数，第二个参数则和第一个参数一样，相当于 scale(2,2)</li>
<li>transform:scale(0.5,0.5)：缩小</li>
<li>scale缩放最大的优势：可以设置转换中心点缩放，默认以中心点缩放的，==而且不影响其他盒子==<ul>
<li>中心点，的用法，仍是origin;</li>
</ul>
</li>
</ul>
<p>4.代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: pink;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">            <span class="attribute">transition</span>: all .<span class="number">5s</span> ease-out</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<br />

<p>5.如果是PX的放大；</p>
<ul>
<li><p>它变宽，只是两边延伸，变长，只是向下延伸；</p>
</li>
<li><p>不会像这样，四周都散开；2021-3-22 18:01:52</p>
</li>
</ul>
<p>5.1 最上面那里是不动的；2021-3-22 18:02:28</p>
<p>5.2 但这样会影响其他盒子；</p>
<p>5.3 代码案例：</p>
<h5 id="6-分页按钮案例："><a href="#6-分页按钮案例：" class="headerlink" title="6.分页按钮案例："></a>6.分页按钮案例：</h5><p>1.预览：</p>
<p><img src="../../img/12.2/12.gif" alt="12"></p>
<p>2.代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        li &#123;</span><br><span class="line">            float: left;</span><br><span class="line">            margin: 10px;</span><br><span class="line">            width: 30px;</span><br><span class="line">            height: 30px;</span><br><span class="line">            border: 1px solid pink;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 30px;</span><br><span class="line">            list-style: none;</span><br><span class="line">            border-radius: 50%;</span><br><span class="line">            cursor: pointer;</span><br><span class="line"><span class="css">            <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.4s</span> <span class="selector-tag">ease</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(1<span class="selector-class">.2</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>10<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<hr>
<h4 id="6-2D-转换综合写法"><a href="#6-2D-转换综合写法" class="headerlink" title="6. 2D 转换综合写法"></a>6. 2D 转换综合写法</h4><p>1.注意：</p>
<ul>
<li><p>同时使用多个转换，其格式为：transform: translate() rotate() scale() …等，</p>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">5s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">150px</span>, <span class="number">150px</span>) <span class="built_in">rotate</span>(<span class="number">180deg</span>) <span class="built_in">scale</span>(<span class="number">1.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>其顺序会影响转换的效果。（先旋转会改变坐标轴方向）</p>
</li>
<li><p>当我们同时有位移和其他属性的时候，记得要将==位移放到最前==</p>
</li>
</ul>
<p>2.2D 转换总结:</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV14J4114768?p=366&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV14J4114768?p=366&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<ul>
<li>转换transform 我们简单理解就是变形 有2D 和 3D 之分</li>
<li>我们暂且学了三个 分别是 位移 旋转 和 缩放</li>
<li>2D 移动 translate(x, y)   最大的优势是不影响其他盒子， 里面参数用%，是相对于自身宽度和高度来计算的可以分开写比如 translateX(x)  和 translateY(y)</li>
<li>2D 旋转 rotate[^10](度数)    可以实现旋转元素   度数的单位是deg</li>
<li>2D 缩放 scale[^13](x,y)   里面参数是数字 不跟单位 可以是小数   最大的优势 不影响其他盒子</li>
<li>设置转换中心点 transform-origin[^12] : x y;    参数可以百分比、像素或者是方位名词</li>
<li>当我们进行综合写法，同时有位移和其他属性的时候，记得要将位移放到最前</li>
</ul>
<hr>
<h3 id="11-5-CSS3-动画"><a href="#11-5-CSS3-动画" class="headerlink" title="11.5 CSS3 动画"></a>11.5 CSS3 动画</h3><p>1.动画（animation）是CSS3中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果。<br>2.相比较过渡，动画可以实现更多变化，更多控制，连续自动播放等效果。</p>
<img src="../../img/12.2/13.gif" alt="13" style="zoom:80%;" />

<h4 id="1-动画的基本使用"><a href="#1-动画的基本使用" class="headerlink" title="1. 动画的基本使用"></a>1. 动画的基本使用</h4><p>1.制作动画分为两步：</p>
<ul>
<li>先定义动画</li>
<li>再使用（调用）动画</li>
</ul>
<p>2.用keyframes[^15] 定义动画（类似定义类选择器）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line">   0%&#123;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">   &#125;  </span><br><span class="line">   100%&#123;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li></li>
</ul>
<p>4.元素使用动画：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">background-color</span>: aqua;</span><br><span class="line">       <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">       <span class="comment">/* 调用动画 */</span></span><br><span class="line">       <span class="attribute">animation-name</span>: 动画名称;</span><br><span class="line">       <span class="comment">/* 持续时间 */</span></span><br><span class="line">       <span class="attribute">animation-duration</span>: 持续时间;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>哪个元素动画，就把animation-name，写入；</p>
<p>参数是动画的名称；</p>
</li>
<li><p>持续时间duration[^16]也是必须写的；2021-3-23 09:27:49</p>
</li>
</ul>
<p>5.代码示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">animation-name</span>: move;</span><br><span class="line">    <span class="attribute">animation-duration</span>: .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">1000px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br />

<hr>
<h4 id="2-动画序列"><a href="#2-动画序列" class="headerlink" title="2. 动画序列"></a>2. 动画序列</h4><ul>
<li>0% 是动画的开始，100% 是动画的完成。这样的规则就是动画序列。</li>
<li>在 @keyframes 中规定某项 CSS 样式，就能创建由当前样式逐渐改为新样式的动画效果。</li>
<li>动画是使元素从一种样式逐渐变化为另一种样式的效果。您可以改变任意多的样式任意多的次数。</li>
<li>请用百分比来规定变化发生的时间，或用关键词 “from” 和 “to”，等同于 0% 和 100%。</li>
</ul>
<p>1.代码示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">animation-name</span>: move;</span><br><span class="line">    <span class="attribute">animation-duration</span>: <span class="number">3.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    25% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">1000px</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">1000px</span>, <span class="number">500px</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    75% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, <span class="number">500px</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br />

<p>1.2 预览：</p>
<p><img src="../../img/12.2/14.gif" alt="14"></p>
<p>2.里面的百分比，是总时间的。0%就是0s，100%是3.5s</p>
<hr>
<h4 id="3-动画常用属性"><a href="#3-动画常用属性" class="headerlink" title="3. 动画常用属性"></a>3. 动画常用属性</h4><blockquote>
<p><a href="https://www.bilibili.com/video/BV14J4114768?p=369&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV14J4114768?p=369&amp;spm_id_from=pageDriver</a></p>
<p>上次看到5:30；2021-3-23 10:16:59</p>
</blockquote>
<table>
<thead>
<tr>
<th><strong>属性</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>@keyframes</td>
<td>规定动画。</td>
</tr>
<tr>
<td>animation</td>
<td>所有动画属性的简写属性，除了animation-play-state属性。</td>
</tr>
<tr>
<td>animation-name</td>
<td>规定@keyframes动画的名称。（必须的）</td>
</tr>
<tr>
<td>animation-duration</td>
<td>规定动画完成一个周期所花费的秒或毫秒，默认是0。（必须的）</td>
</tr>
<tr>
<td>animation-timing-function</td>
<td>规定动画的速度曲线，默认是“ease”。</td>
</tr>
<tr>
<td>animation-delay</td>
<td>规定动画何时开始，默认是0。</td>
</tr>
<tr>
<td>animation-iteration[^18]-count</td>
<td>规定动画被播放的次数，默认是1，还有infinite[^18](无线)</td>
</tr>
<tr>
<td>animation-direction</td>
<td>规定动画是否在下一周期逆向播放，默认是“normal“,alternate[^21]逆播放</td>
</tr>
<tr>
<td>animation-play-state</td>
<td>规定动画是否正在运行或暂停。默认是”running”,还有”paused”。</td>
</tr>
<tr>
<td>animation-fill-mode</td>
<td>规定动画结束后状态，保持forwards回到起始backwards(默认)</td>
</tr>
</tbody></table>
<br />

<h5 id="3-1-鼠标悬停时停止"><a href="#3-1-鼠标悬停时停止" class="headerlink" title="3.1 鼠标悬停时停止"></a>3.1 鼠标悬停时停止</h5><blockquote>
<p><a href="https://www.bilibili.com/video/BV14J4114768?p=369&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV14J4114768?p=369&amp;spm_id_from=pageDriver</a></p>
<p>13:43 ； 2021-3-23 16:39:22</p>
</blockquote>
<p>1.预览：</p>
<p><img src="../../img/12.2/15.gif" alt="15"></p>
<p>2.主要是：animation-play-state</p>
<p>3.代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            animation-name: move;</span><br><span class="line"><span class="css">            <span class="selector-tag">animation-duration</span>: 3<span class="selector-class">.5s</span>;</span></span><br><span class="line">            animation-iteration-count: infinite;</span><br><span class="line">            animation-timing-function: ease-in-out;</span><br><span class="line">            animation-direction: alternate;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">            animation-play-state: paused;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line">            0% &#123;</span><br><span class="line">                transform: translateX(0);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            25% &#123;</span><br><span class="line">                transform: translate(1000px, 0);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            50% &#123;</span><br><span class="line">                transform: translate(1000px, 500px);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            75% &#123;</span><br><span class="line">                transform: translate(0, 500px);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            100% &#123;</span><br><span class="line">                transform: translate(0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h4 id="4-动画简写属性"><a href="#4-动画简写属性" class="headerlink" title="4. 动画简写属性"></a>4. 动画简写属性</h4><p>1.animation：动画名称 持续时间 运动曲线  何时开始  播放次数  是否反方向  动画起始或者结束的状态;</p>
<p><code>animation: myfirst 5s linear 2s infinite alternate;</code></p>
<ul>
<li><p>简写属性里面不包含 animation-play-state </p>
</li>
<li><p>暂停动画：animation-play-state:   puased;   经常和鼠标经过等其他配合使用</p>
</li>
<li><p>想要动画走回来 ，而不是直接跳回来：animation-direction   ：  alternate</p>
</li>
<li><p>盒子动画结束后，停在结束位置：  animation-fill-mode  ：   forwards </p>
</li>
</ul>
<p>2.前面两个一定要写；</p>
<p>2021-3-23 19:55:03</p>
<p>3.代码示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="comment">/* animation-name: move;</span></span><br><span class="line"><span class="comment">    animation-duration: 3.5s;</span></span><br><span class="line"><span class="comment">    animation-iteration-count: infinite;</span></span><br><span class="line"><span class="comment">    animation-timing-function: ease-in-out;</span></span><br><span class="line"><span class="comment">    animation-direction: alternate; */</span></span><br><span class="line">    <span class="attribute">animation</span>: move <span class="number">3.5s</span> ease-in-out infinite alternate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="5-案例：热点图案例"><a href="#5-案例：热点图案例" class="headerlink" title="5. 案例：热点图案例"></a>5. 案例：热点图案例</h4><blockquote>
<p><a href="https://www.bilibili.com/video/BV14J4114768?t=92&amp;p=371">https://www.bilibili.com/video/BV14J4114768?t=92&amp;p=371</a></p>
</blockquote>
<p>2021-3-23 21:08:34</p>
<p>1.预览：</p>
<p><img src="../../img/12.2/18.gif" alt="18"></p>
<p>2.代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.map</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 747px;</span><br><span class="line">            height: 617px;</span><br><span class="line">            margin: 50px auto;</span><br><span class="line">            background: url(./img/2-map.png) center no-repeat;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        body &#123;</span><br><span class="line">            background-color: black;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.BeiJin</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 221px;</span><br><span class="line">            right: 196px;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.dotted</span> &#123;</span></span><br><span class="line">            width: 5px;</span><br><span class="line">            height: 5px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#09f</span>;</span></span><br><span class="line">            border-radius: 50%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.BeiJin</span> <span class="selector-tag">div</span><span class="selector-attr">[class^=<span class="string">&quot;pulse&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 小波纹放在父盒子里面水平垂直居中，放大后向四周发散 */</span></span></span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 50%;</span><br><span class="line">            left: 50%;</span><br><span class="line">            transform: translate(-50%, -50%);</span><br><span class="line">            width: 5px;</span><br><span class="line">            height: 5px;</span><br><span class="line"><span class="css">            <span class="selector-tag">box-shadow</span>: 0 0 12<span class="selector-tag">px</span> <span class="selector-id">#009dfd</span>;</span></span><br><span class="line">            border-radius: 50%;</span><br><span class="line"><span class="css">            <span class="selector-tag">animation</span>: <span class="selector-tag">pulse</span> 1<span class="selector-class">.6s</span> <span class="selector-tag">linear</span> <span class="selector-tag">infinite</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.TaiBei</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 495px;</span><br><span class="line">            right: 82px;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.TaiBei</span> <span class="selector-tag">div</span><span class="selector-attr">[class^=<span class="string">&quot;pulse&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 小波纹放在父盒子里面水平垂直居中，放大后向四周发散 */</span></span></span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 50%;</span><br><span class="line">            left: 50%;</span><br><span class="line">            transform: translate(-50%, -50%);</span><br><span class="line">            width: 5px;</span><br><span class="line">            height: 5px;</span><br><span class="line"><span class="css">            <span class="selector-tag">box-shadow</span>: 0 0 12<span class="selector-tag">px</span> <span class="selector-id">#009dfd</span>;</span></span><br><span class="line">            border-radius: 50%;</span><br><span class="line"><span class="css">            <span class="selector-tag">animation</span>: <span class="selector-tag">pulse</span> 1<span class="selector-class">.6s</span> <span class="selector-tag">linear</span> <span class="selector-tag">infinite</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 这么写，权重不够 */</span></span></span><br><span class="line">        /* .pulse2 &#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">animation-delay</span>: 0<span class="selector-class">.4s</span>;</span></span><br><span class="line">        &#125; */</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.pulse2</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">animation-delay</span>: 0<span class="selector-class">.4s</span> !<span class="selector-tag">important</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.pulse3</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">animation-delay</span>: 0<span class="selector-class">.8s</span> !<span class="selector-tag">important</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.a2</span> &#123;</span></span><br><span class="line">            width: 50px;</span><br><span class="line">            height: 50px;</span><br><span class="line"><span class="css">            <span class="selector-tag">box-shadow</span>: 0 0 12<span class="selector-tag">px</span> <span class="selector-id">#009dfd</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="keyword">@keyframes</span> pulse &#123;</span></span><br><span class="line"><span class="css">            0% &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">            70% &#123;</span><br><span class="line"><span class="css">                <span class="comment">/* transform: scale(5); 我们不用scale，因为他会让阴影也变大 */</span></span></span><br><span class="line">                width: 40px;</span><br><span class="line">                height: 40px;</span><br><span class="line">                opacity: 1;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            100% &#123;</span><br><span class="line">                width: 70px;</span><br><span class="line">                height: 70px;</span><br><span class="line">                opacity: 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;BeiJin&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dotted&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pulse1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pulse2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pulse3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;TaiBei&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dotted&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pulse1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pulse2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pulse3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;BeiJin&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dotted&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pulse1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pulse2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pulse3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />



<h4 id="6-速度曲线细节"><a href="#6-速度曲线细节" class="headerlink" title="6. 速度曲线细节"></a>6. 速度曲线细节</h4><p>1.animation-timing-function：规定动画的速度曲线，默认是“ease”</p>
<table>
<thead>
<tr>
<th><strong>值</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>linear</td>
<td>动画从头到尾的速度是相同的。匀速</td>
</tr>
<tr>
<td>ease</td>
<td>默认。动画以低速开始，然后加快，在结束前变慢。</td>
</tr>
<tr>
<td>ease-in</td>
<td>动画以低速开始。</td>
</tr>
<tr>
<td>ease-out</td>
<td>动画以低速结束。</td>
</tr>
<tr>
<td>ease-in-out</td>
<td>动画以低速开始和结束。</td>
</tr>
<tr>
<td>steps[^22]()</td>
<td>指定了时间函数中的间隔数量（步长）</td>
</tr>
</tbody></table>
<p>2.重点来看看 steps；</p>
<h4 id="7-小熊案例"><a href="#7-小熊案例" class="headerlink" title="7. 小熊案例"></a>7. 小熊案例</h4><blockquote>
<p>笔记本，本地：F:\三次元\7-希望总部-工作\5-练习</p>
<p>至少图片在，代码写后就删了；2021-3-24 20:33:53</p>
</blockquote>
<p>1.预览：</p>
<p><img src="../../img/12.2/19.gif" alt="19"></p>
<p>2.代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>小熊跑步<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background: url(./img/3-bear.png) center no-repeat;</span><br><span class="line">            animation: bear 1s steps(8) infinite, move 4s infinite;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="keyword">@keyframes</span> bear &#123;</span></span><br><span class="line">            0% &#123;</span><br><span class="line">                background-position: 0 0;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            100% &#123;</span><br><span class="line">                background-position: -1600px 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line">            0% &#123;</span><br><span class="line">                left: 0;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            100% &#123;</span><br><span class="line">                left: 50%;</span><br><span class="line">                transform: translateX(-50%);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<hr>
<h3 id="11-6-CSS3-3D转换"><a href="#11-6-CSS3-3D转换" class="headerlink" title="11.6 CSS3 3D转换"></a>11.6 CSS3 3D转换</h3><blockquote>
<p><a href="https://www.bilibili.com/video/BV14J4114768?p=375">https://www.bilibili.com/video/BV14J4114768?p=375</a></p>
<p>2021-3-24 20:35:03</p>
</blockquote>
<h2 id="12-PC端品优购项目（上）"><a href="#12-PC端品优购项目（上）" class="headerlink" title="12. PC端品优购项目（上）"></a>12. PC端品优购项目（上）</h2><h3 id="12-1-品优购项目规划"><a href="#12-1-品优购项目规划" class="headerlink" title="12.1 品优购项目规划"></a>12.1 品优购项目规划</h3><h4 id="1-网站制作流程"><a href="#1-网站制作流程" class="headerlink" title="1.  网站制作流程"></a>1.  网站制作流程</h4><img src="../../img/12.2/7.png" alt="7" style="zoom:67%;" />



<h2 id="13-下"><a href="#13-下" class="headerlink" title="13. 下"></a>13. 下</h2><h2 id="14"><a href="#14" class="headerlink" title="14."></a>14.</h2><h2 id="X2-题注"><a href="#X2-题注" class="headerlink" title="X2. 题注"></a>X2. 题注</h2><p>[^1]:placeholder 英 [ˈpleɪshəʊldə(r)]   美 [ˈpleɪshoʊldər]<br>n(替代缺失部分的)占位符，占位文字;位标(句子中必要但无实际意义的词项，如 It’s a pity she left 中的 it)</p>
<p>[^2]:auto complete 英  [ˈɔːtəʊ kəmˈpliːt]   美 [ˈɔːtoʊ kəmˈpliːt]  自动完成;主动完成</p>
<p>[^3]:multiple英 [ˈmʌltɪpl]   美 [ˈmʌltɪpl]  adj.数量多的;多种多样的n.倍数</p>
<p>[^4]:block 英 [blɒk]   美 [blɑːk]<br>n.(方形平面)大块;立方体;(公寓、办公、教学、医院等)大楼;(成组建筑中的)一栋楼房;四面临街的一方块楼群;街区<br>v.堵塞;阻塞;堵住(某人的路等);挡住(某人的视线等);妨碍;阻碍</p>
<p>[^5]:blur 英 [blɜː(r)]   美 [blɜːr]<br>n.(移动的)模糊形状;模糊的记忆<br>v.(使)变得模糊不清;(使)视线模糊;(使)看不清;(使)难以区分</p>
<p>[^6]:calc  pref.石灰的  abbr.计算</p>
<p>[^7]:transition英 [trænˈzɪʃn]   美 [trænˈzɪʃn]  n.过渡;转变;变革;变迁v.&lt;北美&gt;经历转变过程;过渡</p>
<p>[^8]:transform 英 [trænsˈfɔːm]   美 [trænsˈfɔːrm]  v.使改变形态;使改变外观(或性质);使改观</p>
<p>[^9]:translate 英 [trænzˈleɪt]   美 [trænzˈleɪt]  v.翻译;译;被翻译;被译成;(使)转变，变为</p>
<p>[^10]:rotate  英 [rəʊˈteɪt]   美 [ˈroʊteɪt]<br>v.(使)旋转，转动;(工作)由…轮值;(人员)轮换，轮值</p>
<p>[^11]:scale  英 [skeɪl]   美 [skeɪl]<br>n.(尤指与其他事物相比较时的)规模，范围，程度;等级;级别;等级体系<br>v.攀登;到达…顶点;去鳞;刮除牙石</p>
<p>[^12]:origin 英  [ˈɒrɪdʒɪn]   美 [ˈɔːrɪdʒɪn]  n.起源;源头;起因;身世;出身</p>
<p>[^13]:scale 英 [skeɪl]   美 [skeɪl]  n.(尤指与其他事物相比较时的)规模，范围，程度;等级;级别;等级体系<br>v.攀登;到达…顶点;去鳞;刮除牙石</p>
<p>[^14]:degree 英 [dɪˈɡriː]   美 [dɪˈɡriː]  n.度，度数(角的量度单位);度数(温度单位);程度</p>
<p>[^15]:key frames 英 [kiː freɪmz]   美 [kiː freɪmz]  关键帧;关键画面;关键画格 <br />frames 英 [freɪmz]   美 [freɪmz]<br>n.(图画、门、玻璃等的)框架;(家具、建筑物、车辆等的)构架，支架，骨架;眼镜框<br>v.给…做框;给…镶边;作伪证陷害;制订;拟订frame的第三人称单数和复数</p>
<p>[^16]:duration  英 [djuˈreɪʃn]   美 [duˈreɪʃn]  n.持续时间;期间</p>
<p>[^17]:delay 英 [dɪˈleɪ]   美 [dɪˈleɪ]  n.延迟(或耽搁、拖延)的时间;延期;耽搁;延误<br>v.延迟;延期;推迟;使迟到;使耽搁;使拖延</p>
<p>[^18]:iteration 英 [ˌɪtəˈreɪʃn]   美 [ˌɪtəˈreɪʃn]  n.迭代;(计算机)新版软件</p>
<p>[^19]:infinite  英 [ˈɪnfɪnət]   美 [ˈɪnfɪnət]<br>adj.极大的;无法衡量的;无限的;无穷尽的<br>n.无限的事物;无穷尽的事物;上帝</p>
<p>[^20]:direction 英 [dəˈrekʃn]   美 [dəˈrekʃn]  n.方向;方位;趋势;动向;方面</p>
<p>[^21]:alternate  英 [ɔːlˈtɜːnət , ˈɔːltəneɪt , ˈɔːltɜːnət]  美 [ˈɔːltərnət , ˈɔːltərneɪt]<br>adj.交替的;轮流的;间隔的;每隔(…天等)的<br>v.使交替;使轮流;交替;轮流<br>n.代替者;代理人;候补者  <br />alter<br>英 [ˈɔːltə(r)]   美 [ˈɔːltər]<br>v.(使)改变，更改，改动;修改(衣服使更合身)</p>
<p>[^22]:steps  英 [steps]   美 [steps]<br>n.迈步;脚步声;步伐;步态;一步(的距离)<br>v.迈步;踩;踏;行走<br>step的第三人称单数和复数</p>
<h3 id="mowei"><a href="#mowei" class="headerlink" title="mowei"></a>mowei</h3><p>本周工作汇报<br>1.完成宁夏会计手机端专题</p>
<p>2.完成宁夏会计PC端；<br>3.完成宁夏酒店管理PC端专题；</p>
<p>4.完成宁夏酒店管理手机端专题</p>
<p>5.编写宁夏电气运行与控制专题PC与手机端<br>下周工作<br>1.完成宁夏电气运行与控制专题PC与手机端<br>2.学习</p>
]]></content>
      <categories>
        <category>html_css</category>
      </categories>
      <tags>
        <tag>html_css</tag>
      </tags>
  </entry>
  <entry>
    <title>12.3-响应式布局</title>
    <url>/1-(0~50)/12.3-Responsive_layout/</url>
    <content><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><h3 id="1-1-原理"><a href="#1-1-原理" class="headerlink" title="1.1 原理"></a>1.1 原理</h3><p>使用媒体查询针对不同宽度的设备进行布局和样式的设置，从而适配不同设备的目的。</p>
<a id="more"></a>

<table>
<thead>
<tr>
<th>设备划分</th>
<th>尺寸区间</th>
</tr>
</thead>
<tbody><tr>
<td>超小屏幕（手机）</td>
<td>&lt; 768px</td>
</tr>
<tr>
<td>小屏设备（平板）</td>
<td>&gt;= 768px ~ &lt; 992px</td>
</tr>
<tr>
<td>中等屏幕（以前的小桌面显示器）</td>
<td>&gt;= 992px ~ &lt; 1200px</td>
</tr>
<tr>
<td>宽屏设备（桌面显示器）</td>
<td>&gt;= 1200px</td>
</tr>
</tbody></table>
<br />

<h3 id="1-2-布局容器"><a href="#1-2-布局容器" class="headerlink" title="1.2 布局容器"></a>1.2 布局容器</h3><p>1.响应式需要一个父级做为布局容器，来配合子级元素来实现变化效果。</p>
<p>原理就是在不同屏幕下，通过媒体查询来改变这个布局容器的大小，再改变里面子元素的排列方式和大小，从而实现不同<br>屏幕下，看到不同的页面布局和样式变化。</p>
<p>2.平时我们的响应式尺寸划分</p>
<p>超小屏幕（手机，小于 768px）：设置宽度为 100%<br>小屏幕（平板，大于等于 768px）：设置宽度为 750px<br>中等屏幕（桌面显示器，大于等于 992px）：宽度设置为 970px<br>大屏幕（大桌面显示器，大于等于 1200px）：宽度设置为 1170px</p>
<ul>
<li>为什么后3个，设置的总比总宽度小一些，视频里说的是为了两边留些空白，好看；2020-10-24 02:03:47</li>
</ul>
<p>但是我们也可以根据实际情况自己定义划分，上面的只是比较常用；</p>
<p>3.代码练习：</p>
<ul>
<li>平常这些代码在bootstrap.css里面，这里是自己写css；</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">            height: 150px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/* 1. 超小屏幕下  小于 768，最大不过768  布局容器的宽度为 100% */</span></span></span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">767px</span>) &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">                width: 100%;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/* 2. 小屏幕下  大于等于768,就是不小于768，最小不过768  布局容器改为 750px */</span></span></span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">768px</span>) &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">                width: 750px;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/* 3. 中等屏幕下 大于等于 992px   布局容器修改为 970px */</span></span></span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">992px</span>) &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">                width: 970px;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/* 4. 大屏幕下 大于等于1200 布局容器修改为 1170 */</span></span></span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">1200px</span>) &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">                width: 1170px;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 响应式开发里面，首先需要一个布局容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>screen<br>英 [skriːn]   美 [skriːn]<br>n.屏幕;荧光屏;荧屏;银幕;(统称)电影，电视<br>v.掩藏;遮蔽;保护;庇护;包庇;袒护;筛查;检查</li>
<li>media<br>英 [ˈmiːdiə]   美 [ˈmiːdiə]<br>n.大众传播媒介，大众传播工具(指电视、广播、报纸、互联网)<br>medium的复数</li>
<li></li>
</ul>
<br />

<h3 id="1-3-案例：导航"><a href="#1-3-案例：导航" class="headerlink" title="1.3 案例：导航"></a>1.3 案例：导航</h3><p>响应式导航；<a href="https://www.bilibili.com/video/BV14J4114768?p=502">视频</a></p>
<h4 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1. 需求分析"></a>1. 需求分析</h4><p>①当我们屏幕大于等于768像素，我们给nav宽度为750px，因为里面子盒子需要浮动，所以nav需要清除浮动。<br>② nav里面包含8个小li 盒子，每个盒子的宽度定为 93.75px（750/8）， 高度为 30px，浮动一行显示。<br>③ 当我们屏幕缩放，宽度小于768像素的时候， nav盒子宽度修改为 100% 宽度。<br>④ nav里面的8个小li，宽度修改为 33.33%，这样一行就只能显示3个小li ，剩余下行显示。</p>
<h4 id="2-代码："><a href="#2-代码：" class="headerlink" title="2. 代码："></a>2. 代码：</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line">    ul &#123;</span><br><span class="line">      list-style: none;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.nav</span> &#123;</span></span><br><span class="line">      width: 750px;</span><br><span class="line">      margin: 0 auto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">      float: left;</span><br><span class="line"><span class="css">      <span class="selector-tag">width</span>: 93<span class="selector-class">.75px</span>;</span></span><br><span class="line">      height: 30px;</span><br><span class="line">      background-color: green;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/* 大于768px直接设置了，就不用媒体查询了 */</span></span></span><br><span class="line"><span class="css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">768px</span>) &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.nav</span> &#123;</span></span><br><span class="line">        width: 100%;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">width</span>: 33<span class="selector-class">.33</span>%;</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>导航栏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>导航栏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>导航栏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>导航栏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>导航栏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>导航栏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>导航栏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>导航栏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>视频结束于P502；2020-10-24 03:04:16</p>
<hr>
<h2 id="2-Bootstrap"><a href="#2-Bootstrap" class="headerlink" title="2. Bootstrap"></a>2. Bootstrap</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p>1.Bootstrap 来自 Twitter（推特），是目前最受欢迎的前端框架。Bootstrap 是基于 HTML、CSS 和 JAVASCRIPT 的，它<br>简洁灵活，使得 Web 开发更加快捷。</p>
<p>中文官网：<a href="http://www.bootcss.com/">http://www.bootcss.com/</a><br>官网：<a href="http://getbootstrap.com/">http://getbootstrap.com/</a><br>推荐使用：<a href="http://bootstrap.css88.com/">http://bootstrap.css88.com/</a></p>
<ul>
<li>但 推荐使用 这个网址，已经打不开了；打开是一个站点创建成功；2020-10-25 03:40:39</li>
<li>今天实验的时候，又打开了；2020-11-29 16:56:08</li>
</ul>
<p>2.框架：顾名思义就是一套架构，它有一套比较完整的网页功能解决方案，而且控制权在框架本身，有预制样式库、组件和<br>插件。使用者要按照框架所规定的某种规范进行开发。</p>
<h4 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h4><p>标准化的html+css编码规范<br>提供了一套简洁、直观、强悍的组件<br>有自己的生态圈，不断的更新迭代<br>让开发更简单，提高了开发的效率</p>
<h4 id="2-版本"><a href="#2-版本" class="headerlink" title="2. 版本"></a>2. 版本</h4><p>2.x.x：停止维护,兼容性好,代码不够简洁，功能不够完善。<br>3.x.x：目前使用最多,稳定,但是放弃了 IE6-IE7。对 IE8 支持但是界面效果不好,偏向用于开发响应式布局、移<br>动设备优先的 WEB 项目。<br>4.x.x ：最新版，目前还不是很流行，里面到底如何，比3.X.X好不好呢？不清楚；</p>
<hr>
<h3 id="2-2-使用"><a href="#2-2-使用" class="headerlink" title="2.2 使用"></a>2.2 使用</h3><p>1.在现阶段我们还没有接触JS相关课程，所以我们只考虑使用它的样式库。</p>
<p>2.控制权在框架本身，使用者要按照框架所规定的某种规范进行开发。</p>
<p>3.Bootstrap 使用四步曲： 1. 创建文件夹结构 2. 创建 html 骨架结构 3. 引入相关样式文件 4. 书写内容</p>
<h4 id="1-创建文件夹"><a href="#1-创建文件夹" class="headerlink" title="1. 创建文件夹"></a>1. 创建文件夹</h4><p>1.单纯的创建一个文件夹；</p>
<p><img src="../../img/12.3/1.png" alt="1"></p>
<p>2.bootstrap的css与js，放在里面。不要放在外面的css和js文件里；2020-10-25 03:58:49</p>
<h4 id="2-创建html骨架结构"><a href="#2-创建html骨架结构" class="headerlink" title="2. 创建html骨架结构"></a>2. 创建html骨架结构</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">&lt;script src=&quot;https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;script src=&quot;https://oss.maxcdn.com/respond/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--要求当前网页使用IE浏览器最高版本的内核来渲染--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--视口的设置：视口的宽度和设备一致，默认的缩放比例和PC端一致，用户不能自行缩放--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, user-scalable=0&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用了一下，没啥感觉--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">&lt;!--解决ie9以下浏览器对html5新增标签的不识别，并导致CSS不起作用的问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--解决ie9以下浏览器对 css3 Media Query 的不识别 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://oss.maxcdn.com/respond/1.4.2/respond.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">![endif]--</span>&gt;</span></span><br></pre></td></tr></table></figure>


</blockquote>
<ul>
<li><p>但其实也可以不写：</p>
<p>也可以不写第2行：<code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</code></p>
<p>不用强制使用IE浏览器内核来渲染吧；</p>
<p>2020-10-25 04:09:11</p>
</li>
<li><pre><code class="html"><span class="comment">&lt;!--[if lt IE 9]&gt;</span>
<span class="comment">&lt;script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"&gt;&lt;/script&gt;</span>
<span class="comment">&lt;script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"&gt;&lt;/script&gt;</span>
<span class="comment">&lt;![endif]--&gt;</span>
<span class="comment">&lt;!--hexoPostRenderEscape:&lt;figure class="highlight yaml"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;span class="string"&gt;也可以不写，一般没有IE浏览器；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="meta"&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="comment"&gt;#### 3. 引入样式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="string"&gt;```html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="string"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="string"&gt;rel=&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="string"&gt;href=&amp;quot;./6-bootstrap/css/bootstrap.min.css&amp;quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="string"&gt;&amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</span>
</code></pre>
</li>
</ul>
<h4 id="4-输入内容"><a href="#4-输入内容" class="headerlink" title="4. 输入内容"></a>4. 输入内容</h4><p>1.直接拿Bootstrap 预先定义好的样式来使用</p>
<p>2.修改Bootstrap 原来的样式，注意权重问题</p>
<p>2.1 比如：</p>
<ul>
<li><p>1.<code>&lt;div class=&quot;btn btn-success&quot;&gt;登录&lt;/div&gt;</code></p>
</li>
<li><p>2.你不想要它的样式，你想改变一些长宽；</p>
<p>2.1 你可以加个类；（不要轻易修改bootstrap的原文件）</p>
<p><code>&lt;div class=&quot;btn btn-success login&quot;&gt;登录&lt;/div&gt;</code></p>
<p>2.3 预览：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.login</span> &#123;</span></span><br><span class="line">      width: 80px;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>  <img src="../../img/12.3/2.png" alt="2"></p>
<p>  2.2 也可以去css文件改，但这样会打乱你记忆原版的样子。不建议，建议新添加自己的类；</p>
<ul>
<li>3.想修改其他样式，或添加，同理；2020-10-25 04:28:48</li>
</ul>
<p>3.学好Bootstrap 的<red>关键</red>在于知道它定义了哪些样式，以及这些样式能实现什么样的效果</p>
<ul>
<li><p>1.可以在官网先看一些有的资料。一个个去实验，或者去查看代码要比这个先慢一些。毕竟有预览效果；</p>
<p>1.1 <a href="https://v3.bootcss.com/css/">https://v3.bootcss.com/css/</a></p>
</li>
</ul>
<hr>
<h3 id="2-3-布局容器"><a href="#2-3-布局容器" class="headerlink" title="2.3 布局容器"></a>2.3 布局容器</h3><p>1.响应式开发页面，需要一个大的布局容器</p>
<p>2.Bootstrap 需要为页面内容和栅格系统包裹一个 .container 容器，它提供了两个作此用处的类。</p>
<p>2.1 container 类</p>
<p>响应式布局的容器 固定宽度<br>大屏 ( &gt;=1200px) 宽度定为 1170px<br>中屏 ( &gt;=992px) 宽度定为 970px<br>小屏 ( &gt;=768px) 宽度定为 750px<br>超小屏 (100%)</p>
<ul>
<li>这个类自己把媒体查询就写好了；</li>
<li>当然还有其他属性，内边距等等，自己查看；</li>
</ul>
<p>2.2 container-fluid 类</p>
<p>流式布局容器 ，百分百宽度，一直是100%</p>
<p>占据全部视口（viewport）的容器。</p>
<p>适合做移动端页面</p>
<hr>
<h2 id="3-栅格系统"><a href="#3-栅格系统" class="headerlink" title="3. 栅格系统"></a>3. 栅格系统</h2><h3 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h3><p>0.开始于P508</p>
<p>1.栅格系统英文为“grid systems”,也有人翻译为“网格系统”，它是指将页面布局划分为等宽的列，然后通过列数<br>的定义来模块化页面布局。</p>
<p>2.Bootstrap 提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会<br>自动分为最多12列。</p>
<p>Bootstrap里面container宽度是固定的，但不同屏幕下，container宽度不同，我们再把container划分为12等份；</p>
<ul>
<li>但父元素是container；</li>
</ul>
<h3 id="3-2-参数"><a href="#3-2-参数" class="headerlink" title="3.2 参数"></a>3.2 参数</h3><p>1.可在官网查看其他资料：<a href="https://v3.bootcss.com/css/#grid">https://v3.bootcss.com/css/#grid</a></p>
<p>2.栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中。</p>
<p>2.1 row<br>英 [rəʊ , raʊ]   美 [roʊ , raʊ]<br>n.一排;一列;一行;(剧院、电影院等的)一排座位;(编织中的)针行，一整行<br>v.划(船);划船送(某人)<br>n.严重分歧;纠纷;吵架;争吵;大的噪音<br>v.吵架;大声争辩</p>
<p>2.2 column<br>英 [ˈkɒləm]   美 [ˈkɑːləm]<br>n.柱;(通常为)圆形石柱;纪念柱;圆柱状物;柱形物;(书、报纸印刷页上的)栏</p>
<ul>
<li>先有行，后有列；</li>
</ul>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">超小屏幕 手机 (&lt;768px)</th>
<th align="left">小屏幕 平板 (≥768px)(&lt;=992px)</th>
<th align="left">中等屏幕 桌面显示器 (≥992px)</th>
<th align="left">大屏幕 大桌面显示器 (≥1200px)</th>
</tr>
</thead>
<tbody><tr>
<td align="left">栅格系统行为</td>
<td align="left">总是水平排列</td>
<td align="left">开始是堆叠在一起的，当大于这些阈值时将变为水平排列C</td>
<td align="left">同左</td>
<td align="left">同左</td>
</tr>
<tr>
<td align="left"><code>.container</code> 最大宽度</td>
<td align="left">None （自动）</td>
<td align="left">750px</td>
<td align="left">970px</td>
<td align="left">1170px</td>
</tr>
<tr>
<td align="left">类前缀</td>
<td align="left"><code>.col-xs-</code></td>
<td align="left"><code>.col-sm-</code></td>
<td align="left"><code>.col-md-</code></td>
<td align="left"><code>.col-lg-</code></td>
</tr>
<tr>
<td align="left">列（column）数</td>
<td align="left">12</td>
<td align="left">同左</td>
<td align="left">同左</td>
<td align="left">同左</td>
</tr>
</tbody></table>
<ul>
<li>行（row）必须放到container布局容器里面</li>
<li>我们实现列的平均划分，需要给列添加<red>类前缀</red></li>
<li>xs-extra small：超小； sm-small：小； md-medium：中等； lg-large：大；<ul>
<li>extra<br>英 [ˈekstrə]   美 [ˈekstrə]<br>adj.额外的;分外的;外加的;附加的<br>n.额外的事物;另外收费的事物;(电影里的)临时演员，群众演员<br>adv.额外;另外;外加;特别;格外;分外</li>
</ul>
</li>
<li>列（column）大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列</li>
<li>每一列默认有左右15像素的 padding</li>
<li>可以同时为一列指定多个设备的类名，以便划分不同份数 例如 class=”col-md-4 col-sm-6”</li>
</ul>
<p>3.行列代码练习：</p>
<p>预览：</p>
<p><img src="../../img/12.3/15.png" alt="15"></p>
<br />

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./6-bootstrap/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-attr">[class^=<span class="string">&quot;col&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/* 类名col开头的类 */</span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果列数总为12，能占满整个container宽度 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span>                      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果小于12，则不会占满，精确度到1份 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span>                      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果小于12，所有份数都会向左靠齐 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-2&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span>                      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果大于12，所有多的，会另起一行，那一坨多的都会另起一行 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-4&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span>                      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.bilibili.com/video/BV14J4114768?p=508">P508</a>-end</p>
<p>3.1 如果在中等屏幕下，一行占3个怎么写？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3 col-md-4&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3 col-md-4&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3 col-md-4&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3 col-md-4&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span>                      </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>为什么col-md有这样的效果，因为在bootstrap.css那边已经弄好了媒体查询</li>
</ul>
<br />

<h3 id="3-3-列嵌套"><a href="#3-3-列嵌套" class="headerlink" title="3.3 列嵌套"></a>3.3 列嵌套</h3><p>1.栅格系统内置的栅格系统将内容再次嵌套。简单理解就是一个列内再分成若干份小列。我们可以通过添加一个新的 .row 元素和一系<br>列 .col-sm-* 元素到已经存在的 .col-sm-* 元素内。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 列嵌套 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-6&quot;</span>&gt;</span>小列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-6&quot;</span>&gt;</span>小列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.栅格系统的参数是相对于父元素的，也是因为一个盒子的宽度继承父盒子的宽度；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 我们列嵌套最好加1个行 row 这样可以取消父元素的padding值 而且高度自动和父级一样高 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span>&gt;</span>a<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span>&gt;</span>b<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.为什么加了row就能取消父元素的padding？父元素的padding是：.container的内边距；</p>
<p><img src="../../img/12.3/17.png" alt="17"></p>
<p>3.1 取消，不是取消。应该是抵消；在.row类里面有这样的代码：</p>
<p><img src="../../img/12.3/18.png" alt="18"></p>
<ul>
<li>负的外边距。</li>
</ul>
<p>4.如果不加row，就是这样：</p>
<p><img src="../../img/12.3/19.png" alt="19"></p>
<ul>
<li>1.在①处，就是没有row的，被寄过去了15px；</li>
<li>2.在②处，因为row的-15px的外边距，又弹了回去；2020-11-30 01:02:01</li>
</ul>
<br />

<hr>
<h3 id="3-4-列偏移"><a href="#3-4-列偏移" class="headerlink" title="3.4 列偏移"></a>3.4 列偏移</h3><p>1.P511；2020-10-28 00:18:01</p>
<p>2.使用 .col-md-offset-* 类可以将列向右侧偏移。这些类实际是通过使用 * 选择器为当前元素增加了左侧的边距（margin）。</p>
<p>2.1 在栅格系统，有浮动。一行不满12列的时候，不同的列块只会靠在一起；</p>
<p><img src="../../img/12.3/3.png" alt="3"></p>
<p>2.2 如何让不满12的情况下，分开列块呢？用浮动覆盖吗？但这里是响应式，固定的px无法动态的变化</p>
<p>2.3 只能用bootstrap给的：.col-md-offset-* 类</p>
<ul>
<li>offset<br>英 [ˈɒfset]   美 [ˈɔːfset]<br>v.抵消;弥补;补偿<br>adj.胶印的<br>n.开端;出发;平版印刷;抵消;补偿</li>
</ul>
<p>3.代码练习</p>
<p>3.1 练习框架：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./6-bootstrap/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-attr">[class^=<span class="string">&quot;col&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">    &#125;<span class="comment">/* 类名col开头的类 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.row</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line">      height: 50px;</span><br><span class="line">      background-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>左侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;div class=&quot;col-md-4&quot;&gt;右侧&lt;/div&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4 col-md-offset-4&quot;</span>&gt;</span>右侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.2 将右侧盒子往右侧偏移4份；2020-10-28 00:37:01</p>
<p><code>&lt;div class=&quot;col-md-4 col-md-offset-4&quot;&gt;右侧&lt;/div&gt;</code></p>
<p>3.3 预览：</p>
<p><img src="../../img/12.3/4.png" alt="4"></p>
<h4 id="2-居中"><a href="#2-居中" class="headerlink" title="2. 居中"></a>2. 居中</h4><p>1.如果只有一个盒子，能居中吗？</p>
<p>2.可以，例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8 col-md-offset-2&quot;</span>&gt;</span>中间盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.1 因为只有一个盒子；</p>
<p>2.2 所以右偏移剩下的列数/2就可以了，左边一半，右边一半；</p>
<p>3.预览：</p>
<p><img src="../../img/12.3/5.png" alt="5"></p>
<hr>
<h3 id="3-5-列排序"><a href="#3-5-列排序" class="headerlink" title="3.5 列排序"></a>3.5 列排序</h3><p>1.通过使用 .col-md-push-* 和 .col-md-pull-* 类就可以很容易的改变列（column）的顺序。</p>
<p>2.例如：</p>
<p><img src="../../img/12.3/6.png" alt="6"></p>
<p>左侧跑到右侧，右侧跑到左侧；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 列排序 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-4 col-lg-push-8&quot;</span>&gt;</span>左侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-8 col-lg-pull-4&quot;</span>&gt;</span>右侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.<a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/push">push</a><br>英 [pʊʃ]   美 [pʊʃ]<br>v.推动(人或物);移动(身体部位);推进(道路);挤开;推动;促使(达到某程度或状态)<br>n.推;搡;进攻;攻势;挺进;矢志的追求;坚定的努力</p>
<p>3.1 pull<br>英 [pʊl]   美 [pʊl]<br>v.拉;拽;扯;拖;拔出;抽出;(向某方向)拖，拉动<br>n.拉;拽;扯;力;引力;磁力;吸引力;诱惑;影响</p>
<p>4.左侧推出去，右侧拉过来；</p>
<p>5.自己练习：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8&quot;</span>&gt;</span>左侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>右侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8 col-md-push-8&quot;</span>&gt;</span>左侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4 col-md-pull-4&quot;</span>&gt;</span>右侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>5.1 如图所示：</p>
<p><img src="../../img/12.3/7.png" alt="7"></p>
<hr>
<br />

<h3 id="3-6-响应式工具"><a href="#3-6-响应式工具" class="headerlink" title="3.6 响应式工具"></a>3.6 响应式工具</h3><p>0.视频：<a href="https://www.bilibili.com/video/BV14J4114768?p=513">P513</a>；</p>
<p>0.1 bootstrap中文官网此部分：<a href="https://v3.bootcss.com/css/#responsive-utilities">链接</a></p>
<p>1.为了加快对移动设备友好的页面开发工作，利用媒体查询功能，并使用这些工具类可以方便的针对不同设备展示<br>或隐藏页面内容。</p>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">超小屏幕手机 (&lt;768px)</th>
<th align="left">小屏幕平板 (≥768px)</th>
<th align="left">中等屏幕桌面 (≥992px)</th>
<th align="left">大屏幕桌面 (≥1200px)</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>.visible-xs-*</code></td>
<td align="left">可见</td>
<td align="left">隐藏</td>
<td align="left">隐藏</td>
<td align="left">隐藏</td>
</tr>
<tr>
<td align="left"><code>.visible-sm-*</code></td>
<td align="left">隐藏</td>
<td align="left">可见</td>
<td align="left">隐藏</td>
<td align="left">隐藏</td>
</tr>
<tr>
<td align="left"><code>.visible-md-*</code></td>
<td align="left">隐藏</td>
<td align="left">隐藏</td>
<td align="left">可见</td>
<td align="left">隐藏</td>
</tr>
<tr>
<td align="left"><code>.visible-lg-*</code></td>
<td align="left">隐藏</td>
<td align="left">隐藏</td>
<td align="left">隐藏</td>
<td align="left">可见</td>
</tr>
<tr>
<td align="left"><code>.hidden-xs</code></td>
<td align="left">隐藏</td>
<td align="left">可见</td>
<td align="left">可见</td>
<td align="left">可见</td>
</tr>
<tr>
<td align="left"><code>.hidden-sm</code></td>
<td align="left">可见</td>
<td align="left">隐藏</td>
<td align="left">可见</td>
<td align="left">可见</td>
</tr>
<tr>
<td align="left"><code>.hidden-md</code></td>
<td align="left">可见</td>
<td align="left">可见</td>
<td align="left">隐藏</td>
<td align="left">可见</td>
</tr>
<tr>
<td align="left"><code>.hidden-lg</code></td>
<td align="left">可见</td>
<td align="left">可见</td>
<td align="left">可见</td>
<td align="left">隐藏</td>
</tr>
</tbody></table>
<p>1.1 visible；英 [ˈvɪzəbl]   美 [ˈvɪzəbl] ；adj.看得见的;可见的;明显的;能注意到的</p>
<p>2.代码练习</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.row</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line">        height: 300px;</span><br><span class="line">        background-color: purple;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="css">    <span class="selector-class">.row</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span></span><br><span class="line">        background-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    span &#123;</span><br><span class="line">        font-size: 50px;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;visible-lg&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-3&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-3 hidden-md hidden-xs&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-3&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.1 说明</p>
<ul>
<li>1只在超大屏幕显示，3在中等屏幕与超小屏幕隐藏；2020-10-28 06:38:59</li>
</ul>
<hr>
<h2 id="4-案例"><a href="#4-案例" class="headerlink" title="4. 案例"></a>4. 案例</h2><p>1.阿里百秀首页</p>
<h3 id="1-技术选型"><a href="#1-技术选型" class="headerlink" title="1. 技术选型"></a>1. 技术选型</h3><p>方案：我们采取响应式页面开发方案<br>技术：bootstrap框架<br>设计图： 本设计图采用 1280px 设计尺寸</p>
<h3 id="2-需求分析"><a href="#2-需求分析" class="headerlink" title="2. 需求分析"></a>2. 需求分析</h3><h4 id="2-1-页面布局"><a href="#2-1-页面布局" class="headerlink" title="2.1 页面布局"></a>2.1 页面布局</h4><img src="../../img/12.3/8.png" alt="8" style="zoom:80%;" />

<p>1.article<br>英 [ˈɑːtɪkl]   美 [ˈɑːrtɪkl]<br>n.(报刊上的)文章，论文，报道;(协议、契约的)条款，项;物件，物品(尤指整套中的一件)<br>vi.使受协议条款的约束;以协议（或契约）约束;订约将…收为学徒（或徒弟）;定约雇用进行控告;提出罪状（或指责）(against);签订协议</p>
<p>2.aside<br>英 [əˈsaɪd]   美 [əˈsaɪd]<br>adv.到旁边;在旁边;留;存;(用于名词后)除…以外<br>n.旁白;低声说的话;离题话</p>
<h4 id="2-2-屏幕划分"><a href="#2-2-屏幕划分" class="headerlink" title="2.2 屏幕划分"></a>2.2 屏幕划分</h4><p>① 屏幕缩放发现 中屏幕 和 大屏幕布局 是一致的。 因此我们列 定义为 col-md- 就可以了， md 是大于等于 970 以上的<br>② 屏幕缩放发现 小屏幕 布局发生变化，因此我们需要为 小屏幕根据需求改变布局<br>③ 屏幕缩放发现 超小屏幕布局又发生变化，因此我们需要为 超小屏幕根据需求改变布局<br>④ 策略： 我们先布局 md以上的 pc端布局，最后根据实际需求在修改 小屏幕 和 超小屏幕的 特殊布局样式</p>
<h3 id="3-页面制作"><a href="#3-页面制作" class="headerlink" title="3. 页面制作"></a>3. 页面制作</h3><p>1.Bootstrap 使用四步曲： 1. 创建文件夹结构 2. 创建 html 骨架结构 3. 引入相关样式文件 4. 书写内容</p>
<p>2.创建文件夹，在本地创建一个放写代码的，或相关资料的文件夹；</p>
<p>3.创建html 骨架结构：</p>
<ul>
<li>1.把页面布局结构写出即可</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;col-md-7&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="3-2-container修改"><a href="#3-2-container修改" class="headerlink" title="3.2 container修改"></a>3.2 container修改</h4><p>1.因为本效果图采取 1280的宽度， 而Bootstrap 里面 container宽度 最大为 1170px，因此我们需要手动改下container宽度</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 利用媒体查询修改 container宽度适合效果图宽度 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">1280px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.container</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">1280px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-logo制作"><a href="#3-3-logo制作" class="headerlink" title="3.3 logo制作"></a>3.3 logo制作</h4><p>1.先布局；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hidden-xs&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;visible-xs&quot;</span>&gt;</span>阿里百秀<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2.放入logo图片，因为logo背景图片是白色的，所以背景颜色加个蓝</p>
<p>html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./3-img/logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>css:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#429ad9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3.去掉左内边距，但不能改col-md-2的，它是隶属于bootstrap的，一改全改，也会错乱bootstrap的使用；</p>
<p>3.1 css:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>在css那边修改标签header；</li>
<li>不过标签的权重只有1，类名的权重有10；所以要加个!important;</li>
</ul>
<p><img src="../../img/12.3/9.png" alt="9"></p>
<p>4.图片不随着变化，当宽度不够时，显示不完整</p>
<p><img src="../../img/12.3/10.png" alt="10"></p>
<p>4.1 配置：父元素宽度100%</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 4 */</span></span><br><span class="line"><span class="selector-class">.logo</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-4-nav"><a href="#3-4-nav" class="headerlink" title="3.4 nav"></a>3.4 nav</h4><p>5.建造nav</p>
<p>快捷写法：li*5&gt;a ；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./3-img/logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>生活<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>自然<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>科技<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<p>5.1 清除小点；清除外内边距</p>
<p><img src="../../img/12.3/11.png" alt="11"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>5.2 鼠标放上a，有底色变化。</p>
<ul>
<li><p>1.把a变成块级元素，给个高度；2020-10-29 00:32:55</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 5.2.1 */</span></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.1 改变a的文本颜色，取消下划线；同时添加灰色底色</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li>2.添加伪元素:hover</li>
</ul>
<p><img src="../../img/12.3/12.png" alt="12"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 5.2.2 */</span></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>5.3 加入字体图标</p>
<p><img src="../../img/12.3/13.png" alt="13"></p>
<ul>
<li><p>1.包括250多个来自 Glyphicon Halflings 的字体图标。<a href="http://glyphicons.com/">Glyphicons</a> Halflings 一般是收费的，但是他们的作者允许 Bootstrap 免费使用。为了表示感谢，希望你在使用时尽量为 <a href="http://glyphicons.com/">Glyphicons</a> 添加一个友情链接。</p>
</li>
<li><p>2.复制图标下的类名，即可使用；<a href="https://v3.bootcss.com/components/">https://v3.bootcss.com/components/</a></p>
</li>
<li><p>3.利用关键词可以快速查找：</p>
<p>例如：电话-phone，照相机-camera，图片-picture；</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-camera&quot;</span>&gt;</span>生活<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-picture&quot;</span>&gt;</span>自然<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-phone&quot;</span>&gt;</span>科技<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-glass&quot;</span>&gt;</span>奇趣<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-glass&quot;</span>&gt;</span>美食<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>5.3.1 图标垂直居中</p>
<ul>
<li><p>1.图片是没对齐的，需要用css垂直居中；（此处：<a href="https://www.bilibili.com/video/BV14J4114768?p=518">视频</a>+6：19）</p>
<p><img src="../../img/12.3/14.png" alt="14"></p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>2.::before是什么情况？去详细看看这个居中的用法，看与before有什么关系没有；</p>
<p>在博客文章12里的8.5，有信息。看了后，没有自带before的信息。</p>
<p>这里的before是自己使用，应该就是字面意思。</p>
<ul>
<li>a元素之前的元素？</li>
</ul>
<p>2.1 可以学习理解一下这种用法；2020-11-12 23:15:09</p>
</li>
</ul>
<hr>
<h4 id="3-5-article"><a href="#3-5-article" class="headerlink" title="3.5 article"></a>3.5 article</h4><h5 id="1-结构"><a href="#1-结构" class="headerlink" title="1.结构"></a>1.结构</h5><p>1.开始做中间的；</p>
<ul>
<li>article<br>英 [ˈɑːtɪkl]   美 [ˈɑːrtɪkl]<br>n.(报刊上的)文章，论文，报道;(协议、契约的)条款，项;物件，物品(尤指整套中的一件)<br>vi.使受协议条款的约束;以协议（或契约）约束;订约将…收为学徒（或徒弟）;定约雇用进行控告;提出罪状（或指责）(against);签订协议</li>
</ul>
<p>2.中间分为上下：</p>
<img src="../../img/12.3/20.png" alt="20" style="zoom:67%;" />

<p>2.1 上设置为 news，下设置为publish</p>
<ul>
<li>publish<br>英 [ˈpʌblɪʃ]   美 [ˈpʌblɪʃ]<br>v.出版;发行;(在报刊)发表，刊登，登载;(在互联网上)发表，公布</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;col-md-7&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 新闻 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;news&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 发表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;publish&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-写new的内容"><a href="#2-写new的内容" class="headerlink" title="2.写new的内容"></a>2.写new的内容</h5><p>3.先写news的内容；</p>
<p>3.1 里面有5个小模块。我第一反应还是div，视频里面说li，基本这种都用的li，可我还是想着div；2020-12-7 16:15:58</p>
<ul>
<li><p>0.html那边还没写呢！2020-12-17 17:31:11</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;col-md-7&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 新闻 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;news&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 发表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;publish&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>1.先每个li，25%宽度，左浮动；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.news</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br/>
</li>
<li><p>2.单独设置第一个盒子，宽度50%，高度266px；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.news</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">266px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.1 这个时候，回去在 .news li 里面添加高度128</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.news</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">128px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>预览：</p>
<p><img src="http://bucket-c70.test.upcdn.net/12.3/21.png" alt="21"></p>
<p>（这里在<a href="https://www.bilibili.com/video/BV14J4114768?p=519">视频</a>；4：15处)</p>
</li>
</ul>
<p>4.做这个；</p>
<p><img src="../../img/12.3/21.png" alt="14"></p>
<ul>
<li><p>4.1 html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;news&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./3-img/lg.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>阿里百秀<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>4.2 内边距；</p>
<p>1.全部一起，已经是100%，加外边距，就挤出去，混乱排版，只能内边距；</p>
<p><img src="http://bucket-c70.test.upcdn.net/12.3/22.png" alt="22"></p>
<p>2.先完成了内边距，然后才能图片100%；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.news</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">128px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.a标签是内联元素，改成块级</p>
<blockquote>
<p>1、和其他元素都在一行上；</p>
<p>2、高度、行高和顶以及底边距都不可改变；</p>
<p>3、宽度就是它的文字或图片的宽度，不可改变。</p>
<p>总的来说，内联元素一般都是基于语义级(semantic)的基本元素，它只能容纳文本或者其他内联元素，通常被包括在块元素中使用，常见内联元素有“a、b、br”等。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.news</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.1 然后是img百分之百；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.news</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>没有效果？</p>
<p>news写成new了；呜呜，还找了许久，唉。代码真麻烦；也不报错；</p>
</li>
</ul>
</li>
<li><p>4.3 下面的阿里百秀；</p>
<p><img src="http://bucket-c70.test.upcdn.net/12.3/23.png" alt="23"></p>
<p>1.p标签里的内容，是被挤出去了。其实还是在那个框里面；</p>
<p>2.绝对定位先；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.news</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">41px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>预览：</p>
<p><img src="http://bucket-c70.test.upcdn.net/12.3/24.png" alt="24"></p>
<p>2.1 子绝父相；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.news</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>预览：</p>
<p><img src="http://bucket-c70.test.upcdn.net/12.3/25.png" alt="25"></p>
<p>2.2 不过P标签这里有个下外边距，F12得知；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.news</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">41px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0px</span>;<span class="comment">/*新加*/</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.3 因为第一个li的P样式单独不一样；所以单独设置CSS；</p>
<p><img src="http://bucket-c70.test.upcdn.net/12.3/26.png" alt="26"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.news</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(1)</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">41px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>4.4 右边的li</p>
<p>1.右边的简单，直接复制，改下内容即可；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./3-img/lg.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>阿里百秀<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./3-img/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>坚持 就算学的少，每天也不能不学<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>预览：</p>
<p><img src="http://bucket-c70.test.upcdn.net/12.3/28.png" alt="28"></p>
<p>2.剩下的，也是复制，粘贴，修改相应的数据；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;col-md-7&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;news&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./3-img/lg.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>阿里百秀<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./3-img/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>坚持 就算学的少，每天也不能不学<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./3-img/2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>坚持 就算学的少，每天也不能不学<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./3-img/3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>坚持 就算学的少，每天也不能不学<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./3-img/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>坚持 就算学的少，每天也不能不学<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>预览：</p>
<p><img src="http://bucket-c70.test.upcdn.net/12.3/29.png" alt="29"></p>
<p>2.1 每个li还要加外下边距10px；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.news</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">128px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<hr>
<h5 id="3-下面的publish"><a href="#3-下面的publish" class="headerlink" title="3.下面的publish"></a>3.下面的publish</h5><p>1.结构：</p>
<img src="http://bucket-c70.test.upcdn.net/12.3/30.png" alt="30" style="zoom:70%;" />

<p>1.1 一行一行的，每一行，分为左右。左边占9份，右边占3份；</p>
<p>1.2 栅格系统微：小屏幕为止都不变，超小屏幕才会变；</p>
<ul>
<li>就可以用：col-sm-x；2021-1-1 15:30:40</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;publish&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3&quot;</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1.2.1 终于不是ul&gt;li了；</p>
<p>2.这条线：</p>
<p><img src="http://bucket-c70.test.upcdn.net/12.3/31.png" alt="31"></p>
<p>2.1 这第一根线，用publish的上边框；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.publish</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.2 但会跑到news上面去，因为news里面的内容是浮动的；</p>
<ul>
<li>在news类那里，添加类名：clearfix；</li>
<li>bootstrap.css里面自带了clearfix类的CSS；2021-1-1 15:53:24</li>
</ul>
<p>3.bootstarp的h；<a href="https://v3.bootcss.com/css/#type">https://v3.bootcss.com/css/#type</a></p>
<p><img src="http://bucket-c70.test.upcdn.net/12.3/32.png" alt="32"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>生活馆 关于指甲的10个健康知识 你知道几个？<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.1 下面是<code>&lt;p&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>生活馆 关于指甲的10个健康知识 你知道几个？<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>alibaixiu 发布于 2015-11-23<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="http://bucket-c70.test.upcdn.net/12.3/33.png" alt="33"></p>
<p>3.1.1 不需要，自己再写css，bootstrap.css有相关css；</p>
<p>3.1.2 辅助类；<a href="https://v3.bootcss.com/css/#helper-classes">https://v3.bootcss.com/css/#helper-classes</a></p>
<p><code>&lt;p class=&quot;text-muted&quot;&gt;alibaixiu 发布于 2015-11-23&lt;/p&gt;</code></p>
<p>4.下面全是<code>&lt;p&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>生活馆 关于指甲的10个健康知识 你知道几个？<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-muted&quot;</span>&gt;</span>alibaixiu 发布于 2015-11-23<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>指甲是经常容易被人们忽略的身体部位， 事实上从指甲的健康状况可以看出一个人的身体健康状况， 快来看看10个暗藏在指甲里知识吧！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-muted&quot;</span>&gt;</span>阅读(2417)评论(1)赞 (18) 标签：健康 / 感染 / 指甲 / 疾病 / 皮肤 / 营养 / 趣味生活<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="http://bucket-c70.test.upcdn.net/12.3/34.png" alt="34"></p>
<p>5.右边图片</p>
<p>5.1 html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./3-img/3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>5.2 CSS:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.pic</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">166.4px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6.底部的线；2021-1-2 17:16:37</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.publish</span> <span class="selector-class">.row</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>7.整体一行的代码：html:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>生活馆 关于指甲的10个健康知识 你知道几个？<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-muted&quot;</span>&gt;</span>alibaixiu 发布于 2015-11-23<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>指甲是经常容易被人们忽略的身体部位， 事实上从指甲的健康状况可以看出一个人的身体健康状况， 快来看看10个暗藏在指甲里知识吧！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-muted&quot;</span>&gt;</span>阅读(2417)评论(1)赞 (18) 标签：健康 / 感染 / 指甲 / 疾病 / 皮肤 / 营养 / 趣味生活<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./3-img/3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.publish</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.publish</span> <span class="selector-class">.row</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pic</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">166.4px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h4 id="3-6-aside模块"><a href="#3-6-aside模块" class="headerlink" title="3.6 aside模块"></a>3.6 aside模块</h4><p>1.aside<br>英 [əˈsaɪd]   美 [əˈsaɪd]<br>adv.到旁边;在旁边;留;存;(用于名词后)除…以外<br>n.旁白;低声说的话;离题话</p>
<p>2.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./3-img/zgboke.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.banner</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.hot的高度不给，自然撑开；2021-1-4 18:26:06</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>热搜<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>欢迎加入中国博客联盟<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">P</span>&gt;</span>这里收录国内各个领域的优秀博客，是一个全人工编辑的开放式博客联盟交流和展示平台......<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>5.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hot</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6.按钮；<a href="https://v3.bootcss.com/css/#buttons-options">https://v3.bootcss.com/css/#buttons-options</a></p>
<p><code>&lt;span class=&quot;btn btn-primary&quot;&gt;热搜&lt;/span&gt;</code></p>
<p>7.不要圆弧；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hot</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>8.按钮下边距：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hot</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>9.改字号：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hot</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="3-7-logo响应式"><a href="#3-7-logo响应式" class="headerlink" title="3.7 logo响应式"></a>3.7 logo响应式</h4><h5 id="1-当小屏幕时；-≥768px"><a href="#1-当小屏幕时；-≥768px" class="headerlink" title="1.当小屏幕时； (≥768px)"></a>1.当小屏幕时； (≥768px)</h5><ul>
<li>这个样子：</li>
</ul>
<img src="http://bucket-c70.test.upcdn.net/12.3/35.png" style="zoom:80%;" />

<ul>
<li>这样子不行；</li>
</ul>
<p>2.用max-width，不缩放；图片最大宽度就是图片的宽度；</p>
<ul>
<li>然后，也要居中；2021-1-5 03:09:02</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.logo</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="comment">/* width: 100%; */</span></span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.1 不是块级元素，居中无效；</p>
<ul>
<li>解析：<a href="https://blog.csdn.net/caseywei/article/details/101267108">https://blog.csdn.net/caseywei/article/details/101267108</a></li>
</ul>
<blockquote>
<p>行内元素指的是可在同一行内排列的元素，列举几个常用行内元素：img、input、span、label、a、textarea、button。</p>
<p> 通常要给元素设置居中得效果的话，很多人会先想到margin: 0 auto;可当用这种方法给行内元素设置时，行内元素没有呈现我们想要得居中效果，以下为解决方案（行内元素宽度给不给都可以）。</p>
<p> 方法一：最笨得方法就是将行内元素的margin四个值或是父元素的padding四个值一步一步调（不推荐）；</p>
<p> 方法二：先将行内元素设置为块级（display:block;）元素，再设置margin：0 auto；</p>
<p> 方法三：将包裹行内元素的父元素写入我们常给文字居中的代码（text-align:center;）</p>
</blockquote>
<ul>
<li>行内元素就是内联元素，不同叫法；大概；</li>
</ul>
<p>2.2 我用了方法三，给.logo img的父元素，.logo a，设置了text-align:center;</p>
<ul>
<li>无效；</li>
</ul>
<p>2.3 于是我给.logo a的父元素，.logo设置了text-align:center;</p>
<ul>
<li>有效；</li>
</ul>
<p>2.4 难道，父元素不是块级元素的text-align:center;没有效果？</p>
<h5 id="3-超小屏幕时"><a href="#3-超小屏幕时" class="headerlink" title="3. 超小屏幕时"></a>3. 超小屏幕时</h5><p>1.进入了超小屏幕，把图片隐藏，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./3-img/lg.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hidden-xs&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>阿里百秀<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.准备一个盒子，在logo里面，只在超小屏幕下显示；2021-1-5 18:57:54</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./3-img/logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hidden-xs&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;visible-xs&quot;</span>&gt;</span>阿里百秀<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.logo</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h4 id="3-8-nav响应式"><a href="#3-8-nav响应式" class="headerlink" title="3.8 nav响应式"></a>3.8 nav响应式</h4><p>1.要求：</p>
<ul>
<li>1.小屏幕与超小屏幕下，排成一行，用浮动；</li>
<li>2.每个宽度是20%；</li>
<li>3.超小屏幕font-size:14px;</li>
</ul>
<p>2.CSS：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">992px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.nav</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br />

<hr>
<h4 id="3-9-news响应式"><a href="#3-9-news响应式" class="headerlink" title="3.9 news响应式"></a>3.9 news响应式</h4><p>1.当我们处于超小屏幕，第一个li宽度为100%，剩下的小li各站50%；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 4.3.9 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.news</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.news</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.news</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.因为我这里，会隐藏图片，在超小屏幕，bootstrap里面有这个代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width:</span> <span class="number">767px</span>)</span><br><span class="line">.hidden-xs &#123;</span><br><span class="line">    <span class="selector-tag">display</span>: <span class="selector-tag">none</span>!<span class="selector-tag">important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以我加了：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.news</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.1 原来在html那边有.hidden-xs的类，不知道为何写上。我删了后，没发现什么影响；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./3-img/lg.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hidden-xs&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>阿里百秀<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h4 id="3-x-代码："><a href="#3-x-代码：" class="headerlink" title="3.x 代码："></a>3.x 代码：</h4><p>1.html:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./1-bootstrap/css/bootstrap.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./2-css/index.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- （2） --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./3-img/logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 5 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 5.4 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-camera&quot;</span>&gt;</span>生活馆<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-picture&quot;</span>&gt;</span>自然汇<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-phone&quot;</span>&gt;</span>科技湖<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>奇趣事<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>美食杰<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 5 end --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;col-md-7&quot;</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3&quot;</span>&gt;</span>右侧<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.css:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">1280px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.container</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">1280px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* header */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3 */</span></span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#429ad9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4 */</span></span><br><span class="line"><span class="selector-class">.logo</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 5 */</span></span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 5.1 */</span></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 5.3.1 图标垂直居中 */</span></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<br />

<h2 id="x-资料"><a href="#x-资料" class="headerlink" title="x. 资料"></a>x. 资料</h2><p>1.视频资料：<a href="https://www.bilibili.com/video/BV14J4114768?p=499">https://www.bilibili.com/video/BV14J4114768?p=499</a></p>
<p>2.pdf资料：</p>
<p>链接：<a href="https://pan.baidu.com/s/1wnjKpjBo22olVEs2KAhjpA">https://pan.baidu.com/s/1wnjKpjBo22olVEs2KAhjpA</a><br>提取码：d0zw </p>
<ul>
<li>想找PPT，pdf没ppt好用；</li>
</ul>
<p>3.视频相应的代码资料： <a href="https://gitee.com/xiaoqiang001/html_css_material.git">https://gitee.com/xiaoqiang001/html_css_material.git</a></p>
]]></content>
      <categories>
        <category>html_css</category>
      </categories>
  </entry>
  <entry>
    <title>12.4</title>
    <url>/1-(0~50)/12.4-%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80%E4%B8%8E%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h2 id="1-flex布局体验"><a href="#1-flex布局体验" class="headerlink" title="1. flex布局体验"></a>1. flex布局体验</h2><p><a href="https://www.bilibili.com/video/BV14J4114768?p=416">https://www.bilibili.com/video/BV14J4114768?p=416</a></p>
<h3 id="1-1-传统布局与flex布局"><a href="#1-1-传统布局与flex布局" class="headerlink" title="1.1 传统布局与flex布局"></a>1.1 传统布局与flex布局</h3><p>传统布局</p>
<ul>
<li>兼容性好</li>
<li>布局繁琐</li>
<li>局限性，不能再移动端很好的布局</li>
</ul>
<p>flex弹性布局</p>
<ul>
<li>操作方便</li>
<li>PC端浏览器支持情况较差</li>
<li>IE 11或更低版本，不支持或仅部分支持</li>
</ul>
<h3 id="1-2-初体验"><a href="#1-2-初体验" class="headerlink" title="1.2 初体验"></a>1.2 初体验</h3><h4 id="1-搭建HTML结构"><a href="#1-搭建HTML结构" class="headerlink" title="1. 搭建HTML结构"></a>1. 搭建HTML结构</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>…</p>
<p>后面的笔记没法做，看视频才效果好；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">            div &#123;</span><br><span class="line">                display: flex;</span><br><span class="line">                width: 80%;</span><br><span class="line">                height: 300px;</span><br><span class="line">                background-color: pink;</span><br><span class="line">                justify-content: space-around;</span><br><span class="line">            &#125;</span><br><span class="line">            div span &#123;</span><br><span class="line"><span class="css">                <span class="comment">/* width: 150px; */</span></span></span><br><span class="line"><span class="css">                <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line">                background-color: purple;</span><br><span class="line">                margin-right: 5px;</span><br><span class="line">                flex: 1;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br >

<hr>
<h2 id="2-flex布局原理"><a href="#2-flex布局原理" class="headerlink" title="2. flex布局原理"></a>2. flex布局原理</h2><p><a href="https://www.bilibili.com/video/BV14J4114768?p=417">https://www.bilibili.com/video/BV14J4114768?p=417</a></p>
<h3 id="2-1-布局原理"><a href="#2-1-布局原理" class="headerlink" title="2.1 布局原理"></a>2.1 布局原理</h3><p>1.flex是flexible[^4] Box 的缩写，意为“弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为flex布局。</p>
<ul>
<li>不管是块级元素，还是行内元素。都可以弹性布局</li>
</ul>
<p>1.2注意：</p>
<ul>
<li><p>当我们为父盒子设为flex布局以后，子元素的float、clear和vertical-align属性将失效。</p>
<blockquote>
<p>float: 不需要，flex布局可以把盒子弄在一行；</p>
<p>同样的，清楚浮动的clear也不需要，同时也失效；</p>
<p>浮动并不完美，flex才是最完美的；</p>
</blockquote>
<blockquote>
<p>vertical-align：同样是因为，flex布局有垂直居中的功效，所以也没用与失效；2021-3-7 14:06:02</p>
</blockquote>
</li>
<li><p>伸缩布局 = 弹性布局 = 伸缩盒布局 = 弹性盒布局 = flex布局</p>
<p>这些布局都叫：flex布局；</p>
</li>
</ul>
<p>2.采用Flex布局的元素，称为flex容器（flex container），简称“容器”。它的所有子元素自动称为容器成员，称为Flex项目（flex item)，简称“项目”。</p>
<ul>
<li>体验中div就是flex父容器</li>
<li>span是子容器flex项目</li>
<li>子容器可以横向排位，也可以纵向排列</li>
</ul>
<p>总结flex布局原理：通过给父盒子添加flex属性，来控制子盒子的位置和排列方式。</p>
<hr>
<h2 id="3-flex布局父项常见属性"><a href="#3-flex布局父项常见属性" class="headerlink" title="3. flex布局父项常见属性"></a>3. flex布局父项常见属性</h2><h3 id="3-1-常见父项属性"><a href="#3-1-常见父项属性" class="headerlink" title="3.1 常见父项属性"></a>3.1 常见父项属性</h3><p>1.以下由6个属性是对父元素设置的</p>
<ul>
<li><p>flex-direction: 设置主轴的方向</p>
<blockquote>
<p>direction<br>英 [dəˈrekʃn]   美 [dəˈrekʃn]<br>n.方向;方位;趋势;动向;方面</p>
</blockquote>
</li>
<li><p>justify-content:  设置主轴上的子元素排位方式</p>
<blockquote>
<p>justify<br>英 [ˈdʒʌstɪfaɪ]   美 [ˈdʒʌstɪfaɪ]<br>v.证明…正确(或正当、有理);对…作出解释;为…辩解(或辩护);调整使全行排满;使每行排齐;使齐行</p>
</blockquote>
<blockquote>
<p>content<br>英 [ˈkɒntent , kənˈtent]  美 [ˈkɑːntent , kənˈtent]<br>n.所容纳之物;所含之物;内容;(书的)目录，目次;(书、讲话、节目等的)主题，主要内容<br>adj.满意;满足;愿意<br>v.满足;满意;知足;使满意;使满足</p>
</blockquote>
</li>
<li><p>flex-wrap[^1]: 设置子元素是否换行</p>
</li>
<li><p>align[^2]-content：设置侧轴上的子元素的排列方式（多行）</p>
</li>
<li><p>align[^2]-items[^3]：设置侧轴上的子元素排位方式（单行)</p>
</li>
<li><p>flex-flow：复合属性，相当于同时设置了flex-direction和flex-wrap</p>
</li>
</ul>
<hr>
<h3 id="3-2-flex-direction"><a href="#3-2-flex-direction" class="headerlink" title="3.2 flex-direction"></a>3.2 flex-direction</h3><p>1.主轴与侧轴</p>
<p>在flex布局中，是分为主轴和侧轴两个方向，同样的叫法有：行和列、x轴和y轴；</p>
<ul>
<li>默认主轴方向是x轴方向，水平向右</li>
<li>默认侧轴方向是y轴方向，水平向下</li>
</ul>
<img src="../../img/12.4/1.jpg" alt="1" style="zoom:80%;" />

<p>2.属性值</p>
<p>flex-direction属性决定主轴的方向（即项目的排列方向）</p>
<p>注意：主轴和侧轴是会变化的，就看flex-direction设置谁为主轴，剩下的就是侧轴。而子元素是跟着主轴来排列的</p>
<table>
<thead>
<tr>
<th align="left">属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">row</td>
<td>默认值从左到右</td>
</tr>
<tr>
<td align="left">row-reverse[^5]</td>
<td>从右到左</td>
</tr>
<tr>
<td align="left">column[^6]</td>
<td>从上到下</td>
</tr>
<tr>
<td align="left">column-reverse</td>
<td>从下到上</td>
</tr>
</tbody></table>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV14J4114768?p=419&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV14J4114768?p=419&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<h3 id="3-3-justify-content"><a href="#3-3-justify-content" class="headerlink" title="3.3 justify-content"></a>3.3 justify-content</h3><p>0.设置主轴上的子元素排列方式</p>
<p>1.justify[^8]-content属性定义了项目再主轴上的对齐方式</p>
<p>注意：使用这个属性之前，一定要确定主轴是哪个；</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>默认值从头部开始，如果主轴是x轴，则从左到右</td>
</tr>
<tr>
<td>flex-end</td>
<td>从尾部开始排列</td>
</tr>
<tr>
<td>center</td>
<td>在主轴居中对齐（如果主轴是x轴，则水平居中）</td>
</tr>
<tr>
<td>space-around</td>
<td>平分剩余空间</td>
</tr>
<tr>
<td>space-between[^7]</td>
<td>先两边贴边，再平分剩余空间（重要）</td>
</tr>
</tbody></table>
<hr>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV14J4114768?p=420&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV14J4114768?p=420&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<h3 id="3-4-换行"><a href="#3-4-换行" class="headerlink" title="3.4 换行"></a>3.4 换行</h3><p>0.flex-wrap 设置子元素是否换行</p>
<p>1.默认情况下，项目都排在一条直线上（又称为“轴线”）上。flex-wrap属性定义，flex布局中默认是不换行的。</p>
<ul>
<li>改小子元素（项目）的宽度也要装下去</li>
</ul>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>nowrap</td>
<td>默认值，不换行</td>
</tr>
<tr>
<td>wrap</td>
<td>换行</td>
</tr>
</tbody></table>
<p>flex-wrap：wrap;</p>
<hr>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV14J4114768?p=421&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV14J4114768?p=421&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<h3 id="3-5-侧轴上子元素排列方式-单行"><a href="#3-5-侧轴上子元素排列方式-单行" class="headerlink" title="3.5 侧轴上子元素排列方式(单行)"></a>3.5 侧轴上子元素排列方式(单行)</h3><p>0.align-items[^3]</p>
<p>1.该属性是控制子项在侧轴（默认是y轴）上的排列方式，在子项为单项的时候使用。</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>从上到下</td>
</tr>
<tr>
<td>flex-end</td>
<td>从下到上</td>
</tr>
<tr>
<td>center</td>
<td>挤在一起居中（垂直居中）</td>
</tr>
<tr>
<td>stretch</td>
<td>拉伸（默认值）(拉的和父元素一样高)</td>
</tr>
</tbody></table>
<h4 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h4><p>就用得到它；</p>
<p>2.代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.1 主要是：</p>
<p>justify-content: center;  主轴居中</p>
<p>align-items: center; 侧轴居中</p>
<img src="../../img/12.4/2.png" alt="2" style="zoom:80%;" />

<p>2.2 如果主轴是y轴；则是竖着的居中</p>
<img src="../../img/12.4/3.png" alt="3" style="zoom:70%;" />

<hr>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV14J4114768?p=422&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV14J4114768?p=422&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<h3 id="3-6-align-content"><a href="#3-6-align-content" class="headerlink" title="3.6 align-content"></a>3.6 align-content</h3><p>0.设置侧轴上的子元素的排列方式（多行）</p>
<p>1.设置子项在侧轴上的排列方式，并且只能用于子项出现==换行==的情况，在单行下是没效果的。</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>默认值，在侧轴的头部开始排列</td>
</tr>
<tr>
<td>flex-end</td>
<td>在侧轴的尾部开始排列</td>
</tr>
<tr>
<td>center</td>
<td>在侧轴中间显示</td>
</tr>
<tr>
<td>space-around</td>
<td>子项在侧轴，平分剩余空间</td>
</tr>
<tr>
<td>space-between</td>
<td>子项在侧轴，先分布在两头，再平分剩余空间</td>
</tr>
<tr>
<td>stretch</td>
<td>设置 子项元素高度平分父元素高度</td>
</tr>
</tbody></table>
<p>2.普通换行。中间有很大缝隙；</p>
<p><img src="../../img/12.4/4.png" alt="4"></p>
<p>2.1 加上：align-content: flex-start;</p>
<p><img src="../../img/12.4/5.png" alt="5"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">align-content</span>: flex-start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3.写了：<code>align-content: center;</code>，侧轴没有居中，怎么回事？</p>
<ul>
<li>可能只有一行，单行这个是没有效果的；</li>
</ul>
<h4 id="2-align-content-和-align-items-区别"><a href="#2-align-content-和-align-items-区别" class="headerlink" title="2. align-content 和 align-items 区别"></a>2. align-content 和 align-items 区别</h4><p>1.align-items使用与单行情况下，只有上对齐、下对齐、居中和拉伸</p>
<p>2.align-content使用于换行，多行，的情况下（单行情况下无效），可以设置上对齐、下对齐、居中、拉伸以及平均分配剩余空间等属性值。</p>
<p>3.总觉就是单行找align-items，多行找，align-content</p>
<hr>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV14J4114768?p=423">https://www.bilibili.com/video/BV14J4114768?p=423</a></p>
</blockquote>
<h3 id="3-7-flex-flow"><a href="#3-7-flex-flow" class="headerlink" title="3.7 flex-flow"></a>3.7 flex-flow</h3><p>1.flex-flow属性是flex-direction和flex-wrap属性的复合属性；</p>
<p>2.语法：flex-flow: <em>flex-direction</em> <em>flex-wrap</em></p>
<ul>
<li>来源：<a href="https://www.runoob.com/cssref/css3-pr-flex-flow.html">https://www.runoob.com/cssref/css3-pr-flex-flow.html</a></li>
</ul>
<p>3.</p>
<hr>
<h2 id="4-flex布局子项常见属性"><a href="#4-flex布局子项常见属性" class="headerlink" title="4. flex布局子项常见属性"></a>4. flex布局子项常见属性</h2><p>1.flex子项目占的份数</p>
<p>2.align-self控制子项自己在侧轴的排列方式</p>
<p>3.order属性定义子项的排列顺序（前后顺序）</p>
<h3 id="4-1-flex属性"><a href="#4-1-flex属性" class="headerlink" title="4.1 flex属性"></a>4.1 flex属性</h3><p>1.flex属性定义子项目分配剩余空间，用flex来表示占多少份数</p>
<p>2.flex 属性是 flex-grow、flex-shrink 和 flex-basis 属性的简写属性。</p>
<p><strong>注意：</strong>如果元素不是弹性盒模型对象的子元素，则 flex 属性不起作用。</p>
<p>3.</p>
<table>
<thead>
<tr>
<th align="left">默认值：</th>
<th>0 1 auto</th>
</tr>
</thead>
<tbody><tr>
<td align="left">继承：</td>
<td>否</td>
</tr>
<tr>
<td align="left">可动画化：</td>
<td>是，<em>参见个别的属性</em>。请参阅 <a href="https://www.runoob.com/cssref/css-animatable.html"><em>可动画化（animatable）</em></a>。</td>
</tr>
<tr>
<td align="left">版本：</td>
<td>CSS3</td>
</tr>
<tr>
<td align="left">JavaScript 语法：</td>
<td><em>object</em>.style.flex=”1”<a href="https://www.runoob.com/try/try.php?filename=trycss3_js_flex">尝试一下</a></td>
</tr>
</tbody></table>
<p>4.语法：flex: <em>flex-grow</em> <em>flex-shrink</em> <em>flex-basis</em>|auto|initial|inherit;</p>
<blockquote>
<p>2~4，是菜鸟教程上面的；2021-3-8 16:52:01</p>
</blockquote>
<hr>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>默认0。数字1就一份，数字2就两份；2021-3-8 16:51:23</p>
<p>当数字变化，总份数也会变化；</p>
<p>5.例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        section &#123;</span><br><span class="line">            display: flex;</span><br><span class="line">            width: 60%;</span><br><span class="line">            height: 150px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 150px;</span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span></span><br><span class="line">            flex: 1;</span><br><span class="line">            background-color: green;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 150px;</span><br><span class="line">            background-color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>5.1 解析：</p>
<p>div:nth-child(1)与(3)，各设置了width：150px；</p>
<p>div:nth-child(2)，直接</p>
<h3 id="4-2-align-self-控制子项侧轴"><a href="#4-2-align-self-控制子项侧轴" class="headerlink" title="4.2 align-self 控制子项侧轴"></a>4.2 align-self 控制子项侧轴</h3><p>0.align-self控制子项自己在侧轴上的排列方式</p>
<p>1.align-self属性允许单个项目有其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，标识继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>
<p>2.它可以一个一个的控制，上面的align-items是一行行的；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            display: flex;</span><br><span class="line">            width: 80%;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div span &#123;</span><br><span class="line">            width: 150px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: purple;</span><br><span class="line">            margin-right: 5px;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span></span><br><span class="line">            align-self: flex-end;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<blockquote>
<p><a href="https://www.bilibili.com/video/BV14J4114768?t=187&amp;p=425">https://www.bilibili.com/video/BV14J4114768?t=187&amp;p=425</a></p>
</blockquote>
<h3 id="4-3-order属性定义顺序"><a href="#4-3-order属性定义顺序" class="headerlink" title="4.3 order属性定义顺序"></a>4.3 order属性定义顺序</h3><p>0.order[^9]属性定义项目的排列顺序</p>
<blockquote>
<p>菜鸟教程：<a href="https://www.runoob.com/cssref/css3-pr-order.html">https://www.runoob.com/cssref/css3-pr-order.html</a></p>
</blockquote>
<p>1.数值越小，排列越靠前，默认为0；</p>
<ul>
<li>注意：和z-index不一样；</li>
</ul>
<hr>
<h2 id="5-携程网首页案例制作"><a href="#5-携程网首页案例制作" class="headerlink" title="5. 携程网首页案例制作"></a>5. 携程网首页案例制作</h2><h3 id="5-1-技术选型"><a href="#5-1-技术选型" class="headerlink" title="5.1 技术选型"></a>5.1 技术选型</h3><p>方案：我们采取单独制作移动页面方案</p>
<p>技术：布局采取flex布局</p>
<ol start="2">
<li>搭建相关文件夹结构</li>
</ol>
<img src="../../img/12.4/6.png" alt="6" style="zoom:50%;" />

<blockquote>
<p><a href="https://www.bilibili.com/video/BV14J4114768?p=426&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV14J4114768?p=426&amp;spm_id_from=pageDriver</a></p>
<p>01:32</p>
</blockquote>
<h2 id="X-脚注"><a href="#X-脚注" class="headerlink" title="X. 脚注"></a>X. 脚注</h2><p>[^1]:wrap英 [ræp]   美 [ræp] v.包，裹(礼物等);用…包裹(或包扎、覆盖等);用…缠绕(或围紧)<br>n.(女用)披肩，围巾;包裹(或包装)材料;(拍摄电影时)完成拍摄，停机</p>
<p>[^2]:align 英 [əˈlaɪn]   美 [əˈlaɪn] v.排整齐;校准;(尤指)使成一条直线;使一致</p>
<p>[^3]:item 英 [ˈaɪtəm]   美 [ˈaɪtəm] n.项目;一件商品(或物品);一则，一条(新闻)</p>
<p>[^4]:flexible 英 [ˈfleksəbl]   美 [ˈfleksəbl]<br>adj.能适应新情况的;灵活的;可变动的;柔韧的;可弯曲的;有弹性的</p>
<p>[^5]:reverse 英 [rɪˈvɜːs]   美 [rɪˈvɜːrs]<br>v.颠倒;彻底转变;使完全相反;撤销，废除(决定、法律等);使反转;使次序颠倒<br>n.相反的情况(或事物);后面;背面;反面;倒挡<br>adj.相反的;反面的;反向的;背面的;后面的</p>
<p>[^6]:column 英 [ˈkɒləm]   美 [ˈkɑːləm]<br>n.柱;(通常为)圆形石柱;纪念柱;圆柱状物;柱形物;(书、报纸印刷页上的)栏</p>
<p>[^7]:between 英 [bɪˈtwiːn]   美 [bɪˈtwiːn]<br>prep.(空间上)在…中间，介于…之间;(时间上)在…之间，在…中间;(数量、重量、距离等)介于…之间<br>adv.(空间或时间上)介于…之间</p>
<p>[^8]:justify英 [ˈdʒʌstɪfaɪ]   美 [ˈdʒʌstɪfaɪ]<br>v.证明…正确(或正当、有理);对…作出解释;为…辩解(或辩护);调整使全行排满;使每行排齐;使齐行</p>
<p>[^9]:order 英 [ˈɔːdə(r)]   美 [ˈɔːrdər]<br>n.顺序;次序;条理;治安;秩序;规矩<br>v.命令;指挥;要求;订购;订货;要求提供服务;点(酒菜等)</p>
]]></content>
  </entry>
  <entry>
    <title>13-VPN</title>
    <url>/1-(0~50)/13-VPN/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="c5850ca7db7c0d569a812a7b3910f5d4bbf4ace443dc3311326c318bb5a4e6d8">bb03bb0a8c65c3f7d630bc9a3238119a0b3c3058dc02a84417048fdcde4c2754e919ab28088435f553e521d09b85bef7735f4d1459d6f862925ba2a12ac49b097c3478a6b318841e537fc8a23b8075b5ad2698077dacaee34fc0a2073ba80dfb650017051b1c107ef64b243f3c60ae809cb3bc6c63c43e6f3bd9638190b8deb6964f3af8a19615db09f91ede35c3b1d25b3427245c490ab8babbc34e39f909dd00a07a834168461b86a82114de4c8da8c580c1f7f5c1e3e4154f3fb8082358d8bbc67a7420002026346712a9bb584344483430493cdb9f444ea11052fcaa8b9b75ac64cbc2d45a44d643812c0cb5df0b6fab1b297bb4b9121fa239fb898ab2df85f20ddf0812736e763bc3a3eed3f9c53bd0a85108c431e981b7bf6933c4378968b36dbd5040262ff7321e85e1c7d81fdb9cf162caabc6d249b0b5ccd8d707bb2eebbf16aab3155c0c69d7bc3171d9bf02c28172a04f4cfed98a1d6e459aa85eb7835ae2872c5f4a7abef187822eac32b31ff16ead349738e7fb5db8147ab617d4be905edd49d5a702da9db61d28eb761659d2b897c8aa5b5f51e21a092f4cf4cdbe5bb464d9b579d45bcc494661fe9fba80906a57f70e7462d28d05cf724a4356655fa05f2dfa116a5455edf3f5cb086c784578d88fe48136aaf1ea12aa24d579e3601a81ccf160736119d53512da731e22f005c63bee4c459516d3f806fbcbe8bd9ed0212b6dca486e8420c25c3cb5fdf7bb3dec3c7620d671388ad7701de46f467b2e5a66881ac7c5457b214f2234319e1c4d4eaf25e16cbb0c76ca02ddd58ec00d4dd9917a8e3562f51eff1386d70d27eec8b3b38314e3a2ce93a87497f5180c6f6291ea61918459c36be9eac6b8cbcb78e4378f63a0bd512975b863505dd64815a73dce2e043e3c8686545e8a86a893c8c97dc0d0709dbd636b9d4e75d2cb84f761b8d4671b045a19e2600fe47cceaf77180c9195250185a6207201870484a798a0cf56cf09d15521e6bb0b7b497974fd6c3c05e53c54d95d4157e81e56738f442287e4d2da55b8374c9582d61d1037c3c86cd330c54b51be0cab5c001260bc0a02c02639834da051a2bdc159c37e5f56312779c7df794fe441ef1991da899bbd533cb6081a24f9e78658396ab6147de38e4b2ebc2e3ec3e7bd8dccd7bbab661cae51ca5c42f2018e545528a753d8f170ad34c1e183672674700c318690357e9146cff62ff511a9c6d49982718e26c9fe1f4d488ed280e80b6d331f54f786ad2f0f69fcc6dcfd84d9de4c0ce85f0c92a7d71b15f1f5b17ea5c709ef48878af1eb98ef37bfac20766c7ca7c3057005f1960f19bca4af2865a43ac11490c45feeaf3c55a3cae0e0c836c9edaccc8520a84bb67216019af6b6215af2d614c8cfbb192ab3ab91d756b6ead511e1df28c384051954b37110093b8d8ab85f0b62da032d5348d23fcbfd70f370c0c22bfa20423ad6ef91db487396804c1d415ed9435db35ef2428df4e00ecef8bb82e5fc18c21fa46c3f726d12c8fb62ca792d80d98109b2177c7c72cc09ebe59cbd8bf5beabcd84fc2f84517745bf91dbef18bf66a93a2f197455f1d88f61d15962516c78fe1c3e8c7db2b37a0c24980763a7ae97404a3bc2466e2411930866c2f89705e33dc058edd4f9f027f574d9033e213e40abe185b533122f2e91f2ebc4a375c97c810787977c0446a4aa59cd747b4d971f6b0a8092d4ef364f520f8b32340084950740e063cb188e3c65d51885d3cc703e52cafad2255404161258fc1425183aaf83d6dc866bba9bc054cf77c16e8dd584022864808acfdcb455dafcb08561f314f8e0ea25f6db6b1b7845f15cf71f63700975ef9ebd2501209975cc1b81c8ba925358d75340dee75a7b821e003622e68b99406dcdcd450cf5d4ed0d389cb163f90f107a43de3fec976c4191f1ceb13f586da74f0c092630765f6e241064fe2920fe0c2abee68413116aa1d369a16904a57aa8e73e81f6c1c29f14e1cd3020b32f1f465f3e3e1b64287d798df1510a2406f67813381d8fdbea9b81bc0ec16db707da01cee4766ea6275c6cee25e90188883a01ba2865417bbe917dc60d2648eaf10a588cb41af101e31c12afc3ee9489426b326ccc766a3a431aeb5923e06020116b3bb69459dbc5a2d8030b340cba3a814eac8f3121c8afeb9aa192e553d007629ef8422513e18643454d7f1e6e5301400a189863d82d39110042a11b960f0c9080b5bb96476ba25735c8074ee7b77c8b7dbdba561d562a7299083e98830717f08d97ed90908851ac9e8291ca649a30e7aa915b616a3039aac4418fa4d45929a1a54759b92ed521fece82c7e0d67d78d85d6356b5bef566802d2ff7ab3ef039973cf5d588c299b8c48bd7c39df6e7d579530b1d94ef976d3fb2e1987d146a9077483dad88644b52995b70fc094bbfb514fe03cfd077209896586f88f15d45e55e8ade344de62d881fd81d1619af0e29bd1cf3da2805c5ae43bddc82c3d46e3d3b4086ed185fd816b4f6a3caa9884505713a1f41ea390e035914c6ae1f4c7765cb6620a4e7896ce973124329f0b380c18ffd0a29f9cf03adca8aa17f39c746d4969bf309c835327cbc9a4830b4f537187ce2ef641a95d4449a1ca45c1ba528ab0454cc23edc5edf0baefe5f986f5caf713602661747b6ccf2723a543dc622f17404dbbf1e90cb3ef6b1398bdbe810b318b71a5296799d2a474ea2ff25265571d5f68e031d06ddc6fcfa0af79d37f6636ed017ae3ede8f17b3a2fead461c8539baadfd5cf290cf7468e953ad64d29346a4a32bc30c945516c6c5ea7150c3f2e9c4989deac88b9b7d93dfe7ed93aee4ca956cfa65c2d1e9274a403a0b2cae6180b233ebf202b8151e142d2f60bfc9948f1aff3eaecf5addbbe1ed37b1acd416e2a4b086a1a860ce4137ad842abd84c0c824cf3b5419aa2f07987f0b836664397b075ea15033c9952331c6322450360c1e73faddc87550e1008c58563e58d3d2adf76bf624a449ba81906714e9cc19a4221ec9e265ec9cdca5b002fc548812be11569e414a4c597eab930b846bce0bdfbfd38b7956c3e45a0a00d2cf4d3a14ca9860aa989358dfd38eef7f7dacb8fb0adda554cd0afe62dd893aa0daf4618de67a5b90798db536e60c303800d1fcf5c33f02c7a74a6b39f6489d73df06dab9e795382f99473914bffa64b1f748cf1b7d42fa349a3a9da240058b8cd241f1eb2d36d30a8cf902a897a8c06586e4d94786bf44c3d9fda479db2c8ec04f483d937ce619e052c489ab9e94ed203aa3752cd0cc84f45c803a28eb52c0a2a8198a26739a85c8125f6bab0b2c7870a9e548ed8ac586b15c63331b634428acf0748850ac6ce0decaf5e6e6ecb7476f3074a54062c38162eb4bd3e0b849088f14bb65575c7a06a0c17d3a259b635f81e7091e227dcdfb4c55f906396a5212a079bfde6db42a48d47f05152c2b98800cf5fab9770613757b6f9cdabd1f7b0ee4806307937f93cc78fe084ec5cf9231831da73cbfe75e260565dfda420a611e7995025edb7c3813c2a913c1e8567c30dbd7969e9a347e044d83b3bed3458ff6a15fd027822c5a0ae9bec2cba7863da653f1252dafda1dbe6d23d8fff3e23d3986ac421aa669197a3e5d32f5c5bc0d44c93be98cfc1508464e6653122a3ecaec63e469dd58117ae58b48a35c890bf96e72093e4b084a59621476e80a2076981fd2756a6c7fdb5c7e205b62b31d1ad38c85a33ca0f4c84c48461a2907222c37000bd65bf858a57245e1a278db8ed117688d7bdecc9a3574596db2f492000d3ad260ede6273782ad66299edaa28f11b2f031a4337ec836604ce8b859b3f13ab9feef4ad9917c8de9c27607d0d2bf62445465db5539eb7fc9ba9b86d800cdf7b7187a817647fd0ade0da3ab615c1b6da28b4bfe7e6e7b3ff50b62eea4e80bf5564cd9dc566ac30f67853a19a4034b1d6bcd49923e916480c845266d12cf78150c9044ee45e909fb04b26a8d643e51b0e29dbca84f6a4df58521e0a0ec66da1215f0270f104ffe9c76a68e53d4f98f90d286e78dd4ed73a124e679fee32e25d9580cafaa546a0516a4cdfdce64fa22a9ef5346838b81ed8ddfd60990bdd5ec2d439fd2c13445028fc64095bea123ee125b451857f8176c74e84134954c809a1bd2df9a336ef144285cabb8ac1f093375e8ce3a0bcaa200b712db87f8defa2003c4440a28955bbe83538dfd1eedc9c9b666187ab72493f67f0578f32ea05350f75114f77ffeb8d30311d6dc61a8aec5a31fad58aade3915af94439dcd57e44f9382faeb65a76b96610b79c6e5926c08b8163b0a80c245d4191cce9ef51e2c1f7350c44cedefbdff9f12619492d7237893f82cc9ca5912c39e3d2b7b6bfec816bf51663ac910cd0db29c11b0a651b6455e989cdc4bc82a576694f55d2758889cf75556d6c330d1a1db19d5e0423a45fa5bb71faeeb8b0fd22f677b3ec9d473975bc4502a4db2d0cbc23b7ef72e43a293072681bb701c1fa5b0f98930c450a859c20e00b27b7fc12b86459e621588b1c06e9a315d13d25a5529c58fb34207712ae182609e13a54728b173794a0d2e4e63877fcb6f7ceeb6ace8c58d007c0c01e693ffb9de634bd47ce0bddf446d9856525f233dd9b2e90f403e4ea8af0a851b1e8e2f73cafeff74dc98e425e9e99c391b242fdaa210d5a200a6d54a5e6e9566be4f50f6806f8b376cb16b543d02ca036bf07ed6464ce7157d38d65c12569e6555f2f3fc50f52f1a146e5f7c29c09151b2fb5f025260bef08163f40db9841d7f00a79c7fe4f342f25ca4058d844579806c473f0c2131fcdea21efe2269b931cd008219f101c683a742f34b1330a0a81d619fa04b2d5f2059f867c4067d151d6b141f9516c84dcf22542f51d7e4ccb17cfd6863862187d80a06bce0b9efe3c3dab36fd4b0ff643097ab0ee98b399459b5ad2055aab7de9ec049b503c3e2c2a27e13609fad7fe485f938cbc761a5e44d09a8dbbf61c124a86a441a1970982ddaff190eda110971cc6dd19d24c373f2ccff4454a336f2be44ce4e7408554eb276c01897917c21f106e3c821954a66a681f99da12abe94b5b6cb1868cb9c808c76a2ec0117026adcb279badd297a2c9dbde5855a8cae89550ebbb8143922f694ace4d6dc0e93c8d7fadd3ddcd84b7ac1ebb07386d43fc239c3e4ab981a2d6d75aeeb51a0869769fe2eba62f00ccb8c534ab238c452903b5a36f89d18535886b2bb44bd569179ac6d285e78abff52d68b67e21d4b1ccc0dc6a395262d5240598c9ff40eeee93ff03242ee5b1d950134c61abce2a6f4bf38b3a747e3889a309de57f67d35aa634a260c1c46c96eeeb989c064a3ed6030d6b9063f5b87e4a14311747bfa22377aa1f5768eb7b4b55b075fedbe99a85960d0b0308af3c3ab1d28942d02cc14455ddbc447f69694fe80d732fc4753a73f126b52d761ebd3c3dfa74d72473e231a186e13e9412d6b63c14642c0ee3770e0d33b57383ee6cb5bf38d955f60d62c744cf9551971d7a8fb79950feb04e51a16237862ba2a3fc652c4cd6d1fd4a3a5f4ea6d2442ce555c82b1baa81703711b7d69779a0690af5cf4ee92f62a2342191ddb319d2ffca7c51f6ee42b489951738cd27bf765ba0451fe34f63f9a5eed0f2c8462ce91face6475c8f9e8b7d9cd4c3b8d588ead5b2ec58e9affdf8cbdcc7b72de46fda196f5e32843f343aa6a865d5648ae97f92fbe036c7b11a5770cfe7a4112ace82eb6de72b6a942491da2aecdaecc37a6c38e363436d0ba65280ab242371d09bf7c0e4189a1f4e0de0546c6251710d6002c61c7ffb6c95c3f2e098f1c75c16d9380a6313d8edb2cdc3ee0ea53222f24789f1969c0e8b0c8a8d3f11b95f77406152d9a4ce867b7e71f7783f7d9b3cebd070301166ab636b891c7f1a077aa112a290581067c41d0eedbef74510882e96458448b8b4a76cf40e604ee3572521289b6cedad04f40b9d05fb75f9e8241fcdc17a2111af14c2876c89e4e2ea4687dc00501f0df3f252935db34101f7eac092bab06978394e0fe175061cd779184d1a38434ed9bde350c7ec7752ca1511661af7e84b309b84fd324ed5d5cb3bcad0b83c3542b7561f1701531854c0a4addf6a051c11af122cbbd9e7eb6a021a54ed49e4386883c6ab36c438f4fc289df355e27b4da4bf0d7c1af1205e0a089d0816cb958dd5d7a21f869cec4c5920e289be748e77e4b0fb7862cb23e8336446027bcd9cff59f055d44fa4038b2c94f2947f166f8979d57478da54f098b63f645e5cc8a04692dd965bc79dbc65711becfe94f7e166b2c9ca696b4ed2e1c82d27c8cfc0ad0cc2538caf26e8e24d8dff93b085f1ef23ff009a4adf4a444cb0559abacee5d0d0bfb4c28174ba878358cefd2661e9ce99c9983f2071d96e7bfb51c1205bfc6bf674e9f8ee816563a7dee160901a0ac1c1c5e135ceebea346f4ab3e8fe09e619ca7f6160718aa1e38222de6ab7cda79daae0680a92d263d28764b0728fcfca4bd02eb2c37cc8657ee7a8a98d4d8221537a8b018013185ae2ce363721025676c5a6de543e118a6bd69e440dcc0bc32c710eafdde8b82dfab34594c1e6c821320bafaf350d95730b3dbe2d869a547754cbb527858d5a6157f076c032d9854695b9b644219ea111642b4fb61f81d73fb63fc5305c8289383e5f2585053a5ab1a967a5a19f1d643d7f6e3eccc964763513d7fa656a11939d2c28104e2a457e02188a06addd78e2944fc80c8bc4876db96206db8cbd666d60481a13c96a312d57667eaa404216b63219c2cd94f57ceee0b2707288ce789336ab6e11af6148db526baf941834bc2e3506f8ecb24bf3f507c3f8dddcf737ccdc1b4f6218a76fcd0d6dc309a270d96b111b1885ebb7d9e60c5241401eada3ea7f8db2a6b28b4111e5b71543fd7bebaff76a20c17ddf85ec639204dfc99107deacc4b99e724fe1116793d23d0529e967884c70cef037ead1a34bf36562a7b823d719bb7c2b2f510c25f961b7e367dd76f5bb3e758420fee76dc6647c862785f0fa2d89b7ccb6d89867a3753a2defcfecc9afd74b88e64ed18a8749cad6964ee5576ec5043b505c66d6184700518b1f4e0627e5b492bf8b318703f0816a40eae0f46d1292e027795ad4106d54aa8697facdb338e4831069069d9ced93011c0a8d99e519c4370e63403a74e315dc4f1f211b8d95a35bdf6d8a72118339206d9ee619a56aa453cc3117e6e2f8c0f045c59414e6b2b32c6439c5fbfcfd3995214beebb98b80ce9554f7871d57a740d41f3d5dfd861d820ba59970423305ea72e37116019ebe8dfeeba338d129716a5bb84672fe6e7b9c7ea6a3d0befe8ac1572fbd15c3b02bd6575d51a36eca42d489317405271a81b2b42afd77b3d5430710550af43ee45034f47e690322f08aadbf2ad2151931cfa7c9472230a88a0d897fed2104df5a4f8f3cd8119a5d85f3f3887de3a42fd27c90dcb60bbec2f7559c765bcb0cb9fa73a95850bf8890abf60ec75b79e53d3ad4e22e40d152237852cbaf497253d971e5fc3e95b49f1620879509a61fd59577109cc30ccedd72affa70b407e8f01ebc6b86a2b2c67104e7d8e8ad1621a42747a933e27c04eca24c79be3387af08aa599d7efb3233326f1ed8e2908835a0d16511d9e2affa6949d162283ce88d27bb43d9bc57a46314c985485a4a0fd3d75fd3431797998d8cdbf8bf5479ce56772494a567e5f48d548e277acd3c2737a2e8e732228ae514226c256e934585417a380afc3b31079ad17e97861ec2c94246f90ef2f6e3f18eb04b07c22fabf5d9d9c62439c25f20ef7312c12b8a6405da98ffc5ecfca516ca1121099f2240150ceb9a55f92278f863ab0dfe55591fbc0f863205d3e669e53b517a1f1cc23ce1cd42e9f1055a00c87610827039239adbc8d1f3222f2876b425373c9d0c3f1def58cd8ce709023442ba8a455e09d84abc0ec199bdedcc7814be871bc7cf345130cba7b62b2dcfb2c3b2ef43a2366856542400699a441c30c0aa6ef00f5780af96cfbbd941fe5d93df2a9eaf12a181903bb5130f8018b6b338a9378d23e99f6b0763241184a07a8f005452a089cd2eb27365aaf6f1f9377edd4bb22db7f1886cd52556412182463659489b58e5b84d4f49ecf42ae1f49b9662d02aef38ffa53a82252b08953d32d133d466af6801f5c784f0879e0091feb413b1dea18b9fc31f727c8a931bc892089467ad7d46e2d60d2510bbed7f53ea5d39822b6aa9e9de75c8ec2df9737e18f0cc8ab3c04437d8d9a867fe72df0204b16d1cadb261ee7136ee5723f033d4f5397e0bd5e0b7b86e7ef00d8bd8d1a80267d6c9e1b9febd874108d1cf62f730c0496d99c0c96320f6c52a01dda70a541d14c51eb9d3bb49ae62bff807505953151ce4a908525b3b151596e7b124697d0d5bdc2019f5521ce921b51c209951d3237a26cd387f5bc8cf202e2133c6f3b84f2b94adc03c4406930356ed71fd4eec519188be2f9f257528a5f55546d62615cfa7ebafd60b0ee6f32b8e628f5be22d0fa84e9c400dc4399af90c03e261345e18e24f8b1b525551d3b35c4ca7d5341d293fb5a534db6c8c1ce14547f25b546c32a71bcaf8c95cccfb7c4916cbee789bdfd46b5d8d41fa39aabb146a3f311cfd5454b6054e7559c47791a00fc856e99542add41991276ccbce17ba059317cbc04a93a63071b6f4772c9274fc9c79f44ab61afb0003de1481bd5517ab2dccab3c685b561397a8a43f1fba278cde082f7477d072407ed26e48f2e45031ceef47e1dd90d37fbbd3065d67d83b0f64115b28fe9b5a73be03113277746481341c79f7fe5dc907850013834a1ae179adff270fc5ad47128fa814998030700ae9f3fe53fdcbf1388e8c5ad18523c0e02f2fdddaa49892d139ad7644bea1257d8043e7c6d597bf2b716ca0c1e84af85100a444d0229f00f8be62115d917527d3491d6b0ddf19f221e5a101c464e6e5f2f29afc6d3d89014fab667db274d7a724ca812a3d14680e8837658b62bc2ed5a69a81cf558e98c9d5b55f7bc77ca432bfd3fddfcb24a6107bee41ecd384415453f3f14fa4f08a8b05a39ae3587aacadca426682e75af5105064ea8e1fb874aad2b96bfac326f9f06b05100dfedf55f420d3c2ac663954cb0b3ac8cf0326cde4d2fe558a54853f11a47d62427269e4c1ce50bcdbbaebbe9509091ef4a778388b37c45d6f3a33a2526c2ce696231b33929ee9c35badd0705be21ca43fc085d9ec11a0545205d78e895c8c22ccafeb7feee0ac75225add3dc37a814a8407d1f5343eaf259ded11bd2ca8280f036286b38df9dc8b625000a9d9fe7cd08b5e72029f4bfbdb7a06a8191a9e30a8b2206ec72c2b83055426fc3907559406fdf6c8b1c701d3e6d87fb6e687ee324fb42f5f5f674d65412f5dd852085621fbf4c3b0c2fa3f2108e0b2341f878e9fcd9d0e3abed910ecc2547c4a074830f5d6f781e59823a9ed8f336a1de18dc2719d33c7c9b9fe225d4ee77065b894bdf35de3319f5f03f1fe266201ee91291fc937cca054b11e0a3f04b6855a087d1661ed9e1de7175ed605fdfc41ddb691195e9551b15ddc9006171280ba9d07348073c4e33adba35462f1431fac64bdf9bd8f90dc2e17938f93e23fbea3a2a5c75814c849efd8a03db66992ded1c0571f3c5104adf1a69036e224127a5df7f5a4e566c8aba649adfbd1c1fb093b5ed88a3472977ac865b5e9dba6b08c255e2b47e4399b3887de2cc7cac91d33b4078ff548b76184ec9a4c96c78ab7392ab54797899396e98a55baf2bf09304bd7d81ba7ee4f25f07308741b8468fa99ce5e46c49e230d499e35f752aed9931321d12180ef971b7010b78103785d3d51943e17ccadf217c57cefc66b73c250d01960b6150940242fd8005811f0671b7dacf249c70f6fd078172528ce7f95014aadbaf40f6f1edc1248be6a5bdc4fed40d9aa16e025cf8ed4a91ff5015385a26fe5f606320a2fc03c2be540dfec3664b3321f81e17902a1aa1b3e6ec94f489ced3c45cecf34f0f30229da777e428e53a80488ad2fc10ec925d3d8b8b4a2d1a4b004d2b577248648047a58b8d9086419b8ad2e6faccab7e4a123f55b6ed982dff786894b08eaece1e117d1ea97bac103023dd885c943fcd2b5381ffdbf07fa0089dba21192dd892cb9b29e50455fa304f623270ca53552292dbd31bd22b8a7bed26b3b248201b0ca2a8f3d059d7a3af11e74d38e0b13d063450f13991a819bc999c9320a9380949221c179faf98ad997a63d1df6a38b7d95bd6c7e649829e22c03376bd72e45fa1e93db8870dbf57e56b6213e437f09ac90aebbc010abc5c433ea3a5477c0ccdc8fb85cf8b3581bc87eccd0f98a43e7c8b307c1fef8ebc3e4e5ccf830de2e5f50c21588fdbc473f272b4d6322b482064cb0ce88770f54fcddb8d9471e3659823a7e3e0215b257c1e1c6162b056560dcb6b89d78cc0f5679e369d81b224219d147da69d8c354ab1218a56aa63efeae0ed2aa9a323e4e362057639b9a6d156bfe47b7752834b44a6e6c4d97f739dbe0e6061389b99b04f03db69f25bad7ef6e67b95d2e5c2f6524b3b9a294bfb0cfcfb040490cdc72b22804d4b403cd7bc94efdb7ec14b5edbfef3105088efa7b418d2bc9831a2f72c718b2100c1b42175e7c1ba06e8097155c40e6b7437a7525c3367f3cc532e7239c2ef508a58399a07bf31e30fe3026c1f5bd233de63315c25d8e69beda782893fe24500cd7da3ecfe3acbfc5e1e161338313ddbcd962d649930c862c3794980dee888e871098dbe1951843a2dae9d3afa2e3eb71b5bd542ed9e71abd2c0fc5967fc034551e4a3571956fdc30b0b2a1be98f5aaaeaf7433aca9197e66ec06ddb61adca1bc45314c71e504239e2abae58ff660bbbeff0d70d405731c07b074db7be81c6dbc5d90c12a360507d37fce19e2077cb9dea1ec29f3ffea315a6ac90449dbd75b8327ed2c5765d3e03bbe541b94b3466bb54d5a66e67893d2f98c10194b1eb50a2ab106774da0c836a99dd827c8bebc072347ed799d3e4831551a069b572ceb0f214bbeda89148d32da6302214476120ab216dc4c5961382213cce0f40ca9dfeeacc0df08e666d96aaeefd540836153b1b037640092b8cb15f6c65501c8f801709c2d3be7684bef549c99c959f4013511a272dfe92b880b2b46048058836dd6379d56045767ea3b5be6c86ac04f1dbdda6592e8b655fcb980d76bdcc0d712dc8982ffd111b92dc542a728296210431d193eac8065cb1ac204373fd40a2be40e5a55dc3509de1d00fd2ecbea30dfb2dd4ae3eb1a6355612b26a86bab47c11b31ba9042859272ca15c37c198e6a712d21689ce4337a27de1f2e8f6b270d6dd7101ad9c129bc49346f6e90de7dcb5c72ebf1439d5f7f857a32b4cc91efde6f32eeedbd5c445621584c77a8cd19939eab8f838e0a377ccb3455ee8b5955dfee4cf5a015477df6fff6a43a946b6bc05b614094108d1bb298b7cba923d9c6104f2fb72707d4945e1bc2ecb83538515ea22a899bf1d0cb50870c8c31ee74c1cc694ec518303f357d6344fdb37a3e28373cd4452208e9dcc036607703da3058449c5011352c5ebc7d22ce395197c5db1d4368fb2958cbd0fb95ba63a00b7aca8137eb357fbcd3fa670a92f74c8e26baddf0fcde2161a4be9d6bb8a5e626fd2d1354d8f13eeeb2cb50abc52dbd962124900b8f029df14c199410bf02767d21f64dbeadb31bf13f</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>VPN</tag>
      </tags>
  </entry>
  <entry>
    <title>14-galgame</title>
    <url>/1-(0~50)/14-galgame/</url>
    <content><![CDATA[<h2 id="1-我和她的世界末日"><a href="#1-我和她的世界末日" class="headerlink" title="1. 我和她的世界末日"></a>1. 我和她的世界末日</h2><p><a href="https://pan.baidu.com/s/1QnV1k4yvcb_DcBrHW5TItA">https://pan.baidu.com/s/1QnV1k4yvcb_DcBrHW5TItA</a></p>
<p>eeec</p>
<a id="more"></a>

<p><img src="http://bucket-c70.test.upcdn.net/14-galgame/01.png" alt="1"></p>
<p>注意：</p>
<ul>
<li><p>打开游戏点击：LAUNCHER_x64.exe；</p>
</li>
<li><p>好像bgm有点问题，是噪音；2020-8-18 22:44:10</p>
<blockquote>
<p>请右键点击WINDOWS右下角栏的喇叭图标，选择</p>
<p>声音-播放-</p>
<p>扬声器属性-高级</p>
<p>默认格式设置为48000Hz</p>
</blockquote>
<p>我先设置成了48000Hz，结果马上就没了噪音；</p>
<p>然后也恢复了设置（96000Hz）；</p>
<p>然后。。过了一会又来了；2020-8-18 22:52:50</p>
<p>我决定设置成48000Hz并不改回；</p>
<blockquote>
<p>天啊，居然开始界面有bgm，原来是我开始是96000Hz所有没听到；</p>
<p>2020-8-18 22:56:11</p>
<p>就48000Hz，就算不玩这个游戏了，也暂时设置成48000Hz吧；</p>
<p>2020-8-18 22:56:35</p>
</blockquote>
</li>
</ul>
<hr>
<h2 id="2-xxx"><a href="#2-xxx" class="headerlink" title="2. xxx"></a>2. xxx</h2>]]></content>
      <categories>
        <category>game</category>
      </categories>
      <tags>
        <tag>galgame</tag>
      </tags>
  </entry>
  <entry>
    <title>15-node.js</title>
    <url>/1-(0~50)/15-node.js/</url>
    <content><![CDATA[<h1 id="1-Node-js-基础"><a href="#1-Node-js-基础" class="headerlink" title="1. Node.js 基础"></a>1. Node.js 基础</h1><a id="more"></a>

<h2 id="1-1-Node开发概述"><a href="#1-1-Node开发概述" class="headerlink" title="1.1 Node开发概述"></a>1.1 Node开发概述</h2><h3 id="1-为什么要学习服务器端开发基础"><a href="#1-为什么要学习服务器端开发基础" class="headerlink" title="1. 为什么要学习服务器端开发基础"></a>1. 为什么要学习服务器端开发基础</h3><p>1.能够和后端程序员更加紧密的配合</p>
<p>2.网站业务逻辑前置，学习前端技术需要后端技术支撑（Ajax）</p>
<p>3.扩宽知识视野，能够站在更高的角度审视整个项目</p>
<h3 id="2-服务器端开发要做的事情"><a href="#2-服务器端开发要做的事情" class="headerlink" title="2. 服务器端开发要做的事情"></a>2. 服务器端开发要做的事情</h3><p>1.实现网站的业务逻辑</p>
<p>2.数据的增删改查</p>
<h3 id="3-为什么选择Node"><a href="#3-为什么选择Node" class="headerlink" title="3. 为什么选择Node"></a>3. 为什么选择Node</h3><p>1.使用JavaScript语法开发后端应用</p>
<p>2.一些公司要求前端工程师掌握Node开发</p>
<p>3.生态系统活跃，有大量开源库可以使用++++++</p>
<p>4.前端开发工具大多基于Node开发</p>
<p>2021-3-18 09:41:24</p>
<h3 id="4-Node是什么"><a href="#4-Node是什么" class="headerlink" title="4. Node是什么"></a>4. Node是什么</h3><p>1.Node是一个基于Chrome V8引擎的JavaScript代码运行环境。</p>
<img src="../../img/15/1.png" alt="1" style="zoom:67%;" />

<p>2.运行环境</p>
<ul>
<li>浏览器（软件）能够运行JavaScript代码，浏览器就是JavaScript代码的运行环境</li>
<li>Node（软件）能够运行JavaScript代码，Node就是JavaScript代码的运行环境</li>
</ul>
<hr>
<h2 id="1-2-Node运行环境搭建"><a href="#1-2-Node运行环境搭建" class="headerlink" title="1.2 Node运行环境搭建"></a>1.2 Node运行环境搭建</h2><h3 id="1-Node-js运行环境安装"><a href="#1-Node-js运行环境安装" class="headerlink" title="1. Node.js运行环境安装"></a>1. Node.js运行环境安装</h3><p>1.官网：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>
<ul>
<li>LTS = Long Term Support 长期支持版 稳定版</li>
<li>Current 拥有最新特性 实验版</li>
</ul>
<p>2.中文网：<a href="http://nodejs.cn/">http://nodejs.cn/</a></p>
<h3 id="2-报错"><a href="#2-报错" class="headerlink" title="2. 报错"></a>2. 报错</h3><p>1.我没报错；2021-3-18 10:05:01</p>
<p>2.就没笔记了；</p>
<p>3.PATH环境变量</p>
<img src="../../img/15/2.png" alt="2" />

<p>存储系统中的目录，在命令行中执行命令的时候系统会自动去这些目录中查找命令的位置。</p>
<ul>
<li>如果把软件的安装路径写在path里，那么在Windows PowerShell 里，直接输入 软件exe的名称，就可以打开软件；</li>
</ul>
<h3 id="3-命令行工具"><a href="#3-命令行工具" class="headerlink" title="3. 命令行工具"></a>3. 命令行工具</h3><p>1.Windows PowerShell</p>
<blockquote>
<p>百度百科:<a href="https://baike.baidu.com/item/Windows%20Power%20Shell/693789?fromtitle=windows%20powershell&amp;fromid=4118072&amp;fr=aladdin">https://baike.baidu.com/item/Windows%20Power%20Shell/693789?fromtitle=windows%20powershell&amp;fromid=4118072&amp;fr=aladdin</a></p>
</blockquote>
<p>2.clear;可以清除已经有的内容；</p>
<p><img src="../../img/15/5.png" alt="5"></p>
<hr>
<h2 id="1-3-Node-js快速入门"><a href="#1-3-Node-js快速入门" class="headerlink" title="1.3 Node.js快速入门"></a>1.3 Node.js快速入门</h2><h3 id="1-组成"><a href="#1-组成" class="headerlink" title="1. 组成"></a>1. 组成</h3><p>1.JavaScript 由三部分组成，ECMAScript，DOM，BOM。</p>
<p>2.Node.js是由==ECMAScript==及==Node 环境==提供的一些==附加API==组成的，包括文件、网络、路径等等一些更加强大的 API。</p>
<img src="../../img/15/3.png" alt="3" />



<h3 id="2-Node-js基础语法"><a href="#2-Node-js基础语法" class="headerlink" title="2. Node.js基础语法"></a>2. Node.js基础语法</h3><p>1.所有ECMAScript语法在Node环境中都可以使用。</p>
<p>2.在Node环境下执行代码，使用Node命令执行后缀为.js的文件即可</p>
<img src="../../img/15/4.png" alt="4" />



<h3 id="3-Node-js全局对象global-1"><a href="#3-Node-js全局对象global-1" class="headerlink" title="3. Node.js全局对象global[^1]"></a>3. Node.js全局对象global[^1]</h3><blockquote>
<p><a href="https://www.bilibili.com/video/BV1UE411H71P?p=43">https://www.bilibili.com/video/BV1UE411H71P?p=43</a></p>
<p>视频的顺序错误，这里应该是P5；2021-3-18 11:05:38</p>
<p>可能以后会修正；</p>
</blockquote>
<p>1.在浏览器中全局对象是window，在Node中全局对象是global[^1]。</p>
<p>2.Node中全局对象下有以下方法，可以在任何地方使用，global[^1]可以省略。</p>
<ul>
<li>console.log()     在控制台中输出</li>
<li>setTimeout()     设置超时定时器</li>
<li>clearTimeout()  清除超时时定时器</li>
<li>setInterval()      设置间歇定时器</li>
<li>clearInterval()   清除间歇定时器</li>
</ul>
<p>3.视频里面还有证明global是全局对象的过程…</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// global.console.log(&#x27;我是global对象下面的console.log方法输出的内容&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// global.setTimeout(function () &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;123&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;, 2000)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;我是global对象下面的console.log方法输出的内容&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure>

<p>3.1 先，前面有global，node XXX.js，有效</p>
<p>3.2 然后去掉前面的global，还是有效，就证明了；2021-3-18 11:05:17</p>
<hr>
<h1 id="2-模块加载及第三方包"><a href="#2-模块加载及第三方包" class="headerlink" title="2. 模块加载及第三方包"></a>2. 模块加载及第三方包</h1><p>1.目标：</p>
<p> 能够使用模块导入导出方法<br> 能够使用基本的系统模块<br> 能够使用常用的第三方包<br> 能够说出模块的加载机制<br> 能够知道package.json文件的作用</p>
<p>2.</p>
<p> Node.js中模块化开发概述<br> 系统模块<br> 第三方模块<br> Node.js中模块的加载机制<br> package.json文件</p>
<hr>
<h2 id="2-1-Node-js模块化开发"><a href="#2-1-Node-js模块化开发" class="headerlink" title="2.1 Node.js模块化开发"></a>2.1 Node.js模块化开发</h2><h3 id="1-JavaScript开发弊端"><a href="#1-JavaScript开发弊端" class="headerlink" title="1. JavaScript开发弊端"></a>1. JavaScript开发弊端</h3><p>1.JavaScript在使用时存在两大问题，文件依赖和命名冲突。</p>
<img src="../../img/15/6.png" alt="6" />

<br />

<h3 id="2-生活中的模块化开发"><a href="#2-生活中的模块化开发" class="headerlink" title="2. 生活中的模块化开发"></a>2. 生活中的模块化开发</h3><p><img src="../../img/15/7.png" alt="7"></p>
<br />

<h3 id="3-软件中的模块化开发"><a href="#3-软件中的模块化开发" class="headerlink" title="3. 软件中的模块化开发"></a>3. 软件中的模块化开发</h3><p>1.一个功能就是一个模块，多个模块可以组成完整应用，抽离一个模块不会影响其他功能的运行。</p>
<p><img src="../../img/15/8.png" alt="8"></p>
<br />

<h3 id="4-Node-js中模块化开发规范"><a href="#4-Node-js中模块化开发规范" class="headerlink" title="4. Node.js中模块化开发规范"></a>4. Node.js中模块化开发规范</h3><p>1.Node.js规定一个==JavaScript文件==就是一个模块，模块==内部定义的变量和函数==默认情况下在==外部无法得到==</p>
<p>2.模块内部可以使用==exports[^2]对象进行成员导出==， 使用==require[^3]方法==导入其他模块。</p>
<p>2.1 假如我们，现在有一个A模块，A模块里面，实现了一些函数</p>
<ul>
<li>如果B模块想用</li>
</ul>
<p>2.2 先用exports导出A模块的某函数</p>
<ul>
<li>怎么导出？变成exports对象的属性值；</li>
</ul>
<p>2.3 算了听视频吧</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1UE411H71P?p=6&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1UE411H71P?p=6&amp;spm_id_from=pageDriver</a></p>
<p>02:10；2021-3-18 11:42:43</p>
</blockquote>
<ul>
<li>1.还是要写出来地。不写出来，不行地；2021-4-25 21:11:53</li>
<li>2.未来的我，回来复习了；看见没写好笔记，发现之前的思想出错；</li>
</ul>
<p>3.假如，我们有一个A模块，就是下面的a.js；</p>
<ul>
<li>1.Node.js规定一个==JavaScript文件==就是一个模块</li>
<li>2.这个模块下面，有一些函数，加法，减法，乘法等等。</li>
</ul>
<p>3.1 然后有一个B模块，我们想再B模块，使用A模块里面的函数。</p>
<ul>
<li><p>1.首先，我们要在A模块里面，使用exports对象，进行导出操作。</p>
<ul>
<li><p>1.exports是一个对象。</p>
</li>
<li><p>2.去打印，看看里面有什么。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="built_in">exports</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li><p>3.打印结果：{}；是一个空对象</p>
</li>
<li><p>4.我们再打印：module.exports 试试；</p>
<ul>
<li>还是空对象</li>
</ul>
</li>
<li><p>5.从结论来看：</p>
<ul>
<li>1.exports，是一个对象名。为什么就有导出的效果了呢？</li>
<li>2.一定是哪里写了东西，有可能，是node.js自己写了的；</li>
<li>3.因为这里看不到，有引入什么。只有node.js本身；</li>
<li>4.可以当做是，node.js的关键词</li>
</ul>
</li>
</ul>
<ul>
<li>2.所以，导出。就是变成exports的属性值；</li>
</ul>
<p>4.B模块，要依赖A模块，就必须先引入；</p>
<ul>
<li>1.创建一个变量or常量，接收引入的返回值；</li>
<li>2.require的返回值，就是那个模块的exports对象；</li>
<li>3.接下来，用这个接收到返回值的变量，打点调用，就可以了。对象的语法。</li>
</ul>
<p><img src="../../img/15/9.png" alt="9"></p>
<br />

<h3 id="5-模块成员导出"><a href="#5-模块成员导出" class="headerlink" title="5. 模块成员导出"></a>5. 模块成员导出</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// a.js</span></span><br><span class="line"> <span class="comment">// 在模块内部定义变量</span></span><br><span class="line"><span class="keyword">let</span> version = <span class="number">1.0</span>;</span><br><span class="line"><span class="comment">// 在模块内部定义方法</span></span><br><span class="line"><span class="keyword">const</span> sayHi = <span class="function"><span class="params">name</span> =&gt;</span> <span class="string">`您好, <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line"><span class="comment">// 向模块外部导出数据 </span></span><br><span class="line"><span class="built_in">exports</span>.version = version;</span><br><span class="line"><span class="built_in">exports</span>.sayHi = sayHi;</span><br></pre></td></tr></table></figure>



<h3 id="6-模块成员导入"><a href="#6-模块成员导入" class="headerlink" title="6. 模块成员导入"></a>6. 模块成员导入</h3><p>1.引入后，有点像一个对象</p>
<ul>
<li>1.a就是对象名，而里面的函数，就是方法；</li>
<li>2.点+函数名，就能使用函数。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// b.js</span></span><br><span class="line"> <span class="comment">// 在b.js模块中导入模块a</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">require</span>(<span class="string">&#x27;./a.js&#x27;</span>);</span><br><span class="line"> <span class="comment">// 输出b模块中的version变量</span></span><br><span class="line"><span class="built_in">console</span>.log(a.version);</span><br><span class="line"> <span class="comment">// 调用b模块中的sayHi方法 并输出其返回值</span></span><br><span class="line"><span class="built_in">console</span>.log(a.sayHi(<span class="string">&#x27;黑马讲师&#x27;</span>)); </span><br></pre></td></tr></table></figure>

<p>导入模块时后缀可以省略</p>
<ul>
<li>比如上面的a.js，可以写成a；不过我自己喜欢带后缀；2021-3-18 13:57:10</li>
<li>我们现在不喜欢了；2021-4-25 21:07:32</li>
</ul>
<p>俺自己：</p>
<p>1.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">n1, n2</span>) =&gt;</span> n1 + n2;</span><br><span class="line"><span class="built_in">exports</span>.add = add;</span><br></pre></td></tr></table></figure>

<p>2.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>(<span class="string">&#x27;./1.js&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.add(<span class="number">10</span>, <span class="number">20</span>));</span><br></pre></td></tr></table></figure>



<h3 id="7-模块成员导出的另一种方式"><a href="#7-模块成员导出的另一种方式" class="headerlink" title="7. 模块成员导出的另一种方式"></a>7. 模块成员导出的另一种方式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.version = version;</span><br><span class="line"><span class="built_in">module</span>.exports.sayHi = sayHi;</span><br></pre></td></tr></table></figure>

<p>1.exports是module.exports的别名(地址引用关系)，导出对象最终以module.exports为准</p>
<p>2.如果不是同时，则没有影响，如果同时一个对象，那么module.exports为准；</p>
<hr>
<h2 id="2-2-系统模块"><a href="#2-2-系统模块" class="headerlink" title="2.2 系统模块"></a>2.2 系统模块</h2><blockquote>
<p><a href="https://www.bilibili.com/video/BV1UE411H71P?p=8&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1UE411H71P?p=8&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<blockquote>
<p>PPT: F:\三次元\4-学习\7-web\5-node.js\11-16 前后端交互\11-13node+express\day01\PPT</p>
<p>02.模块加载及包</p>
</blockquote>
<h3 id="1-什么是系统模块"><a href="#1-什么是系统模块" class="headerlink" title="1. 什么是系统模块"></a>1. 什么是系统模块</h3><p>1.Node运行环境提供的API. 因为这些API都是以模块化的方式进行开发的, 所以我们又称Node运行环境提供的API为系统模块</p>
<p><img src="../../img/15/10.png" alt="10"></p>
<h3 id="2-系统模块fs-文件操作"><a href="#2-系统模块fs-文件操作" class="headerlink" title="2. 系统模块fs 文件操作"></a>2. 系统模块fs 文件操作</h3><p>1.f：file 文件 ，s：system 系统，文件操作系统。</p>
<p><code>const fs = require(&#39;fs&#39;);</code></p>
<ul>
<li>说实话，没听明白，但知道，fs不能直接用，需要引入。</li>
</ul>
<p>1.1 require里的fs，是模块名称。</p>
<h3 id="2-读取文件内容"><a href="#2-读取文件内容" class="headerlink" title="2. 读取文件内容"></a>2. 读取文件内容</h3><p><code>fs.reaFile(&#39;文件路径/文件名称&#39;[,&#39;文件编码&#39;], callback);</code></p>
<ul>
<li>有[]，中括号的，是可选参数。</li>
</ul>
<p>2.1 callback，是个回调函数；</p>
<ul>
<li><p>如果某个api中的参数是回调函数，我们就用callback，标识；</p>
</li>
<li><p>有什么作用？</p>
<p>因为是硬盘在读取，不会有反应。读完了给你说一声，要自己写；</p>
</li>
</ul>
<p>2.2 语法示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取上一级css目录下中的base.css</span></span><br><span class="line">fs.readFile(<span class="string">&#x27;../css/base.css&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>(err, doc) =&gt; &#123;</span><br><span class="line">    <span class="comment">//如果文件读取发生错误，参数err的值为错误对象，否则err的值为null</span></span><br><span class="line">    <span class="comment">// doc参数为文件内容</span></span><br><span class="line">    <span class="keyword">if</span>(err == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 在控制台中输出文件内容</span></span><br><span class="line">    <span class="built_in">console</span>.log(doc);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>err是错误时，doc是读取的结果；</li>
<li>2021-4-8 17:51:03</li>
</ul>
<p>2.3 不仅仅是reaFile，node.js当中，所有的回调函数的第一个参数都是err；</p>
<p>3.案例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.通过模块的名字fs对模块进行引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">&#x27;./1.js&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, doc</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="built_in">console</span>.log(doc);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="3-写入内容"><a href="#3-写入内容" class="headerlink" title="3. 写入内容"></a>3. 写入内容</h3><p><code>fs.writeFile(&#39;文件路径/文件名称&#39;, &#39;数据&#39;, callback);</code></p>
<p>1.写入也是耗时的操作，无法通过API的返回值来确定结果。需要自己写回调函数；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> content = <span class="string">&#x27;&lt;h3&gt;正在使用fs.writeFile写入文件内容&lt;/h3&gt;&#x27;</span>;</span><br><span class="line">fs.writeFile(<span class="string">&#x27;../index.html&#x27;</span>, content, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err != <span class="literal">null</span>) &#123; </span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;文件写入成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>2.自己：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.writeFile(<span class="string">&#x27;./demo.txt&#x27;</span>, <span class="string">&#x27;即将要写入的内容&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;文件内容写入成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>2.1 预览：</p>
<p><img src="../../img/15/11.png" alt="11"></p>
<hr>
<h3 id="3-系统模块path-路径操作"><a href="#3-系统模块path-路径操作" class="headerlink" title="3. 系统模块path 路径操作"></a>3. 系统模块path 路径操作</h3><blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=10&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=10&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.为什么要进行路径拼接 </p>
<ul>
<li>不同操作系统的路径分隔符不统一</li>
<li>/public/uploads/avatar，路径中文件夹与文件夹之间的分隔符；</li>
<li>Windows 上是 \   /</li>
<li>Linux 上是 /</li>
</ul>
<h4 id="3-1-路径拼接语法"><a href="#3-1-路径拼接语法" class="headerlink" title="3.1 路径拼接语法"></a>3.1 路径拼接语法</h4><p><code>path.join(&#39;路径&#39;, &#39;路径&#39;, ...)</code></p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=11&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=11&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 导入path模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"> <span class="comment">// 路径拼接</span></span><br><span class="line"><span class="keyword">let</span> finialPath = path.join(<span class="string">&#x27;itcast&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c.css&#x27;</span>);</span><br><span class="line"> <span class="comment">// 输出结果 itcast\a\b\c.css</span></span><br><span class="line"><span class="built_in">console</span>.log(finialPath);</span><br></pre></td></tr></table></figure>

<p>1.path.join，不是一个耗时操作，所以可以使用它的返回值，不需要回调函数；</p>
<ul>
<li>1.1 重温，不是一个异步api；</li>
</ul>
<p>2.不同系统，返回的斜杠也不同；2021-4-10 16:58:59</p>
<h4 id="3-2-相对路径VS绝对路径"><a href="#3-2-相对路径VS绝对路径" class="headerlink" title="3.2 相对路径VS绝对路径"></a>3.2 相对路径VS绝对路径</h4><p>1.在node.js开发中，大多数情况下使用绝对路径，因为相对路径有时候相对的是命令行工具的当前工作目录。</p>
<ul>
<li><p>不是文件里面的目录。</p>
</li>
<li><p>而是命令行里面的目录：</p>
<p><img src="../../img/15/12.png" alt="12"></p>
</li>
</ul>
<p>1.2 如果命令行的目录不在当前文件的目录：</p>
<p><img src="../../img/15/13.png" alt="13"></p>
<p>1.3 然后视频说，命令行的目录常变，所以也不好一直待在这个文件的目录下；</p>
<p>2.在读取文件或者设置文件路径时都会选择绝对路径</p>
<p>3.使用__dirname获取当前文件所在的绝对路径</p>
<ul>
<li>dir是目录的简写，前面是两个下划线， _,_。不是一个</li>
</ul>
<p>3.1 怎么用这个命令呢？这就要用到path；</p>
<ul>
<li><p>案例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(path.join(__dirname, <span class="string">&#x27;4-writeFile.js&#x27;</span>), <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, doc</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="built_in">console</span>.log(doc);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>3.2 详细理解__dirname;</p>
<ul>
<li>写入这个代码的文件在哪里，这个代码就是那个路径，但不包含文件的名字；</li>
</ul>
<p><img src="../../img/15/14.png" alt="14"></p>
<p>3.3 <code>__dirname</code>就是一个路径；然后交给path拼接，就出了绝对路径；</p>
<p><code>path.join(__dirname, &#39;4-writeFile.js&#39;)</code></p>
<hr>
<h2 id="2-3-第三方模块"><a href="#2-3-第三方模块" class="headerlink" title="2.3 第三方模块"></a>2.3 第三方模块</h2><h3 id="1-什么是第三方模块"><a href="#1-什么是第三方模块" class="headerlink" title="1. 什么是第三方模块"></a>1. 什么是第三方模块</h3><p>1.别人写好的、具有特定功能的、我们能直接使用的模块即第三方模块，由于第三方模块通常都是由多个文件组成并且被放置在一个文件夹中，所以又名包。</p>
<h4 id="1-1-第三方模块有两种存在形式："><a href="#1-1-第三方模块有两种存在形式：" class="headerlink" title="1.1 第三方模块有两种存在形式："></a>1.1 第三方模块有两种存在形式：</h4><p>以js文件的形式存在，提供实现项目具体功能的API接口。<br>以命令行工具形式存在，辅助项目开发</p>
<hr>
<h3 id="2-获取第三方模块"><a href="#2-获取第三方模块" class="headerlink" title="2. 获取第三方模块"></a>2. 获取第三方模块</h3><blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=12&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=12&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.npmjs.com：第三方模块的存储和分发仓库</p>
<p>1.1 npm (node package manager[^23]) ： node的第三方模块管理工具</p>
<ul>
<li><p>下载：npm install 模块名称<br>卸载：npm unintall package 模块名称</p>
<p>全局卸载：npm uninstall -g 名称</p>
<p>而全局下载的-g是跟在最后面的：npm install xxx -g</p>
</li>
</ul>
<p>1.2 全局安装与本地安装</p>
<ul>
<li><p>本地安装，安装到当前项目中，供这个项目使用</p>
<p>全局安装：安装到公共目录中，所有项目都可使用。</p>
</li>
<li><p>命令行工具，这种第三方模块，建议全局安装</p>
<ul>
<li>emm,用得多的，可以全局；2021-5-10 10:13:36</li>
</ul>
</li>
<li><p>库文件，建议：本地安装</p>
</li>
</ul>
<hr>
<h3 id="3-第三方模块-nodemon"><a href="#3-第三方模块-nodemon" class="headerlink" title="3. 第三方模块 nodemon"></a>3. 第三方模块 nodemon</h3><p>1.nodemon是一个命令行工具，用以辅助项目开发。<br>在Node.js中，每次修改文件都要在命令行工具中重新执行该文件，非常繁琐。</p>
<p>2.使用步骤</p>
<ul>
<li><p>使用npm install nodemon –g 下载它</p>
<p>-g，是全局安装</p>
</li>
</ul>
<p>2.1 在命令行工具中用nodemon命令替代node命令执行文件</p>
<ul>
<li><p><code>nodemon xx.js</code></p>
<p><img src="../../img/15/15.png" alt="15"></p>
</li>
</ul>
<p>2.2 好像这么用了后，在js文件里面修改后，这边会自动再执行一次js文件</p>
<p>2.3 退出用：<code>ctrl+c</code></p>
<ul>
<li>这里不是复制。</li>
</ul>
<hr>
<h3 id="4-第三方模块-nrm"><a href="#4-第三方模块-nrm" class="headerlink" title="4. 第三方模块 nrm"></a>4. 第三方模块 nrm</h3><p>1.nrm ( npm registry[^24] manager )：npm下载地址切换工具</p>
<p>2.npm默认的下载地址在国外，国内下载速度慢</p>
<p><img src="../../img/15/16.png" alt="16"></p>
<p>3.使用步骤</p>
<p>使用npm install nrm –g 下载它<br>查询可用下载地址列表 nrm ls</p>
<ul>
<li>ls，是列表的意思</li>
</ul>
<p>切换npm下载地址 nrm use 下载地址名称</p>
<p>3.1 报错：<code>nrm ls</code>系统不允许脚本：</p>
<ul>
<li><p>修正：<code>set-ExecutionPolicy RemoteSigned</code>必须在管理员权限打开</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">PS </span>C:\<span class="string">WINDOWS\</span><span class="string">system32&gt;</span> <span class="built_in">set-ExecutionPolicy</span> <span class="string">RemoteSigned</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">执</span>行策略更改</span><br><span class="line">执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 <span class="string">https:</span>/<span class="string">go.</span><span class="string">microsoft.</span><span class="string">com/</span><span class="string">fwlink/</span>?<span class="string">LinkID=</span><span class="string">135170</span></span><br><span class="line"><span class="string">中</span>的 <span class="string">about_Execution_Policies </span>帮助主题所述。是否要更改执行策略?</span><br><span class="line">[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助 (默认值为“N”): y</span><br><span class="line"><span class="string">PS </span>C:\<span class="string">WINDOWS\</span><span class="string">system32&gt;</span> <span class="built_in">get-ExecutionPolicy</span></span><br><span class="line"><span class="built_in">RemoteSigned</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>3.2 接着报错：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>ernal/validators.js:<span class="number">124</span></span><br><span class="line">    throw new ERR_INVALID_ARG_TYPE(name, <span class="string">&#x27;string&#x27;</span>, value);</span><br><span class="line">    ^</span><br><span class="line"></span><br><span class="line">[TypeError [ERR_INVALID_ARG_TYPE]: The <span class="string">&quot;path&quot;</span> argument must be of type <span class="built_in">string</span>. Received undefined</span><br><span class="line">  at validateString (<span class="built_in">int</span>ernal/validators.js:<span class="number">124</span>:<span class="number">11</span>)</span><br><span class="line">  at Object.join (path.js:<span class="number">375</span>:<span class="number">7</span>)</span><br><span class="line">  at Object.&lt;anonymous&gt; (C:\Users\X8TI\AppData\Roaming\npm\node_modules\nrm\cli.js:<span class="number">17</span>:<span class="number">20</span>)</span><br><span class="line">  at Module._compile (<span class="built_in">int</span>ernal/modules/cjs/loader.js:<span class="number">1063</span>:<span class="number">30</span>)</span><br><span class="line">  at Object.Module._extensions..js (<span class="built_in">int</span>ernal/modules/cjs/loader.js:<span class="number">1092</span>:<span class="number">10</span>)</span><br><span class="line">  at Module.load (<span class="built_in">int</span>ernal/modules/cjs/loader.js:<span class="number">928</span>:<span class="number">32</span>)</span><br><span class="line">  at Function.Module._load (<span class="built_in">int</span>ernal/modules/cjs/loader.js:<span class="number">769</span>:<span class="number">14</span>)</span><br><span class="line">  at Function.executeUserEntryPoint [as runMain] (<span class="built_in">int</span>ernal/modules/run_main.js:<span class="number">72</span>:<span class="number">12</span>)</span><br><span class="line">  at <span class="built_in">int</span>ernal/main/run_main_module.js:<span class="number">17</span>:<span class="number">47</span></span><br><span class="line">] &#123;</span><br><span class="line">  code: <span class="string">&#x27;ERR_INVALID_ARG_TYPE&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3.4 解决办法：</p>
<p><a href="https://www.jianshu.com/p/9d1745cbf7a0">https://www.jianshu.com/p/9d1745cbf7a0</a></p>
<p>4.<code>nrm use taobao</code>后，再<code>nrm ls</code>看看淘宝前面有*号没，有就成功了</p>
<hr>
<h3 id="5-第三方模块-Gulp"><a href="#5-第三方模块-Gulp" class="headerlink" title="5. 第三方模块 Gulp"></a>5. 第三方模块 Gulp</h3><p>1.基于node平台开发的前端构建工具<br>将机械化操作编写成任务, 想要执行机械化操作时执行一个命令行命令任务就能自动执行了<br>用机器代替手工，提高开发效率。</p>
<h4 id="5-1-Gulp能做什么"><a href="#5-1-Gulp能做什么" class="headerlink" title="5.1 Gulp能做什么"></a>5.1 Gulp能做什么</h4><p>项目上线，HTML、CSS、JS文件压缩合并<br>语法转换（es6、less …）<br>公共文件抽离</p>
<ul>
<li>比如头部文件，抽离到一个独立的文件夹，需要改的时候就改那一个，其他全部都适应</li>
</ul>
<p>修改文件浏览器自动刷新</p>
<h4 id="5-2-使用"><a href="#5-2-使用" class="headerlink" title="5.2 使用"></a>5.2 使用</h4><p>1.使用npm install gulp下载gulp库文件</p>
<ul>
<li>视频说，这库文件本地下载才有用，我已经下载了全局了，我试试能用不；</li>
</ul>
<p>2.在项目根目录下建立gulpfile.js文件</p>
<ul>
<li>文件名是要求了的，不能所以修改。</li>
</ul>
<p>3.重构项目的文件夹结构 src目录放置源代码文件 dist目录放置构建后文件</p>
<p>4.在gulpfile.js文件中编写任务.</p>
<p>5.在命令行工具中执行gulp任务</p>
<h4 id="5-3-gulp提供的方法"><a href="#5-3-gulp提供的方法" class="headerlink" title="5.3 gulp提供的方法"></a>5.3 gulp提供的方法</h4><p>1.gulp.src()：获取任务要处理的文件<br>2.gulp.dest[^5]()：输出文件<br>3.gulp.task[^6]()：建立gulp任务</p>
<ul>
<li><p>1.有两个参数，第一个是要建立的任务的名称（但没建立什么类型的任务？还是说任务没类型）</p>
</li>
<li><pre><code class="js">gulp.task(<span class="string">'first'</span>, () =&gt; &#123;
   <span class="built_in">console</span>.log(<span class="string">'第一个gulp任务执行'</span>);
   <span class="comment">// 3.使用gulp.src获取要处理的文件</span>
   gulp.src(<span class="string">'./src/css/public.css'</span>)
       .pipe(gulp.dest(<span class="string">'./dist/css'</span>));
&#125;);
&lt;!--hexoPostRenderEscape:&lt;figure class="highlight taggerscript"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;+ &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;+ 2.pipe[^7],虽然是管道，但这里是处理的意思；&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  具体怎么处理这里还没有，这里只是复制，没有写特定的处理，就是复制。所以默认是复制？&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &amp;gt; https://www.bilibili.com/video/BV1j5411K7EH?p=16&amp;amp;spm_id_from=pageDriver&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &amp;gt; 06:20左右；&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3.2 建立了任务，怎么运行？是老样子npm XX.js吗？&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;+ 1.不是&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;+ 2.下载命令行工具，gulp-cli，全局下载&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  + 2.1 如果先全局下载了gulp这里会报错；&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  + ```&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    PS F:&lt;span class="symbol"&gt;\三&lt;/span&gt;次元&lt;span class="symbol"&gt;\4&lt;/span&gt;-学习&lt;span class="symbol"&gt;\7&lt;/span&gt;-web&lt;span class="symbol"&gt;\5&lt;/span&gt;-node.js&lt;span class="symbol"&gt;\1&lt;/span&gt;-练习&lt;span class="symbol"&gt;\g&lt;/span&gt;ulp-demo&amp;gt; npm install gulp-cli -g&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    npm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    npm ERR! code EEXIST&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    npm ERR! path C:&lt;span class="symbol"&gt;\U&lt;/span&gt;sers&lt;span class="symbol"&gt;\X&lt;/span&gt;8TI&lt;span class="symbol"&gt;\A&lt;/span&gt;ppData&lt;span class="symbol"&gt;\R&lt;/span&gt;oaming&lt;span class="symbol"&gt;\n&lt;/span&gt;pm&lt;span class="symbol"&gt;\n&lt;/span&gt;ode_modules&lt;span class="symbol"&gt;\g&lt;/span&gt;ulp-cli&lt;span class="symbol"&gt;\b&lt;/span&gt;in&lt;span class="symbol"&gt;\g&lt;/span&gt;ulp.js&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    npm ERR! dest C:&lt;span class="symbol"&gt;\U&lt;/span&gt;sers&lt;span class="symbol"&gt;\X&lt;/span&gt;8TI&lt;span class="symbol"&gt;\A&lt;/span&gt;ppData&lt;span class="symbol"&gt;\R&lt;/span&gt;oaming&lt;span class="symbol"&gt;\n&lt;/span&gt;pm&lt;span class="symbol"&gt;\g&lt;/span&gt;ulp&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    npm ERR! EEXIST: file already exists, cmd shim &amp;#x27;C:&lt;span class="symbol"&gt;\U&lt;/span&gt;sers&lt;span class="symbol"&gt;\X&lt;/span&gt;8TI&lt;span class="symbol"&gt;\A&lt;/span&gt;ppData&lt;span class="symbol"&gt;\R&lt;/span&gt;oaming&lt;span class="symbol"&gt;\n&lt;/span&gt;pm&lt;span class="symbol"&gt;\n&lt;/span&gt;ode_modules&lt;span class="symbol"&gt;\g&lt;/span&gt;ulp-cli&lt;span class="symbol"&gt;\b&lt;/span&gt;in&lt;span class="symbol"&gt;\g&lt;/span&gt;ulp.js&amp;#x27; -&amp;gt; &amp;#x27;C:&lt;span class="symbol"&gt;\U&lt;/span&gt;sers&lt;span class="symbol"&gt;\X&lt;/span&gt;8TI&lt;span class="symbol"&gt;\A&lt;/span&gt;ppData&lt;span class="symbol"&gt;\R&lt;/span&gt;oaming&lt;span class="symbol"&gt;\n&lt;/span&gt;pm&lt;span class="symbol"&gt;\g&lt;/span&gt;ulp&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    npm ERR! File exists: C:&lt;span class="symbol"&gt;\U&lt;/span&gt;sers&lt;span class="symbol"&gt;\X&lt;/span&gt;8TI&lt;span class="symbol"&gt;\A&lt;/span&gt;ppData&lt;span class="symbol"&gt;\R&lt;/span&gt;oaming&lt;span class="symbol"&gt;\n&lt;/span&gt;pm&lt;span class="symbol"&gt;\g&lt;/span&gt;ulp&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    npm ERR! Remove the existing file and try again, or run npm&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    npm ERR! with --force to overwrite files recklessly.&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    npm ERR! A complete log of this run can be found in:&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    npm ERR!     C:&lt;span class="symbol"&gt;\U&lt;/span&gt;sers&lt;span class="symbol"&gt;\X&lt;/span&gt;8TI&lt;span class="symbol"&gt;\A&lt;/span&gt;ppData&lt;span class="symbol"&gt;\R&lt;/span&gt;oaming&lt;span class="symbol"&gt;\n&lt;/span&gt;pm-cache&lt;span class="symbol"&gt;\_&lt;/span&gt;logs&lt;span class="symbol"&gt;\2&lt;/span&gt;021-04-11T12_11_39_216Z-debug.log&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    PS F:&lt;span class="symbol"&gt;\三&lt;/span&gt;次元&lt;span class="symbol"&gt;\4&lt;/span&gt;-学习&lt;span class="symbol"&gt;\7&lt;/span&gt;-web&lt;span class="symbol"&gt;\5&lt;/span&gt;-node.js&lt;span class="symbol"&gt;\1&lt;/span&gt;-练习&lt;span class="symbol"&gt;\g&lt;/span&gt;ulp-demo&amp;gt; npm uninstall -g gulp&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    npm WARN deprecated fsevents@1.2.13: fsevents 1 will break on node v14+ and could be using insecure binaries. Upgrade to fsevents 2.&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    removed 323 packages in 2.891s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre>
</li>
<li><p>3.然后gulp 任务名；</p>
<p><img src="../../img/15/17.png" alt="17"></p>
</li>
</ul>
<p>3.3 报错：</p>
<ul>
<li><pre><code>PS F:\三次元\4-学习\7-web\5-node.js\1-练习\gulp-demo&gt; gulp first
[20:30:44] Using gulpfile F:\三次元\4-学习\7-web\5-node.js\1-练习\gulp-demo\gulpfile.js
[20:30:44] Starting &apos;first&apos;...
第一个gulp任务执行
[20:30:44] &apos;first&apos; errored after 13 ms
[20:30:44] TypeError: gulp.pipe is not a function
    at F:\三次元\4-学习\7-web\5-node.js\1-练习\gulp-demo\gulpfile.js:10:10
    at first (F:\三次元\4-学习\7-web\5-node.js\1-练习\gulp-demo\node_modules\undertaker\lib\set-task.js:13:15)
    at bound (domain.js:413:15)
    at runBound (domain.js:424:12)
    at asyncRunner (F:\三次元\4-学习\7-web\5-node.js\1-练习\gulp-demo\node_modules\async-done\index.js:55:18)
    at processTicksAndRejections (internal/process/task_queues.js:75:11)
&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ &lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt;解决：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;
gulp.src(&apos;./src/css/public.css&apos;)
    .pipe(gulp.dest(&apos;./dist/css&apos;));
&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;4.gulp.watch()：监控文件的变化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;5.一共有5个方法，这里只列出了4个；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ 视频里面说的，百度了一下好像不止；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 6. Gulp插件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#### 1.有这些，可能不是全部：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ gulp-htmlmin ：html文件压缩&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gulp-csso ：压缩css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gulp-babel ：JavaScript语法转化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gulp-less: less语法转化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gulp-uglify ：压缩混淆JavaScript&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gulp-file-include 公共文件包含&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  browsersync 浏览器实时同步&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#### 2.怎么用呢？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;##### 2.1 举例：html任务；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.2 首先要下载这个插件，也是下载到本地；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ 以前的下载命令：npm install -\-save gulp-htmlmin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ 现在的npm已经没有save了。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ 所以是：npm install gulp-htmlmin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.3 下载好了后，是引用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;`const htmlmin = require(&amp;#x27;gulp-htmlmin&amp;#x27;);`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.4 引用进来后，是编写任务，调用它&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// html任务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 1.html文件中代码的压缩操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 2.抽取html文件中的公共代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&amp;#x27;htmlmin&amp;#x27;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;
</code></pre></li>
</ul>
<p>2.5 选择所有的html，并把压缩后的代码复制一份；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">&#x27;htmlmin&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    gulp.src(<span class="string">&#x27;./src/*.html&#x27;</span>)</span><br><span class="line">        <span class="comment">// 压缩html文件中的代码</span></span><br><span class="line">        .pipe(htmlmin(&#123; <span class="attr">collapseWhitespace</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>这里需要理解一下<code>htmlmin(&#123; collapseWhitespace: true &#125;)</code></p>
</li>
<li><p>视频里面说：别理解，这些东西太多，用的时候去文档找；</p>
</li>
<li><p>算了吧，要理解；</p>
</li>
<li><p>首先是：collapse[^8]</p>
</li>
<li><p>white space 是连在一起的</p>
<blockquote>
<p>White space<br>英 [waɪt speɪs]   美 [waɪt speɪs]<br>留白;空白字符</p>
</blockquote>
</li>
<li><p>space单独是空间；</p>
<blockquote>
<p>space<br>英 [speɪs]   美 [speɪs]<br>n.(可利用的)空地，空间;空;空隙;空子;空当;宽敞;空旷;开阔<br>v.以一定间隔排列</p>
</blockquote>
</li>
<li><p>如果这样百度翻译：collapse whitespace</p>
<p>结果是：折叠空白</p>
</li>
</ul>
<p>2.5.1 这样的格式，也有待探索，小括号里面+一个大括号；</p>
<ul>
<li>({ })</li>
</ul>
<p>2.6 输出到dest目录下去：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">&#x27;htmlmin&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    gulp.src(<span class="string">&#x27;./src/*.html&#x27;</span>)</span><br><span class="line">        <span class="comment">// 压缩html文件中的代码</span></span><br><span class="line">        .pipe(htmlmin(&#123; <span class="attr">collapseWhitespace</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./dest&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>1.这里有个写法让我在意：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.src(<span class="string">&#x27;./src/*.html&#x27;</span>)</span><br><span class="line">    <span class="comment">// 压缩html文件中的代码</span></span><br><span class="line">    .pipe(htmlmin(&#123; <span class="attr">collapseWhitespace</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&#x27;./dest&#x27;</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.如果只是一排，我知道是这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.src(<span class="string">&#x27;./src/*.html&#x27;</span>).pipe(htmlmin(&#123; <span class="attr">collapseWhitespace</span>: <span class="literal">true</span> &#125;));</span><br></pre></td></tr></table></figure>
</li>
<li><p>3.但如果是两排那是怎样？两种假设：</p>
<ul>
<li><pre><code class="js">gulp.src(<span class="string">'./src/*.html'</span>).pipe(htmlmin(&#123; <span class="attr">collapseWhitespace</span>: <span class="literal">true</span> &#125;)).pipe(gulp.dest(<span class="string">'./dest'</span>));
&lt;!--hexoPostRenderEscape:&lt;figure class="highlight less"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;+ ```&lt;span class="selector-tag"&gt;js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;span class="selector-tag"&gt;gulp&lt;/span&gt;&lt;span class="selector-class"&gt;.src&lt;/span&gt;(&lt;span class="string"&gt;&amp;#x27;./src/*.html&amp;#x27;&lt;/span&gt;)&lt;span class="selector-class"&gt;.pipe&lt;/span&gt;(htmlmin(&amp;#123; &lt;span class="attribute"&gt;collapseWhitespace&lt;/span&gt;: true &amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;span class="selector-tag"&gt;gulp&lt;/span&gt;&lt;span class="selector-class"&gt;.src&lt;/span&gt;(&lt;span class="string"&gt;&amp;#x27;./src/*.html&amp;#x27;&lt;/span&gt;)&lt;span class="selector-class"&gt;.pipe&lt;/span&gt;(gulp.dest(&lt;span class="string"&gt;&amp;#x27;./dest&amp;#x27;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre>
</li>
</ul>
</li>
<li><p>4.显然，应该是第二种。但问题又来了，又没有返回<code>return this</code>，为什么可以直接写两排？</p>
<p>难道是第一种？实验：</p>
<ul>
<li><pre><code class="js">gulp.task(<span class="string">'htmlmin'</span>, () =&gt; &#123;
    gulp.src(<span class="string">'./src/*.html'</span>).pipe(htmlmin(&#123; <span class="attr">collapseWhitespace</span>: <span class="literal">true</span> &#125;)).pipe(gulp.dest(<span class="string">'./dest'</span>));
&#125;);
<span class="comment">//没有报错</span>
&lt;!--hexoPostRenderEscape:&lt;figure class="highlight less"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;+ 也不能说第二种错误，实验第二种：&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  ```&lt;span class="selector-tag"&gt;js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;span class="selector-tag"&gt;gulp&lt;/span&gt;&lt;span class="selector-class"&gt;.task&lt;/span&gt;(&lt;span class="string"&gt;&amp;#x27;htmlmin&amp;#x27;&lt;/span&gt;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;      &lt;span class="selector-tag"&gt;gulp&lt;/span&gt;&lt;span class="selector-class"&gt;.src&lt;/span&gt;(&lt;span class="string"&gt;&amp;#x27;./src/*.html&amp;#x27;&lt;/span&gt;)&lt;span class="selector-class"&gt;.pipe&lt;/span&gt;(htmlmin(&amp;#123; &lt;span class="attribute"&gt;collapseWhitespace&lt;/span&gt;: true &amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;      &lt;span class="selector-tag"&gt;gulp&lt;/span&gt;&lt;span class="selector-class"&gt;.src&lt;/span&gt;(&lt;span class="string"&gt;&amp;#x27;./src/*.html&amp;#x27;&lt;/span&gt;)&lt;span class="selector-class"&gt;.pipe&lt;/span&gt;(gulp.dest(&lt;span class="string"&gt;&amp;#x27;./dest&amp;#x27;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;

也没有报错。假设，两种写法对等。那么在2.6.1 那里的写法，`.pipe(htmlmin(&#123; collapseWhitespace: true &#125;))`自动返回了对象`gulp.src()`不成？
</code></pre>
</li>
</ul>
</li>
</ul>
<p>2.6.5 我去实验一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.src(<span class="string">&#x27;./src/*.html&#x27;</span>).pipe(htmlmin(&#123; <span class="attr">collapseWhitespace</span>: <span class="literal">true</span> &#125;)).pipe(gulp.dest(<span class="string">&#x27;./dest&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>是否能正常运行；<code>gulp htmlmin</code>启动！</p>
<ul>
<li>1.有效；</li>
</ul>
<p>2.7 去实验一下</p>
<ul>
<li><pre><code class="js">gulp.task(<span class="string">'htmlmin'</span>, () =&gt; &#123;
    gulp.src(<span class="string">'./src/*.html'</span>).pipe(htmlmin(&#123; <span class="attr">collapseWhitespace</span>: <span class="literal">true</span> &#125;));
    gulp.src(<span class="string">'./src/*.html'</span>).pipe(gulp.dest(<span class="string">'./dest'</span>));
&#125;);
&lt;!--hexoPostRenderEscape:&lt;figure class="highlight less"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;+ &lt;span class="selector-tag"&gt;1&lt;/span&gt;.这么写是无效的；&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;+ &lt;span class="selector-tag"&gt;2&lt;/span&gt;.只把原文件复制了过去，而没有压缩代码。&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;+ &lt;span class="selector-tag"&gt;3&lt;/span&gt;.也就是说，这两条代码，是各自为营。没有互相连接起来；&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  ```&lt;span class="selector-tag"&gt;js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;span class="selector-tag"&gt;gulp&lt;/span&gt;&lt;span class="selector-class"&gt;.src&lt;/span&gt;(&lt;span class="string"&gt;&amp;#x27;./src/*.html&amp;#x27;&lt;/span&gt;)&lt;span class="selector-class"&gt;.pipe&lt;/span&gt;(htmlmin(&amp;#123; &lt;span class="attribute"&gt;collapseWhitespace&lt;/span&gt;: true &amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;span class="selector-tag"&gt;gulp&lt;/span&gt;&lt;span class="selector-class"&gt;.src&lt;/span&gt;(&lt;span class="string"&gt;&amp;#x27;./src/*.html&amp;#x27;&lt;/span&gt;)&lt;span class="selector-class"&gt;.pipe&lt;/span&gt;(gulp.dest(&lt;span class="string"&gt;&amp;#x27;./dest&amp;#x27;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre>
</li>
<li><p>4.<code>gulp.src().pipe()</code>后面真的，还可以跟<code>.pipe</code></p>
</li>
<li><p>5.我要去搜索一下gulp.src()文档型的资料看看。</p>
</li>
</ul>
<p>2.8  2.7接着下面的3.pipe了。2.8回归视频：</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=17&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=17&amp;spm_id_from=pageDriver</a></p>
<p>07:32；</p>
</blockquote>
<h5 id="3-抽取公共代码"><a href="#3-抽取公共代码" class="headerlink" title="3. 抽取公共代码"></a>3. 抽取公共代码</h5><p>1.下载插件：gulp-file[^9]-include[^10]</p>
<p>2.引入</p>
<p><code>const fileInclude = require(&#39;gulp-file-include&#39;);</code></p>
<p>2.1 前面的变量名，是自定义的；</p>
<p>3.调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">&#x27;htmlmin&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    gulp.src(<span class="string">&#x27;./src/*.html&#x27;</span>)</span><br><span class="line">        .pipe(fileInclude(&#123;</span><br><span class="line">            prefix: <span class="string">&#x27;@@&#x27;</span>,</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./dist&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>3.1 根据视频里面的来，会报错；</p>
<ul>
<li><p>视频里面直接是<code>.pipe(fileInclude())</code></p>
</li>
<li><p>报错图：</p>
<p><img src="../../img/15/20.png" alt="20"></p>
</li>
<li><p>文档资料：<a href="https://www.npmjs.com/package/gulp-file-include">https://www.npmjs.com/package/gulp-file-include</a></p>
</li>
</ul>
<p>3.2 调用有误；没有成功，倒是把原本的两个html复制过去了，而不是这两个html里面公共的部分复制过去；</p>
<p>3.3 我看了看文档，好像我理解错了，不是能把公共的提取出来。</p>
<ul>
<li>而是能把公共的拿进来。</li>
</ul>
<p><strong>正确使用</strong></p>
<p>3.4 先把公共的部分，header剪切到一个地方：</p>
<ul>
<li>这里是剪切到<code>./src/common/header.html</code></li>
</ul>
<p>3.5 然后在被剪切的地方，引用公共的信息。</p>
<ul>
<li><code>@@include(&#39;./common/header.html&#39;)</code></li>
<li>这个得路径是从什么地方开始？是从当前代码文件的地方开始。这里的代码也在src,所以直接./common</li>
</ul>
<p>3.6 输出到一个目录下，看有没有被剪切走的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">&#x27;htmlmin&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    gulp.src(<span class="string">&#x27;./src/article.html&#x27;</span>)</span><br><span class="line">    .pipe(fileInclude(&#123; </span><br><span class="line">            prefix: <span class="string">&#x27;@&#x27;</span>,</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./dist&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>在dist目录下的,article.html文件里面，有被剪切走的header代码；</li>
<li>成功；2021-4-12 16:01:18</li>
</ul>
<hr>
<h5 id="4-CSS任务"><a href="#4-CSS任务" class="headerlink" title="4. CSS任务"></a>4. CSS任务</h5><p>1.获取文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> htmlmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlmin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fileInclude = <span class="built_in">require</span>(<span class="string">&#x27;gulp-file-include&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// css任务</span></span><br><span class="line"><span class="comment">// 1.less语法转换</span></span><br><span class="line"><span class="comment">// 2.css代码压缩</span></span><br><span class="line">gulp.task(<span class="string">&#x27;cssmin&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    gulp.src(<span class="string">&#x27;./src/css/*.less&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>2.处理文件</p>
<ul>
<li>下载gulp-less，<code>npm install</code></li>
<li>引用：<code>const less = require(&#39;gulp-less&#39;);</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// css任务</span></span><br><span class="line"><span class="comment">// 1.less语法转换</span></span><br><span class="line">gulp.task(<span class="string">&#x27;cssmin&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    gulp.src(<span class="string">&#x27;./src/css/*.less&#x27;</span>)</span><br><span class="line">        .pipe(less())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./dist/css&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>3.压缩</p>
<p>3.1 老样子，先下载插件：</p>
<ul>
<li>文档里面的下载命令是这样：<code>npm install gulp-csso --save-dev</code><ul>
<li>这里先不管后面的 <code>--save-dev</code></li>
<li>同时也不忽略，视频里说了后面再讲；</li>
<li><a href="https://www.npmjs.com/package/gulp-csso">https://www.npmjs.com/package/gulp-csso</a></li>
</ul>
</li>
</ul>
<p>3.2 我先来，引入！</p>
<p><code>var csso = require(&#39;gulp-csso&#39;);</code></p>
<ul>
<li>我们自己不用var，用const；</li>
</ul>
<p>3.3 这里，我们把less和css一起压缩。用数组</p>
<p><img src="../../img/15/21.png" alt="21"></p>
<h4 id="3-pipe"><a href="#3-pipe" class="headerlink" title="3. pipe"></a>3. pipe</h4><p>1.pipe到目前为止，视频里面只说了一句复制。</p>
<p>2.因为种种写法，一度以为是glup的数据or方法。或者是gulp.src的属性or方法；</p>
<p>3.然而这些都不是。</p>
<p>4.它是node.js的东西，是一个用来连接管道什么的东西。</p>
<p>5.这里涉及到名为‘管道’的概念。这里先不追究。学到这些的时候，自然会学。</p>
<p>6.现在去触碰，可能基础不够 。</p>
<p>7.总而言之：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.src(<span class="string">&#x27;./src/*.html&#x27;</span>).pipe(htmlmin(&#123; <span class="attr">collapseWhitespace</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">gulp.src(<span class="string">&#x27;./src/*.html&#x27;</span>).pipe(gulp.dest(<span class="string">&#x27;./dest&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>7.1 为什么没有效果，因为pipe真的只为前面那个服务。</p>
<p>7.2 只要形成了 管道流，就有pipe；</p>
<p>8.gulp.src()的返回值：返回一个可以在管道的开始或中间使用的流，用于根据给定的 globs 添加文件。</p>
<blockquote>
<p><a href="https://www.gulpjs.com.cn/docs/api/src/#返回值">https://www.gulpjs.com.cn/docs/api/src/#返回值</a></p>
<p>2021-4-12 00:12:06</p>
</blockquote>
<hr>
<h4 id="4-编写JS任务"><a href="#4-编写JS任务" class="headerlink" title="4. 编写JS任务"></a>4. 编写JS任务</h4><blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=19&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=19&amp;spm_id_from=pageDriver</a></p>
<p>2021-4-12 17:41:05</p>
</blockquote>
<p><strong>1.JS任务</strong></p>
<ul>
<li>es6代码转换</li>
<li>代码压缩</li>
</ul>
<p><strong>2.要转换es6代码，需要用插件：gulp-babel[^11] ：JavaScript语法转化</strong></p>
<ul>
<li><p>去文档上看：发现是这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># Babel 7</span><br><span class="line">$ npm install --save-dev gulp-babel @babel/core @babel/preset-env</span><br><span class="line"></span><br><span class="line"># Babel 6</span><br><span class="line">$ npm install --save-dev gulp-babel@<span class="number">7</span> babel-core babel-preset-env</span><br></pre></td></tr></table></figure>
</li>
<li><p>我们用最新的版本，所以选择上面。但后面那一串是什么？</p>
<p><code>@babel/core @babel/preset-env</code></p>
</li>
<li><p>当需要一次下载多个插件的时候，每个名称用空格，隔开；</p>
<ul>
<li>这里就需要一次下载多个，gulp-babel会基于后面两个东西使用</li>
</ul>
</li>
</ul>
<p>2.1 <code>--save-dev</code>还是没有讲，我自己去百度算了；</p>
<ul>
<li><p>1.npm install 在安装 npm 包时，有两种命令参数可以把它们的信息写入 package.json 文件</p>
<blockquote>
<p><a href="https://blog.csdn.net/star0311/article/details/90899013">https://blog.csdn.net/star0311/article/details/90899013</a></p>
</blockquote>
</li>
<li><p>2.简单来说：   使用命令 –save 或者说不写命令 –save  ,都会把信息记录到 dependencies   中；</p>
<blockquote>
<p><a href="https://blog.csdn.net/cvper/article/details/88728505">https://blog.csdn.net/cvper/article/details/88728505</a></p>
<p><a href="javascript:;">devDependencies</a> 项目应用开发环境依赖，开发和测试时的依赖，指定项目开发所依赖的模块，一些模块只在开发时需要依赖。</p>
</blockquote>
<hr>
</li>
</ul>
<p><strong>3.引入</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">&#x27;gulp-babel&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p><strong>4.调用</strong></p>
<ul>
<li><p>1.文档里面也有调用的语法：</p>
<p><img src="../../img/15/22.png" alt="21"></p>
</li>
<li><blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=19&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=19&amp;spm_id_from=pageDriver</a></p>
<p>03:57;</p>
</blockquote>
</li>
<li><p>这样 的格式，清楚了，是json；</p>
</li>
</ul>
<p><strong>5.压缩：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">&#x27;default&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    gulp.src(<span class="string">&#x27;./src/js/base.js&#x27;</span>)</span><br><span class="line">        .pipe(babel(&#123;</span><br><span class="line">            presets: [<span class="string">&#x27;@babel/env&#x27;</span>]</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(GulpUglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;dist&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>没看视频，自己搞；文档里面的案例也是错的</p>
<blockquote>
<p><a href="https://www.npmjs.com/package/gulp-uglify">https://www.npmjs.com/package/gulp-uglify</a></p>
</blockquote>
</li>
</ul>
<h4 id="5-拷贝任务"><a href="#5-拷贝任务" class="headerlink" title="5. 拷贝任务"></a>5. 拷贝任务</h4><p>1.上面的是对html，css，js的处理；</p>
<ul>
<li>但不说网站，网页都会有图片等其他文件。<ul>
<li>这些文件，需要拷贝。确实也不需要处理</li>
</ul>
</li>
</ul>
<p><img src="../../img/15/23.png" alt="23"></p>
<p>2.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">&#x27;copy&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    gulp.src(<span class="string">&#x27;./src/images/*&#x27;</span>)</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./dist/images&#x27;</span>));</span><br><span class="line">    gulp.src(<span class="string">&#x27;./src/lib&#x27;</span>)</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./dist&#x27;</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>有问题；</li>
</ul>
<p>2.1 我以为这样写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.src(<span class="string">&#x27;./src/lib&#x27;</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&#x27;./dist&#x27;</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li><p>可以把lib文件，及其以内的东西，全部复制到当前代码文件路径下的dist文件夹里面。</p>
</li>
<li><p>但只复制了一个文件夹，没有里面的东西。</p>
</li>
<li><p>可能还是要这样写完整：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.src(<span class="string">&#x27;./src/images/*&#x27;</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&#x27;./dist/images&#x27;</span>));</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>2.2 视频里面这么写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.src(<span class="string">&#x27;./src/lib/*&#x27;</span>)</span><br><span class="line">.pipe(gulp.dest(<span class="string">&#x27;./dist/lib&#x27;</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li><p>我不行。我想了想，这么写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.src(<span class="string">&#x27;./src/lib/*/*&#x27;</span>)</span><br><span class="line">.pipe(gulp.dest(<span class="string">&#x27;./dist/lib&#x27;</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>行了</li>
</ul>
</li>
<li><p>唉，问题好多哦</p>
</li>
</ul>
<hr>
<h4 id="6-构建任务"><a href="#6-构建任务" class="headerlink" title="6. 构建任务"></a>6. 构建任务</h4><p>1.上面写了那么多，执行要一个个执行。显然不能这样</p>
<p>2.没说什么，直接代码了。这里的笔记PPT都没有，完全是我看视频，自己写的；</p>
<ul>
<li>视频里面这么写没事，我报错了；</li>
</ul>
<p><img src="../../img/15/24.png" alt="24"></p>
<ul>
<li>我：</li>
</ul>
<p><img src="../../img/15/25.png" alt="25"></p>
<ul>
<li>累</li>
</ul>
<p>2.1 百度：</p>
<blockquote>
<p><a href="https://blog.csdn.net/weixin_43430074/article/details/105595350">https://blog.csdn.net/weixin_43430074/article/details/105595350</a></p>
</blockquote>
<p><code>gulp.task(&#39;default&#39;, gulp.series(&#39;htmlmin&#39;, &#39;cssmin&#39;, &#39;jsmin&#39;, &#39;copy&#39;));</code></p>
<ul>
<li><p>1.看来视频里面的gulp，是4.0以下的版本；</p>
<ul>
<li>1.1 查看gulp版本：4.0.2</li>
<li>1.2 连现在——2021-4-13 20:08:11，都才4.0.2。更别说这大概是2018年的资料</li>
<li>1.3 去找文档理解一下</li>
</ul>
</li>
<li><p>2.找到文档</p>
<ul>
<li><blockquote>
<p><a href="https://www.gulpjs.com.cn/docs/api/series/">https://www.gulpjs.com.cn/docs/api/series/</a></p>
</blockquote>
</li>
<li><p>2.1 语义：</p>
<p>将任务函数和/或组合操作组合成更大的操作，这些操作将按顺序依次执行。对于使用 <code>series()</code> 和 <code>parallel()</code> 组合操作的嵌套深度没有强制限制。</p>
</li>
<li><p>2.2 案例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; series &#125; = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">javascript</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// body omitted</span></span><br><span class="line">  cb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// body omitted</span></span><br><span class="line">  cb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.build = series(javascript, css);</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.3 引用的写法，不同；</p>
</li>
<li><p>2.4 如果是视频里面的，大概是这样：</p>
<p><code>const series = require(&#39;series&#39;);</code></p>
<blockquote>
<p><a href="https://blog.csdn.net/weixin_30338743/article/details/97960197">https://blog.csdn.net/weixin_30338743/article/details/97960197</a></p>
<p>gulp.series：按照顺序执行<br>gulp.paralle：可以并行计算</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>2.5 不说关键词，连格式都不一样，有一个{}。需要系统的做一个gulp的笔记；</p>
</li>
<li><p>2.6 写到25.3笔记里面去；</p>
</li>
</ul>
<p>3.去看了看gulp4，很多地方看不懂；还是需要视频等资料；</p>
<ul>
<li><p>或者是基础不够；</p>
</li>
<li><p>要不这里找gulp3下载使用</p>
</li>
<li><p>2021-4-13 21:48:16，下班打卡；</p>
</li>
</ul>
<hr>
<h2 id="2-4-package-json文件"><a href="#2-4-package-json文件" class="headerlink" title="2.4 package.json文件"></a>2.4 package.json文件</h2><h3 id="1-node-modules文件夹的问题"><a href="#1-node-modules文件夹的问题" class="headerlink" title="1. node_modules文件夹的问题"></a>1. node_modules文件夹的问题</h3><p>1.文件夹以及文件过多过碎，当我们将项目整体拷贝给别人的时候,，传输速度会很慢很慢. </p>
<p>2.复杂的模块依赖关系需要被记录，确保模块的版本和当前保持一致，否则会导致当前项目运行报错</p>
<ul>
<li>package.json文件，会记录用了哪些第三方模块；</li>
</ul>
<h3 id="2-package-json文件的作用"><a href="#2-package-json文件的作用" class="headerlink" title="2. package.json文件的作用"></a>2. package.json文件的作用</h3><p>1.项目描述文件，记录了当前项目信息，例如项目名称、版本、作者、github地址、当前项目依赖了哪些第三方模块等。使用npm init -y命令生成。</p>
<ul>
<li>这里的-y，是 yes，全部填写默认值。</li>
<li>npm init 会问一些问题，有默认值；</li>
</ul>
<p>2.文件里面的<code>dependencies</code>，下面，就是下载的第三方模块。</p>
<ul>
<li><p>1.如果直接在命令行：<code>npm install</code>，后面不写任何名字；</p>
</li>
<li><p>2.那么会自动寻找package.json里面的dependencies下面的。</p>
</li>
<li><p>3.例如：</p>
<ul>
<li><p>1.先<code>npm init -y</code>生成一个默认npm项目？这个是叫npm项目么？</p>
</li>
<li><p>2.然后下载一个，不知道是什么玩意的mime；</p>
</li>
<li><pre><code>PS F:\三次元\4-学习\7-web\5-node.js\1-练习\ceshi&gt; npm init -y
Wrote to F:\三次元\4-学习\7-web\5-node.js\1-练习\ceshi\package.json:

&#123;
  &quot;name&quot;: &quot;ceshi&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;&quot;,
  &quot;main&quot;: &quot;index.js&quot;,
  &quot;scripts&quot;: &#123;
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;
  &#125;,
  &quot;keywords&quot;: [],
  &quot;author&quot;: &quot;&quot;,
  &quot;license&quot;: &quot;ISC&quot;
&#125;

PS F:\三次元\4-学习\7-web\5-node.js\1-练习\ceshi&gt; npm install mime
npm notice created a lockfile as package-lock.json. You should commit this file.
npm WARN ceshi@1.0.0 No description
npm WARN ceshi@1.0.0 No repository field.

+ mime@2.5.2
added 1 package from 1 contributor in 0.684s
PS F:\三次元\4-学习\7-web\5-node.js\1-练习\ceshi&gt;
&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight pgsql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ &lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;那么在那个文件夹下，就有一个package.json文件，打开它会看到：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ```&lt;span class=&quot;type&quot;&gt;json&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;name&amp;quot;: &amp;quot;ceshi&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;scripts&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;quot;test&amp;quot;: &amp;quot;echo \&amp;quot;Error: &lt;span class=&quot;keyword&quot;&gt;no&lt;/span&gt; test specified\&amp;quot; &amp;amp;&amp;amp; exit 1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;keywords&amp;quot;: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;author&amp;quot;: &amp;quot;&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;license&amp;quot;: &amp;quot;ISC&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;dependencies&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;quot;mime&amp;quot;: &amp;quot;^2.5.2&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre></li>
<li><p>4.不下mime，是没有dependencies[^25]的；</p>
</li>
</ul>
</li>
</ul>
<h3 id="3-项目依赖"><a href="#3-项目依赖" class="headerlink" title="3. 项目依赖"></a>3. 项目依赖</h3><p>1.项目中，有两种依赖，这里是项目依赖；</p>
<ul>
<li>主要是运行中的依赖；</li>
</ul>
<p>项目的开发阶段和线上运营阶段，都需要依赖的第三方包，称为项目依赖<br>使用npm install 包名命令下载的文件会默认被添加到 package.json 文件的 dependencies 字段中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">       <span class="string">&quot;jquery&quot;</span>: <span class="string">&quot;^3.3.1“</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">&#125; </span></span><br></pre></td></tr></table></figure>



<h3 id="4-开发依赖"><a href="#4-开发依赖" class="headerlink" title="4. 开发依赖"></a>4. 开发依赖</h3><p>1.辅助开发项目的依赖；比如上面学习的gulp，项目运行后，就用不到gulp了；</p>
<p>在项目的开发阶段需要依赖，线上运营阶段不需要依赖的第三方包，称为开发依赖</p>
<p>2.使用npm install 包名 –save-dev命令将包添加到package.json文件的devDependencies字段中</p>
<ul>
<li>这样可以方便区分，项目依赖和开发依赖；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">       <span class="string">&quot;gulp&quot;</span>: <span class="string">&quot;^3.9.1“</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">&#125; </span></span><br></pre></td></tr></table></figure>

<ul>
<li>2.会在package.json文件里面，生成devDependencies对象；</li>
</ul>
<blockquote>
<p>devDependencies : 开发人员依赖；开发依赖；</p>
</blockquote>
<p>3.npm install 会下载全部依赖，开发和项目依赖；</p>
<ul>
<li>1.<code>npm install --production</code>,只会下载项目依赖；</li>
</ul>
<h3 id="5-package-lock-json文件的作用"><a href="#5-package-lock-json文件的作用" class="headerlink" title="5. package-lock.json文件的作用"></a>5. package-lock.json文件的作用</h3><p> 1.锁定包的版本，确保再次下载时不会因为包版本不同而产生问题</p>
<p> 2.加快下载速度，因为该文件中已经记录了项目所依赖第三方包的树状结构和包的下载地址，重新安装时只需下载即可，不需要做额外的工作</p>
<h3 id="6-scripts-别名"><a href="#6-scripts-别名" class="headerlink" title="6. scripts 别名"></a>6. scripts 别名</h3><p>1.在package.json里，scripts，存储的是命令的别名；</p>
<p>2.视频里面演示：”build”: “nodemon app.js”</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=22&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=22&amp;spm_id_from=pageDriver</a></p>
<p>07.36</p>
</blockquote>
<ul>
<li>1.俺忘记了nodemon；<ul>
<li>1.1 上去看了看，比较node，只是在保存修改时，会自动执行一次；</li>
</ul>
</li>
</ul>
<p>3.正常情况使用要，node app.js，或者 nodemon app.js</p>
<ul>
<li>1.这里可以<code>npm run build</code> 等于 nodemon app.js<ul>
<li>因为上面有设置。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="2-5-Node-js中模块的加载机制"><a href="#2-5-Node-js中模块的加载机制" class="headerlink" title="2.5 Node.js中模块的加载机制"></a>2.5 Node.js中模块的加载机制</h2><p>1.完整路径：<code>require(&#39;./find.js&#39;);</code></p>
<ul>
<li>又有路径，又有后缀名；</li>
</ul>
<p>2.require方法根据模块路径查找路径，如果是完整路径，直接引入模块。</p>
<h3 id="1-模块查找规则"><a href="#1-模块查找规则" class="headerlink" title="1. 模块查找规则"></a>1. 模块查找规则</h3><blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=23&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=23&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.当模块拥有路径但没有后缀时</p>
<p><code>require(&#39;./find&#39;);</code></p>
<p>2.require方法根据模块路径查找模块，如果是完整路径，直接引入模块。</p>
<p>2.1 先在同级目录里面找</p>
<ul>
<li>如果模块后缀省略，先找同名JS文件，再找同名JS文件夹</li>
</ul>
<ul>
<li>如果找到了同名文件夹，找文件夹中的index.js。</li>
<li>如果找到了同名文件夹，却没有index.js就会去当前文件夹中的package.json文件中查找main选项中的入口文件<ul>
<li>那么，啥事入口文件？</li>
<li>是package.json里面的那个main；</li>
</ul>
</li>
<li>如果找指定的入口文件不存在或者没有指定入口文件就会报错，模块没有被找到</li>
</ul>
<h3 id="2-模块查找规则-当模块没有路径且没有后缀时"><a href="#2-模块查找规则-当模块没有路径且没有后缀时" class="headerlink" title="2. 模块查找规则-当模块没有路径且没有后缀时"></a>2. 模块查找规则-当模块没有路径且没有后缀时</h3><blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=24&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=24&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p><code>require(&#39;find&#39;);</code></p>
<p>1.Node.js会假设它是系统模块</p>
<ul>
<li>那么系统模块是什么？</li>
</ul>
<p>2.Node.js会去node_modules文件夹中<br>3.首先看是否有该名字的JS文件<br>4.再看是否有该名字的文件夹<br>5.如果是文件夹看里面是否有index.js<br>6.如果没有index.js查看该文件夹中的package.json中的main选项确定模块入口文件<br>7.否则找不到报错</p>
<h3 id="3-同级找不到"><a href="#3-同级找不到" class="headerlink" title="3. 同级找不到"></a>3. 同级找不到</h3><p>1.同级找不到，会去上级目录找的；怎么上面的笔记里面没有写这一点；2021-5-10 10:35:05</p>
<hr>
<h2 id="2-6-node全局对象global"><a href="#2-6-node全局对象global" class="headerlink" title="2.6 node全局对象global"></a>2.6 node全局对象global</h2><p>上面1.3.3。有</p>
<h1 id="3-请求响应原理及HTTP协议"><a href="#3-请求响应原理及HTTP协议" class="headerlink" title="3. 请求响应原理及HTTP协议"></a>3. 请求响应原理及HTTP协议</h1><p>1.目标：</p>
<p> 能够知道B/S软件体系结构<br> 能够搭建Web服务器<br> 能够使用获取GET、POST参数的方式获取参数<br> 能够掌握如何制作路由<br> 能够知道同步异步的概念<br> 能够知道回调函数的概念</p>
<p> C/S、B/S软件体系结构分析<br> 服务器端基础概念<br> 创建web服务器<br> HTTP协议<br> HTTP请求与响应处理<br> Node.js的工作原理</p>
<h2 id="3-0-B-S结构"><a href="#3-0-B-S结构" class="headerlink" title="3.0 B/S结构"></a>3.0 B/S结构</h2><p>1.B/S结构（Browser/Server，浏览器/服务器模式），是WEB兴起后的一种网络结构模式，<a href="https://baike.baidu.com/item/WEB/150564">WEB</a>浏览器是客户端最主要的应用软件。这种模式统一了客户端，将系统功能实现的核心部分集中到<a href="https://baike.baidu.com/item/服务器/100571">服务器</a>上，简化了系统的开发、维护和使用。客户机上只要安装一个浏览器，如[Netscape Navigator](<a href="https://baike.baidu.com/item/Netscape">https://baike.baidu.com/item/Netscape</a> Navigator/1014148)或[Internet Explorer](<a href="https://baike.baidu.com/item/Internet">https://baike.baidu.com/item/Internet</a> Explorer/1537769)，服务器安装[SQL Server](<a href="https://baike.baidu.com/item/SQL">https://baike.baidu.com/item/SQL</a> Server/245994)、<a href="https://baike.baidu.com/item/Oracle/301207">Oracle</a>、<a href="https://baike.baidu.com/item/MYSQL/471251">MYSQL</a>等数据库。浏览器通过[Web Server](<a href="https://baike.baidu.com/item/Web">https://baike.baidu.com/item/Web</a> Server/9306055) 同数据库进行数据交互</p>
<p><img src="../../img/15/55.png" alt="1"></p>
<blockquote>
<p><a href="https://baike.baidu.com/item/B%2FS结构/4868588?fromtitle=b%2Fs&amp;fromid=219020">https://baike.baidu.com/item/B%2FS结构/4868588?fromtitle=b%2Fs&amp;fromid=219020</a></p>
</blockquote>
<h2 id="3-1-服务器端基础概念"><a href="#3-1-服务器端基础概念" class="headerlink" title="3.1 服务器端基础概念"></a>3.1 服务器端基础概念</h2><h3 id="1-网站的组成"><a href="#1-网站的组成" class="headerlink" title="1. 网站的组成"></a>1. 网站的组成</h3><p>1.网站应用程序主要分为两大部分：客户端和服务器端。</p>
<ul>
<li>客户端：在浏览器中运行的部分，就是用户看到并与之交互的界面程序。使用HTML、CSS、JavaScript构建。</li>
<li>服务器端：在服务器中运行的部分，负责存储数据和处理应用逻辑。</li>
</ul>
<p><img src="../../img/15/19.png" alt="1"></p>
<h3 id="2-Node网站服务器"><a href="#2-Node网站服务器" class="headerlink" title="2. Node网站服务器"></a>2. Node网站服务器</h3><p>1.能够提供网站访问服务的机器就是网站服务器，它能够接收客户端的请求，能够对请求做出响应。</p>
<h3 id="3-IP地址"><a href="#3-IP地址" class="headerlink" title="3. IP地址"></a>3. IP地址</h3><p>1.互联网中设备的唯一标识。<br>IP是Internet Protocol Address的简写，代表互联网协议地址.</p>
<h3 id="4-域名"><a href="#4-域名" class="headerlink" title="4. 域名"></a>4. 域名</h3><p>由于IP地址难于记忆，所以产生了域名的概念，所谓域名就是平时上网所使用的网址。</p>
<p><a href="http://www.itheima.com">http://www.itheima.com</a>  =&gt;  <a href="http://124.165.219.100/">http://124.165.219.100/</a><br>虽然在地址栏中输入的是网址, 但是最终还是会将域名转换为ip才能访问到指定的网站服务器。</p>
<h3 id="5-端口"><a href="#5-端口" class="headerlink" title="5. 端口"></a>5. 端口</h3><p>1.端口是计算机与外界通讯交流的出口，用来区分服务器电脑中提供的不同的服务。</p>
<ul>
<li>请求服务，邮件服务，文件服务，上传下载服务；</li>
</ul>
<p>2.当用IP找到服务器，端口就来区分你要的服务；</p>
<h3 id="6-URL"><a href="#6-URL" class="headerlink" title="6. URL"></a>6. URL</h3><p>1.统一资源定位符，又叫URL（Uniform Resource Locator），是专为标识Internet网上资源位置而设的一种编址方式，我们平时所说的网页地址指的即是URL。</p>
<h4 id="6-2-URL的组成"><a href="#6-2-URL的组成" class="headerlink" title="6.2 URL的组成"></a>6.2 URL的组成</h4><p>1.传输协议://服务器IP或域名:端口/资源所在位置标识</p>
<ul>
<li>为什么一般我们自己没写端口，浏览器默认添加一个80端口</li>
</ul>
<p>2.==http:==//<a href="http://www.itcast.cn">www.itcast.cn</a> ==/news/20181018/09152238514.html==</p>
<p>3.http：超文本传输协议，提供了一种发布和接收HTML页面的方法。</p>
<ul>
<li>简单了解</li>
</ul>
<p>4.重温；2021-5-11 11:17:55</p>
<ul>
<li>1.在原生node.js里面，的文档，讲解new Url的时候。有更多的信息；</li>
<li><a href="http://nodejs.cn/api/url.html#url_url_strings_and_url_objects">http://nodejs.cn/api/url.html#url_url_strings_and_url_objects</a></li>
</ul>
<p>4.1 URL 字符串是结构化的字符串，包含多个含义不同的组成部分。 解析字符串后返回的 URL 对象，每个属性对应字符串的各个组成部分。</p>
<p><code>url</code> 模块提供了两套 API 来处理 URL：一个是旧版本传统的 API，一个是实现了 <a href="http://url.nodejs.cn/fKgW8d">WHATWG标准</a>的新 API。</p>
<p>WHATWG 的 API 与传统的 API 的区别如下。 在下图中，URL <code>&#39;http://user:pass@sub.example.com:8080/p/a/t/h?query=string#hash&#39;</code> 上方的是传统的 <code>url.parse()</code> 返回的对象的属性。 下方的则是 WHATWG 的 <code>URL</code> 对象的属性。</p>
<p><img src="../../img/15/56.png" alt="26"></p>
<p>4.2 protocol 是协议，不翻译，我能猜中；</p>
<ul>
<li>1.auth是？</li>
<li>2.host[^27]<ul>
<li>1.<strong>Host</strong> 请求头指明了请求将要发送到的服务器主机名和端口号。</li>
<li>2.<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Host">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Host</a></li>
</ul>
</li>
</ul>
<h3 id="7-开发过程中客户端和服务器端说明"><a href="#7-开发过程中客户端和服务器端说明" class="headerlink" title="7. 开发过程中客户端和服务器端说明"></a>7. 开发过程中客户端和服务器端说明</h3><p>1.在开发阶段，客户端和服务器端使用同一台电脑，即开发人员电脑。</p>
<p><img src="../../img/15/26.png" alt="26"></p>
<p>2.本机域名：localhost<br>本地IP   ：127.0.0.1</p>
<ul>
<li>张三在自己的电脑里输入localhost，就访问了张三的主机。同理李四；</li>
</ul>
<hr>
<h2 id="3-2-创建web服务器"><a href="#3-2-创建web服务器" class="headerlink" title="3.2 创建web服务器"></a>3.2 创建web服务器</h2><p>1.示例代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 引用系统模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"> <span class="comment">// 创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = http.createServer();</span><br><span class="line"> <span class="comment">// 当客户端发送请求的时候</span></span><br><span class="line">app.on(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">//  响应</span></span><br><span class="line">      res.end(<span class="string">&#x27;&lt;h1&gt;hi, user&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> <span class="comment">// 监听3000端口</span></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;服务器已启动，监听3000端口，请访问 localhost:3000&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.1 在node.js中，创建服务器要用到系统模块http；</p>
<p>1.2 在这个http模块下有一个方法，createServer()。它返回的对象是：网站服务器对象；</p>
<p>1.3 我们如何用这个对象，接受与响应网站请求呢？</p>
<p>1.4 添加请求事件的语法是：服务器.on，on是添加事件的意思；</p>
<ul>
<li>1.第一个参数，是事件名称。</li>
<li>2.第二个参数，是，事件处理函数；</li>
<li>3.当请求来的时候，就会去执行这个事件处理函数；</li>
</ul>
<p>2.弄完后怎么访问？</p>
<ul>
<li>localhost:3000</li>
</ul>
<p>3.res.end，字面意思，最后的响应？</p>
<ul>
<li>重温：2021-4-22 13:46:22</li>
<li>2.请求结束后，返回this。具体可去node文档查看</li>
</ul>
<hr>
<h2 id="3-3-HTTP协议"><a href="#3-3-HTTP协议" class="headerlink" title="3.3 HTTP协议"></a>3.3 HTTP协议</h2><h3 id="1-HTTP协议的概念"><a href="#1-HTTP协议的概念" class="headerlink" title="1. HTTP协议的概念"></a>1. HTTP协议的概念</h3><p>1.超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）规定了如何从网站服务器传输超文本到本地浏览器，它基于客户端服务器架构工作，是客户端（用户）和服务器端（网站）请求和应答的标准。</p>
<p><img src="../../img/15/27.png" alt="27"></p>
<h3 id="2-报文"><a href="#2-报文" class="headerlink" title="2. 报文"></a>2. 报文</h3><blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=29&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=29&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.在HTTP请求和响应的过程中传递的数据块就叫报文，包括要传送的数据和一些附加信息，并且要遵守规定好的格式。</p>
<p><img src="../../img/15/28.png" alt="28"></p>
<p>2.比如登录账号密码，就是包含在请求报文里面</p>
<p>3.而登录是否成功，就包含在响应报文里面；</p>
<p>4.对开发人员来说，报文信息在哪里能看到？</p>
<ul>
<li>看视频；04.04~06.40</li>
<li>F12那里面</li>
</ul>
<h3 id="3-请求报文"><a href="#3-请求报文" class="headerlink" title="3. 请求报文"></a>3. 请求报文</h3><p>1.请求方式 （Request Method）</p>
<p>GET     请求数据<br>POST   发送数据</p>
<p>3.反正视频它开始了，post请求一般用表单。</p>
<ul>
<li>然后就开始建立了一个html</li>
</ul>
<p>3.1 想要获取接受到了什么请求（get，post）</p>
<ul>
<li><p>需要添加代码 req.method ，它返回的结果，就是请求方式，console.log可以打印</p>
</li>
<li><pre><code class="js"><span class="comment">// 用于创建网站服务器的模块</span>
<span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);

<span class="comment">// app对象就是网站服务器对象</span>
<span class="keyword">const</span> app = http.createServer();

app.on(<span class="string">'request'</span>, (req, res) =&gt; &#123;
    <span class="comment">// 获取请求方式，req.method</span>
    <span class="built_in">console</span>.log(req.method);
    res.end(<span class="string">'&lt;h2&gt;sadasdasd&lt;/h2&gt;'</span>);
&#125;);

app.listen(<span class="number">3000</span>);
<span class="built_in">console</span>.log(<span class="string">'网站服务器启动成功'</span>);
&lt;!--hexoPostRenderEscape:&lt;figure class="highlight coffeescript"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="number"&gt;3.2&lt;/span&gt; 不过这个，只有在命名行工具看到；&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;+ &lt;span class="number"&gt;1.&lt;/span&gt;如果要前端看，只有用些&lt;span class="keyword"&gt;if&lt;/span&gt;返回值；&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  ```&lt;span class="javascript"&gt;js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;  &lt;span class="comment"&gt;// 用于创建网站服务器的模块&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;  &lt;span class="keyword"&gt;const&lt;/span&gt; http = &lt;span class="built_in"&gt;require&lt;/span&gt;(&lt;span class="string"&gt;&amp;#x27;http&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;  &lt;span class="comment"&gt;// app对象就是网站服务器对象&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;  &lt;span class="keyword"&gt;const&lt;/span&gt; app = http.createServer();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;  app.on(&lt;span class="string"&gt;&amp;#x27;request&amp;#x27;&lt;/span&gt;, &lt;span class="function"&gt;(&lt;span class="params"&gt;req, res&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;      &lt;span class="comment"&gt;// 获取请求方式，req.method&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;      &lt;span class="built_in"&gt;console&lt;/span&gt;.log(req.method);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;      &lt;span class="keyword"&gt;if&lt;/span&gt; (req.method == &lt;span class="string"&gt;&amp;#x27;POST&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;          res.end(&lt;span class="string"&gt;&amp;#x27;post&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;      &amp;#125; &lt;span class="keyword"&gt;else&lt;/span&gt; &lt;span class="keyword"&gt;if&lt;/span&gt; (req.method == &lt;span class="string"&gt;&amp;#x27;GET&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;          res.end(&lt;span class="string"&gt;&amp;#x27;get&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;      &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;  &amp;#125;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;  app.listen(&lt;span class="number"&gt;3000&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;  &lt;span class="built_in"&gt;console&lt;/span&gt;.log(&lt;span class="string"&gt;&amp;#x27;网站服务器启动成功&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;


</code></pre>
</li>
</ul>
<p>4.如果直接回车：<a href="http://localhost:3000/">http://localhost:3000/</a></p>
<ul>
<li>是get请求；</li>
</ul>
<p>4.1 从表单那边，点击。页面会显示post请求；</p>
<ul>
<li>当然也是因为写了method属性的值，写的是post；2021-5-10 11:05:40</li>
</ul>
<h4 id="3-2-req-on"><a href="#3-2-req-on" class="headerlink" title="3.2 req.on"></a>3.2 req.on</h4><p>1.上面是app.on；</p>
<ul>
<li>app = http.createServer();</li>
</ul>
<p>请求操作？当客户端有请求来的时候，干啥</p>
<p>看文档，2021-4-22 13:49:04</p>
<p>算了，俺去把链接弄来；</p>
<blockquote>
<p><a href="http://nodejs.cn/api/http.html#http_http_createserver_options_requestlistener">http://nodejs.cn/api/http.html#http_http_createserver_options_requestlistener</a></p>
</blockquote>
<p>2.好像现在变了，把on加在<code>http.createServer()</code>里面了；</p>
<img src="../../img/15/53.png" alt="53" style="zoom:80%;" />

<p>2.1 说明on是有的，去找找文档里面；</p>
<ul>
<li>用.on搜索查看</li>
<li>查不到；</li>
</ul>
<h3 id="4-req-url请求地址"><a href="#4-req-url请求地址" class="headerlink" title="4. req.url请求地址"></a>4. req.url请求地址</h3><p>0.请求地址，就是端口后面的地址，是需要输入的</p>
<ul>
<li>例如：<a href="http://localhost:3000/index">http://localhost:3000/index</a></li>
<li>那么req.url == /index<ul>
<li>/也是哦</li>
</ul>
</li>
</ul>
<p>0.1 这个时候，我们被这个假象骗住了。</p>
<ul>
<li>其实req.url下面有很多东西，只是目前只有/index；</li>
</ul>
<p>0.2 假如是这样的url：<a href="http://localhost:3000/index?name=123&amp;password=3213">http://localhost:3000/index?name=123&amp;password=3213</a></p>
<ul>
<li>返回值：/index?name=123&amp;password=3213</li>
<li>如果需要单独拿到/index，是需要拿到一个叫pathname属性的值；在3.4-2那里；</li>
</ul>
<p>0.3 总结：</p>
<p>得到地址+get获取的参数</p>
<p>1.现在无论在域名后面加什么地址，都是get。</p>
<p>2.如何在后面加一个index，可以返回首页呢?</p>
<ul>
<li>例如：<a href="http://localhost:3000/index">http://localhost:3000/index</a></li>
</ul>
<p>3.请求地址 （Request URL）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.on(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    req.headers  <span class="comment">// 获取请求报文</span></span><br><span class="line">    req.url      <span class="comment">// 获取请求地址</span></span><br><span class="line">    req.method   <span class="comment">// 获取请求方法</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>req.headers  // 获取请求报文</li>
<li>console.log(req.headers[‘accept’]);</li>
</ul>
<p>4.这样写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取请求地址</span></span><br><span class="line">    <span class="comment">// req.url</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;请求地址：&#x27;</span> + req.url);</span><br><span class="line">    <span class="keyword">if</span> (req.url == <span class="string">&#x27;/index&#x27;</span>) &#123;</span><br><span class="line">        res.end(<span class="string">&#x27;Welcome to home&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url == <span class="string">&#x27;/list&#x27;</span>) &#123;</span><br><span class="line">        res.end(<span class="string">&#x27;welcome to listpage&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.end(<span class="string">&#x27;not found&#x27;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>然后又tm出错；</li>
</ul>
<p>4.1 视频里面，可以几个地址连着跳。</p>
<ul>
<li>1.我连着跳就是报错：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">events.js:<span class="number">292</span></span><br><span class="line">      <span class="keyword">throw</span> er; <span class="comment">// Unhandled &#x27;error&#x27; event</span></span><br><span class="line">      ^</span><br><span class="line"></span><br><span class="line"><span class="built_in">Error</span> [ERR_STREAM_WRITE_AFTER_END]: write after end</span><br><span class="line">    at writeAfterEnd (_http_outgoing.js:<span class="number">668</span>:<span class="number">15</span>)</span><br><span class="line">    at ServerResponse.end (_http_outgoing.js:<span class="number">789</span>:<span class="number">7</span>)</span><br><span class="line">    at Server.&lt;anonymous&gt; (F:\三次元\<span class="number">4</span>-学习\<span class="number">7</span>-web\<span class="number">5</span>-node.js\<span class="number">1</span>-练习\<span class="number">4</span>-server\app.js:<span class="number">25</span>:<span class="number">13</span>)</span><br><span class="line">    at Server.emit (events.js:<span class="number">315</span>:<span class="number">20</span>)</span><br><span class="line">    at parserOnIncoming (_http_server.js:<span class="number">874</span>:<span class="number">12</span>)</span><br><span class="line">    at HTTPParser.parserOnHeadersComplete (_http_common.js:<span class="number">126</span>:<span class="number">17</span>)</span><br><span class="line">Emitted <span class="string">&#x27;error&#x27;</span> event on ServerResponse instance at:</span><br><span class="line">    at writeAfterEndNT (_http_outgoing.js:<span class="number">727</span>:<span class="number">7</span>)</span><br><span class="line">    at processTicksAndRejections (internal/process/task_queues.js:<span class="number">81</span>:<span class="number">21</span>) &#123;</span><br><span class="line">  code: <span class="string">&#x27;ERR_STREAM_WRITE_AFTER_END&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>2.看起来像是，结束后写入？res.end后，就不能请求了，大概是这个意思；</li>
<li>3.估计又是狗逼的资料过期了；2021-4-14 21:13:57</li>
</ul>
<p>4.2 OK，我尝试去看文档，看不懂的很多，很上面的gulp一样；</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=30&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=30&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>5.想起了return，可以终止函数，if里面是否可以呢？</p>
<p>可以；2021-4-15 10:11:57</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (req.url == <span class="string">&#x27;/index&#x27;</span> || req.url == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Welcome to home&#x27;</span>);</span><br><span class="line">        res.end(<span class="string">&#x27;老李你过来呀&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url == <span class="string">&#x27;/list&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;welcome to listpage&#x27;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-res-end报错"><a href="#5-res-end报错" class="headerlink" title="5. res.end报错"></a>5. res.end报错</h3><blockquote>
<p><a href="https://blog.csdn.net/m0_51608940/article/details/112913296">https://blog.csdn.net/m0_51608940/article/details/112913296</a></p>
</blockquote>
<p>1.上面思考了那么多，我居然没发现这一步？</p>
<p>2.不可能，我看到 write after end，后我就在想是不是end后面在写入什么？</p>
<p>3.我第一个实验就是把外面的res.on去掉。</p>
<ul>
<li>可能是我记错了？2021-4-21 14:05:56</li>
</ul>
<hr>
<h3 id="6-响应报文"><a href="#6-响应报文" class="headerlink" title="6. 响应报文"></a>6. 响应报文</h3><p>1.HTTP状态码</p>
<p>200 请求成功<br>404 请求的资源没有被找到<br>500 服务器端错误<br>400 客户端请求有语法错误</p>
<p>2.内容类型</p>
<p>text/html ； 如果返回的是一个html文件，就要输入text/html，有这个text/；</p>
<p>text/css</p>
<p>text/plain：纯文本；</p>
<p>application/javascript<br>image/jpeg<br>application/json</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.on(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置响应报文</span></span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=utf8‘</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>res.writeHead，书写响应头。</p>
<ul>
<li>第一个参数是状态码。如果不写，默认200</li>
</ul>
</li>
<li><p>2.Content-Type，内容-类型；</p>
</li>
</ul>
<h4 id="6-2-乱码"><a href="#6-2-乱码" class="headerlink" title="6.2 乱码"></a>6.2 乱码</h4><p>1.中文会乱码，需要设置响应报文头的 字符：charset=utf8</p>
<hr>
<h2 id="3-4-HTTP请求与响应处理"><a href="#3-4-HTTP请求与响应处理" class="headerlink" title="3.4 HTTP请求与响应处理"></a>3.4 HTTP请求与响应处理</h2><h3 id="1-请求参数"><a href="#1-请求参数" class="headerlink" title="1. 请求参数"></a>1. 请求参数</h3><p>1.客户端向服务器端发送请求时，有时需要携带一些客户信息，客户信息需要通过请求参数的形式传递到服务器端，比如登录操作。</p>
<h3 id="2-GET请求参数"><a href="#2-GET请求参数" class="headerlink" title="2. GET请求参数"></a>2. GET请求参数</h3><p>参数被放置在浏览器地址栏中，例如：<a href="http://localhost:3000/?name=zhangsan&amp;age=20">http://localhost:3000/?name=zhangsan&amp;age=20</a><br>参数获取需要借助系统模块url，url模块用来处理url地址</p>
<ul>
<li>问号，后面就是请求的参数</li>
</ul>
<h4 id="2-1-url-parse"><a href="#2-1-url-parse" class="headerlink" title="2.1 url.parse"></a>2.1 url.parse</h4><p>1.建议：先看新方法，然后再看旧方法；</p>
<p>2.如何获取到这个参数？</p>
<ul>
<li><p>1.在node里面，有一种模块叫内置模块。</p>
</li>
<li><p>2.而这里面有一个叫url的内置模块。用于处理url地址；</p>
</li>
<li><p>3.url有一个解析的方法：url.parse。</p>
<ul>
<li>3.1 它都够把url转换成对象的形式；</li>
<li>url.parse(req.url)；转换请求地址</li>
</ul>
</li>
<li><p>3.1 我当初就没写个例如吗？c；</p>
<ul>
<li><p>1.例如：<a href="http://localhost:3000/?name=zhangsan&amp;age=20">http://localhost:3000/?name=zhangsan&amp;age=20</a></p>
</li>
<li><p>2.如果console.log(req.url);</p>
<ul>
<li>打印出的是：/?name=zsadsad&amp;age=2312</li>
<li>打印出的是<a href="http://localhost:3000后面的东西">http://localhost:3000后面的东西</a></li>
</ul>
</li>
<li><p>3.如果是console.log(url.parse(req.url));</p>
<ul>
<li><p>那么打印出来的是：一个对象</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Url</span> &#123;</span><br><span class="line">  <span class="attr">protocol:</span> <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">slashes:</span> <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">auth:</span> <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">host:</span> <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">port:</span> <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">hostname:</span> <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">hash:</span> <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">search:</span> <span class="string">&#x27;?name=zsadsad&amp;age=2312&#x27;</span>,</span><br><span class="line">  <span class="attr">query:</span> <span class="string">&#x27;name=zsadsad&amp;age=2312&#x27;</span>,</span><br><span class="line">  <span class="attr">pathname:</span> <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;/?name=zsadsad&amp;age=2312&#x27;</span>,</span><br><span class="line">  <span class="attr">href:</span> <span class="string">&#x27;/?name=zsadsad&amp;age=2312&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>2.1 不过现在这个方法已经被弃用了；</p>
<h5 id="1-url-query"><a href="#1-url-query" class="headerlink" title="1.url.query"></a>1.url.query</h5><p>0.query，是保存，存get获得的请求参数，没有那个？问号；</p>
<p>1.不过，只是url.query，还不是对象的格式</p>
<ul>
<li>是这样的：name=zhang&amp;age=20</li>
<li>无法使用对象的语法<ul>
<li>例如：query.name</li>
<li>无法取得zhang</li>
</ul>
</li>
</ul>
<p>1.1 要想使用query.name，也得使用url.parse转换它</p>
<ul>
<li>而它的转换，可以和req.url一起；在后面写个true就可以了</li>
</ul>
<p><code>url.parse(req.url,true)；</code></p>
<p>2.猜想：如果这样，可以吗？</p>
<ul>
<li>1.先转换req.url：url.parse(req.url)</li>
<li>2.用一个变量存储：let my_url = url.parse(req.url)</li>
<li>3.然后 my_url是对象的格式了</li>
<li>4.接着转换url.parse(my_url)；</li>
<li>5.可以试验一下；</li>
</ul>
<p>2.1 kao，笔记没有写实验结果吗？2021-5-10 11:11:51</p>
<p>3.不过url.parse被弃用了。如果使用新的方法怎么写？</p>
<ul>
<li>4.即使这样，也不够好看，里面的值连在一起；（视频里称为，查询参数）</li>
<li>4.1 写入第二个参数，true；<ul>
<li>url.parse(req.url,true)；</li>
<li>会把url里面一个叫query的值，变成对象的形式；<ul>
<li>以前：name=zhang&amp;age=20</li>
<li>现在: query: [Object: null prototype] { name: ‘zhang’, age: ‘20’ },</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>3.总结：</p>
<p>4.有必要去文档那边看看：url.parse</p>
<h5 id="2-弃用了怎办"><a href="#2-弃用了怎办" class="headerlink" title="2. 弃用了怎办"></a>2. 弃用了怎办</h5><p>1.首先找到url.parse，然后被弃用了</p>
<p><a href="http://nodejs.cn/api/url.html#url_url_parse_urlstring_parsequerystring_slashesdenotehost">http://nodejs.cn/api/url.html#url_url_parse_urlstring_parsequerystring_slashesdenotehost</a></p>
<ul>
<li>1.被弃用了，也不说代替它的新方法</li>
</ul>
<p>2.找啊找，找到了一个好像是的：</p>
<blockquote>
<p><a href="http://nodejs.cn/api/url.html#url_url_strings_and_url_objects">http://nodejs.cn/api/url.html#url_url_strings_and_url_objects</a></p>
</blockquote>
<ul>
<li>1.下面还有好多url接口的方法</li>
</ul>
<p>2.1 如果要用新方法。要使用<code>new URL(input[, base])</code>的格式</p>
<blockquote>
<p>base<br>英 [beɪs]   美 [beɪs]<br>n.根基;基底;底座;根据;出发点;(支持、收入、力量等的)来源，源泉，基础<br>v.以…为据点(或总部等);把(总部等)设在<br>adj.卑鄙的;不道德的</p>
</blockquote>
<ul>
<li><p>1.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = http.createServer();</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> pathname = req.url;</span><br><span class="line">    <span class="keyword">let</span> myURL = <span class="keyword">new</span> URL(pathname, <span class="string">&#x27;http://localhost:3000&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(url.parse(pathname));</span><br><span class="line">    <span class="built_in">console</span>.log(myURL);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;服务器已启动，监听3000端口&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.而格式new URL(input[, base])，可看这里</p>
<blockquote>
<p><a href="http://nodejs.cn/api/url.html#url_new_url_input_base">http://nodejs.cn/api/url.html#url_new_url_input_base</a></p>
</blockquote>
</li>
</ul>
<p>2.2 返回结果：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">URL &#123;</span><br><span class="line">  href: <span class="string">&#x27;http://localhost:3000/list&#x27;</span>,</span><br><span class="line">  origin: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">  protoco<span class="variable">l:</span> <span class="string">&#x27;http:&#x27;</span>,</span><br><span class="line">  username: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  password: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  hos<span class="variable">t:</span> <span class="string">&#x27;localhost:3000&#x27;</span>,</span><br><span class="line">  <span class="built_in">hostname</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  por<span class="variable">t:</span> <span class="string">&#x27;3000&#x27;</span>,</span><br><span class="line">  pathname: <span class="string">&#x27;/list&#x27;</span>,</span><br><span class="line">  <span class="built_in">search</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  searchParam<span class="variable">s:</span> URLSearchParams &#123;&#125;,</span><br><span class="line">  hash: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">/<span class="keyword">list</span></span><br><span class="line">URL &#123;</span><br><span class="line">  href: <span class="string">&#x27;http://localhost:3000/list?username=lijie&amp;password=123123&#x27;</span>,</span><br><span class="line">  origin: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">  protoco<span class="variable">l:</span> <span class="string">&#x27;http:&#x27;</span>,</span><br><span class="line">  username: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  password: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  hos<span class="variable">t:</span> <span class="string">&#x27;localhost:3000&#x27;</span>,</span><br><span class="line">  <span class="built_in">hostname</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  por<span class="variable">t:</span> <span class="string">&#x27;3000&#x27;</span>,</span><br><span class="line">  pathname: <span class="string">&#x27;/list&#x27;</span>,</span><br><span class="line">  <span class="built_in">search</span>: <span class="string">&#x27;?username=lijie&amp;password=123123&#x27;</span>,</span><br><span class="line">  searchParam<span class="variable">s:</span> URLSearchParams &#123; <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;lijie&#x27;</span>, <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;123123&#x27;</span> &#125;,</span><br><span class="line">  hash: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>2.3 因为新方法里面有一个searchParams，所以用不到query了</p>
<p>3.如何得到searchParams里面的URLSearchParams的username的值</p>
<ul>
<li>也就是说，直接得到 lijie</li>
</ul>
<p>3.1 在文档中，找到的了办法</p>
<blockquote>
<p><a href="http://nodejs.cn/api/url.html#url_urlsearchparams_get_name">http://nodejs.cn/api/url.html#url_urlsearchparams_get_name</a></p>
</blockquote>
<ul>
<li><p>1.urlSearchParams.get(name)</p>
<ul>
<li>searchParams.get(‘name’);也行，上面那个需要加引号不？</li>
<li>2021-4-23 15:52:24</li>
</ul>
</li>
<li><p>代码：可以去2.2 pathname下面的 第四点去看；</p>
</li>
</ul>
<h4 id="2-2-pathname"><a href="#2-2-pathname" class="headerlink" title="2.2 pathname"></a>2.2 pathname</h4><p>1.pathname,是请求地址里面的一个参数：</p>
<p><img src="../../img/15/29.png" alt="29"></p>
<p>4.获取的请求地址，也要改变写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取请求地址</span></span><br><span class="line">    <span class="comment">// req.url</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;请求地址：&#x27;</span> + req.url);</span><br><span class="line">    <span class="keyword">if</span> (req.url == <span class="string">&#x27;/index&#x27;</span>) &#123;</span><br><span class="line">        res.end(<span class="string">&#x27;Welcome to home&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url == <span class="string">&#x27;/list&#x27;</span>) &#123;</span><br><span class="line">        res.end(<span class="string">&#x27;welcome to listpage&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.end(<span class="string">&#x27;not found&#x27;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>变为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理url地址</span></span><br><span class="line"><span class="built_in">console</span>.log(req.url);</span><br><span class="line"><span class="keyword">let</span> &#123; query, pathname &#125; = (url.parse(req.url, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pathname == <span class="string">&#x27;/index&#x27;</span>) &#123;</span><br><span class="line">    res.end(<span class="string">&#x27;Welcome to home&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname == <span class="string">&#x27;/list&#x27;</span>) &#123;</span><br><span class="line">    res.end(<span class="string">&#x27;welcome to listpage&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-POST请求参数"><a href="#3-POST请求参数" class="headerlink" title="3. POST请求参数"></a>3. POST请求参数</h3><p>1.post的请求参数，不在url中，而在报文中；</p>
<p>2.在form.html那边写好html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:3000&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3.// 如何接收post参数呢？因为post参数没有存储在url里面，所以req.url是不行的</p>
<p>  // 1.post参数是通过事件的方式接收的，data，end；</p>
<p>3.1 理论上，post可以无限数据。为了减轻服务器压力。对于post的请求，不是一次性接收完。</p>
<ul>
<li>date，当请求参数传递的时候，发data事件；</li>
<li>end，当参数传递完成的时候，发end事件；</li>
</ul>
<p>3.2 那么给谁去绑定这个事件呢？</p>
<ul>
<li>请求参数，是与请求有关的信息，我们首先去找req</li>
</ul>
<p>3.3 在req上面绑定这两个事件；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<p>3.4 然后是接受post参数</p>
<ul>
<li>1.因为post参数，不是一次接收完。</li>
<li>2.我们需要申明一个变量，默认值是空<ul>
<li>1.当data事件发生的时候，也就是请求参数传递的时候，我们需要把一次次接收到的参数，拼接在一起。</li>
<li>2.然后在end事件的时候，也就是data完成的时候。<ul>
<li>肯定的拼接也完成了</li>
<li>输出这个变量；</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><code>let post_params = &#39;&#39;;</code></p>
<ul>
<li><p>3.接着，在data事件里面，拼接接收的东西。</p>
<ul>
<li><p>1.在data事件的回调函数里面，有一个参数，我们可以写成params(百度翻译就一个<code>参数</code>的含义)</p>
<p><code>req.on(&#39;data&#39;, params =&gt; &#123;&#125;)</code></p>
</li>
<li><p>2.这个params，就是当时传递过来的参数。</p>
<ul>
<li>1.一个个的传，例如：’<a href="http://localhost:3000/list?username=lijie&amp;password=123123&#39;">http://localhost:3000/list?username=lijie&amp;password=123123&#39;</a></li>
<li>2.可能是username=lijie，password=123123</li>
<li>3.一般拼接，就是直接在一起：username=lijiepassword=123123。</li>
<li>4.它这里肯定是做了处理，是用&amp;链接在一起；</li>
</ul>
</li>
<li><p>3.然后拼接</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">params</span> =&gt;</span> &#123;</span><br><span class="line">    post_params += params;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li><p>4.接着，在end里面输出这个变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(post_params);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>5.最后加个res.on</p>
</li>
<li><p>6.查看打印结果：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">username=<span class="number">123</span>&amp;password=<span class="number">3213</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>3.5 总代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = http.createServer();</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// post参数是通过事件的方式接受的</span></span><br><span class="line">    <span class="comment">// 分别是data事件和end事件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> post_params = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">params</span> =&gt;</span> &#123;</span><br><span class="line">        post_params += params;</span><br><span class="line">    &#125;)</span><br><span class="line">    req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(querystring.parse(post_params).username);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    res.end(<span class="string">&#x27;wanbi&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;服务器已启动，监听3000端口&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>4.虽然能获取到username=lijie&amp;password=123123</p>
<ul>
<li><p>0.如果你在想，为什么不用query，那是因为这里是post，上面那个是get请求；</p>
</li>
<li><p>1.但仍需要转换成对象的形式，这里无法使用req.url。需要新的办法；</p>
</li>
<li><p>2.引入querystring；query：疑问；加起来就是疑问字符串，难道就是？后面的字符串？</p>
</li>
</ul>
<p><code>const querystring = require(&#39;querystring&#39;);</code></p>
<ul>
<li>这个可以获得post请求的存请求参数；</li>
</ul>
<p>4.1 然后在post的end事件里面加代码，parse转换成对象</p>
<ul>
<li>看来就url.parse弃用了。可能是因为get没post安全，所以post这边的parse没弃用；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(querystring.parse(post_params));</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>打印出来的结果：</li>
</ul>
<p><code>[Object: null prototype] &#123; username: &#39;23123&#39;, password: &#39;123123&#39; &#125;</code></p>
<p>4.2 这样就能获得到username的值：</p>
<ul>
<li>这样写即可：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> post_query = querystring.parse(post_params);</span><br><span class="line"><span class="keyword">let</span> username = post_query.username;</span><br></pre></td></tr></table></figure>





<p>==搞错了，搞错了==，下面这个是基于req.url的，而post无法使用req.url</p>
<ul>
<li>1.不对，又不对。是写在判断之前的。也许能行；</li>
</ul>
<p><img src="../../img/15/54.png" alt="54"></p>
<p>4.2 这个结果，和用 URL的 searchParams是一样</p>
<ul>
<li><p>1.代码没有保存；</p>
</li>
<li><p>去找找打印出的值</p>
<p><code>URLSearchParams &#123; &#39;username&#39; =&gt; &#39;lijie&#39;, &#39;password&#39; =&gt; &#39;123123&#39; &#125;</code></p>
</li>
<li><p>2.还是不一样，querystring打印出来的，是可以用对象的语法单独打印出username的</p>
<ul>
<li><p>1.代码：</p>
<p><code>console.log(querystring.parse(post_params).username);</code></p>
</li>
<li><p>2.打印结果：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">服务器已启动，监听3000端口</span><br><span class="line"><span class="selector-attr">[Object: null prototype]</span> &#123; <span class="attribute">username</span>: <span class="string">&#x27;23123&#x27;</span>, password: <span class="string">&#x27;123123&#x27;</span> &#125;</span><br><span class="line"><span class="selector-attr">[Object: null prototype]</span> &#123;&#125;</span><br><span class="line"><span class="selector-attr">[nodemon]</span> <span class="selector-tag">restarting</span> <span class="selector-tag">due</span> <span class="selector-tag">to</span> <span class="selector-tag">changes</span>...</span><br><span class="line"><span class="selector-attr">[nodemon]</span> <span class="selector-tag">starting</span> `<span class="selector-tag">node</span> .\<span class="selector-tag">app</span><span class="selector-class">.js</span>`</span><br><span class="line">服务器已启动，监听3000端口</span><br><span class="line">23123</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>3.而URL的 searchParams，是不行的。那么如何能行呢？</p>
<ul>
<li><p>在文档中，找到了办法：</p>
<blockquote>
<p><a href="http://nodejs.cn/api/url.html#url_class_urlsearchparams">http://nodejs.cn/api/url.html#url_class_urlsearchparams</a></p>
</blockquote>
</li>
<li><p><code>console.log(searchParams.get(&quot;username&quot;));</code></p>
</li>
<li><p>用get</p>
</li>
</ul>
</li>
<li><p>4.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = http.createServer();</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> myURL = <span class="keyword">new</span> URL(req.url, <span class="string">&#x27;http://localhost:3000&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> parse_url = url.parse(req.url);</span><br><span class="line">    <span class="keyword">let</span> &#123; pathname, searchParams &#125; = myURL;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pathname == <span class="string">&#x27;/index&#x27;</span>) &#123;</span><br><span class="line">        res.end(<span class="string">&#x27;Welcome to home&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname == <span class="string">&#x27;/list&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(myURL)<span class="comment">//1.得到url对象的格式，新方法</span></span><br><span class="line">        <span class="built_in">console</span>.log(parse_url)<span class="comment">//2.以前的，可以与1比较</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.直接对象解构，从新方法里面拿</span></span><br><span class="line">        <span class="built_in">console</span>.log(pathname)</span><br><span class="line">        <span class="built_in">console</span>.log(searchParams);</span><br><span class="line">        <span class="comment">// 4.直接拿老方法里面需要query成为对象的值</span></span><br><span class="line">        <span class="built_in">console</span>.log(searchParams.get(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> searchParams);</span><br><span class="line">        res.end(<span class="string">&#x27;welcome to listpage&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">30030</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;服务器已启动，监听30030端口&#x27;</span>);</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>5.总结：</p>
<p>参数被放置在请求体中进行传输</p>
<ul>
<li>请求体=请求报文；</li>
</ul>
<p>获取POST参数需要使用data事件和end事件</p>
<p>使用querystring系统模块将参数转换为对象格式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入系统模块querystring 用于将HTTP参数转换为对象格式</span></span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line">app.on(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> postData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">// 监听参数传输事件</span></span><br><span class="line">    req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> postData += chunk;);</span><br><span class="line">    <span class="comment">// 监听参数传输完毕事件</span></span><br><span class="line">    req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(querystring.parse(postData)); </span><br><span class="line">    &#125;); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="5-静态资"><a href="#5-静态资" class="headerlink" title="5. 静态资"></a>5. 静态资</h3><p>1.服务器端不需要处理，可以直接响应给客户端的资源就是静态资源，例如CSS、JavaScript、image文件。</p>
<ul>
<li><a href="http://www.itcast.cn/images/logo.png">http://www.itcast.cn/images/logo.png</a></li>
</ul>
<p>2.开始了开始了；</p>
<h4 id="5-1-创建"><a href="#5-1-创建" class="headerlink" title="5.1 创建"></a>5.1 创建</h4><p>0.从后面回来复习的我，不忍心；在后面这些全都要被推翻；2021-5-10 11:35:26</p>
<p>1.准备前端代码，app.js创建本地服务器；go</p>
<p>2.先把路径改了，xx/index.html  改成 index.html</p>
<ul>
<li><p>1.获取请求路径；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> pathname = url.parse(req.url).pathname;</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.修改路径</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line">path.join(__dirname, <span class="string">&#x27;public&#x27;</span> + pathname);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>2.1 引入path，它能自动分析加什么斜杠</p>
</li>
<li><p><code>__dirname，是当前文件的绝对路径</code>，没错，这里要改成绝对路径</p>
</li>
<li><p>这样就是app.js的绝对路径+public，+pathname（请求的路径名）</p>
<p><img src="../../img/15/30.png" alt="30"></p>
</li>
<li><p>2.2 <code>__dirname</code>是一个动态的，5-static换到哪里，就获取到那里的绝对路径；</p>
</li>
</ul>
</li>
</ul>
<p>3.如果在上面写入了响应报文，就css也解析成文本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;charset=utf8&#x27;</span>,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>



<p>4.总代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建静态服务器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = http.createServer();</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 这个可以获取文件</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应请求</span></span><br><span class="line">app.on(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 响应报文设置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户的请求路径</span></span><br><span class="line">    <span class="keyword">let</span> pathname = url.parse(req.url).pathname;</span><br><span class="line">    <span class="comment">// 将用户的请求路径转换为实际的服务器硬盘路径</span></span><br><span class="line">    <span class="keyword">let</span> requestPath = path.join(__dirname, <span class="string">&#x27;public&#x27;</span> + pathname);</span><br><span class="line"></span><br><span class="line">    fs.readFile(requestPath, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err != <span class="literal">null</span>) &#123;</span><br><span class="line">            res.end(<span class="string">&#x27;文件读取失败,当前路径是&#x27;</span> + requestPath);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            res.end(result);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// res.end(requestPath);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h4 id="5-2-继续完善"><a href="#5-2-继续完善" class="headerlink" title="5.2 继续完善"></a>5.2 继续完善</h4><blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=35&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=35&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<h5 id="1-让localhost-端口号。直接访问某个页面；"><a href="#1-让localhost-端口号。直接访问某个页面；" class="headerlink" title="1. 让localhost:端口号。直接访问某个页面；"></a>1. 让localhost:端口号。直接访问某个页面；</h5><p>2021-4-15 16:19:15</p>
<p>2.做一个判断</p>
<p><code>pathname == &#39;/&#39; ? &#39;/default.html&#39; : pathname;</code></p>
<p>2.1 实验；</p>
<p>错误；</p>
<p>2.2 代码错了：<code>pathname = pathname == &#39;/&#39; ? &#39;/default.html&#39; : pathname;</code></p>
<h5 id="2-添加响应报文"><a href="#2-添加响应报文" class="headerlink" title="2.添加响应报文"></a>2.添加响应报文</h5><p>1.当服务器端向客户端做出响应的时候，我们要告诉客户端，我们给你的资源的类型是什么。</p>
<p>2.但会遇到问题；</p>
<ul>
<li>1.html里面会有外链文件。css，js，img等；</li>
<li>2.当请求遇到这些代码，会自动请求这些外链东西</li>
<li>3.当前是用fs.readFile读取的文件；<ul>
<li>每次读取，可能是html，css，img，txt；等等</li>
<li>那么你写什么类型呢？</li>
<li>不知道有什么类型；</li>
</ul>
</li>
<li>4.所以这里不能写固定的，需要写动态的；</li>
</ul>
<p>3.如果根据当前请求的文件类型，而设置响应的类型呢？</p>
<ul>
<li>1.需要做第三方模块；</li>
<li>2.MIME。它可以根据当前的请求路径，分析出资源的类型，<ul>
<li>通过返回值的方式，把类型返回给你；</li>
</ul>
</li>
</ul>
<h6 id="2-4-使用MIME"><a href="#2-4-使用MIME" class="headerlink" title="2.4 使用MIME"></a>2.4 使用MIME</h6><p>1.下载：npm install mime</p>
<p>2.重新开启服务器，nodemon app.js</p>
<p>3.引入：<code>const mime = require(&#39;mime&#39;);</code></p>
<p>4.在这个模块下面，有一个方法：mime.getType()</p>
<p>5.然后把路径传进去，它根据路径返回这个资源的类型；</p>
<ul>
<li>mime.getType(路径)</li>
</ul>
<p>6.创建变量，存储这些返回值；</p>
<ul>
<li>let requestType = mime.getType(pathname);</li>
</ul>
<p>7.成功的时候使用：</p>
<ul>
<li><pre><code class="js"><span class="keyword">else</span> &#123;
    res.writeHead(<span class="number">200</span>, &#123;
        <span class="string">'content-type'</span>: requestType
    &#125;)
    res.end(result);
    <span class="keyword">return</span>;
&#125;
&lt;!--hexoPostRenderEscape:&lt;figure class="highlight coffeescript"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="number"&gt;8.&lt;/span&gt;我们刷新页面&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;+ &lt;span class="number"&gt;1.&lt;/span&gt;在F12的Network里面点击Name，查看 Response Headers&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  + &lt;span class="number"&gt;1.1&lt;/span&gt; 可以看到，不同类型文件的 content-type也是不一样的。&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  + 是对应的&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;+ &lt;span class="number"&gt;2.&lt;/span&gt;如果不写，没问题，但是，是隐患。且需要解决；&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;总代码：&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;```&lt;span class="javascript"&gt;js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;&lt;span class="comment"&gt;// 创建静态服务器&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;&lt;span class="keyword"&gt;const&lt;/span&gt; http = &lt;span class="built_in"&gt;require&lt;/span&gt;(&lt;span class="string"&gt;&amp;#x27;http&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;&lt;span class="keyword"&gt;const&lt;/span&gt; url = &lt;span class="built_in"&gt;require&lt;/span&gt;(&lt;span class="string"&gt;&amp;#x27;url&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;&lt;span class="keyword"&gt;const&lt;/span&gt; app = http.createServer();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;&lt;span class="keyword"&gt;const&lt;/span&gt; path = &lt;span class="built_in"&gt;require&lt;/span&gt;(&lt;span class="string"&gt;&amp;#x27;path&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;&lt;span class="keyword"&gt;const&lt;/span&gt; mime = &lt;span class="built_in"&gt;require&lt;/span&gt;(&lt;span class="string"&gt;&amp;#x27;mime&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;&lt;span class="comment"&gt;// 这个可以获取文件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;&lt;span class="keyword"&gt;const&lt;/span&gt; fs = &lt;span class="built_in"&gt;require&lt;/span&gt;(&lt;span class="string"&gt;&amp;#x27;fs&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;&lt;span class="comment"&gt;// 响应请求&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;app.on(&lt;span class="string"&gt;&amp;#x27;request&amp;#x27;&lt;/span&gt;, &lt;span class="function"&gt;(&lt;span class="params"&gt;req, res&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;    &lt;span class="comment"&gt;// 响应报文设置&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;    &lt;span class="comment"&gt;// 获取用户的请求路径&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;    &lt;span class="keyword"&gt;let&lt;/span&gt; pathname = url.parse(req.url).pathname;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;    pathname = pathname == &lt;span class="string"&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt; ? &lt;span class="string"&gt;&amp;#x27;/default.html&amp;#x27;&lt;/span&gt; : pathname;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;    &lt;span class="comment"&gt;// 将用户的请求路径转换为实际的服务器硬盘路径&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;    &lt;span class="keyword"&gt;let&lt;/span&gt; requestPath = path.join(__dirname, &lt;span class="string"&gt;&amp;#x27;public&amp;#x27;&lt;/span&gt; + pathname);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;    &lt;span class="keyword"&gt;let&lt;/span&gt; requestType = mime.getType(pathname);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;    fs.readFile(requestPath, &lt;span class="function"&gt;(&lt;span class="params"&gt;err, result&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;        &lt;span class="keyword"&gt;if&lt;/span&gt; (err != &lt;span class="literal"&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;            res.writeHead(&lt;span class="number"&gt;404&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;                &lt;span class="string"&gt;&amp;#x27;content-type&amp;#x27;&lt;/span&gt;: &lt;span class="string"&gt;&amp;#x27;text/html;charset=utf8&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;            &amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;            res.end(&lt;span class="string"&gt;&amp;#x27;文件读取失败,当前路径是&amp;#x27;&lt;/span&gt; + requestPath);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;            &lt;span class="keyword"&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;        &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;        &lt;span class="keyword"&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;            res.writeHead(&lt;span class="number"&gt;200&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;                &lt;span class="string"&gt;&amp;#x27;content-type&amp;#x27;&lt;/span&gt;: requestType&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;            &amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;            res.end(result);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;            &lt;span class="keyword"&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;        &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;    &amp;#125;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;    &lt;span class="comment"&gt;// res.end(requestPath);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;&amp;#125;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;app.listen(&lt;span class="number"&gt;3000&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;&lt;span class="built_in"&gt;console&lt;/span&gt;.log(&lt;span class="string"&gt;&amp;#x27;服务器启动成功&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;


</code></pre>
</li>
</ul>
<hr>
<h3 id="6-动态资源"><a href="#6-动态资源" class="headerlink" title="6. 动态资源"></a>6. 动态资源</h3><p>1.相同的请求地址不同的响应资源，这种资源就是动态资源。</p>
<ul>
<li><p>但是要用不同的参数</p>
</li>
<li><p><a href="http://www.itcast.cn/article?id=1">http://www.itcast.cn/article?id=1</a><br><a href="http://www.itcast.cn/article?id=2">http://www.itcast.cn/article?id=2</a></p>
</li>
</ul>
<h3 id="7-路由"><a href="#7-路由" class="headerlink" title="7. 路由"></a>7. 路由</h3><p><a href="http://localhost:3000/index">http://localhost:3000/index</a><br><a href="http://localhost:3000/login">http://localhost:3000/login</a><br>路由是指客户端请求地址与服务器端程序代码的对应关系。简单的说，就是请求什么响应什么。</p>
<img src="../../img/15/31.png" alt="31" style="zoom:80%;" />

<h4 id="7-1-实现路由的核心代码"><a href="#7-1-实现路由的核心代码" class="headerlink" title="7.1 实现路由的核心代码"></a>7.1 实现路由的核心代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当客户端发来请求的时候</span></span><br><span class="line">app.on(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取客户端的请求路径</span></span><br><span class="line">    <span class="keyword">let</span> &#123; pathname &#125; = url.parse(req.url);</span><br><span class="line">    <span class="keyword">if</span> (pathname == <span class="string">&#x27;/&#x27;</span> || pathname == <span class="string">&#x27;/index&#x27;</span>) &#123;</span><br><span class="line">        res.end(<span class="string">&#x27;欢迎来到首页&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname == <span class="string">&#x27;/list&#x27;</span>) &#123;</span><br><span class="line">        res.end(<span class="string">&#x27;欢迎来到列表页页&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       res.end(<span class="string">&#x27;抱歉, 您访问的页面出游了&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>1.代码里面，缺少了对请求方式的判断。</p>
<ul>
<li>1.视频说，下次会加上，会说</li>
</ul>
<p>2.请求地址是什么？是由谁决定的呢？</p>
<ul>
<li>什么样的请求地址，对应，什么样的逻辑，都是开发人员决定的；</li>
</ul>
<h5 id="3-练习"><a href="#3-练习" class="headerlink" title="3.练习"></a>3.练习</h5><p>1.创建route文件夹；</p>
<ul>
<li>添加请求方式的判断；</li>
</ul>
<p>2.<code>req.method.toLowerCase();</code></p>
<ul>
<li>req.method，返回请求方式，但是，是大写；如果觉得小写方便</li>
<li><code>toLowerCase()</code>，改为小写；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.引入系统模块http</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="comment">// 5.1 引入url模块</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建网站服务器</span></span><br><span class="line"><span class="keyword">const</span> app = http.createServer();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.为网站服务器对象添加请求事件</span></span><br><span class="line">app.on(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 4.获取请求方式</span></span><br><span class="line">    <span class="keyword">const</span> method = req.method.toLowerCase();</span><br><span class="line">    <span class="comment">// 5.获取请求地址</span></span><br><span class="line">    <span class="keyword">const</span> pathname = url.parse(req.url).pathname</span><br><span class="line">    <span class="comment">// 8.响应报文：</span></span><br><span class="line">    res.writeHead(<span class="number">200</span>,&#123;</span><br><span class="line">        <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 6.判断请求方式</span></span><br><span class="line">    <span class="keyword">if</span> (method==<span class="string">&#x27;get&#x27;</span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (method == <span class="string">&#x27;post&#x27;</span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7.端口</span></span><br></pre></td></tr></table></figure>



<p>这就是路由的格式；</p>
<h3 id="8-Node-js异步编程"><a href="#8-Node-js异步编程" class="headerlink" title="8. Node.js异步编程"></a>8. Node.js异步编程</h3><h4 id="8-1-同步API-异步API"><a href="#8-1-同步API-异步API" class="headerlink" title="8.1 同步API, 异步API"></a>8.1 同步API, 异步API</h4><blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=37&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=37&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.API有些是返回值，拿到结果</p>
<p>2.有些是函数，拿到结果</p>
<p>3.比如下面：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路径拼接</span></span><br><span class="line"><span class="keyword">const</span> public = path.join(__dirname, <span class="string">&#x27;public&#x27;</span>);<span class="comment">//返回值</span></span><br><span class="line"><span class="comment">// 请求地址解析</span></span><br><span class="line"><span class="keyword">const</span> urlObj = url.parse(req.url);<span class="comment">//返回值</span></span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line">fs.readFile(<span class="string">&#x27;./demo.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>1.为什么 fs是函数的形式拿到结果呢？这是视频问的：</li>
<li></li>
</ul>
<h5 id="1-同步API："><a href="#1-同步API：" class="headerlink" title="1.同步API："></a>1.同步API：</h5><p>1.只有当前API执行完成后，才能继续执行下一个API</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;before&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;after&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>2.从上到下，一步步执行；</p>
<h5 id="2-异步API："><a href="#2-异步API：" class="headerlink" title="2.异步API："></a>2.异步API：</h5><p>1.当前API的执行不会阻塞后续代码的执行</p>
<p>2.例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;before&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(</span><br><span class="line">   () =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;last&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;after&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>1.虽然last在after上面，但after先输出。</li>
<li>2.setTimeout是个异步api；</li>
</ul>
<h4 id="8-2-获取返回值区别"><a href="#8-2-获取返回值区别" class="headerlink" title="8.2 获取返回值区别"></a>8.2 获取返回值区别</h4><p>1.同步API可以从返回值中拿到API执行的结果, 但是异步API是不可以的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// 同步</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">n1, n2</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">const</span> result = sum (<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 异步</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMsg</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">msg</span>: <span class="string">&#x27;Hello Node.js&#x27;</span> &#125;</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> msg = getMsg ();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>1.<code>return &#123; msg: &#39;Hello Node.js&#39; &#125;</code>返回一个对象；<ul>
<li>1.1 哦，这是json写法；想用js语法，目前无法理解；</li>
</ul>
</li>
</ul>
<p>2.结果是：undefined</p>
<ul>
<li>1.用变量去接受异步的返回值是接受不到的。<ul>
<li>当一个函数，没有写返回值的时候，默认返回undefined；</li>
</ul>
</li>
<li>2.要用回调函数</li>
</ul>
<h4 id="8-3-回调函数"><a href="#8-3-回调函数" class="headerlink" title="8.3 回调函数"></a>8.3 回调函数</h4><p>1.自己定义函数让别的函数去调用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// getData函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span> (<span class="params">callback</span>) </span>&#123;&#125;</span><br><span class="line"> <span class="comment">// getData函数调用</span></span><br><span class="line">getData (<span class="function">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>1.callback，仅仅是个名称，是一个参数；</li>
<li>2.而下面的，把一个函数当做了参数放进了getDate函数的，参数里面；</li>
</ul>
<p>2.代码示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.写一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.那么callback就是那个函数的函数名</span></span><br><span class="line">    <span class="comment">// callback();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.在调用回调函数的时候，也可以加实参，不过要去那边加一个形参，加个n</span></span><br><span class="line">    callback(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.给参数写成函数</span></span><br><span class="line">getData(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 4.写个打印，看被调用了没</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;callback函数被调用了&#x27;</span>)</span><br><span class="line">    <span class="comment">// 5.1 打印n，看传过来没,打印过来了。</span></span><br><span class="line">    <span class="built_in">console</span>.log(n);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.创建函数getData，形参callback</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">callback</span>) </span>&#123;&#125; <span class="comment">// return undefined</span></span><br><span class="line"><span class="comment">// 2.调用函数</span></span><br><span class="line">getData(); <span class="comment">// return undefined</span></span><br><span class="line"><span class="comment">//3.传入实参，callback形参变成了一个匿名函数实参；</span></span><br><span class="line">getData(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</span><br><span class="line"><span class="comment">// 4. 是函数就要被调用，调用callback()</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    callback(<span class="string">&#x27;123&#x27;</span>); <span class="comment">// 4.1 调用时，传入了一个实参123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 5.但是函数callback没有形参，所以写一个形参接收，也就是n；</span></span><br><span class="line">getData(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;&#125;);</span><br><span class="line"><span class="comment">// 6.函数被调用，但没有返回值：return undefined；</span></span><br><span class="line"><span class="comment">// 6.1 给cb函数写一个返回值</span></span><br><span class="line">getData(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;callback函数被调用了&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 返回结果，完毕；</span></span><br></pre></td></tr></table></figure>



<ul>
<li>懵了</li>
<li>懂了又忘，忘了又懂，不行了，画图吧；</li>
</ul>
<p><img src="../../img/15/33.png" alt="33"></p>
<h4 id="8-4-使用回调函数获取异步API执行结果"><a href="#8-4-使用回调函数获取异步API执行结果" class="headerlink" title="8.4 使用回调函数获取异步API执行结果"></a>8.4 使用回调函数获取异步API执行结果</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMsg</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        callback (&#123; <span class="attr">msg</span>: <span class="string">&#x27;Hello Node.js&#x27;</span> &#125;)</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getMsg (<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以更分开的写：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a2 = <span class="function"><span class="params">msg</span> =&gt;</span> <span class="built_in">console</span>.log(msg);</span><br><span class="line">getMsg(a2);</span><br></pre></td></tr></table></figure>



<p>2.解析：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1.写个异步函数</span></span><br><span class="line"><span class="comment">// function getMsg() &#123;</span></span><br><span class="line"><span class="comment">//     setTimeout(function () &#123;</span></span><br><span class="line"><span class="comment">//         return &#123;</span></span><br><span class="line"><span class="comment">//             msg: &#x27;hello node.js&#x27;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;, 2000)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getMsg();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.给异步函数里面，写一个形参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMsg</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.调用实际化的形参，也是实参；形参是不用声明的变量</span></span><br><span class="line">        <span class="comment">// callback();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.1 给这个函数也加入实参</span></span><br><span class="line">        callback(&#123;</span><br><span class="line">            msg: <span class="string">&#x27;hello node.js&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.return没用，去掉</span></span><br><span class="line">        <span class="comment">// return &#123;</span></span><br><span class="line">        <span class="comment">//     msg: &#x27;hello node.js&#x27;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">    <span class="comment">// return; 这个是默认的，而且没有真正的返回值，所以是undefined；</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7.为了准确的，确定的验证这个可以按照顺序的，拿到异步api的结果，我在最下面再写一个打印</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;李二狗&#x27;</span>);</span><br><span class="line">    <span class="comment">// 7.1 结果还是先拿到李二狗</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.在执行这个异步函数的时候，写一个函数作为实参</span></span><br><span class="line">getMsg(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 6.打印，看拿到异步api的结果没</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="8-5-代码执行顺序区别"><a href="#8-5-代码执行顺序区别" class="headerlink" title="8.5 代码执行顺序区别"></a>8.5 代码执行顺序区别</h4><p>1.同步API从上到下依次执行，前面代码会阻塞后面代码的执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;for循环后面的代码&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>1.这就是同步的api会影响程序的地方；假如上面的同步api要占用很多时间，那么下面就举步维艰；</li>
</ul>
<p>2.异步API不会等待API执行完成后再向下执行代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;代码开始执行&#x27;</span>); </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;2秒后执行的代码&#x27;</span>)&#125;, <span class="number">2000</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;&quot;0秒&quot;后执行的代码&#x27;</span>)&#125;, <span class="number">0</span>); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;代码结束执行&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>是先执行，0秒。还是先 代码结束执行呢？（打印结果）</li>
</ul>
<p>2.1 结果是：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">代码开始执行</span><br><span class="line">代码结束执行</span><br><span class="line"><span class="string">&quot;0秒&quot;</span>后执行的代码</span><br><span class="line"><span class="number">2</span>秒后执行的代码</span><br></pre></td></tr></table></figure>



<h5 id="1-代码执行顺序分析"><a href="#1-代码执行顺序分析" class="headerlink" title="1. 代码执行顺序分析"></a>1. 代码执行顺序分析</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;代码开始执行&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;2秒后执行的代码&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>); </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;&quot;0秒&quot;后执行的代码&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;代码结束执行&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.先把同步api执行完，再执行异步api；</p>
<p>2.从上到下</p>
<ul>
<li><p>1.先遇到<code>console.log(&#39;代码开始执行&#39;);</code></p>
<ul>
<li>1.1 放到同步代码执行区，并执行</li>
</ul>
</li>
<li><p>2.遇到</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;2秒后执行的代码&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>2.1 <code>setTimeout()</code>，方法有2个参数</p>
<ul>
<li><p>一个是回调函数，一个是延迟时间。</p>
</li>
<li><p>这里等于是这样：</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(callback1, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> callback1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;&quot;2秒后执行的代码&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// var报错说不是函数，用const就可以，但是const必须写在上面，它没有变量提升。</span></span><br><span class="line"><span class="comment">// 箭头函数回调调用 箭头函数 总是说 被调用的 那个函数 不是函数 no function，必须写成 function()那种，不能箭头函数写法</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>2.2 在这里，先把<code>setTimeout(callback1, 2000);</code>放入异步代码执行区</p>
<ul>
<li>然后把，回调函数，放入回调函数队列。</li>
</ul>
</li>
<li><p>3.同理遇到0秒后执行</p>
</li>
<li><p>4.最后是<code>console.log(&#39;代码结束执行&#39;);</code>，放入同步代码执行区，并执行。</p>
</li>
<li><p>5.然后去异步代码执行区看</p>
<ul>
<li>延迟0秒那个先走，就去回调函数队列去执行它的回调函数</li>
<li>2000毫毛接着。</li>
</ul>
</li>
<li><p>6.完毕；</p>
</li>
</ul>
</li>
</ul>
<p><img src="../../img/15/32.png" alt="32"></p>
<p>3.即使是延迟0秒，也被放在同步api后面；</p>
<hr>
<h4 id="8-6-Node-js中的异步API"><a href="#8-6-Node-js中的异步API" class="headerlink" title="8.6 Node.js中的异步API"></a>8.6 Node.js中的异步API</h4><p>1.读取文件</p>
<p><code>fs.readFile(&#39;./demo.txt&#39;, (err, result) =&gt; &#123;&#125;);</code></p>
<p>2.事件监听也是异步api，事件处理函数，也是回调函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line">server.on(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>1.我们在为服务器对象，添加请求事件的时候，事件处理函数，我们有主动的调用过它吗？</p>
<ul>
<li>事件处理函数是：<code>(req, res) =&gt; &#123;&#125;</code></li>
</ul>
</li>
<li><p>2.并没有主动调用，事件处理函数的执行，都是在事件发生请求的时候，系统去调用的；</p>
<ul>
<li>1.系统在调用函数的时候，给我们传递了两个参数，分别是请求对象和响应对象。</li>
<li>2.所以，我们在定义这个函数的时候，才可以用形参的方式，来接受 请求与响应 对象；</li>
<li>3.所以，事件处理函数，是回调函数。事件监听的API是异步api；</li>
</ul>
</li>
<li><blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=40&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=40&amp;spm_id_from=pageDriver</a></p>
<p>02.00</p>
</blockquote>
</li>
</ul>
<h4 id="8-7-异步地狱"><a href="#8-7-异步地狱" class="headerlink" title="8.7. 异步地狱"></a>8.7. 异步地狱</h4><p>1.如果异步API后面代码的执行依赖当前异步API的执行结果，但实际上后续代码在执行的时候异步API还没有返回结果，这个问题要怎么解决呢？</p>
<p>2.需求：依次读取A文件、B文件、C文件</p>
<ul>
<li>1.创建callbackhell.js，和三个txt</li>
</ul>
<p>2.1 代码，可以这样写吗？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">&#x27;./2.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, result1</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">&#x27;./3.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, result2</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>1.我们不知道读取2.txt需要多长的时间，如果它文件大。</li>
<li>2.就会在2.txt没读取完毕时，3.txt就读取完毕了；</li>
</ul>
<p>2.2 就只有这样写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.readFile(<span class="string">&#x27;./2.tet&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, result1</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(<span class="string">&#x27;./3.tet&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, result2</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.readFile(<span class="string">&#x27;./4.tet&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, result2</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>1.但这样不易维护，也不美观（视频）</li>
</ul>
<h5 id="1-Promise"><a href="#1-Promise" class="headerlink" title="1. Promise"></a>1. Promise</h5><p>1.Promise出现的目的是解决Node.js异步编程中回调地狱的问题。</p>
<p>2.Promise本身是一个构造函数</p>
<ul>
<li><p>1.如果要使用，就要先用new创建实例对象；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>视频说resolve[^21]与 reject[^22]，都是函数。</li>
<li>说明resolve, reject是对象Promise里的方法。</li>
<li>但这里的格式，又像是一个箭头函数里面的参数。</li>
</ul>
</li>
<li><p>2.当异步api有返回结果的时候，你可以调用resolve。</p>
<ul>
<li>用参数的形式把 结果，传到 promise外面去</li>
</ul>
</li>
<li><p>2.1 如果是 失败了。就reject；</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            resolve(&#123;<span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>&#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            reject(<span class="string">&#x27;失败了&#x27;</span>) </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result); <span class="comment">// &#123;name: &#x27;张三&#x27;&#125;)</span></span><br><span class="line">       .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error); <span class="comment">// 失败了)</span></span><br></pre></td></tr></table></figure>



<p><img src="../../img/15/34.png" alt="34"></p>
<p>3.Promise ，实际上就是把常规的异步API外面包裹了一层。</p>
<ul>
<li>1.成功的，返回结果就是resolve，传到 promise外面去</li>
<li>2.失败的，返回结果就用reject；传到 promise外面去</li>
</ul>
<p>4.Promise，下面有一个then方法，</p>
<ul>
<li>1.调用resolve，实际上是执行then里面的回调函数；<ul>
<li>确实，then里面那一坨是个箭头函数。</li>
<li>但是Promise里面也很像一个箭头函数，我必须搞清楚；</li>
<li>我觉得，<code>(resolve, reject) =&gt; &#123;&#125;</code>,这一坨，就是箭头函数，作为了Promise的参数。</li>
<li>那么也是一个回调函数？2021-4-19 10:42:29</li>
</ul>
</li>
<li>2.同时，reject，是调用Promise里的一个叫catch的方法，的里面的一个函数。</li>
</ul>
<p>5.然后，这是Promise的基础代码；。。。</p>
<p>6.视频里面说，resolve，调用一个匿名函数<code>result =&gt; console.log(result)</code></p>
<ul>
<li>1.而<code>resolve(&#123;name: &#39;张三&#39;&#125;)</code>是传递了一个实参</li>
<li>2.<code>result =&gt; console.log(result)</code>，原本是<code>() =&gt; console.log()</code>;<ul>
<li>然后写result作为形参，才变成<code>result =&gt; console.log(result)</code>;</li>
</ul>
</li>
</ul>
<h5 id="2-解决地狱"><a href="#2-解决地狱" class="headerlink" title="2. 解决地狱"></a>2. 解决地狱</h5><p>1.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.readFile(<span class="string">&#x27;./1.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve(result)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.readFile(<span class="string">&#x27;./2.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve(result)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.readFile(<span class="string">&#x27;./3.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve(result)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p1().then(<span class="function">(<span class="params">r1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(r1);</span><br><span class="line">    <span class="keyword">return</span> p2();</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">r2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(r2);</span><br><span class="line">        <span class="keyword">return</span> p3();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">r3</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(r3)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>



<h4 id="8-8-异步函数"><a href="#8-8-异步函数" class="headerlink" title="8.8 异步函数"></a>8.8 异步函数</h4><p>0.在Promise对象的基础上，进行了封装。（可自己创建异步函数了）</p>
<ul>
<li>1.把臃肿的代码封装起来，供一些关键字，给我们使用。</li>
</ul>
<p>1.异步函数是异步编程语法的终极解决方案，它可以让我们将异步代码写成同步的形式，==让代码不再有回调函数嵌套==，使代码变得清晰明了。</p>
<ul>
<li>它是ES7语法；</li>
</ul>
<p>2.异步函数的，基础语法：</p>
<p><code>const fn = async () =&gt; &#123;&#125;;</code></p>
<p><code>async function fn () &#123;&#125;</code></p>
<p>2.1 在普通函数前面，加上，async关键字；</p>
<ul>
<li>1.普通函数，就变成了，异步函数。</li>
</ul>
<h5 id="2-15-async关键字"><a href="#2-15-async关键字" class="headerlink" title="2.15 async关键字"></a>2.15 async关键字</h5><ul>
<li><p>0.本来就是异步函数，还增加异步？</p>
<ul>
<li>其实不是，那些事异步api，但不能使用异步函数的语法</li>
<li>这样可以使用await；</li>
</ul>
</li>
<li><ol>
<li><p>普通函数定义前加async关键字 普通函数变成异步函数</p>
</li>
<li><p>异步函数默认返回promise对象</p>
</li>
<li><p>在异步函数内部使用return关键字进行结果返回 结果会被包裹的promise对象中 return关键字代替了resolve方法</p>
</li>
<li><p>在异步函数内部使用throw关键字抛出程序异常</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&#x27;发生了一些错误&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ul>
<ol start="5">
<li><p>调用异步函数再链式调用then方法获取异步函数执行结果</p>
</li>
<li><p>调用异步函数再链式调用catch方法获取异步函数执行的错误信息</p>
</li>
</ol>
<p>2.2 代码示例：</p>
<ul>
<li>1.异步函数默认的返回值是promise对象；</li>
<li>2.在异步函数内部使用throw关键字，进行错误的抛出。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.自创建一个异步函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&#x27;发生一些错误&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.获取返回值</span></span><br><span class="line"><span class="comment">// 2.1 用命令行工具查看结果,发现无法获得返回值</span></span><br><span class="line"><span class="built_in">console</span>.log(fn());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.获取返回对象里面的数据</span></span><br><span class="line">fn().then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<ul>
<li><p>2.1 用命令行工具查看结果</p>
<p><img src="../../img/15/35.png" alt="35"></p>
</li>
</ul>
<ul>
<li><p>3.解析</p>
<p><img src="../../img/15/36.png" alt="36"></p>
</li>
</ul>
<h5 id="4-await关键字"><a href="#4-await关键字" class="headerlink" title="4.await关键字"></a>4.await关键字</h5><ul>
<li><p>1.await关键字只能出现在异步函数中<br>2.await promise await后面只能写promise对象 写其他类型的API是不不可以的</p>
<p>3.await关键字可是暂停异步函数向下执行 直到promise返回结果</p>
<ul>
<li>变成同步；</li>
</ul>
<p>4.而且可以不用then。</p>
</li>
</ul>
<p>1.代码示例：</p>
<ul>
<li>await使异步api，变成同步状态，且可以直接取返回值使用；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">p1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;p1&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">p2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;p2&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">p3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;p3&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> run = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">//不使用await</span></span><br><span class="line">    <span class="comment">//p1().then(result=&gt;console.log(result));</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">let</span> r1 = <span class="keyword">await</span> p1();</span><br><span class="line">    <span class="keyword">let</span> r2 = <span class="keyword">await</span> p2();</span><br><span class="line">    <span class="keyword">let</span> r3 = <span class="keyword">await</span> p3();</span><br><span class="line">    <span class="built_in">console</span>.log(r1)</span><br><span class="line">    <span class="built_in">console</span>.log(r2)</span><br><span class="line">    <span class="built_in">console</span>.log(r3)</span><br><span class="line">&#125;</span><br><span class="line">run();</span><br></pre></td></tr></table></figure>



<h5 id="5-应用"><a href="#5-应用" class="headerlink" title="5. 应用"></a>5. 应用</h5><p>1.之前写的依次读取三个文件的例子。</p>
<p>2.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.导入fs</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.改造现有异步函数api，让其返回promise对象，从而支持异步函数语法</span></span><br><span class="line"><span class="comment">// node提供了一个方法，让当前异步api返回promise对象，来能使用异步函数方法</span></span><br><span class="line"><span class="comment">// 3.1拿到方法，后面是函数的键，所以不用（）；</span></span><br><span class="line"><span class="keyword">const</span> promisify = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>).promisify;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.使用读取文件方法</span></span><br><span class="line"><span class="comment">// 2.1但是这个异步api不返回promise对象，难道又外面嵌套？</span></span><br><span class="line"><span class="comment">// 2.2 它无法用async关键字吗？起初是这样的</span></span><br><span class="line"><span class="comment">// fs.readFile(&#x27;&#x27;, &#x27;&#x27;, (err, result) =&gt; &#123;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.调用promisify方法改造现有异步api，让其返回promise对象</span></span><br><span class="line"><span class="comment">// 包装fs.readFile , promisify(fs.readFile)会返回一个新的，可以返回promise对象的方法（匿名函数吗）。</span></span><br><span class="line"><span class="keyword">const</span> readFile = promisify(fs.readFile);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.创建异步函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 6.使用await，而不写回调函数</span></span><br><span class="line">    <span class="keyword">let</span> r1 = <span class="keyword">await</span> readFile(<span class="string">&#x27;./2.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> r2 = <span class="keyword">await</span> readFile(<span class="string">&#x27;./3.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> r3 = <span class="keyword">await</span> readFile(<span class="string">&#x27;./4.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(r1, r2, r3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 7.运行run</span></span><br><span class="line">run();</span><br></pre></td></tr></table></figure>



<hr>
<h1 id="4-数据库"><a href="#4-数据库" class="headerlink" title="4. 数据库"></a>4. 数据库</h1><blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=45&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=45&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.目标：</p>
<p> 能够安装数据库软件<br> 能够知道集合、文档的概念<br> 能够使用mongoose创建集合的方法创建集合<br> 能够对数据库中的数据进行增删改查操作</p>
<p>2.目录：</p>
<p> 数据库概述<br> 数据库环境搭建<br> MongoDB数据库连接<br> MongoDB增删改查操作</p>
<h2 id="4-1-数据库概述及环境搭建"><a href="#4-1-数据库概述及环境搭建" class="headerlink" title="4.1 数据库概述及环境搭建"></a>4.1 数据库概述及环境搭建</h2><h3 id="1-为什么要使用数据库"><a href="#1-为什么要使用数据库" class="headerlink" title="1. 为什么要使用数据库"></a>1. 为什么要使用数据库</h3><p>动态网站中的数据都是存储在数据库中的<br>数据库可以用来持久存储客户端通过表单收集的用户信息<br>数据库软件本身可以对数据进行高效的管理</p>
<h3 id="2-什么是数据库"><a href="#2-什么是数据库" class="headerlink" title="2. 什么是数据库"></a>2. 什么是数据库</h3><p>1.数据库即存储数据的仓库，可以将数据进行有序的分门别类的存储。它是独立于语言之外的软件，可以通过API去操作它。<br>常见的数据库软件有：mysql、mongoDB、oracle。</p>
<ul>
<li>mongoDB的API采用的是JavaScript语法；</li>
<li>2.php与mysql好配合<ul>
<li>node也可以操作mysql</li>
</ul>
</li>
<li>3.学习了一款，再学习其他会容易很多；上句话</li>
</ul>
<p><img src="../../img/15/37.png" alt="37"></p>
<h3 id="3-MongoDB数据库下载安装"><a href="#3-MongoDB数据库下载安装" class="headerlink" title="3. MongoDB数据库下载安装"></a>3. MongoDB数据库下载安装</h3><p>1.下载地址：<a href="https://www.mongodb.com/download-center/community">https://www.mongodb.com/download-center/community</a></p>
<h3 id="4-MongoDB可视化软件"><a href="#4-MongoDB可视化软件" class="headerlink" title="4. MongoDB可视化软件"></a>4. MongoDB可视化软件</h3><p>1.MongoDB可视化操作软件，是使用图形界面操作数据库的一种方式。</p>
<p><img src="../../img/15/38.jpg" alt="38"></p>
<h3 id="5-数据库相关概念"><a href="#5-数据库相关概念" class="headerlink" title="5. 数据库相关概念"></a>5. 数据库相关概念</h3><p>1.在一个数据库软件中可以包含多个数据仓库，在每个数据仓库中可以包含多个数据集合，每个数据集合中可以包含多条文档（具体的数据）。</p>
<table>
<thead>
<tr>
<th><strong>术语</strong></th>
<th><strong>解释说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>database</td>
<td>数据库，mongoDB数据库软件中可以建立多个数据库</td>
</tr>
<tr>
<td>collection</td>
<td>集合，一组数据的集合，可以理解为JavaScript中的数组</td>
</tr>
<tr>
<td>document</td>
<td>文档，一条具体的数据，可以理解为JavaScript中的对象</td>
</tr>
<tr>
<td>field</td>
<td>字段，文档中的属性名称，可以理解为JavaScript中的对象属性</td>
</tr>
</tbody></table>
<h3 id="6-Mongoose第三方包"><a href="#6-Mongoose第三方包" class="headerlink" title="6. Mongoose第三方包"></a>6. Mongoose第三方包</h3><p>使用Node.js操作MongoDB数据库需要依赖Node.js第三方包mongoose<br>使用npm install mongoose命令下载</p>
<h3 id="7-启动MongoDB"><a href="#7-启动MongoDB" class="headerlink" title="7. 启动MongoDB"></a>7. 启动MongoDB</h3><p>1.在命令行工具中运行net start mongoDB即可启动MongoDB，否则MongoDB将无法连接。</p>
<p>2.关闭：net stop mongodb</p>
<h3 id="8-数据库连接"><a href="#8-数据库连接" class="headerlink" title="8. 数据库连接"></a>8. 数据库连接</h3><blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=47&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=47&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.使用mongoose提供的connect方法即可连接数据库。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost/playground&#x27;</span>)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;数据库连接成功&#x27;</span>))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;数据库连接失败&#x27;</span>, err));</span><br></pre></td></tr></table></figure>

<ul>
<li>视频里面说，虽然没有创建这个数据库。</li>
<li>但是在添加数据的时候，会自动创建。。。</li>
</ul>
<p>2.实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.引入mongoose模块，先要下载</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.链接数据库，没创建也没事</span></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost/ql_playground&#x27;</span>, &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>, <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;数据库链接成功&#x27;</span>))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;数据库链接失败&#x27;</span>, err))</span><br></pre></td></tr></table></figure>

<ul>
<li>1.如果有警告：</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">PS F:\2-3ciyuan\11-data base-shujuk\3-lianxi&gt; node .\01.js</span><br><span class="line">(node:13956) DeprecationWarning: current URL string parser is deprecated, <span class="keyword">and</span> will be removed <span class="keyword">in</span> a future version. <span class="keyword">To</span> use the new parser, pass option &#123; useNewUrlParser: <span class="literal">true</span> &#125; <span class="keyword">to</span> MongoClient.connect.</span><br><span class="line">(Use `node --trace-deprecation <span class="built_in">..</span>.` <span class="keyword">to</span> show where the <span class="builtin-name">warning</span> was created)</span><br><span class="line">(node:13956) [MONGODB DRIVER] Warning: Current<span class="built_in"> Server Discovery </span><span class="keyword">and</span> Monitoring engine is deprecated, <span class="keyword">and</span> will be removed <span class="keyword">in</span> a future version. <span class="keyword">To</span> use the new<span class="built_in"> Server </span>Discover <span class="keyword">and</span> Monitoring engine, pass option &#123; useUnifiedTopology: <span class="literal">true</span> &#125; <span class="keyword">to</span> the MongoClient constructor.</span><br><span class="line">数据库链接成功</span><br></pre></td></tr></table></figure>

<ul>
<li>还是要处理一下；</li>
<li>2.<code>mongoose.connect(&#39;mongodb://localhost/ql_playground&#39;, &#123; useNewUrlParser: true, useUnifiedTopology: true &#125;)</code><ul>
<li>useNewUrlParser: true，这些东西，是作为connect的参数。</li>
</ul>
</li>
</ul>
<h3 id="9-创建数据库"><a href="#9-创建数据库" class="headerlink" title="9. 创建数据库"></a>9. 创建数据库</h3><p>1.在MongoDB中不需要显式创建数据库，如果正在使用的数据库不存在，MongoDB会自动创建。</p>
<hr>
<h2 id="4-2-MongoDB增删改查操作"><a href="#4-2-MongoDB增删改查操作" class="headerlink" title="4.2 MongoDB增删改查操作"></a>4.2 MongoDB增删改查操作</h2><h3 id="1-创建集合"><a href="#1-创建集合" class="headerlink" title="1. 创建集合"></a>1. 创建集合</h3><p>1.创建集合分为两步，一是对对集合设定规则，二是创建集合，创建mongoose[^13].Schema[^14]构造函数的实例即可创建集合。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.引入mongoose模块，先要下载</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.链接数据库，没创建也没事</span></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost/ql_playground&#x27;</span>, &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>, <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;数据库链接成功&#x27;</span>))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;数据库链接失败&#x27;</span>, err))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.设定规则</span></span><br><span class="line"><span class="keyword">const</span> practice_rules = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">    teacher: <span class="built_in">String</span>,</span><br><span class="line">    isPublished: <span class="built_in">Boolean</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.使用规则创建集合</span></span><br><span class="line"><span class="keyword">const</span> Course1 = mongoose.model(<span class="string">&#x27;Courses1&#x27;</span>, practice_rules);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>创建规则的时候，传递了一个对象进去。<ul>
<li>这种写法，我一直有点不熟悉；</li>
</ul>
</li>
</ul>
<h4 id="2-mongoose-model"><a href="#2-mongoose-model" class="headerlink" title="2.mongoose.model"></a>2.<code>mongoose.model</code></h4><p>可以创建集合，第一个参数是集合的名称。第二个应该是应用的规则的名称。</p>
<ul>
<li>注意，参数集合的名称，第一个字母要大写。<ul>
<li>不过，在数据库中创建的名称，的，第一个字母是小写的。</li>
<li>只不过，在你创建的名称后面添加了s，我觉得应该是复数语法，有些可能会是边y为i加es等等</li>
</ul>
</li>
<li>2.model[^26]方法，会返回当前这个集合的构造函数。<ul>
<li>2.1 为什么返回构造函数</li>
<li>2.2 因为构造函数下面有很多方法，可以直接使用。增删查改等等</li>
</ul>
</li>
</ul>
<h3 id="2-创建文档–增"><a href="#2-创建文档–增" class="headerlink" title="2. 创建文档–增"></a>2. 创建文档–增</h3><p>1.创建文档实际上就是向集合中插入数据。<br>分为两步：</p>
<ul>
<li>创建集合实例。</li>
<li>调用实例对象下的save方法将数据保存到数据库中。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 创建集合实例</span></span><br><span class="line"><span class="keyword">const</span> course = <span class="keyword">new</span> Course(&#123;</span><br><span class="line">    name: <span class="string">&#x27;Node.js course&#x27;</span>,</span><br><span class="line">    author: <span class="string">&#x27;黑马讲师&#x27;</span>,</span><br><span class="line">    tags: [<span class="string">&#x27;node&#x27;</span>, <span class="string">&#x27;backend&#x27;</span>],</span><br><span class="line">    isPublished: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"> <span class="comment">// 将数据保存到数据库中</span></span><br><span class="line">course.save();</span><br></pre></td></tr></table></figure>



<p>2.另一种方式，用这种方法，可以返回错误信息；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Course.create(&#123;<span class="attr">name</span>: <span class="string">&#x27;JavaScript基础&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;黑马讲师&#x27;</span>, <span class="attr">isPublish</span>: <span class="literal">true</span>&#125;, <span class="function">(<span class="params">err, doc</span>) =&gt;</span> &#123; </span><br><span class="line">     <span class="comment">//  错误对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">     <span class="comment">//  当前插入的文档</span></span><br><span class="line">    <span class="built_in">console</span>.log(doc)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>1.第一个参数，是要插入的文档，对象类型</li>
<li>2.第二个参数，是一个回调函数。</li>
</ul>
<p>2.1 回调函数，异步api</p>
<ul>
<li>关于数据库的操作，都是异步操作；2021-4-19 18:21:50</li>
</ul>
<p>2.2 数据库的api也支持promise，可以用异步函数的语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Course.create(&#123;<span class="attr">name</span>: <span class="string">&#x27;JavaScript基础&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;黑马讲师&#x27;</span>, <span class="attr">isPublish</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">doc</span> =&gt;</span> <span class="built_in">console</span>.log(doc))</span><br><span class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure>





<h3 id="3-mongoDB数据库导入数据"><a href="#3-mongoDB数据库导入数据" class="headerlink" title="3. mongoDB数据库导入数据"></a>3. mongoDB数据库导入数据</h3><blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=50&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=50&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.怎么添加已有的数据；</p>
<p>1.mongoimport –d 数据库名称 –c 集合名称 –file 要导入的数据文件<br>找到mongodb数据库的安装目录，将安装目录下的bin目录放置在环境变量中。</p>
<p>2.命令不能直接使用。</p>
<ul>
<li>要加到系统的环境变量里面；</li>
</ul>
<p>2.1 现在已经不和server一起下载了。要单独下载</p>
<ul>
<li><a href="https://www.mongodb.com">https://www.mongodb.com</a></li>
<li><img src="../../img/15/39.png" alt="39"></li>
</ul>
<p>2.2 现在有了：mongoimport.exe</p>
<ul>
<li>主要就是找到这个可执行文件的路径</li>
</ul>
<p>3.添加到path里面；</p>
<p>4.准备了一个json文件：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;_id&quot;</span>:&#123;<span class="attr">&quot;$oid&quot;</span>:<span class="string">&quot;5c09f1e5aeb04b22f8460965&quot;</span>&#125;,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">20</span>,<span class="attr">&quot;hobbies&quot;</span>:[<span class="string">&quot;足球&quot;</span>,<span class="string">&quot;篮球&quot;</span>,<span class="string">&quot;橄榄球&quot;</span>],<span class="attr">&quot;email&quot;</span>:<span class="string">&quot;zhangsan@itcast.cn&quot;</span>,<span class="attr">&quot;password&quot;</span>:<span class="string">&quot;123456&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;_id&quot;</span>:&#123;<span class="attr">&quot;$oid&quot;</span>:<span class="string">&quot;5c09f236aeb04b22f8460967&quot;</span>&#125;,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;李四&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">10</span>,<span class="attr">&quot;hobbies&quot;</span>:[<span class="string">&quot;足球&quot;</span>,<span class="string">&quot;篮球&quot;</span>],<span class="attr">&quot;email&quot;</span>:<span class="string">&quot;lisi@itcast.cn&quot;</span>,<span class="attr">&quot;password&quot;</span>:<span class="string">&quot;654321&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;_id&quot;</span>:&#123;<span class="attr">&quot;$oid&quot;</span>:<span class="string">&quot;5c09f267aeb04b22f8460968&quot;</span>&#125;,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;王五&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">25</span>,<span class="attr">&quot;hobbies&quot;</span>:[<span class="string">&quot;敲代码&quot;</span>],<span class="attr">&quot;email&quot;</span>:<span class="string">&quot;wangwu@itcast.cn&quot;</span>,<span class="attr">&quot;password&quot;</span>:<span class="string">&quot;123456&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;_id&quot;</span>:&#123;<span class="attr">&quot;$oid&quot;</span>:<span class="string">&quot;5c09f294aeb04b22f8460969&quot;</span>&#125;,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;赵六&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">50</span>,<span class="attr">&quot;hobbies&quot;</span>:[<span class="string">&quot;吃饭&quot;</span>,<span class="string">&quot;睡觉&quot;</span>,<span class="string">&quot;打豆豆&quot;</span>],<span class="attr">&quot;email&quot;</span>:<span class="string">&quot;zhaoliu@itcast.cn&quot;</span>,<span class="attr">&quot;password&quot;</span>:<span class="string">&quot;123456&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;_id&quot;</span>:&#123;<span class="attr">&quot;$oid&quot;</span>:<span class="string">&quot;5c09f2b6aeb04b22f846096a&quot;</span>&#125;,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;王二麻子&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">32</span>,<span class="attr">&quot;hobbies&quot;</span>:[<span class="string">&quot;吃饭&quot;</span>],<span class="attr">&quot;email&quot;</span>:<span class="string">&quot;wangermazi@itcast.cn&quot;</span>,<span class="attr">&quot;password&quot;</span>:<span class="string">&quot;123456&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;_id&quot;</span>:&#123;<span class="attr">&quot;$oid&quot;</span>:<span class="string">&quot;5c09f2d9aeb04b22f846096b&quot;</span>&#125;,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;狗蛋&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">14</span>,<span class="attr">&quot;hobbies&quot;</span>:[<span class="string">&quot;打豆豆&quot;</span>],<span class="attr">&quot;email&quot;</span>:<span class="string">&quot;goudan@163.com&quot;</span>,<span class="attr">&quot;password&quot;</span>:<span class="string">&quot;123456&quot;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>5.代码实例：</p>
<p><code>mongoimport -d ql_playground -c users --file ./user.json</code></p>
<p>mongoimport –d 数据库名称 –c 集合名称 –file 要导入的数据文件</p>
<ul>
<li><p>1.返回：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">2021</span><span class="number">-04</span><span class="number">-19</span>T23:<span class="number">12</span>:<span class="number">10.563</span>+<span class="number">0800</span>    connected to: mongodb:<span class="comment">//localhost/</span></span><br><span class="line"><span class="number">2021</span><span class="number">-04</span><span class="number">-19</span>T23:<span class="number">12</span>:<span class="number">10.682</span>+<span class="number">0800</span>    <span class="number">6</span> document(s) imported successfully. <span class="number">0</span> document(s) failed to <span class="keyword">import</span>.</span><br></pre></td></tr></table></figure>
</li>
<li><p>1.2 翻译</p>
<p>2021-04-19T23:12:10.563+0800连接至：mongodb://localhost/</p>
<p>2021-04-19T23:12:10.682+0800 6文档导入成功。0个文档导入失败。</p>
</li>
</ul>
<p>6.</p>
<h3 id="4-查询文档"><a href="#4-查询文档" class="headerlink" title="4. 查询文档"></a>4. 查询文档</h3><h4 id="4-1-find-方法"><a href="#4-1-find-方法" class="headerlink" title="4.1 .find()方法"></a>4.1 .find()方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  根据条件查找文档（条件为空则查找所有文档）</span></span><br><span class="line">Course.find().then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>



<p>2.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回文档集合</span></span><br><span class="line">[&#123;</span><br><span class="line">    _id: <span class="number">5</span>c0917ed37ec9b03c07cf95f,</span><br><span class="line">    name: <span class="string">&#x27;node.js基础&#x27;</span>,</span><br><span class="line">    author: <span class="string">&#x27;黑马讲师‘</span></span><br><span class="line"><span class="string">&#125;,&#123;</span></span><br><span class="line"><span class="string">     _id: 5c09dea28acfb814980ff827,</span></span><br><span class="line"><span class="string">     name: &#x27;</span>Javascript<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">     author: &#x27;</span>黑马讲师‘</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>



<p>3.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.引入mongoose模块，先要下载</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.链接数据库，没创建也没事</span></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost/ql_playground&#x27;</span>, &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>, <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;数据库链接成功&#x27;</span>))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;数据库链接失败&#x27;</span>, err))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.设定规则</span></span><br><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">    age: <span class="built_in">Number</span>,</span><br><span class="line">    email: <span class="built_in">String</span>,</span><br><span class="line">    password: <span class="built_in">String</span>,</span><br><span class="line">    hobbies: [<span class="built_in">String</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.使用规则创建集合</span></span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">&#x27;User&#x27;</span>, userSchema);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.用.find查询文档，查询用户集合中的所有文档</span></span><br><span class="line"><span class="comment">// 5.1 因为User.find()返回permise对象，后面可以直接调用then</span></span><br><span class="line"><span class="comment">// 5.2 即使没有创建新的集合实例，也能查找，看来是能查找规则相同的数据</span></span><br><span class="line"><span class="comment">// User.find().then(result =&gt; console.log(result));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.查询条件设置</span></span><br><span class="line">User.find(&#123; <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span> &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result));</span><br></pre></td></tr></table></figure>

<ul>
<li>在第六步，即使只有一条数据，返回的也是数组<ul>
<li>如果查找的数据不存在，返回的是空数组</li>
</ul>
</li>
</ul>
<h4 id="4-2-findOne方法"><a href="#4-2-findOne方法" class="headerlink" title="4.2 findOne方法"></a>4.2 findOne方法</h4><p>1.也是查找文档，但它的返回结果，就只有一条；</p>
<p>2.代码示例：</p>
<p><code>//  根据条件查找文档
Course.findOne(&#123;name: &#39;node.js基础&#39;&#125;).then(result =&gt; console.log(result))</code></p>
<p>2.1 返回结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回文档</span></span><br><span class="line"> &#123;</span><br><span class="line">    _id: <span class="number">5</span>c0917ed37ec9b03c07cf95f,</span><br><span class="line">    name: <span class="string">&#x27;node.js基础&#x27;</span>,</span><br><span class="line">    author: <span class="string">&#x27;黑马讲师‘</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>



<p>3.代码实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 7.使用fandOne方法练习</span></span><br><span class="line">User.findOne(&#123; <span class="attr">name</span>: <span class="string">&#x27;node.js基础&#x27;</span> &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result));</span><br></pre></td></tr></table></figure>

<ul>
<li>返回的null，。。。</li>
</ul>
<p>4.测试，是不是返回当前集合的，第一个数据；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 7.测试，是不是返回当前集合的，第一个数据</span></span><br><span class="line">User.findOne().then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result));</span><br></pre></td></tr></table></figure>

<ul>
<li>确实是</li>
</ul>
<p>4.1 我回去测试了第四步</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4.使用规则创建集合</span></span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">&#x27;User&#x27;</span>, userSchema);</span><br></pre></td></tr></table></figure>

<ul>
<li>1.把‘User’，改为了，‘User1’。就返回的null</li>
<li>2.看来这里的仓库名字，如果和数据库里面已有的集合同名，就会直接连接到那个集合。</li>
</ul>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=51&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=51&amp;spm_id_from=pageDriver</a></p>
<p>07:27；</p>
</blockquote>
<hr>
<h4 id="4-3-大于小于"><a href="#4-3-大于小于" class="headerlink" title="4.3 大于小于"></a>4.3 大于小于</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  匹配大于 小于</span></span><br><span class="line">User.find(&#123;<span class="attr">age</span>: &#123;<span class="attr">$gt</span>: <span class="number">20</span>, <span class="attr">$lt</span>: <span class="number">50</span>&#125;&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>

<p>1.固定用法</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=52&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=52&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>2.练习，还是继续在4.js里面；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 8.查询，练习大于小于</span></span><br><span class="line">User.find(&#123; <span class="attr">age</span>: &#123; <span class="attr">$gt</span>: <span class="number">20</span>, <span class="attr">$lt</span>: <span class="number">50</span> &#125; &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>01:44 ；</p>
</blockquote>
<h4 id="4-4-匹配包含"><a href="#4-4-匹配包含" class="headerlink" title="4.4 匹配包含"></a>4.4 匹配包含</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  匹配包含</span></span><br><span class="line">User.find(&#123;<span class="attr">hobbies</span>: &#123;<span class="attr">$in</span>: [<span class="string">&#x27;敲代码&#x27;</span>]&#125;&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>

<ul>
<li><p>查询 field 值与指定数组中任何值相等的 MongoDB 文档.</p>
</li>
<li><blockquote>
<p>$in:<a href="https://www.aiuai.cn/aifarm298.html">https://www.aiuai.cn/aifarm298.html</a></p>
</blockquote>
</li>
</ul>
<h4 id="4-5-选择要查询的字段"><a href="#4-5-选择要查询的字段" class="headerlink" title="4.5 选择要查询的字段"></a>4.5 选择要查询的字段</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  选择要查询的字段  </span></span><br><span class="line">User.find().select(<span class="string">&#x27;name email&#x27;</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>

<p>1.<code>_id</code>，是默认查找出来的。</p>
<ul>
<li>如果不想查询</li>
</ul>
<h4 id="4-6-将数据按照年龄进行排序"><a href="#4-6-将数据按照年龄进行排序" class="headerlink" title="4.6 将数据按照年龄进行排序"></a>4.6 将数据按照年龄进行排序</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将数据按照年龄进行排序</span></span><br><span class="line">User.find().sort(<span class="string">&#x27;age&#x27;</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>

<p>1.sort[^16]</p>
<p>2.升序排列</p>
<p>3.如果想降序排序，只需要在age前面加一个负号</p>
<ul>
<li><code>sort(&#39;-age&#39;)</code></li>
</ul>
<h4 id="4-7-跳过与限制"><a href="#4-7-跳过与限制" class="headerlink" title="4.7 跳过与限制"></a>4.7 跳过与限制</h4><p>1.skip 跳过多少条数据  limit 限制查询数量</p>
<ul>
<li><p>skip 跳过多少条数据，查询的时候，跳过前几个文档；</p>
<p><img src="../../img/15/40.png" alt="40"></p>
</li>
<li><p>limit，不管你结果多少，我只显示X条；</p>
</li>
</ul>
<p>1.1 如果是排序呢？假如把排序写在前面，会不会是跳过排序后的前两个，而不是数据库里面的前两个文档；</p>
<ul>
<li>1.实验；</li>
<li>哇咔咔，是跳过==排序后的==；</li>
</ul>
<p>2.分页的时候，用得到；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  skip 跳过多少条数据  limit 限制查询数量</span></span><br><span class="line">User.find().skip(<span class="number">2</span>).limit(<span class="number">2</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="5-删除文档"><a href="#5-删除文档" class="headerlink" title="5. 删除文档"></a>5. 删除文档</h3><p>1.删除单个</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 删除单个</span></span><br><span class="line">Course.findOneAndDelete(&#123;&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>

<ul>
<li>1.findOneAndDelete<ul>
<li>findOne_and_delet</li>
<li>查找一个文档，并，删除；</li>
</ul>
</li>
<li>2.我猜参数，是写的条件。是一个对象类型。<ul>
<li>如果查询条件匹配了多条文档，它会把第一个文档删除</li>
</ul>
</li>
<li>3.它有返回值，返回被删除的文档信息。</li>
</ul>
<p>2.删除多个</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 删除多个</span></span><br><span class="line">User.deleteMany(&#123;&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>

<ul>
<li><p>1.Many[^17]</p>
</li>
<li><p>2.猜测：这个就是把所有匹配到的文档，全部删除，上面只删除第一个，但也能匹配到所有相关文档</p>
</li>
<li><p>3.==注意==：如果不写条件，空对象，就删除全部文档；</p>
</li>
<li><p>4.返回值：{n:x, ok:1}</p>
<ul>
<li>1.这个x，是删除了多少条文档</li>
<li>2.ok的1，可能是true的意思。布尔值；</li>
</ul>
</li>
</ul>
<h3 id="6-更新文档"><a href="#6-更新文档" class="headerlink" title="6. 更新文档"></a>6. 更新文档</h3><p>1.单个</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新单个</span></span><br><span class="line">User.updateOne(&#123;查询条件&#125;, &#123;要修改的值&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>

<ul>
<li>1.update，更新，one一个。更新一个；</li>
</ul>
<p>1.1 示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">User.updateOne(&#123;<span class="attr">name</span>:<span class="string">&#x27;xx&#x27;</span>&#125;, &#123;<span class="attr">name</span>:<span class="string">&#x27;xx&#x27;</span>&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>

<ul>
<li><p>两边都写完整了；</p>
</li>
<li><p>当热，左右两边的数据名不用一样，左边是查询条件，右边是修改的数据</p>
<ul>
<li>左边name，右边age也行的</li>
</ul>
</li>
</ul>
<p>2.多个</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新多个</span></span><br><span class="line">User.updateMany(&#123;查询条件&#125;, &#123;要更改的值&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>

<p>2.1 实例：</p>
<ul>
<li>1.所有文档的age改为56；</li>
</ul>
<p>2.2 会返回：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">数据库链接成功</span></span><br><span class="line">&#123; <span class="attr">n:</span> <span class="number">6</span>, <span class="attr">nModified:</span> <span class="number">6</span>, <span class="attr">ok:</span> <span class="number">1</span> &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>n:被匹配到的有几条</li>
<li>modified[^18]：修改了几条</li>
<li>ok：1 = 成功；</li>
</ul>
<h3 id="7-mongoose验证"><a href="#7-mongoose验证" class="headerlink" title="7. mongoose验证"></a>7. mongoose验证</h3><p>1.在创建集合规则时，可以设置当前字段的验证规则，验证失败就则输入插入失败。</p>
<h4 id="7-1-required-true-必传字段"><a href="#7-1-required-true-必传字段" class="headerlink" title="7.1 required: true 必传字段"></a>7.1 required: true 必传字段</h4><p>1.需要创建新的规则了。</p>
<ul>
<li>创建一个文章集合</li>
</ul>
<p>2.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost/ql_playground&#x27;</span>, &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>, <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;数据库链接成功&#x27;</span>))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;数据库链接失败&#x27;</span>, err))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.设定规则</span></span><br><span class="line"><span class="keyword">const</span> articleSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        <span class="comment">// 3.1设置必传字段</span></span><br><span class="line">        required: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.使用规则创建集合</span></span><br><span class="line"><span class="keyword">const</span> Article1 = mongoose.model(<span class="string">&#x27;Article&#x27;</span>, articleSchema);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.向集合中插入文档</span></span><br><span class="line">Article1.create(&#123; <span class="attr">name</span>: <span class="string">&#x27;JavaScript基础&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;黑马讲师&#x27;</span>, <span class="attr">isPublish</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">doc</span> =&gt;</span> <span class="built_in">console</span>.log(doc))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure>

<p>3.返回的错误，很不友好；</p>
<ul>
<li>1.如何自定义错误返回的信息？</li>
</ul>
<p>3.1 required的值，也可以是个数组，第二个参数，就是返回的信息；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 6.设置返回信息</span></span><br><span class="line">required: [<span class="literal">true</span>, <span class="string">&#x27;请传入文章标题&#x27;</span>]</span><br></pre></td></tr></table></figure>



<h4 id="7-2-长度"><a href="#7-2-长度" class="headerlink" title="7.2 长度"></a>7.2 长度</h4><p>minlength：3 字符串最小长度</p>
<p>maxlength: 20 字符串最大长度</p>
<p>1.语法一样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 7.长度验证语法也一样</span></span><br><span class="line">minlength: [<span class="number">2</span>, <span class="string">&#x27;标题长度不能小于2&#x27;</span>],</span><br><span class="line">maxlength: [<span class="number">10</span>, <span class="string">&#x27;标题长度不能大于10&#x27;</span>]</span><br></pre></td></tr></table></figure>



<h4 id="7-3-数值"><a href="#7-3-数值" class="headerlink" title="7.3 数值"></a>7.3 数值</h4><p>1.上面是针对字符串，数值针对 数值类型；</p>
<p>min: 2 数值最小为2<br>max: 100 数值最大为100</p>
<p>2.语法和上面一样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 8.数值验证</span></span><br><span class="line">age: &#123;</span><br><span class="line">    type: <span class="built_in">Number</span>,</span><br><span class="line">    min: [<span class="number">18</span>, <span class="string">&#x27;未满18不行&#x27;</span>],</span><br><span class="line">    max: [<span class="number">150</span>, <span class="string">&#x27;仙人，你破戒了！&#x27;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="7-4-default-默认值"><a href="#7-4-default-默认值" class="headerlink" title="7.4 default: 默认值"></a>7.4 default: 默认值</h4><p>1.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 9.写个发布时间的数据</span></span><br><span class="line">    publishDate: &#123;</span><br><span class="line">        type: <span class="built_in">Date</span>,</span><br><span class="line">        <span class="comment">// 9.1 默认为当前电脑时间</span></span><br><span class="line">        <span class="keyword">default</span>: <span class="built_in">Date</span>.now,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h4 id="7-5-枚举"><a href="#7-5-枚举" class="headerlink" title="7.5 枚举"></a>7.5 枚举</h4><p>1.enum[^19]: [‘html’, ‘css’, ‘javascript’, ‘node.js’]</p>
<ul>
<li>是单词前4个字母</li>
</ul>
<p>2.枚举可以规定值只能取哪些。</p>
<ul>
<li>写了这个键值对，如果传入的不是其中的某一个值，则验证失败</li>
</ul>
<p>3.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 10.分类</span></span><br><span class="line">    category: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        <span class="comment">// 10.1 枚举分类的值</span></span><br><span class="line">        enum: [<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;node.js&#x27;</span>, <span class="string">&#x27;node&#x27;</span>],</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>



<hr>
<h4 id="7-6-validate-自定义验证器"><a href="#7-6-validate-自定义验证器" class="headerlink" title="7.6 validate: 自定义验证器"></a>7.6 validate: 自定义验证器</h4><p>1.当前所说的，都是mongoose里面常用的验证规则。</p>
<p>2.validate本身是一个对象</p>
<ul>
<li>下面有一个方法validator<ul>
<li>这个函数有一个参数v。<ul>
<li>这个参数是：当前用户传递的时候的那个值。</li>
</ul>
</li>
<li>我们可以在这个函数体里，对这个值验证<ul>
<li>返回布尔值，true验证成功，false验证失败，v要验证的值。</li>
</ul>
</li>
</ul>
</li>
<li>键：message；<ul>
<li>自定义错误信息</li>
</ul>
</li>
</ul>
<p>3.代码实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 11.自定义</span></span><br><span class="line">    author: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        validate: &#123;</span><br><span class="line">            validator: <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> v.length &lt; <span class="number">5</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 自定义错误信息</span></span><br><span class="line">            message: <span class="string">&#x27;当前数据不符合规则&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="8-获取报错信息"><a href="#8-获取报错信息" class="headerlink" title="8. 获取报错信息"></a>8. 获取报错信息</h3><h4 id="8-1-直接-catch"><a href="#8-1-直接-catch" class="headerlink" title="8.1 直接.catch"></a>8.1 直接.catch</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5.向集合中插入文档</span></span><br><span class="line">Article1.create(&#123; <span class="attr">title</span>: <span class="string">&#x27;abc&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;sadasd&#x27;</span> &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">doc</span> =&gt;</span> <span class="built_in">console</span>.log(doc))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure>

<p>1.报错信息返回的是一个errors对象。还不错</p>
<ul>
<li>报错对象里面有键值对。</li>
<li>如何拿到某一个？</li>
</ul>
<p>1.1报错图：</p>
<p><img src="../../img/15/42.png" alt="41"></p>
<h4 id="8-2-获取errors对象的值"><a href="#8-2-获取errors对象的值" class="headerlink" title="8.2 获取errors对象的值"></a>8.2 获取errors对象的值</h4><p>1.取对象的值，最好用for in 循环，这个是动态的。如果键值对增对，也能取出来；不需要改代码；</p>
<p>2.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> err2 = err.errors;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> err2) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err2[attr]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>1.先拿到errors对象</li>
<li>然后遍历这个对象</li>
<li>然后这个<code>err2[attr][&#39;message&#39;]</code><ul>
<li>啥意思来着？</li>
<li>如果不写<code>[&#39;message&#39;]</code>,会怎样？</li>
</ul>
</li>
</ul>
<p><img src="../../img/15/41.png" alt="41"></p>
<p>2.如果返回的有这样的：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">properties: &#123;</span><br><span class="line">  validator: [<span class="keyword">Function</span> <span class="title"></span>(anonymous)],</span><br></pre></td></tr></table></figure>

<ul>
<li>翻译：</li>
</ul>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">属性：</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">    验证器：[函数(匿名)]</span></span><br><span class="line"><span class="template-variable">&#125;</span></span><br></pre></td></tr></table></figure>



<p>2.1 说明是没有写<code>validate</code>;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 10.分类</span></span><br><span class="line"> category: &#123;</span><br><span class="line">     type: <span class="built_in">String</span>,</span><br><span class="line">     <span class="comment">// 10.1 枚举分类的值</span></span><br><span class="line">     enum: &#123;</span><br><span class="line">         values: [<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;javascript&#x27;</span>, <span class="string">&#x27;node.js&#x27;</span>],</span><br><span class="line">         message: <span class="string">&#x27;分类名称要在一定的范围内才可以&#x27;</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="comment">// 11.自定义</span></span><br><span class="line"> author: &#123;</span><br><span class="line">     type: <span class="built_in">String</span>,</span><br><span class="line">     validate: &#123;</span><br><span class="line">         validator: <span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">             <span class="keyword">return</span> v &amp;&amp; v.length &lt; <span class="number">5</span>;</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="comment">// 自定义错误信息</span></span><br><span class="line">         message: <span class="string">&#x27;当前数据不符合规则233&#x27;</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>





<h4 id="8-3-获取错误信息"><a href="#8-3-获取错误信息" class="headerlink" title="8.3 获取错误信息"></a>8.3 获取错误信息</h4><p>1.error.errors[‘字段名称’].message</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> err2 = err.errors;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> err2) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err2[attr][<span class="string">&#x27;message&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<p>2.直接返回message里的信息；</p>
<p><img src="../../img/15/43.png" alt="43"></p>
<hr>
<h3 id="9-集合关联"><a href="#9-集合关联" class="headerlink" title="9. 集合关联"></a>9. 集合关联</h3><p>1.通常不同集合的数据之间是有关系的，例如文章信息和用户信息存储在不同集合中，但文章是某个用户发表的，要查询文章的所有信息包括发表用户，就需要用到集合关联。</p>
<ul>
<li>使用id对集合进行关联<br>使用populate[^20]方法进行关联集合查询</li>
</ul>
<p><img src="../../img/15/44.png" alt="44"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户集合</span></span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">&#x27;User&#x27;</span>, <span class="keyword">new</span> mongoose.Schema(&#123; <span class="attr">name</span>: &#123; <span class="attr">type</span>: <span class="built_in">String</span> &#125; &#125;)); </span><br></pre></td></tr></table></figure>



<p>2.以前创建集合，第二个参数，是写的集合规则，而这里没有写规则，所以就直接把规则搬进来了</p>
<ul>
<li>不过还是分开写比较好。</li>
</ul>
<p>3.文章集合</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文章集合</span></span><br><span class="line"><span class="keyword">const</span> Post = mongoose.model(<span class="string">&#x27;Post&#x27;</span>, <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    title: &#123; <span class="attr">type</span>: <span class="built_in">String</span> &#125;,</span><br><span class="line">    <span class="comment">// 使用ID将文章集合和作者集合进行关联</span></span><br><span class="line">    author: &#123; <span class="attr">type</span>: mongoose.Schema.Types.ObjectId, <span class="attr">ref</span>: <span class="string">&#x27;User&#x27;</span> &#125;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<ul>
<li>1.ref属性为关联，值为集合名称，单引号；估计双引号也行；</li>
<li>2.当前author字段，要与User集合关联；</li>
<li>3.<code>mongoose.Schema.Types.ObjectId</code>这一坨就是id的值；</li>
</ul>
<p>4.那么查询的时候，怎么把User集合中的author信息查询出来呢？</p>
<ul>
<li>看代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//联合查询</span></span><br><span class="line">Post.find()</span><br><span class="line">      .populate(<span class="string">&#x27;author&#x27;</span>)</span><br><span class="line">      .then(<span class="function">(<span class="params">err, result</span>) =&gt;</span> <span class="built_in">console</span>.log(result));</span><br></pre></td></tr></table></figure>

<p>4.1 populate</p>
<ul>
<li>1.populate方法：查询关联集合的具体信息；<ul>
<li>要查询关联集合author的信息，写author进去就可以了</li>
</ul>
</li>
<li>2.</li>
</ul>
<h4 id="9-2-代码验证"><a href="#9-2-代码验证" class="headerlink" title="9.2 代码验证"></a>9.2 代码验证</h4><p>1.前面六步，都是准备</p>
<ul>
<li><p>它们分别是：</p>
<p>1.引入mongoose模块，先要下载</p>
<p>2.链接数据库，没创建也没事</p>
<p>3.创建用户集合规则</p>
<p>4.创建文字集合规则</p>
<p>5.创建用户集合</p>
<p>6.写author规则</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.引入mongoose模块，先要下载</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.链接数据库，没创建也没事</span></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost/ql_playground&#x27;</span>, &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>, <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;数据库链接成功&#x27;</span>))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;数据库链接失败&#x27;</span>, err))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.创建用户集合规则</span></span><br><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        required: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.创建文字集合规则</span></span><br><span class="line"><span class="keyword">const</span> postSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">        type: <span class="built_in">String</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 6.写author规则</span></span><br><span class="line">    author: &#123;</span><br><span class="line">        <span class="comment">// 6.1 类型_id</span></span><br><span class="line">        type: mongoose.Schema.Types.ObjectId,</span><br><span class="line">        <span class="comment">// 6.2关联User集合</span></span><br><span class="line">        ref: <span class="string">&#x27;User&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.创建用户集合</span></span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">&#x27;User&#x27;</span>, userSchema);</span><br><span class="line"><span class="comment">// 5.1 创建文章集合</span></span><br><span class="line"><span class="keyword">const</span> article = mongoose.model(<span class="string">&#x27;article&#x27;</span>, postSchema);</span><br></pre></td></tr></table></figure>



<p>2.第七步：能返回一下数据库User集合里面有哪些文档吗？</p>
<ul>
<li><p>这是一个新的js了，是否能根据名称联系，就看这次实验</p>
<ul>
<li>1.同样的数据库名：ql_playground</li>
<li>2.同样的数据库下面的集合名：User</li>
</ul>
</li>
<li><p>代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">User.find().then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回结果是：返回了当前里面的所有文档。</p>
<ul>
<li>实验成功</li>
<li>实验结论：能根据名称联系</li>
</ul>
</li>
</ul>
<p>3.第八步：</p>
<ul>
<li><p>1.删除里面的所有文档</p>
</li>
<li><p>代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 8.before: 因为我以前给数据库，创建过User集合。所以先删除里面的全部文档</span></span><br><span class="line">User.deleteMany(&#123;&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.验证结果，在数据库里面刷新查看：</p>
<ul>
<li>结果：This collection has no data</li>
<li>成功；</li>
</ul>
</li>
</ul>
<p>4.第九步：插入新的User文档</p>
<ul>
<li><p>1.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 9.给User集合，插入一条数据</span></span><br><span class="line">User.create(&#123; <span class="attr">name</span>: <span class="string">&#x27;shiYan1&#x27;</span> &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.结果：在数据库中查看</p>
<ul>
<li>成功有文档创建</li>
</ul>
</li>
</ul>
<p>5.第十步：创建新的文章集合文档</p>
<ul>
<li><p>1.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 10：创建新的文章集合文档</span></span><br><span class="line"><span class="comment">// 10.1 author的值是数据库那边复制User集合文档的ID</span></span><br><span class="line">article.create(&#123; <span class="attr">title</span>: <span class="string">&#x27;123&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;607efb8b87c1963274926984&#x27;</span> &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>6.第11步，查询；</p>
<ul>
<li><p>1.我们先不写条件，直接查询，看看返回的是什么？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">article.find().then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.返回的结果：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">PS F:\<span class="number">2</span><span class="number">-3</span>ciyuan\<span class="number">11</span>-data base-shujuk\<span class="number">3</span>-lianxi&gt; node .\<span class="number">7.</span>js</span><br><span class="line">数据库链接成功</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    _id: <span class="number">607</span>efd02f6c8d337e4f68018,</span><br><span class="line">    title: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    author: <span class="number">607</span>efb8b87c1963274926984,</span><br><span class="line">    __v: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>3.在文章集合的规则中，author关联了User集合。</p>
<ul>
<li><p>1.在这里如何通过author返回出User那边的数据？</p>
</li>
<li><p>2.代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 11.3.2</span></span><br><span class="line">article.find().populate(<span class="string">&#x27;author&#x27;</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure>
</li>
<li><p>3.在populate方法里面，写入你要查询的文档，的，关联字的信息</p>
<ul>
<li>1.这里要查询哪个文档？</li>
<li>2.这里要查询User集合里面的第一个文档</li>
<li>3.而这个文档怎么连接的？</li>
<li>4.通过postSchema文章规则里面的author规则关联的</li>
<li>5.所以这里写author。<ul>
<li>1.如果要关联多个咋办？我忽然想到，但这里先不管。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>4.返回结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">PS F:\<span class="number">2</span><span class="number">-3</span>ciyuan\<span class="number">11</span>-data base-shujuk\<span class="number">3</span>-lianxi&gt; node .\<span class="number">7.</span>js</span><br><span class="line">数据库链接成功</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    _id: <span class="number">607</span>efd02f6c8d337e4f68018,</span><br><span class="line">    title: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    author: &#123; <span class="attr">_id</span>: <span class="number">607</span>efb8b87c1963274926984, <span class="attr">name</span>: <span class="string">&#x27;shiYan1&#x27;</span>, <span class="attr">__v</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    __v: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>





</li>
</ul>
<p>7.这样就完成了：</p>
<ul>
<li>1.完成了，在查询b集合里的x文档信息的时候</li>
<li>2.把b.x里面关联了a.y的文档信息，也拿过来；</li>
</ul>
<p>8.集合关联主要是两步：</p>
<ul>
<li>1.关联</li>
<li>2.查询</li>
</ul>
<hr>
<p>下一页</p>
<h1 id="X-题注"><a href="#X-题注" class="headerlink" title="X. 题注"></a>X. 题注</h1><p>[^1]:global 英 [ˈɡləʊbl]   美 [ˈɡloʊbl]  adj.全球的;全世界的;整体的;全面的;总括的<br>派生词： globally adv.</p>
<p>[^2]:exports 英 [ɪkˈspɔːts]   美 [ɪkˈspɔːrts]  v.出口;输出;传播，输出(思想或活动);移出;调出<br>n.出口;输出;出口产品;输出品<br>export的第三人称单数和复数</p>
<p>[^3]:require 英 [rɪˈkwaɪə(r)]   美 [rɪˈkwaɪər] v. 需要;依靠;依赖;使做(某事);使拥有(某物);(尤指根据法规)规定<br>[^4]:join  英 [dʒɔɪn]   美 [dʒɔɪn]  v.连接;接合;联结;结合;联合;汇合;成为…的一员;参加;加入<br/>n.结合;连接;接合点<br>[^5]:desk英 [desk]   美 [desk]  n.书桌;写字台;办公桌;(机场、旅馆等的)问讯台，服务台，工作台;(报社、电视台等的)办公处，部，室，组<br>[^6]:task英  [tɑːsk]   美 [tæsk]  n.(尤指艰巨或令人厌烦的)任务，工作;(尤指语言教学中旨在帮助达到某一学习目的的)活动  v.交给某人(任务);派给某人(工作)<br>[^7]:pipe英 [paɪp]   美 [paɪp]  n.管子;管道;烟斗;烟袋;管乐器  v.用管道输送;用线路系统传输(或传送);用管乐器演奏(尤指迎宾曲)<br>[^8]:collapse英 [kəˈlæps]   美 [kəˈlæps]  <br />v.(突然)倒塌，坍塌;(尤指因病重而)倒下，昏倒，晕倒;(尤指工作劳累后)坐下，躺下放松<br/>n.突然失败，倒闭，崩溃(如机构、生意或行动的);(突然的)倒塌，塌陷，垮掉;病倒;(因病或体弱的)昏倒，晕倒<br>[^9]:gulp  英 [ɡʌlp]   美 [ɡʌlp] <br/>  v.狼吞虎咽;大口吞咽;匆匆吞下;(因害怕或惊讶而)倒吸气;深呼吸;喘大气;大口大口地吸气 <br/> n.吞饮的量;一大口;吞咽;吸入</p>
<p>[^10]:include  英 [ɪnˈkluːd]   美 [ɪnˈkluːd]   v.包括;包含;使成为…的一部分</p>
<p>[^11]:babel 英 [ˈbeɪbl]   美 [ˈbeɪbl]  n.嘈杂声(尤指讲多种语言)</p>
<p>[^12]:query  英 [ˈkwɪəri]   美 [ˈkwɪri]  n.疑问;询问;问号 v.怀疑;表示疑虑;询问</p>
<p>[^13]:mongoose 英 [ˈmɒŋɡuːs]   美 [ˈmɑːŋɡuːs]  n.獴(居于热带地区，捕食蛇、鼠等)<br>[^14]:schema 英 [ˈskiːmə]   美 [ˈskiːmə]  n.(计划或理论的)提要，纲要<br>[^15]:create  英 [kriˈeɪt]   美 [kriˈeɪt]  v.创造;创作;创建;造成，引起，产生(感觉或印象);授予;册封</p>
<p>[^16]:sort 英 [sɔːt]   美 [sɔːrt]  n.种类;类别;品种;某一种(或某一类)人;分类;排序 v.整理;把…分类;妥善处理;安排妥当<br>[^17]:many  英 [ˈmeni]   美 [ˈmeni]  det./pron.许多(与复数名词及动词连用，尤用于否定句或正式用语，表示大量;也用于疑问句以询问数字大小，并可与as、so 和 too 连用);(与复数动词连用)大多数人;(与单数名词及动词连用)许多，大量  adj.许多;多的</p>
<p>[^18]:modified  英 [ˈmɒdɪfaɪd]   美 [ˈmɑːdɪfaɪd]  v.调整;稍作修改;使更适合;缓和;使温和;修饰<br/>modify的过去分词和过去式<br>[^19]:enumerate 英 [ɪˈnjuːməreɪt]   美 [ɪˈnuːməreɪt]  v.列举;枚举<br>[^20]:populate英 [ˈpɒpjuleɪt]   美 [ˈpɑːpjuleɪt]  v.居住于;生活于;构成…的人口;迁移;移居;殖民于;(给文件)增添数据，输入数据</p>
<p>[^21]:resolve英 [rɪˈzɒlv]   美 [rɪˈzɑːlv]  v.解决(问题或困难);决心;决定;作出决定;作出决议;表决n.决心;坚定的信念<br>[^22]:reject英 [rɪˈdʒekt , ˈriːdʒekt]  美 [rɪˈdʒekt , ˈriːdʒekt]  v.拒绝接受;不予考虑;拒收;不录用;拒绝接纳;(因质量差)不用，不出售，不出版n.废品;次品;不合格者;被剔除者;被拒收者</p>
<p>[^23]:manager英 [ˈmænɪdʒə(r)]   美 [ˈmænɪdʒər]  n.(企业、店铺等的)经理，经营者，老板;(演员、作曲家等的)经理人，经纪人，个人经理;(运动队的)主教练<br>[^24]:registry英 [ˈredʒɪstri]   美 [ˈredʒɪstri]  n.登记处;注册处<br>[^25]:dependencies 英 [dɪˈpɛndənsiz]   美 [dɪˈpɛndənsiz]  n.(尤指不正常或不必要的)依靠，依赖;附属国;附属地 ; dependency的复数</p>
<p>[^26]:model英 [ˈmɒdl]   美 [ˈmɑːdl]  n.依照实物按比例制成的)模型;样式;设计;型;(用于示范运作方法等的)模型v.做模特儿;(向顾客)穿戴展示;将…做成模型;复制<br>[^27]:host英 [həʊst]   美 [hoʊst]  n.主人;东道主;主办国(或城市、机构);(电视或广播的)节目主持人v.主办，主持(活动);主持(电视或广播节目等);作为主人组织(聚会);做东</p>
<h3 id="末尾"><a href="#末尾" class="headerlink" title="末尾"></a>末尾</h3>]]></content>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>15.1-node.js</title>
    <url>/1-(0~50)/15.1-nodeJS/</url>
    <content><![CDATA[<h1 id="4-数据库"><a href="#4-数据库" class="headerlink" title="4. 数据库"></a>4. 数据库</h1><a id="more"></a>

<h2 id="10-案例：用户信息增删改查"><a href="#10-案例：用户信息增删改查" class="headerlink" title="10. 案例：用户信息增删改查"></a>10. 案例：用户信息增删改查</h2><p>搭建网站服务器，实现客户端与服务器端的通信<br>连接数据库，创建用户集合，向集合中插入文档<br>当用户访问/list时，将所有用户信息查询出来<br>将用户信息和表格HTML进行拼接并将拼接结果响应回客户端<br>当用户访问/add时，呈现表单页面，并实现添加用户信息功能<br>当用户访问/modify时，呈现修改页面，并实现修改用户信息功能<br>当用户访问/delete时，实现用户删除功能</p>
<h3 id="10-1-搭建网站服务器"><a href="#10-1-搭建网站服务器" class="headerlink" title="10.1 搭建网站服务器"></a>10.1 搭建网站服务器</h3><p>搭建网站服务器，实现客户端与服务器端的通信</p>
<p>1.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.搭建网站服务器，实现客户端与服务器端的通信</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.1 创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app = http.createServer();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.3 为服务器添加请求事件</span></span><br><span class="line">app.on(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.end(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.2 监听端口</span></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>



<h3 id="10-2-连接数据库"><a href="#10-2-连接数据库" class="headerlink" title="10.2 连接数据库"></a>10.2 连接数据库</h3><p>1.引入mongoose第三方模块。</p>
<ul>
<li><p>1.这里也许会疑问，目录下没有node_modules，能引入成功吗？</p>
</li>
<li><p>2.可以的，查找规则：</p>
<ul>
<li>当前目录没有</li>
<li>返回上级目录查找</li>
</ul>
</li>
<li><p>3.具体规则去看看笔记：15-node.js-2-2.5;</p>
</li>
<li><p>1.然而，我过去看了后，没这一点</p>
</li>
<li><p>4.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.引入mongoose模块</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>2.数据库链接</p>
<ul>
<li><p>1.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.1 数据库链接</span></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost:27017/ql_playground&#x27;</span>, &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>, <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;数据库链接成功&#x27;</span>))</span><br><span class="line">    .catch(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;数据库链接失败&#x27;</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.运行代码，成功</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">PS F:\<span class="number">2</span><span class="number">-3</span>ciyuan\<span class="number">11</span>-data base-shujuk\<span class="number">3</span>-lianxi\<span class="number">4</span>-案例：User&gt; nodemon .\app.js</span><br><span class="line">[nodemon] <span class="number">2.0</span><span class="number">.7</span></span><br><span class="line">[nodemon] to restart at any time, enter <span class="string">`rs`</span></span><br><span class="line">[nodemon] watching path(s): *.*</span><br><span class="line">[nodemon] watching extensions: js,mjs,json</span><br><span class="line">[nodemon] starting <span class="string">`node .\app.js`</span></span><br><span class="line">数据库链接成功</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>2.1 创建用户集合规则</p>
<ul>
<li><p>1.代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.2 创建用户集合规则</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        required: <span class="literal">true</span>,</span><br><span class="line">        maxlength: <span class="number">15</span></span><br><span class="line">    &#125;,</span><br><span class="line">    age: &#123;</span><br><span class="line">        type: <span class="built_in">Number</span>,</span><br><span class="line">        min: <span class="number">12</span></span><br><span class="line">    &#125;,</span><br><span class="line">    password: <span class="built_in">String</span>,</span><br><span class="line">    email: <span class="built_in">String</span>,</span><br><span class="line">    hobbies: [<span class="built_in">String</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>2.2 创建用户集合</p>
<ul>
<li><p>1.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.3 创建用户集合</span></span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">&#x27;User&#x27;</span>, user);</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>2.3 在命令行工具那边导入user.json数据</p>
<ul>
<li><p>1.命令：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">mongoimport -d playground -c<span class="built_in"> users </span>--file <span class="built_in">..</span>/user.json</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>2.4 完毕</p>
<h3 id="10-3-当用户访问-list时，将所有用户信息查询出来"><a href="#10-3-当用户访问-list时，将所有用户信息查询出来" class="headerlink" title="10.3 当用户访问/list时，将所有用户信息查询出来"></a>10.3 当用户访问/list时，将所有用户信息查询出来</h3><p>1.实现路由功能</p>
<p>2.呈现用户列表页面</p>
<p>3.从数据库中查询用户信息，将用户信息展示在列表中</p>
<h4 id="1-实现路由功能"><a href="#1-实现路由功能" class="headerlink" title="1.实现路由功能"></a>1.实现路由功能</h4><p>1.要实现路由功能</p>
<ul>
<li>1.首先要获得用户的请求方式，请求地址。</li>
<li>2.对请求方式，请求地址判断。</li>
<li>3.这个路由功能就实现了（？？？</li>
</ul>
<h5 id="2-请求地址："><a href="#2-请求地址：" class="headerlink" title="2.请求地址："></a>2.请求地址：</h5><ul>
<li><p>1.代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.获取请求方式</span></span><br><span class="line"><span class="keyword">const</span> method = req.method;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h5 id="3-请求路径："><a href="#3-请求路径：" class="headerlink" title="3.请求路径："></a>3.请求路径：</h5><ul>
<li><p>1.先引入url</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4.1 引入url</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.然后</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4.获取请求路径，先要引入url模块</span></span><br><span class="line"><span class="keyword">const</span> &#123; pathname &#125; = url.parse(req.url)</span><br></pre></td></tr></table></figure>

<ul>
<li>const { pathname }的写法，是对象解构的写法<ul>
<li>笔记：25.4\A1\A1.2\4.2</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="4-判断请求方式"><a href="#4-判断请求方式" class="headerlink" title="4. 判断请求方式"></a>4. 判断请求方式</h5><p>1.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 10.3.1.4</span></span><br><span class="line">   <span class="keyword">if</span> (method == <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-呈现用户列表"><a href="#2-呈现用户列表" class="headerlink" title="2.呈现用户列表"></a>2.呈现用户列表</h4><p>1.1 因为需求：呈现用户列表页面</p>
<ul>
<li><p>在地址栏里面的请求，都是get</p>
</li>
<li><p>1.所以在get里面添加代码：把\list的判断，写在get里面</p>
<ul>
<li>get一般是数据的请求，页面的成立等</li>
<li>post一般是功能，删除，注册，添加修改数据；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list = <span class="string">`&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">        &lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;</span></span><br><span class="line"><span class="string">            &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;title&gt;用户列表&lt;/title&gt;</span></span><br><span class="line"><span class="string">            &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;h6&gt;</span></span><br><span class="line"><span class="string">                    &lt;a href=&quot;add.html&quot; class=&quot;btn btn-primary&quot;&gt;添加用户&lt;/a&gt;</span></span><br><span class="line"><span class="string">                &lt;/h6&gt;</span></span><br><span class="line"><span class="string">                &lt;table class=&quot;table table-striped table-bordered&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;tr&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;用户名&lt;/td&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;年龄&lt;/td&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;爱好&lt;/td&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;邮箱&lt;/td&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;操作&lt;/td&gt;</span></span><br><span class="line"><span class="string">                    &lt;/tr&gt;</span></span><br><span class="line"><span class="string">                    &lt;tr&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;张三&lt;/td&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;20&lt;/td&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;</span></span><br><span class="line"><span class="string">                            &lt;span&gt;抽烟&lt;/span&gt;</span></span><br><span class="line"><span class="string">                            &lt;span&gt;喝酒&lt;/span&gt;</span></span><br><span class="line"><span class="string">                            &lt;span&gt;烫头&lt;/span&gt;</span></span><br><span class="line"><span class="string">                        &lt;/td&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;zhangsan@itcast.cn&lt;/td&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;</span></span><br><span class="line"><span class="string">                            &lt;a href=&quot;&quot; class=&quot;btn btn-danger btn-xs&quot;&gt;删除&lt;/a&gt;</span></span><br><span class="line"><span class="string">                            &lt;a href=&quot;&quot; class=&quot;btn btn-success btn-xs&quot;&gt;修改&lt;/a&gt;</span></span><br><span class="line"><span class="string">                        &lt;/td&gt;</span></span><br><span class="line"><span class="string">                    &lt;/tr&gt;</span></span><br><span class="line"><span class="string">                &lt;/table&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;`</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.注意里面是模板字符串，是反引号，是1左边那个；</p>
</li>
</ul>
<p>1.2 这样，路径：<a href="http://localhost:3000/list">http://localhost:3000/list</a></p>
<ul>
<li>能呈现出html页面</li>
<li>不过我觉得肯定不是这样写，这因为是为了学习，给展示的原始写法。、</li>
</ul>
<h4 id="3-查询用户信息"><a href="#3-查询用户信息" class="headerlink" title="3.查询用户信息"></a>3.查询用户信息</h4><p>1.从数据库中查询用户信息，将用户信息展示在列表中</p>
<p>2.代码：</p>
<ul>
<li><p>find里面什么都不写，默认查找全部信息</p>
<p><code>User.find().then((result) =&gt; console.log(result))</code></p>
</li>
<li><p>视频说当前我们不使用.then方式，使用异步函数的方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 6.查询用户信息</span></span><br><span class="line"><span class="comment">// 6.1 这里没有用.then，而是用的异步函数语法</span></span><br><span class="line"><span class="keyword">let</span> user_find = <span class="keyword">await</span> User.find()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>2.1 因为是写在get里面的，所以要在网页那边请求一下，才会打印出数据库user集合的文档</p>
<p>3.如何把数据库里的数据，与，html链接呢？</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=60&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=60&amp;spm_id_from=pageDriver</a></p>
<p>09.48</p>
</blockquote>
<ul>
<li>1.<code>$&#123;&#125;</code>是模板字符串里面特有的写法</li>
<li>item是数组的每一个值，而这里是对象。所以item.name等等可以读取数据</li>
</ul>
<p>3.1 单独说爱好，因为这里是数组。</p>
<ul>
<li><p>1.在用户集合规则里面，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hobbies: [<span class="built_in">String</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.而且数组里面的值，要显示在span当中</p>
<p><img src="../../img/15/45.png" alt="45"></p>
<ul>
<li>有多少个爱好，就要生成多少个span。</li>
<li>这又需要循环。（视频说的，这个怎么用循环做？</li>
</ul>
</li>
<li><p>3.然后说又要拆分：（后面绝对有新的办法，因为这种办法太繁琐）</p>
<p><img src="../../img/15/46.png" alt="46"></p>
</li>
</ul>
<p>3.2 拆分后的样子：</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=60&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=60&amp;spm_id_from=pageDriver</a></p>
<p>14:46</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对数据进行循环操作</span></span><br><span class="line">        user_find.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            list += <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;tr&gt;</span></span><br><span class="line"><span class="string">                &lt;td&gt;<span class="subst">$&#123;item.name&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td&gt;<span class="subst">$&#123;item.age&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td&gt;                </span></span><br><span class="line"><span class="string">            `</span>;</span><br><span class="line"></span><br><span class="line">            item.hobbies.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                list += <span class="string">`&lt;span&gt;<span class="subst">$&#123;item&#125;</span>&lt;/span&gt;`</span>;</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            list += <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td&gt;<span class="subst">$&#123;item.email&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td&gt;</span></span><br><span class="line"><span class="string">                    &lt;a href=&quot;&quot; class=&quot;btn btn-danger btn-xs&quot;&gt;删除&lt;/a&gt;</span></span><br><span class="line"><span class="string">                    &lt;a href=&quot;&quot; class=&quot;btn btn-success btn-xs&quot;&gt;修改&lt;/a&gt;</span></span><br><span class="line"><span class="string">                &lt;/td&gt;</span></span><br><span class="line"><span class="string">            &lt;/tr&gt;</span></span><br><span class="line"><span class="string">            `</span>;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>



<ol start="4">
<li>到这里，列表展示用户的信息就做好了</li>
</ol>
<h3 id="10-4-添加用户功能"><a href="#10-4-添加用户功能" class="headerlink" title="10.4 添加用户功能"></a>10.4 添加用户功能</h3><h4 id="1-先加入add页面的请求；"><a href="#1-先加入add页面的请求；" class="headerlink" title="1. 先加入add页面的请求；"></a>1. 先加入add页面的请求；</h4><p>1.当用户访问/add时，呈现表单页面，并实现添加用户信息功能</p>
<p>1.1 因为请求是在get里面的，所以要在里面添加判断</p>
<p>1.2 代码：</p>
<img src="../../img/15/47.png" alt="47" style="zoom:80%;" />



<p>2.然后在list的模块标签里面，把按钮的href改为<code>/add</code></p>
<img src="../../img/15/48.png" alt="48" style="zoom:80%;" />



<h4 id="2-准备功能实现"><a href="#2-准备功能实现" class="headerlink" title="2. 准备功能实现"></a>2. 准备功能实现</h4><p>1.在add的模块标签里面，给表单，添加<code>method=&quot;post&quot;</code></p>
<img src="../../img/15/49.png" alt="49" style="zoom:80%;" />



<p>2.既然要把表单的信息传输给服务器，那是不是要有个名字</p>
<ul>
<li>最好与数据库里面的名字相同</li>
</ul>
<p>2.1 name，password，email那些；</p>
<p>3.当所有信息填写完毕，就会点击按钮提交</p>
<ul>
<li>这个时候，需要有个路由去处理这个事件；</li>
</ul>
<p>3.1 在post请求那里添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (method == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 用户添加功能</span></span><br><span class="line">        <span class="keyword">if</span> (pathname == <span class="string">&#x27;/add&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>当请求地址是add的时候，会有这个事件处理；<ul>
<li>不写个前置条件。不知道在哪里处理；</li>
</ul>
</li>
</ul>
<p>4.接受用户提交的信息，将用户提交的信息添加到数据库中。</p>
<p>4.1 服务器接受请求事件是什么？.on+req=req.on</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接受用户提交的信息</span></span><br><span class="line">req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>4.2 因为post请求，是一步一步做的；所以要用到循环用的+=</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (method == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 用户添加功能</span></span><br><span class="line">        <span class="keyword">if</span> (pathname == <span class="string">&#x27;/add&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 接受用户提交的信息</span></span><br><span class="line">            <span class="keyword">let</span> formData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">param</span> =&gt;</span> &#123;</span><br><span class="line">                formData += param;</span><br><span class="line">            &#125;)</span><br><span class="line">            req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(formData)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 将用户提交的信息添加到数据库中。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>1.打印出的结果是：</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">数据库链接成功</span><br><span class="line">name=123<span class="variable">&amp;password</span>=321<span class="variable">&amp;age</span>=123<span class="variable">&amp;email</span>=3213%40qq.com<span class="variable">&amp;hobbies</span>=<span class="name">%E6</span>%95<span class="name">%B2</span><span class="name">%E4</span><span class="name">%BB</span><span class="name">%A3</span><span class="name">%E7</span><span class="name">%A0</span>%81</span><br></pre></td></tr></table></figure>

<ul>
<li>1.是字符串类型</li>
<li>2.我们需要对象的样式</li>
</ul>
</li>
<li><p>2.修改成对象的样式：</p>
<ul>
<li><p>1.引入querystring</p>
</li>
<li><p><code>const querystring = require(&#39;querystring&#39;);</code>.</p>
</li>
<li><pre><code class="js">req.on(<span class="string">'end'</span>, () =&gt; &#123;
    <span class="built_in">console</span>.log(querystring.parse(formData));
&#125;)
&lt;!--hexoPostRenderEscape:&lt;figure class="highlight csharp"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  + &lt;span class="number"&gt;2.&lt;/span&gt;在&lt;span class="number"&gt;15&lt;/span&gt;里面，post参数有这里笔记；&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="meta"&gt;#### 3. 添加到数据库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="number"&gt;1.&lt;/span&gt;将用户提交的信息添加到数据库中&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;+ 上面已经能获取表单里面，填写的东西了&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;+ 现在把它弄到数据库里面&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="number"&gt;2.&lt;/span&gt;代码：&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;```js&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;else&lt;/span&gt; &lt;span class="keyword"&gt;if&lt;/span&gt; (method == &lt;span class="string"&gt;&amp;#x27;POST&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;        &lt;span class="comment"&gt;// 用户添加功能&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;        &lt;span class="keyword"&gt;if&lt;/span&gt; (pathname == &lt;span class="string"&gt;&amp;#x27;/add&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;            &lt;span class="comment"&gt;// 接受用户提交的信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;            &lt;span class="keyword"&gt;let&lt;/span&gt; formData = &lt;span class="string"&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;            req.&lt;span class="keyword"&gt;on&lt;/span&gt;(&lt;span class="string"&gt;&amp;#x27;data&amp;#x27;&lt;/span&gt;, param =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;                formData += param;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;            req.&lt;span class="keyword"&gt;on&lt;/span&gt;(&lt;span class="string"&gt;&amp;#x27;end&amp;#x27;&lt;/span&gt;, &lt;span class="keyword"&gt;async&lt;/span&gt; () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;                &lt;span class="keyword"&gt;let&lt;/span&gt; user_post = querystring.parse(formData);&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;            &lt;span class="comment"&gt;// 将用户提交的信息添加到数据库中。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;            &lt;span class="keyword"&gt;await&lt;/span&gt; User_collections.create(user_post);&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;            &lt;span class="comment"&gt;// 301代表重定向&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;            &lt;span class="comment"&gt;// location跳转地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;            res.weiteHead(&lt;span class="number"&gt;301&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;                Location: &lt;span class="string"&gt;&amp;#x27;/list&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;            res.end();&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;


</code></pre>
</li>
</ul>
</li>
</ul>
<ul>
<li>1.用await把数据库里的User集合插入文档设定<ul>
<li>这样就不用写回调函数了</li>
<li>但记得在前面加上async</li>
</ul>
</li>
<li>2.<code>res.weiteHead</code>有待查阅；</li>
</ul>
<h4 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h4><p>1.当用户在地址栏里面访问/add的时候</p>
<ul>
<li>我们呈递了添加用户的表单界面</li>
</ul>
<p>2.接下来</p>
<p>算了，不写了；</p>
<p>3.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @ts-nocheck</span></span><br><span class="line"><span class="comment">// 1.搭建网站服务器，实现客户端与服务器端的通信</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="comment">// 2.引入mongoose模块</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="comment">// 4.1 引入url</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.1 数据库链接</span></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost:27017/playground&#x27;</span>, &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>, <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;数据库链接成功&#x27;</span>))</span><br><span class="line">    .catch(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;数据库链接失败&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.2 创建用户集合规则</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        required: <span class="literal">true</span>,</span><br><span class="line">        maxlength: <span class="number">15</span></span><br><span class="line">    &#125;,</span><br><span class="line">    age: &#123;</span><br><span class="line">        type: <span class="built_in">Number</span>,</span><br><span class="line">        min: <span class="number">12</span></span><br><span class="line">    &#125;,</span><br><span class="line">    password: <span class="built_in">String</span>,</span><br><span class="line">    email: <span class="built_in">String</span>,</span><br><span class="line">    hobbies: [<span class="built_in">String</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.3 创建用户集合</span></span><br><span class="line"><span class="keyword">const</span> User_collections = mongoose.model(<span class="string">&#x27;User&#x27;</span>, user);</span><br><span class="line"><span class="comment">// 2.4 在命令行工具那边导入user.json数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.1 创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app = http.createServer();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.3 为服务器添加请求事件</span></span><br><span class="line">app.on(<span class="string">&#x27;request&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.获取请求方式</span></span><br><span class="line">    <span class="keyword">const</span> method = req.method;</span><br><span class="line">    <span class="comment">// 4.获取请求路径，先要引入url模块</span></span><br><span class="line">    <span class="keyword">const</span> &#123; pathname &#125; = url.parse(req.url)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 10.3.1.4</span></span><br><span class="line">    <span class="keyword">if</span> (method == <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pathname == <span class="string">&#x27;/list&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 6.查询用户信息</span></span><br><span class="line">            <span class="comment">// 6.1 这里没有用.then，而是用的异步函数语法</span></span><br><span class="line">            <span class="keyword">let</span> user_find = <span class="keyword">await</span> User_collections.find();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5.1 10.3.1.4-1.1</span></span><br><span class="line">            <span class="comment">// html字符串</span></span><br><span class="line">            <span class="keyword">let</span> list = <span class="string">`&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">        &lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;</span></span><br><span class="line"><span class="string">            &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;title&gt;用户列表&lt;/title&gt;</span></span><br><span class="line"><span class="string">            &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;h6&gt;</span></span><br><span class="line"><span class="string">                    &lt;a href=&quot;/add&quot; class=&quot;btn btn-primary&quot;&gt;添加用户&lt;/a&gt;</span></span><br><span class="line"><span class="string">                &lt;/h6&gt;</span></span><br><span class="line"><span class="string">                &lt;table class=&quot;table table-striped table-bordered&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;tr&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;用户名&lt;/td&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;年龄&lt;/td&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;爱好&lt;/td&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;邮箱&lt;/td&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;操作&lt;/td&gt;</span></span><br><span class="line"><span class="string">                    &lt;/tr&gt;`</span>;</span><br><span class="line">            <span class="comment">// 对数据进行循环操作</span></span><br><span class="line">            user_find.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                list += <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;tr&gt;</span></span><br><span class="line"><span class="string">                &lt;td&gt;<span class="subst">$&#123;item.name&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td&gt;<span class="subst">$&#123;item.age&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td&gt;                </span></span><br><span class="line"><span class="string">            `</span>;</span><br><span class="line"></span><br><span class="line">                item.hobbies.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                    list += <span class="string">`&lt;span&gt;<span class="subst">$&#123;item&#125;</span>&lt;/span&gt;`</span>;</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">                list += <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td&gt;<span class="subst">$&#123;item.email&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td&gt;</span></span><br><span class="line"><span class="string">                    &lt;a href=&quot;&quot; class=&quot;btn btn-danger btn-xs&quot;&gt;删除&lt;/a&gt;</span></span><br><span class="line"><span class="string">                    &lt;a href=&quot;&quot; class=&quot;btn btn-success btn-xs&quot;&gt;修改&lt;/a&gt;</span></span><br><span class="line"><span class="string">                &lt;/td&gt;</span></span><br><span class="line"><span class="string">            &lt;/tr&gt;</span></span><br><span class="line"><span class="string">            `</span>;</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            list += <span class="string">`&lt;/table&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">    &lt;/html&gt;`</span>;</span><br><span class="line">            res.end(list)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pathname == <span class="string">&#x27;/add&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> add = <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;用户列表&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;h3&gt;添加用户&lt;/h3&gt;</span></span><br><span class="line"><span class="string">        &lt;form method=&quot;post&quot; action=&quot;/add&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;form-group&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;label&gt;用户名&lt;/label&gt;</span></span><br><span class="line"><span class="string">                &lt;input name=&quot;name&quot; type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;请填写用户名&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;form-group&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;label&gt;密码&lt;/label&gt;</span></span><br><span class="line"><span class="string">                &lt;input name=&quot;password&quot; type=&quot;password&quot; class=&quot;form-control&quot; placeholder=&quot;请输入密码&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;form-group&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;label&gt;年龄&lt;/label&gt;</span></span><br><span class="line"><span class="string">                &lt;input name=&quot;age&quot; type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;请填写邮箱&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;form-group&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;label&gt;邮箱&lt;/label&gt;</span></span><br><span class="line"><span class="string">                &lt;input name=&quot;email&quot; type=&quot;email&quot; class=&quot;form-control&quot; placeholder=&quot;请填写邮箱&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;form-group&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;label&gt;请选择爱好&lt;/label&gt;</span></span><br><span class="line"><span class="string">                &lt;div&gt;</span></span><br><span class="line"><span class="string">                    &lt;label class=&quot;checkbox-inline&quot;&gt;</span></span><br><span class="line"><span class="string">                        &lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; value=&quot;游戏&quot;&gt; 游戏</span></span><br><span class="line"><span class="string">                    &lt;/label&gt;</span></span><br><span class="line"><span class="string">                    &lt;label class=&quot;checkbox-inline&quot;&gt;</span></span><br><span class="line"><span class="string">                        &lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; value=&quot;篮球&quot;&gt; 篮球</span></span><br><span class="line"><span class="string">                    &lt;/label&gt;</span></span><br><span class="line"><span class="string">                    &lt;label class=&quot;checkbox-inline&quot;&gt;</span></span><br><span class="line"><span class="string">                        &lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; value=&quot;游泳&quot;&gt; 游泳</span></span><br><span class="line"><span class="string">                    &lt;/label&gt;</span></span><br><span class="line"><span class="string">                    &lt;label class=&quot;checkbox-inline&quot;&gt;</span></span><br><span class="line"><span class="string">                        &lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; value=&quot;敲代码&quot;&gt; 敲代码</span></span><br><span class="line"><span class="string">                    &lt;/label&gt;</span></span><br><span class="line"><span class="string">                    &lt;label class=&quot;checkbox-inline&quot;&gt;</span></span><br><span class="line"><span class="string">                        &lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; value=&quot;二次元&quot;&gt; 二次元</span></span><br><span class="line"><span class="string">                    &lt;/label&gt;</span></span><br><span class="line"><span class="string">                    &lt;label class=&quot;checkbox-inline&quot;&gt;</span></span><br><span class="line"><span class="string">                        &lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; value=&quot;DL&quot;&gt; DL</span></span><br><span class="line"><span class="string">                    &lt;/label&gt;</span></span><br><span class="line"><span class="string">                    &lt;label class=&quot;checkbox-inline&quot;&gt;</span></span><br><span class="line"><span class="string">                        &lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; value=&quot;P站&quot;&gt; P站</span></span><br><span class="line"><span class="string">                    &lt;/label&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;添加用户&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">            `</span></span><br><span class="line">            res.end(add)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (method == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 用户添加功能</span></span><br><span class="line">        <span class="keyword">if</span> (pathname == <span class="string">&#x27;/add&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 接受用户提交的信息</span></span><br><span class="line">            <span class="keyword">let</span> formData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">param</span> =&gt;</span> &#123;</span><br><span class="line">                formData += param;</span><br><span class="line">            &#125;)</span><br><span class="line">            req.on(<span class="string">&#x27;end&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">                <span class="keyword">let</span> user_post = querystring.parse(formData);</span><br><span class="line">                <span class="comment">// 将用户提交的信息添加到数据库中。</span></span><br><span class="line">                <span class="keyword">await</span> User_collections.create(user_post);</span><br><span class="line">                <span class="comment">// 301代表重定向</span></span><br><span class="line">                <span class="comment">// location跳转地址</span></span><br><span class="line">                res.writeHead(<span class="number">301</span>, &#123;</span><br><span class="line">                    Location: <span class="string">&#x27;/list&#x27;</span></span><br><span class="line">                &#125;);</span><br><span class="line">                res.end();</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.2 监听端口</span></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>



<h3 id="10-5-修改用户"><a href="#10-5-修改用户" class="headerlink" title="10.5 修改用户"></a>10.5 修改用户</h3><p>1.当用户访问/modify时，呈现修改页面，并实现修改用户信息功能</p>
<ul>
<li><p>1.增加页面路由，呈现页面</p>
<ul>
<li><p>1.在点击修改按钮的时候，将用户ID传递到当前页面</p>
</li>
<li><p>2.从数据库中查询当前用户信息，将用户信息展示到页面中</p>
</li>
</ul>
</li>
<li><p>2.实现用户修改功能</p>
</li>
</ul>
<p>2.先去相应的href修改：</p>
<p><img src="../../img/15/50.png" alt="50"></p>
<p>3.增加路由</p>
<ul>
<li><p>1.因为访问，也是从地址栏上访问的。所以从get</p>
<p><img src="../../img/15/51.png" alt="51"></p>
</li>
</ul>
<p>4.查询要被修改的数据</p>
<ul>
<li><p>1.要通过ID</p>
<p><code>const &#123; pathname, query &#125; = url.parse(req.url, true);</code></p>
</li>
<li><p>2.接着去拿id</p>
<p><code>let user_modify = await User_collections.find(&#123; _id: query.id &#125;);</code></p>
</li>
<li><p>3.打印测试一下；</p>
<p>发现是数组</p>
<p>改为findOne；</p>
<p>是对象了；</p>
</li>
</ul>
<p>5.接下来要把这个对象与html字符串进行拼接？拼接么？</p>
<p>又要分开：</p>
<ul>
<li>1.在模板字符串里面，改input里面的value的值<ul>
<li><code>value=&quot;$&#123;user.age&#125;&quot;</code></li>
<li><code>value=&quot;$&#123;user.name&#125;&quot;</code></li>
<li><code>value=&quot;$&#123;user.email&#125;&quot;</code></li>
<li>等等</li>
</ul>
</li>
<li>2.爱好要单独说；</li>
<li>3.刷新页面，修改用户的页面，会展示出被修改用户的信息；</li>
</ul>
<p>5.1 接下来，看爱好要怎么展示</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=62&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=62&amp;spm_id_from=pageDriver</a></p>
<p>8:49</p>
</blockquote>
<ul>
<li><p>1.先写一个爱好的数组：</p>
<p><code>let hobbies_modify = [&#39;游戏&#39;, &#39;篮球&#39;, &#39;游泳&#39;, &#39;敲代码&#39;, &#39;二次元&#39;, &#39;DL&#39;, &#39;P站&#39;]</code></p>
</li>
<li><p>2.然后又要拆分，中间写一个循环。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hobbies_modify.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 判断当前循环项在不在用户的爱好数据组</span></span><br><span class="line">                <span class="keyword">let</span> isHobby = user_modify.hobbies.includes(item);</span><br><span class="line">                <span class="keyword">if</span> (isHobby) &#123;</span><br><span class="line">                    modify += <span class="string">`</span></span><br><span class="line"><span class="string">                    &lt;label class=&quot;checkbox-inline&quot;&gt;</span></span><br><span class="line"><span class="string">                        &lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; value=&quot;<span class="subst">$&#123;item&#125;</span>&quot; checked&gt; <span class="subst">$&#123;item&#125;</span></span></span><br><span class="line"><span class="string">                    &lt;/label&gt;</span></span><br><span class="line"><span class="string">                    `</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    modify += <span class="string">`</span></span><br><span class="line"><span class="string">                    &lt;label class=&quot;checkbox-inline&quot;&gt;</span></span><br><span class="line"><span class="string">                        &lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; value=&quot;<span class="subst">$&#123;item&#125;</span>&quot;&gt; <span class="subst">$&#123;item&#125;</span></span></span><br><span class="line"><span class="string">                    &lt;/label&gt;</span></span><br><span class="line"><span class="string">                    `</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure>



<p>5.2 解析：<code>let isHobby = user_modify.hobbies.includes(item);</code></p>
<ul>
<li>1.<code>user_modify.hobbies</code>就是一个数组</li>
<li>2.因为<code>user_modify</code>，已经是一个根据id获取文档对象的常量了<ul>
<li>里面的hobbies也是一个数组。</li>
</ul>
</li>
</ul>
<h4 id="2-实现用户修改功能"><a href="#2-实现用户修改功能" class="headerlink" title="2. 实现用户修改功能"></a>2. 实现用户修改功能</h4><h5 id="1-指定表单的提交地址，以及请求方式。"><a href="#1-指定表单的提交地址，以及请求方式。" class="headerlink" title="1.指定表单的提交地址，以及请求方式。"></a>1.指定表单的提交地址，以及请求方式。</h5><p>1.去修改action=“/modify”</p>
<p>2.在post添加新的路由；</p>
<ul>
<li><p>1.把post里面的add复制过来</p>
<p><img src="../../img/15/51.png" alt="51"></p>
</li>
</ul>
<ul>
<li><p>2.把插入，改为更新：</p>
<img src="../../img/15/52.png" alt="51" style="zoom:80%;" />



</li>
</ul>
<h5 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h5><p>0.接受客户端传递过来的修改信息，找到用户，将用户信息更改为最新的。</p>
<p>1.在页面上看url，是有id</p>
<p>2.但是，点击修改页面，就没有id了</p>
<ul>
<li>为什么呢？</li>
</ul>
<p>2.1 因为修改页面的跳转，是上面 get请求事件里面的第三个判断</p>
<ul>
<li><p>1.人家里面有代码</p>
<p><code>let user_modify = await User_collections.findOne(&#123; _id: query.id &#125;);</code></p>
</li>
</ul>
<p>2.2 那么修改页面也会去get请求里面，写一个响应码？</p>
<ul>
<li>看视频；</li>
</ul>
<p>3.先去模块字符串里面，修改action</p>
<p><code>&lt;form method=&quot;post&quot; action=&quot;/modify?id=$&#123;user_modify._id&#125;&quot;&gt;</code></p>
<p>3.1 然后去更新数据那里写好条件；</p>
<p><code>await User_collections.updateOne(&#123; _id: query.id &#125;, user_post);</code></p>
<p>4.练习：</p>
<p>我记得我练习的时候出错了；结果就不记得了；</p>
<ul>
<li><p>1.真的，稍微有什么不笔记，就记不住；</p>
</li>
<li><p>2.果然什么都要写啊，每一步的要写！连查资料都要写！</p>
</li>
</ul>
<hr>
<h3 id="10-6-删除用户"><a href="#10-6-删除用户" class="headerlink" title="10.6 删除用户"></a>10.6 删除用户</h3><h4 id="1-思路"><a href="#1-思路" class="headerlink" title="1. 思路"></a>1. 思路</h4><p>1.当用户点击，删除按钮的时候，要向服务器发送一个请求；</p>
<p>2.并且，把当前用户的id，作为请求参数，传递给服务器端；</p>
<p>3.作为服务器端讲，要为这个请求，去创建路由（响应）</p>
<ul>
<li>1.在这个路由中，要接收到，客户端，传递过来的id参数。</li>
<li>2.然后根据这个id，在数据库中找到，并且删除当前文档；</li>
</ul>
<h4 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h4><p>1.去修改href，在修改按钮那里；</p>
<p><img src="../../img/15.1/1.png" alt="1"></p>
<p>1.1 链接有了，接下来去创建路由</p>
<p>2.因为a标签的请求方式是get，所以我们去get里面，再加一个else if</p>
<p><img src="../../img/15.1/2.png" alt="2"></p>
<p>2.1 路由有了，在这个路由里面，我们要接收到，客户端传来的id参数</p>
<ul>
<li><p>1.id参数，被存储在query里面；</p>
<p><code>const &#123; pathname, query &#125; = url.parse(req.url, true);</code></p>
</li>
<li><p>2.可以先测试一下有没有id</p>
<p>有</p>
</li>
</ul>
<p>2.2 接下来，我们用这个id，在数据库中找到对应的文档，并删除</p>
<ul>
<li><p>1.首先，还记得删除文档的方法吗？</p>
<ul>
<li>1.~.findOneAndDelete</li>
</ul>
</li>
<li><p>2.写findOneAndDelete，里面的查询条件，可能是使用id的地方</p>
<ul>
<li><p>1.我就说，怎么写个删除文档的方法就链接到数据库了</p>
</li>
<li><p>2.因为这正是数据库的方法</p>
</li>
<li><p>3.找到用户集合</p>
<ul>
<li><p>1.它是变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.3 创建用户集合</span></span><br><span class="line"><span class="keyword">const</span> User_collections = mongoose.model(<span class="string">&#x27;User&#x27;</span>, user);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>4.然后使用删除文档方法：</p>
<p><code>User_collections.findOneAndDelete(&#123;&#125;)</code></p>
</li>
<li><p>5.里面的参数，就是查询条件，写入id；</p>
<ul>
<li>1.既然是数据库集合的方法，那么这里的查询，自然就是查询文档下面的_id数据的值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (pathname == <span class="string">&#x27;/remove&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// res.end(query.get(&#x27;id&#x27;));</span></span><br><span class="line">            <span class="keyword">let</span> remove_id = query.get(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">            User_collections.findOneAndDelete(&#123; remove_id &#125;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>6.</p>
</li>
</ul>
</li>
<li><p>3.如果停留在这一步，那么就要写.then了</p>
<ul>
<li>1.我记得数据库对象都是返回的Promise，所以有.then</li>
<li>2.我们可以加 await，不仅同步了，还能直接用返回值</li>
</ul>
<p><code>await User_collections.findOneAndDelete(&#123; remove_id &#125;);</code></p>
<ul>
<li><p>3.而前面的构造函数，要被转换成 异步函数。</p>
<p><code>app.on(&#39;request&#39;, async (req, res) =&gt; &#123;</code></p>
</li>
<li><p>4.在前面已经使用了几次await，早被转换</p>
</li>
</ul>
</li>
<li><p>4.</p>
</li>
</ul>
<h5 id="2-2-重定向"><a href="#2-2-重定向" class="headerlink" title="2.2 重定向"></a>2.2 重定向</h5><p>2.3 删除完了，我们要告诉浏览器；告诉用户；</p>
<ul>
<li><p>1.我们可以返回ok，返回删除完毕</p>
</li>
<li><p>2.但也可以重定向到页表页面；</p>
</li>
<li><p>3.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.writeHead(<span class="number">301</span>, &#123;</span><br><span class="line">    Location: <span class="string">&#x27;/list&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line">res.end();</span><br></pre></td></tr></table></figure>

<ul>
<li><p>res.writeHead是什么？从字面意思看：响应报头？</p>
</li>
<li><p>去15那边看看响应报头的相关信息；</p>
<ul>
<li>那边只说了，第一个参数是状态码</li>
</ul>
</li>
<li><p>看看文档：</p>
<blockquote>
<p><a href="http://nodejs.cn/api/http.html#http_request_write_chunk_encoding_callback">http://nodejs.cn/api/http.html#http_request_write_chunk_encoding_callback</a></p>
</blockquote>
</li>
</ul>
</li>
<li><p>4.文档错了啊；</p>
<p>应该是这个：<a href="http://nodejs.cn/api/http.html#http_response_writehead_statuscode_statusmessage_headers">http://nodejs.cn/api/http.html#http_response_writehead_statuscode_statusmessage_headers</a></p>
<p>语法：response.writeHead(statusCode[, statusMessage][, headers])</p>
</li>
<li><p>5.这里的headers，就是响应头，下面2.7的res.setHeader</p>
</li>
</ul>
<p>2.4 我们先解决完这个响应报头，再说结果</p>
<ul>
<li><p>1.encoding<br>英 [ɪnˈkəʊdɪŋ]   美 [ɪnˈkoʊdɪŋ]<br>v.把…译成电码(或密码);把…编码;把…译成外语<br>encode的现在分词</p>
</li>
<li><p>2.根据文档也看不出什么</p>
</li>
<li><p>3.百度：</p>
<ul>
<li><blockquote>
<p><a href="https://blog.csdn.net/qq_45515863/article/details/103213937">https://blog.csdn.net/qq_45515863/article/details/103213937</a></p>
</blockquote>
</li>
<li><p>1.根据此文档而言：</p>
<ul>
<li>第一个是HTTP状态码，如200(请求成功），404（未找到）等。</li>
<li>第二个是告诉浏览器发送的数据类型</li>
<li>第三个就是具体发送的是什么数据</li>
</ul>
</li>
<li><p>2.三个参数；</p>
<ul>
<li><code>response.writeHead(statusCode, [reasonPhrase], [headers])</code></li>
<li><code>res.writeHead(200,&#123;‘Content-Type’:‘text/html;charset=UTF8’&#125;);</code></li>
</ul>
</li>
<li><p>3.但明显都不对；</p>
</li>
</ul>
</li>
</ul>
<p>2.5 那么，我们百度 重定向，试试；</p>
<ul>
<li>1.光搜重定向，都是很老的文章</li>
</ul>
<p>2.6 响应报头重定向</p>
<ul>
<li><p>1.找到了一个关键点:  res.setHeader</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">&quot;request&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (req.url === <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">        res.statusCode = <span class="number">302</span>; </span><br><span class="line">        res.setHeader(<span class="string">&quot;Location&quot;</span>, <span class="string">&quot;https://www.baidu.com/&quot;</span>);</span><br><span class="line">        res.end();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;server is running on port 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>来源：<a href="https://www.jianshu.com/p/d8260cc0fa68">https://www.jianshu.com/p/d8260cc0fa68</a></p>
</li>
</ul>
<p>2.7 去文档查看 res.setHeader</p>
<ul>
<li>1.<a href="http://nodejs.cn/api/http.html#http_response_setheader_name_value">http://nodejs.cn/api/http.html#http_response_setheader_name_value</a></li>
<li>2.语法：response.setHeader(name, value)</li>
</ul>
<p>2.8 无果，搜索关键词：Location</p>
<ul>
<li><p>1.<a href="http://nodejs.cn/api/http.html#http_message_headers">http://nodejs.cn/api/http.html#http_message_headers</a></p>
</li>
<li><p>2.找到！</p>
</li>
<li><p>3.不过还是没啥作用</p>
</li>
<li><p>4.发现：</p>
<p><img src="../../img/15.1/3.png" alt="3"></p>
</li>
<li><p>5.如果结合2.7里面的语法：response.setHeader(name, value)</p>
<ul>
<li><p>1.难道这里的名称就是response.setHeader(name, value)的name吗？</p>
</li>
<li><p>2.我觉得完全有可能</p>
</li>
<li><p>3.因为：在2.6里面，在网上找到了一个东西：</p>
<p><code>res.setHeader(&quot;Location&quot;, &quot;https://www.baidu.com/&quot;);</code></p>
</li>
</ul>
</li>
</ul>
<p>2.9 打印res.writeHead，看有没有什么东西</p>
<ul>
<li><p>1.</p>
</li>
<li><p>2.返回结果：</p>
<p>返回了一堆东西，但是没有location</p>
</li>
</ul>
<h5 id="3-破案重定向"><a href="#3-破案重定向" class="headerlink" title="3.破案重定向"></a>3.破案重定向</h5><p>1.结果，在2.3那里破案了</p>
<p>2.为什么里面是个对象，而这个对象又有什么属性？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.writeHead(<span class="number">301</span>, &#123;</span><br><span class="line">    Location: <span class="string">&#x27;/list&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>3.答：里面是响应头对象header，更多信息来自：res.setHeader</p>
<blockquote>
<p>2.7 去文档查看 res.setHeader</p>
<ul>
<li>1.<a href="http://nodejs.cn/api/http.html#http_response_setheader_name_value">http://nodejs.cn/api/http.html#http_response_setheader_name_value</a></li>
<li>2.语法：response.setHeader(name, value)</li>
</ul>
</blockquote>
<p>4.而res.writeHead本身，则是在 2.2重定向-2.3里面；第一个参数状态码，是必写参数，</p>
<p>不写要报错；</p>
<h5 id="4-无效又不报错"><a href="#4-无效又不报错" class="headerlink" title="4. 无效又不报错"></a>4. 无效又不报错</h5><p>1.找到了</p>
<p><code>await User_collections.findOneAndDelete(&#123; remove_id &#125;);</code></p>
<p>2.改为：</p>
<p><code>await User_collections.findOneAndDelete(&#123; _id:remove_id &#125;);</code></p>
<ul>
<li>等等，为什么必须写这样的格式？</li>
<li>查询条件具体是怎样的</li>
</ul>
<p>2.1 为什么要把 键值对都写出来；</p>
<ul>
<li>1.是因为，没有具体指向哪一个对象，所以事先并不知道 键：_id</li>
<li>2.这种假设合理；</li>
</ul>
<p>3.但还是有3个，无法删除</p>
<ul>
<li>1.最后不知道怎么的，就只剩一个了；</li>
</ul>
<p>3.1 看代码无果，去F12看了看报文：</p>
<ul>
<li>1.发现了一个这个：Provisional headers are shown</li>
</ul>
<p><img src="../../img/15.1/4.png" alt="4"></p>
<hr>
<h3 id="10-7-案例优化"><a href="#10-7-案例优化" class="headerlink" title="10.7 案例优化"></a>10.7 案例优化</h3><blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=65&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=65&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.我们把所有的代码，都写在了同一个文件当中。</p>
<ul>
<li>1.在实际开发中，肯定不能这样</li>
<li>2.难以维护</li>
</ul>
<p>2.使用了模板字符串，进行了很多拼接</p>
<ul>
<li>1.模板字符串不报错，很容易出错</li>
<li>2.如果后面，要修改html，如何修改？修改起来很麻烦</li>
</ul>
<h4 id="1-模块开发"><a href="#1-模块开发" class="headerlink" title="1. 模块开发"></a>1. 模块开发</h4><h5 id="1-0-分离数据库"><a href="#1-0-分离数据库" class="headerlink" title="1.0 分离数据库"></a>1.0 分离数据库</h5><p>1.在js中，我们要采用模块化，开发方式。</p>
<p>2.要根据功能，分离到不同的模块里去。</p>
<p>3.像数据库的代码，至少不能和服务器写在一起se；</p>
<p>4.视频里面说，他们一般在文件夹下面会创建一个叫：model的文件夹</p>
<ul>
<li>用来放数据库的操作</li>
<li>我个人肯定还不习惯；2021-4-24 21:34:43</li>
</ul>
<p>5.然后他在model文件下，创建了index.js</p>
<ul>
<li>就只放了，数据库链接的代码</li>
</ul>
<p>6.接着创建了user.js</p>
<ul>
<li>只放了，创建集合规则，与创建集合的代码</li>
</ul>
<p>6.1 在这里，还说了一下，在两个文件中，都引入了同样的模块。会不会浪费资源？</p>
<ul>
<li>1.不会</li>
<li>2.有缓存；第一次引入使用后就缓存了，第二次直接从缓存里面拿，还说非常快；</li>
</ul>
<h5 id="1-1-开放出去"><a href="#1-1-开放出去" class="headerlink" title="1.1 开放出去"></a>1.1 开放出去</h5><p>0.在笔记：15-2.1-567；有模块成员导出，导入的笔记；</p>
<p>7.在app.js当中，好多地方都用了创建集合的，构造函数的，那个变量名；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.3 创建用户集合</span></span><br><span class="line"><span class="keyword">const</span> User_collections = mongoose.model(<span class="string">&#x27;User&#x27;</span>, user);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>就是 User_collections</p>
</li>
<li><p>2.如果你觉得app.js懵的，就直接设为x.js用了y.js的函数</p>
</li>
</ul>
<p>7.1 等等 const创建的是变量吗？</p>
<ul>
<li><p>1.我们去文件：25.4-A1.2-3. let、const、var 的区别；查看</p>
</li>
<li><blockquote>
<p>1.使用 var 声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象。</p>
<p>2.使用 let 声明的变量，其作用域为该语句所在的代码块内，不存在变量提升。</p>
<p>3.使用 const 声明的是常量，在后面出现的代码中不能再修改该常量的值。</p>
<ul>
<li>复杂数据的值可以变化</li>
</ul>
<table>
<thead>
<tr>
<th><strong>var</strong></th>
<th><strong>let</strong></th>
<th><strong>const</strong></th>
</tr>
</thead>
<tbody><tr>
<td>函数级作用域</td>
<td>块级作用域</td>
<td>块级作用域</td>
</tr>
<tr>
<td>变量提升</td>
<td>不存在变量提升</td>
<td>不存在变量提升</td>
</tr>
<tr>
<td>值可更改</td>
<td>值可更改</td>
<td>值不可更改</td>
</tr>
</tbody></table>
</blockquote>
</li>
<li><p>2.他是常量；</p>
</li>
</ul>
<p>8.所以要开放出去。这里我懵了</p>
<ul>
<li><p>1.代码：</p>
<p><code>module.exports = User_collections;</code></p>
<ul>
<li>module.exports：模块出口；</li>
</ul>
</li>
<li><p>2.他说的是：在其他文件中，引入user.js的时候，才可以拿到；</p>
<ul>
<li>还要引入js？</li>
</ul>
</li>
<li><p>3.</p>
</li>
</ul>
<h5 id="1-2-引入其他模块"><a href="#1-2-引入其他模块" class="headerlink" title="1.2 引入其他模块"></a>1.2 引入其他模块</h5><p>1.app.js里面的数据库模块，单独出去作为一个js了</p>
<p>2.要引入才有的用</p>
<ul>
<li><p>1.代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入其他模块</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./model/index.js&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./model/user.js&#x27;</span>);</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>3.user.js开放了一个User_collections构造集合函数。</p>
<ul>
<li><p>1.我们可以创建一个常量去接收它。</p>
<ul>
<li>1.开放</li>
<li>2.引入</li>
<li>3.接收</li>
<li>4.才可以用，额；</li>
</ul>
</li>
<li><p>2.代码：</p>
<p><code>const User_collections = require(&#39;./model/user.js&#39;);</code></p>
</li>
</ul>
<p>4.那么，数据库的代码，分离到其他模块。就完毕了；</p>
<h5 id="1-3-测试分离数据库"><a href="#1-3-测试分离数据库" class="headerlink" title="1.3 测试分离数据库"></a>1.3 测试分离数据库</h5><p>1.分离了数据库后，测试一下，看能用不</p>
<p>2.测试：</p>
<ul>
<li>1.添加用户</li>
<li>2.修改用户</li>
<li>3.删除用户</li>
<li>4.哦，没有查找功能；</li>
</ul>
<p>3.引入其他模块，可以省略.js；</p>
<ul>
<li>1.视频里面只省略了user的.js</li>
<li>2.我去试试index的可以省略不；</li>
</ul>
<p>3.1 省略+测试</p>
<ul>
<li><p>1.每一步，都去数据库那边刷新查看了</p>
</li>
<li><p>2.没有问题</p>
</li>
<li><p>3.都可以省略</p>
</li>
<li><p>4.同时可以想到：</p>
<ul>
<li><p>1.上面的那些引入代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.搭建网站服务器，实现客户端与服务器端的通信</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.1 引入url</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.也许，也都是这样，后面都是省略了.js。可能都是js文件；</p>
</li>
</ul>
</li>
</ul>
<hr>
<h4 id="2-字符串拼接"><a href="#2-字符串拼接" class="headerlink" title="2. 字符串拼接"></a>2. 字符串拼接</h4><p>1.字符串的拼接，不像模块开发那么简单。</p>
<p>2.需要学习模板引擎；</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=66&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=66&amp;spm_id_from=pageDriver</a></p>
<p>2021-4-24 22:10:54</p>
</blockquote>
<hr>
<h1 id="5-模板引擎artTemplate"><a href="#5-模板引擎artTemplate" class="headerlink" title="5. 模板引擎artTemplate"></a>5. 模板引擎artTemplate</h1><p>1.目标：</p>
<p> 能够使用模板引擎渲染数据<br> 能够使用模板引擎进行原文输出<br> 能够使用循环输出数据<br> 能够知道如何引用子模板<br> 能够知道如何如何进行模板继承</p>
<p>2.</p>
<h2 id="5-1-模板引擎的基础概念"><a href="#5-1-模板引擎的基础概念" class="headerlink" title="5.1 模板引擎的基础概念"></a>5.1 模板引擎的基础概念</h2><h3 id="1-模板引擎"><a href="#1-模板引擎" class="headerlink" title="1. 模板引擎"></a>1. 模板引擎</h3><p>1.模板引擎是第三方模块。<br>让开发者以更加友好的方式拼接字符串，使项目代码更加清晰、更加易于维护。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 未使用模板引擎的写法</span></span><br><span class="line"><span class="keyword">var</span> ary = [&#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;];</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&lt;ul&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ary.length; i++) &#123; </span><br><span class="line">   str += <span class="string">&#x27;&lt;li&gt;\</span></span><br><span class="line"><span class="string">       &lt;span&gt;&#x27;</span>+ ary[i].name +<span class="string">&#x27;&lt;/span&gt;\</span></span><br><span class="line"><span class="string">       &lt;span&gt;&#x27;</span>+ ary[i].age +<span class="string">&#x27;&lt;/span&gt;\</span></span><br><span class="line"><span class="string">   &lt;/li&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">str += <span class="string">&#x27;&lt;/ul&gt;&#x27;</span>; </span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 使用模板引擎的写法 --&gt; </span><br><span class="line">&lt;ul&gt;</span><br><span class="line">   &#123;&#123;each ary&#125;&#125;</span><br><span class="line">       &lt;li&gt;&#123;&#123;$value.name&#125;&#125;&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;&#123;&#123;$value.age&#125;&#125;&lt;/li&gt;</span><br><span class="line">   &#123;&#123;/each&#125;&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>



<h3 id="2-art-template模板引擎"><a href="#2-art-template模板引擎" class="headerlink" title="2. art-template模板引擎"></a>2. art-template模板引擎</h3><p>1.是腾讯公司出品的，文档也是中文</p>
<ul>
<li>1.也是视频那个时候最快的。视频说的，所以是视频创作之时</li>
</ul>
<p>2.下载</p>
<ul>
<li>1.在命令行工具中使用 npm install art-template 命令进行下载</li>
</ul>
<p>3.引入</p>
<ul>
<li><p>1.使用const template[^1] = require(‘art-template’)引入模板引擎</p>
<ul>
<li><p>1.通过require引入模板模块后，会返回一个方法。</p>
</li>
<li><p>2.前面刚开始说的，不是返回一个对象么，exports对象，这里怎么直接就是方法了？</p>
</li>
<li><p>我们将这个方法，命名为template。</p>
<ul>
<li>是不是忘记复习开放和导入了</li>
<li>去复习</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>3.1 我决定，还是打印一下</p>
<ul>
<li>1.打印代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> b = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure>



<ul>
<li><p>2.返回代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">Function</span>: template] &#123;</span><br><span class="line">  render: [<span class="built_in">Function</span>: render],</span><br><span class="line">  compile: [<span class="built_in">Function</span>: compile] &#123;</span><br><span class="line">    Compiler: [<span class="built_in">Function</span>: Compiler] &#123; <span class="attr">CONSTS</span>: [<span class="built_in">Object</span>] &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  defaults: &#123; <span class="string">&#x27;$extend&#x27;</span>: [<span class="built_in">Function</span> (anonymous)] &#125;,</span><br><span class="line">  extension: [<span class="built_in">Function</span>: extension]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>3.还真的是，返回了一个方法；</p>
</li>
<li><p>4.我们再引入user，看看那边导出。我们接收的是不是exports对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> c = <span class="built_in">require</span>(<span class="string">&#x27;./user&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br></pre></td></tr></table></figure>

<ul>
<li>打印出：Model { User }</li>
<li>是对象，不过有名；</li>
</ul>
</li>
</ul>
<p>3.2 那么问题又来了。require(‘art-template’); 为什么是返回的方法（函数），而不是对象呢？</p>
<ul>
<li>2021-4-25 21:51:23；</li>
</ul>
<p>4.模板引擎的功能，是将html拼接，所以要告诉模板引擎要拼接的数据和模板在哪。</p>
<ul>
<li><p>1.const html = template(‘模板路径’, 数据);</p>
</li>
<li><p>2.第一个参数是模板路径。</p>
<ul>
<li>1.template方法，可以让html单独为一个文件。</li>
<li>2.数据，是一个对象。但可以直接写里面的属性名，就用了</li>
</ul>
</li>
<li><p>3.返回值，是拼接好的模板字符串；</p>
</li>
</ul>
<p>5.示例代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入模板引擎模块</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br><span class="line"><span class="comment">// 将特定模板与特定数据进行拼接</span></span><br><span class="line"><span class="keyword">const</span> html = template(<span class="string">&#x27;./views/index.art&#x27;</span>,&#123;</span><br><span class="line">   data: &#123;</span><br><span class="line">       name: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">       age: <span class="number">20</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure>



<ul>
<li>1.虽然模板的后缀，是.art。<ul>
<li>1.这是模板引擎规定好了。</li>
<li>2.里面是html</li>
<li>3.不过无论模板引擎的后缀是什么，里面都是html；</li>
</ul>
</li>
<li>2.第二个参数，就是传递的是，要在模板里面展示的数据。<ul>
<li>1.属性又是一个对象，里面有名字和年龄</li>
</ul>
</li>
</ul>
<p>5.1 接下来看模板当中的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">   &lt;span&gt;&#123;&#123;data.name&#125;&#125;&lt;/span&gt;</span><br><span class="line">   &lt;span&gt;&#123;&#123;data.age&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>1.有两对花括号（大括号，我是这么叫的）</li>
<li>2.最外面的花括号，是把里面那个花括号当中的模板变量替换成数据，</li>
</ul>
<h4 id="2-1-代码练习"><a href="#2-1-代码练习" class="headerlink" title="2.1 代码练习"></a>2.1 代码练习</h4><h5 id="1-创建"><a href="#1-创建" class="headerlink" title="1. 创建"></a>1. 创建</h5><p>1.创建一个单独的文件夹template;</p>
<ul>
<li><p>1.下面创建app.js</p>
</li>
<li><p>2.下面创建文件夹views[^2]，视频说，大家都用这个单词作为模板文件夹。</p>
<ul>
<li>1.创建index.art; art!</li>
</ul>
</li>
</ul>
<h5 id="2-art"><a href="#2-art" class="headerlink" title="2. art"></a>2. art</h5><ul>
<li><p>3.写的就是html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> &#123;&#123;name&#125;&#125;</span><br><span class="line"> &#123;&#123;age&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>不过右下角，可以选择art格式；</li>
<li>视频里面还是html格式</li>
</ul>
</li>
</ul>
<h5 id="3-JS"><a href="#3-JS" class="headerlink" title="3. JS"></a>3. JS</h5><p>2.然后app.js这边代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入模板引擎</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.模板路径，建议用绝对路径</span></span><br><span class="line"><span class="keyword">const</span> views = path.join(__dirname, <span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;index.art&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> html = template(views, &#123;</span><br><span class="line">    name: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(html);</span><br></pre></td></tr></table></figure>



<ul>
<li>1.路径说的用绝对路径，不过也是动态的绝对路径；</li>
<li><code>__dirname</code>获取，当前文件所在的路径，是相对个人电脑的路径。所以是动态的</li>
</ul>
<h5 id="4-扩展"><a href="#4-扩展" class="headerlink" title="4. 扩展"></a>4. 扩展</h5><h6 id="4-1-path-join"><a href="#4-1-path-join" class="headerlink" title="4.1 path.join"></a>4.1 path.join</h6><p>2.1 可以查查path.join，看能不能找到规范的资料；</p>
<ul>
<li><p>官方文档：</p>
<blockquote>
<p><a href="http://nodejs.cn/api/path.html#path_path">http://nodejs.cn/api/path.html#path_path</a></p>
</blockquote>
</li>
<li><p>具体的join文档</p>
<blockquote>
<p><a href="http://nodejs.cn/api/path.html#path_path_join_paths">http://nodejs.cn/api/path.html#path_path_join_paths</a></p>
</blockquote>
</li>
<li><p>新增于: v0.1.16</p>
<ul>
<li><code>...paths</code> <a href="http://url.nodejs.cn/9Tw2bK">string</a> 路径片段的序列。</li>
<li>返回: <a href="http://url.nodejs.cn/9Tw2bK">string</a></li>
</ul>
<p><code>path.join()</code> 方法会将所有给定的 <code>path</code> 片段连接到一起（使用平台特定的分隔符作为定界符），然后规范化生成的路径。</p>
<p>长度为零的 <code>path</code> 片段会被忽略。 如果连接后的路径字符串为长度为零的字符串，则返回 <code>&#39;.&#39;</code>，表示当前工作目录。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.join(<span class="string">&#x27;/目录1&#x27;</span>, <span class="string">&#x27;目录2&#x27;</span>, <span class="string">&#x27;目录3/目录4&#x27;</span>, <span class="string">&#x27;目录5&#x27;</span>, <span class="string">&#x27;..&#x27;</span>);</span><br><span class="line"><span class="comment">// 返回: &#x27;/目录1/目录2/目录3/目录4&#x27;</span></span><br><span class="line"></span><br><span class="line">path.join(<span class="string">&#x27;目录1&#x27;</span>, &#123;&#125;, <span class="string">&#x27;目录2&#x27;</span>);</span><br><span class="line"><span class="comment">// 抛出 &#x27;TypeError: Path must be a string. Received &#123;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果任何的路径片段不是字符串，则抛出 <a href="http://nodejs.cn/api/errors.html#errors_class_typeerror"><code>TypeError</code></a>。</p>
</li>
</ul>
<h6 id="4-2-dirname"><a href="#4-2-dirname" class="headerlink" title="4.2 __dirname"></a>4.2 __dirname</h6><p>1.官方文档：</p>
<p><a href="http://nodejs.cn/api/modules.html#modules_dirname">http://nodejs.cn/api/modules.html#modules_dirname</a></p>
<p>2.上面好像有好东西。</p>
<ul>
<li>1.是说一些node机制的。学了肯定会知道很多；</li>
<li>2.但怕用很多时间；</li>
</ul>
<p>2.1 看了一些，没写笔记，有点模糊；</p>
<ul>
<li>1.CommonJS 模块<ul>
<li>好像就是创建导出，导入的机制的玩意</li>
</ul>
</li>
<li>2.访问主模块<ul>
<li>1.这个不懂啥意思；</li>
</ul>
</li>
<li>3.附录：包管理器的技巧<ul>
<li>1.这个大概是管理复杂的创造吧</li>
</ul>
</li>
<li>4.缓存<ul>
<li>1.导入了一次有缓存；</li>
</ul>
</li>
<li>5.等等</li>
</ul>
<p>2.2 这个我在意：模块封装器</p>
<p>在执行模块代码之前，Node.js 会使用一个如下的函数封装器将其封装：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">exports, require, module, __filename, __dirname</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 模块的代码实际上在这里</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>通过这样做，Node.js 实现了以下几点：</p>
<ul>
<li>它保持了顶层的变量（用 <code>var</code>、 <code>const</code> 或 <code>let</code> 定义）作用在模块范围内，而不是全局对象。</li>
<li>它有助于提供一些看似全局的但实际上是模块特定的变量，例如：<ul>
<li>实现者可以用于从模块中导出值的 <code>module</code> 和 <code>exports</code> 对象。</li>
<li>包含模块绝对文件名和目录路径的快捷变量 <code>__filename</code> 和 <code>__dirname</code> 。</li>
</ul>
</li>
</ul>
<ul>
<li>1.以上是直接复制，从复制结果可以看出，那边的文字，大概是typora文档的语法；</li>
<li>2.我想去看看封装函数；</li>
</ul>
<h6 id="4-3-封装函数，函数封装"><a href="#4-3-封装函数，函数封装" class="headerlink" title="4.3 封装函数，函数封装"></a>4.3 封装函数，函数封装</h6><p>2.3 从已有的笔记25.1看出</p>
<ul>
<li>1.封装函数，就和普通的创建函数，没什么区别。。。</li>
<li>2.百度吗？还是停在这一步，去学习？<ul>
<li>1.先停在这一步吧，算了，去百度！</li>
<li>2.从这一篇文章可以看出：<a href="https://blog.csdn.net/ab_dk/article/details/104907471">https://blog.csdn.net/ab_dk/article/details/104907471</a><ul>
<li>1.确实，像普通的创建函数。继续</li>
</ul>
</li>
<li>3.~<a href="https://blog.csdn.net/jiang7701037/article/details/80100753">https://blog.csdn.net/jiang7701037/article/details/80100753</a><ul>
<li>1.也是普通的创建函数</li>
<li>2.但同时，也说了，这是入门的封装。继续！</li>
</ul>
</li>
<li>4.~<a href="https://blog.csdn.net/Coveragehe/article/details/80845020">https://blog.csdn.net/Coveragehe/article/details/80845020</a><ul>
<li>1.这篇文章说了两个：对象原型封装，与闭包封装。</li>
<li>2.我知道了，要继续学习原生的js才行；</li>
<li>3.因为毕设，我是跳过了，来node学习；2021-4-26 11:06:12</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>2.4 over；2021-4-26 11:06:21</p>
<hr>
<h3 id="3-语法"><a href="#3-语法" class="headerlink" title="3. 语法"></a>3. 语法</h3><p>1.art-template同时支持两种模板语法：标准语法和原始语法。</p>
<ul>
<li>1.在入门案例中，使用的是标准语法；</li>
</ul>
<p>1.1 标准语法可以让模板更容易读写，原始语法具有强大的逻辑处理能力。</p>
<p>2.标准语法： <br>原始语法：&lt;%=数据  %&gt;</p>
<h4 id="3-1-输出"><a href="#3-1-输出" class="headerlink" title="3.1 输出"></a>3.1 输出</h4><p>1.将某项数据输出在模板中，标准语法和原始语法如下：</p>
<ul>
<li><p>标准语法：<br>原始语法：&lt;%=数据 %&gt;</p>
</li>
<li><pre><code class="html">  <span class="comment">&lt;!-- 标准语法 --&gt;</span>
 <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="comment">&#123;&#123;value&#125;&#125;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>
 <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="comment">&#123;&#123;a ? b : c&#125;&#125;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>
 <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="comment">&#123;&#123;a + b&#125;&#125;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>

  <span class="comment">&lt;!-- 原始语法 --&gt;</span>
 <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">value</span> %&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>
 <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">a</span> ? <span class="attr">b</span> <span class="attr">:</span> <span class="attr">c</span> %&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>
 <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">a</span> + <span class="attr">b</span> %&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>

<span class="comment">&lt;!--hexoPostRenderEscape:&lt;figure class="highlight"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;1.1 原始语法里的=号，是输出的意思；&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;1.2 代码示例：&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;```html&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    &amp;#123;&amp;#123;name&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    &amp;#123;&amp;#123;1+1&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    &amp;lt;%=1+2%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;        &amp;lt;!-- 3. 三步运算符 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;        &amp;#123;&amp;#123; 1+2 == 3 ? &amp;#x27;正确&amp;#x27; : &amp;#x27;错误&amp;#x27;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;        &amp;lt;%=1+1==3 ? &amp;#x27;正确&amp;#x27; : &amp;#x27;错误&amp;#x27; %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</span>


</code></pre>
</li>
</ul>
<ul>
<li>1.里面可以直接运算</li>
<li>2.三步运算符也是可以的；</li>
</ul>
<p>1.3 不解析标签</p>
<ul>
<li>1.防止恶意代码；什么输出几万遍之类的，可以用html写么？。。。</li>
</ul>
<p><img src="../../img/15.1/5.png" alt="5"></p>
<h4 id="3-2-原文输出"><a href="#3-2-原文输出" class="headerlink" title="3.2 原文输出"></a>3.2 原文输出</h4><p>1.如果数据中携带HTML标签，默认模板引擎不会解析标签，会将其转义后输出。</p>
<p>2.语法：</p>
<p>标准语法：<code>&#123;&#123;@ 数据 &#125;&#125;</code><br>原始语法：<code>&lt;%-数据 %&gt;</code></p>
<p>3.代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标准语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;@ value &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 原始语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">value</span> %&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>



<hr>
<h4 id="3-3-条件判断"><a href="#3-3-条件判断" class="headerlink" title="3.3 条件判断"></a>3.3 条件判断</h4><h5 id="1-标准语法"><a href="#1-标准语法" class="headerlink" title="1. 标准语法"></a>1. 标准语法</h5><p>1.在模块中可以根据条件来决定显示哪块html代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标准语法 --&gt;</span> </span><br><span class="line">&#123;&#123;if 条件&#125;&#125; ... &#123;&#123;/if&#125;&#125;</span><br><span class="line">&#123;&#123;if v1&#125;&#125; ... &#123;&#123;else if v2&#125;&#125; ... &#123;&#123;/if&#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- 原始语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">value</span>) &#123; %&gt;</span> ... <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">v1</span>) &#123; %&gt;</span> ... <span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> <span class="attr">if</span> (<span class="attr">v2</span>) &#123; %&gt;</span> ... <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>



<p>1.1 单条件判断</p>
<p><code>&#123;&#123;if 条件&#125;&#125; ... &#123;&#123;/if&#125;&#125;</code></p>
<ul>
<li><p><code>&#123;&#123;if 条件&#125;&#125;</code> 开始</p>
</li>
<li><p><code>&#123;&#123;/if&#125;&#125;</code>结束</p>
</li>
<li><p>中间写条件；</p>
</li>
</ul>
<p>2.多条件判断：</p>
<ul>
<li>1.<code>&#123;&#123;if v1&#125;&#125; ... &#123;&#123;else if v2&#125;&#125; ... &#123;&#123;/if&#125;&#125;</code></li>
<li>条件满足v1，就执行v1后面的，满足v2，就执行v2后面的。</li>
</ul>
<p>3.代码示例：2.art+2.js</p>
<ul>
<li>0.如果年龄大于18，输出年龄大于18；<ul>
<li>1.如果年龄小于15，输出小于15；</li>
<li>2.否者年龄不符合要求；</li>
</ul>
</li>
</ul>
<blockquote>
<p>F:\2-3ciyuan\11-data base-shujuk\3-lianxi\5-template</p>
</blockquote>
<ul>
<li><p>1.art代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;&#123;if age2 &gt; 18&#125;&#125;</span><br><span class="line">    年龄大于18</span><br><span class="line">    &#123;&#123;else if age2<span class="tag">&lt;<span class="name">15&#125;&#125;</span></span></span><br><span class="line"><span class="tag">    年龄小于<span class="attr">15</span></span></span><br><span class="line"><span class="tag">    &#123;&#123;<span class="attr">else</span>&#125;&#125;</span></span><br><span class="line"><span class="tag">    年龄不符合要求</span></span><br><span class="line"><span class="tag">    &#123;&#123;/<span class="attr">if</span>&#125;&#125;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>2.JS代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入模板引擎</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.模板路径，建议用绝对路径</span></span><br><span class="line"><span class="keyword">const</span> views = path.join(__dirname, <span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;2.art&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> html = template(views, &#123;</span><br><span class="line">    name: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    content: <span class="string">&#x27;&lt;h1&gt;我是标题1&lt;/h1&gt;&#x27;</span>,</span><br><span class="line">    age1: <span class="number">14</span>,</span><br><span class="line">    age2: <span class="number">16</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(html);</span><br></pre></td></tr></table></figure>
</li>
<li><p>3.</p>
</li>
</ul>
<h5 id="2-原始语法"><a href="#2-原始语法" class="headerlink" title="2. 原始语法"></a>2. 原始语法</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 标准语法 --&gt; </span><br><span class="line">&#123;&#123;<span class="keyword">if</span> 条件&#125;&#125; ... &#123;&#123;/<span class="keyword">if</span>&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="keyword">if</span> v1&#125;&#125; ... &#123;&#123;<span class="keyword">else</span> <span class="keyword">if</span> v2&#125;&#125; ... &#123;&#123;/<span class="keyword">if</span>&#125;&#125;</span><br><span class="line">&lt;!-- 原始语法 --&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span> (value) &#123; %&gt; ... &lt;% &#125; %&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span> (v1) &#123; %&gt; ... &lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v2) &#123; %&gt; ... &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>





<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &#123;&#123;<span class="keyword">if</span> age2 &gt; <span class="number">18</span>&#125;&#125;</span><br><span class="line">    年龄大于<span class="number">18</span></span><br><span class="line">    &#123;&#123;<span class="keyword">else</span> <span class="keyword">if</span> age2&lt;<span class="number">15</span>&#125;&#125;</span><br><span class="line">    年龄小于<span class="number">15</span></span><br><span class="line">    &#123;&#123;<span class="keyword">else</span>&#125;&#125;</span><br><span class="line">    年龄不符合要求</span><br><span class="line">    &#123;&#123;/<span class="keyword">if</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原始语法</span></span><br><span class="line">    &lt;% <span class="keyword">if</span>(age&gt;<span class="number">18</span>)&#123;%&gt; 年龄大于<span class="number">18</span> &lt;%&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (age &lt; <span class="number">15</span>) &#123;%&gt; 年龄小于<span class="number">15</span> &lt;%&#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;%&gt; 年龄不符合要求 &lt;%&#125;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>



<h5 id="3-自写："><a href="#3-自写：" class="headerlink" title="3. 自写："></a>3. 自写：</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 标准语法</span><br><span class="line">&#123;&#123; if age &gt; 18&#125;&#125;</span><br><span class="line">    年龄大于18</span><br><span class="line">&#123;&#123;else if age <span class="tag">&lt;<span class="name">15&#125;&#125;</span></span></span><br><span class="line"><span class="tag">年龄小于<span class="attr">15</span></span></span><br><span class="line"><span class="tag">&#123;&#123;<span class="attr">else</span>&#125;&#125;</span></span><br><span class="line"><span class="tag">年龄不符合要求</span></span><br><span class="line"><span class="tag">&#123;&#123;/<span class="attr">if</span>&#125;&#125;</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">// 原始语法</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line">&lt;% </span><br><span class="line">if (age&gt;18) </span><br><span class="line">&#123;%&gt;年龄大于18<span class="tag">&lt;<span class="name">%&#125;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line">else if (age &lt; 15 ) </span><br><span class="line">&#123;%&gt;年龄小于15<span class="tag">&lt;<span class="name">%&#125;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"><span class="attr">else</span> </span></span><br><span class="line"><span class="tag">&#123;%&gt;</span>年龄不符合要求<span class="tag">&lt;<span class="name">%&#125;</span></span></span><br><span class="line"><span class="tag">%&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="3-4-循环"><a href="#3-4-循环" class="headerlink" title="3.4 循环"></a>3.4 循环</h4><p>1.当我们使用find方法，从数据库中查询数据的时候。</p>
<ul>
<li>1.它会返回一个数组，数组的值是对象。</li>
<li>2.对于数组里面又是对象的数据，我们要如何展示在页面当中呢？<ul>
<li>1.通常采用循环的方式</li>
<li>2.</li>
</ul>
</li>
</ul>
<p>2.在模板引擎中，如何循环与展示数据？</p>
<h5 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h5><h6 id="1-1-标准语法"><a href="#1-1-标准语法" class="headerlink" title="1.1 标准语法"></a>1.1 标准语法</h6><p>3.标准语法：<code>&#123;&#123;each 数据&#125;&#125; &#123;&#123;/each&#125;&#125;</code><br>原始语法：<code>&lt;% for() &#123; %&gt; &lt;% &#125; %&gt;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 标准语法 --&gt;</span><br><span class="line">&#123;&#123;each target&#125;&#125;</span><br><span class="line">    &#123;&#123;$index&#125;&#125; &#123;&#123;$value&#125;&#125;</span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br><span class="line"> &lt;!-- 原始语法 --&gt;</span><br><span class="line">&lt;% <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; target.length; i++)&#123; %&gt;</span><br><span class="line">    &lt;%= i %&gt; &lt;%= target[i] %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>



<p>3.1 在标准语法中，两对花括号里面，用each[^3]代表循环的开始。</p>
<ul>
<li>0.target是要循环的数据；不懂；<ul>
<li>1.也是要循环的那个数组；</li>
<li>2.重温，each target，就这两个词语，就已经完成了循环，所以，target就是被循环的数据；</li>
<li>3.这个数据，可能，只能是数组；</li>
</ul>
</li>
</ul>
<ul>
<li><p>1.$index 索引</p>
</li>
<li><p>2.$value 这一次的数据</p>
<ul>
<li>1.因为数组的值是对象，所以，每一次数据，都是那一次的对象；</li>
<li>2.能使用对象的语法，获得对象里面的属性和方法；</li>
</ul>
</li>
</ul>
<p>3.2 在原始语法中，有点JS的风格；target是那个数组；</p>
<p>4.代码：</p>
<ul>
<li><p>0.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> views = path.join(__dirname, <span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;3.art&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> html = template(views, &#123;</span><br><span class="line">    users: [&#123;</span><br><span class="line">        name: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">        age: <span class="number">20</span>,</span><br><span class="line">        sex: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&#x27;爱丽丝&#x27;</span>,</span><br><span class="line">        age: <span class="number">10</span>,</span><br><span class="line">        sex: <span class="string">&#x27;女&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&#x27;小红帽&#x27;</span>,</span><br><span class="line">        age: <span class="number">16</span>,</span><br><span class="line">        sex: <span class="string">&#x27;女&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(html);</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>1.art：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;&#123;each users&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;&#123;$value&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;&#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>1.$value,是每一次循环的值。</p>
</li>
<li><p>2.第一次循环，是数组第一个值，也就是第一个对象</p>
</li>
<li><p>3.这些，应该可以拿到3个对象。试试；</p>
<ul>
<li><p>1.乱码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;<span class="symbol">&amp;#34;</span>name<span class="symbol">&amp;#34;</span>:<span class="symbol">&amp;#34;</span>张三<span class="symbol">&amp;#34;</span>,<span class="symbol">&amp;#34;</span>age<span class="symbol">&amp;#34;</span>:20,<span class="symbol">&amp;#34;</span>sex<span class="symbol">&amp;#34;</span>:<span class="symbol">&amp;#34;</span>男<span class="symbol">&amp;#34;</span>&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;<span class="symbol">&amp;#34;</span>name<span class="symbol">&amp;#34;</span>:<span class="symbol">&amp;#34;</span>爱丽丝<span class="symbol">&amp;#34;</span>,<span class="symbol">&amp;#34;</span>age<span class="symbol">&amp;#34;</span>:10,<span class="symbol">&amp;#34;</span>sex<span class="symbol">&amp;#34;</span>:<span class="symbol">&amp;#34;</span>女<span class="symbol">&amp;#34;</span>&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;<span class="symbol">&amp;#34;</span>name<span class="symbol">&amp;#34;</span>:<span class="symbol">&amp;#34;</span>小红帽<span class="symbol">&amp;#34;</span>,<span class="symbol">&amp;#34;</span>age<span class="symbol">&amp;#34;</span>:16,<span class="symbol">&amp;#34;</span>sex<span class="symbol">&amp;#34;</span>:<span class="symbol">&amp;#34;</span>女<span class="symbol">&amp;#34;</span>&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>2.用原文输出：<code>&#123;&#123;@$value&#125;&#125;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        [object Object]</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        [object Object]</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        [object Object]</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>3.把@放在$后面：<code>&#123;&#123;$@value&#125;&#125;</code></p>
<p>报错：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">F:\<span class="number">2</span><span class="number">-3</span>ciyuan\<span class="number">11</span>-data base-shujuk\<span class="number">3</span>-lianxi\node_modules\art-template\lib\compile\index.js:<span class="number">94</span></span><br><span class="line">            throw error;</span><br><span class="line">            ^</span><br><span class="line"></span><br><span class="line">[Error [TemplateError]: F:\<span class="number">2</span><span class="number">-3</span>ciyuan\<span class="number">11</span>-data base-shujuk\<span class="number">3</span>-lianxi\<span class="number">5</span>-template\views\<span class="number">3.</span>art:<span class="number">4</span>:<span class="number">9</span></span><br><span class="line">    <span class="number">2</span>|     &#123;&#123;each users&#125;&#125;</span><br><span class="line">    <span class="number">3</span>|     &lt;li&gt;</span><br><span class="line"> &gt;&gt; <span class="number">4</span>|         &#123;&#123;$@value&#125;&#125;</span><br><span class="line">    <span class="number">5</span>|     &lt;/li&gt;</span><br><span class="line">    <span class="number">6</span>|     &#123;&#123;/each&#125;&#125;</span><br><span class="line">    <span class="number">7</span>| &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">CompileError: missing ) after argument list</span><br><span class="line">   generated: $$<span class="keyword">out</span>+=$escape($@value)]</span><br><span class="line">[nodemon] app crashed - waiting <span class="keyword">for</span> file changes before starting...</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>4.1 只好跟着视频来了：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;&#123;each users&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;&#123;$value.name&#125;&#125;</span><br><span class="line">        &#123;&#123;$value.age&#125;&#125;</span><br><span class="line">        &#123;&#123;$value.sex&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;&#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>1.返回值</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        张三</span><br><span class="line">        20</span><br><span class="line">        男</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        爱丽丝</span><br><span class="line">        10</span><br><span class="line">        女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        小红帽</span><br><span class="line">        16</span><br><span class="line">        女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>2.没有问题。。。。</li>
</ul>
<h6 id="1-2-原始语法"><a href="#1-2-原始语法" class="headerlink" title="1.2 原始语法"></a>1.2 原始语法</h6><p>1.先不看视频。先自己写</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &lt;% for(var i=0; i&lt;users.length; i++) &#123; %&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=i%</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=users[i].name%</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=users[i].age%</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=users[i].sex%</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>1.好吧，这个最后，还是看视频写的；</li>
</ul>
<h6 id="1-3-总代码"><a href="#1-3-总代码" class="headerlink" title="1.3 总代码"></a>1.3 总代码</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;&#123;each users&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;&#123;$value.name&#125;&#125;</span><br><span class="line">        &#123;&#123;$value.age&#125;&#125;</span><br><span class="line">        &#123;&#123;$value.sex&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;&#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- // 原始语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &lt;% for(var i=0; i&lt;users.length; i++) &#123; %&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=i%</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=users[i].name%</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=users[i].age%</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=users[i].sex%</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="2-复习"><a href="#2-复习" class="headerlink" title="2. 复习"></a>2. 复习</h5><p>1.把3.art删了，重写一遍；2021-4-26 15:06:41</p>
<p>2.代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.报错：</p>
<p><code>CompileError: Unexpected token &#39;catch&#39;</code></p>
<p>4.结果是最后面符号没对；</p>
<ul>
<li><p>但报的啥？报的第一行；</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">PS F:\<span class="number">2</span><span class="number">-3</span>ciyuan\<span class="number">11</span>-data base-shujuk\<span class="number">3</span>-lianxi\<span class="number">5</span>-template&gt; node .\<span class="number">3.</span>js</span><br><span class="line">F:\<span class="number">2</span><span class="number">-3</span>ciyuan\<span class="number">11</span>-data base-shujuk\<span class="number">3</span>-lianxi\node_modules\art-template\lib\compile\index.js:<span class="number">94</span></span><br><span class="line">            throw error;</span><br><span class="line">            ^</span><br><span class="line"></span><br><span class="line">[Error [TemplateError]: F:\<span class="number">2</span><span class="number">-3</span>ciyuan\<span class="number">11</span>-data base-shujuk\<span class="number">3</span>-lianxi\<span class="number">5</span>-template\views\<span class="number">3.</span>art:<span class="number">1</span>:<span class="number">1</span></span><br><span class="line"> &gt;&gt; <span class="number">1</span>| &lt;ul&gt;</span><br><span class="line">    <span class="number">2</span>|     &#123;&#123;each users&#125;&#125;</span><br><span class="line">    <span class="number">3</span>|     &lt;li&gt;</span><br><span class="line">    <span class="number">4</span>|         &#123;&#123;$index&#125;&#125;</span><br><span class="line"></span><br><span class="line">CompileError: Unexpected token <span class="string">&#x27;catch&#x27;</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>傻逼；2021-4-26 15:22:34</li>
</ul>
</li>
</ul>
<p><img src="../../img/15.1/6.png" alt="6"></p>
<p>​    </p>
<hr>
<h4 id="3-5-子模板"><a href="#3-5-子模板" class="headerlink" title="3.5 子模板"></a>3.5 子模板</h4><p>1.使用子模板可以将网站公共区块(头部、底部)抽离到单独的文件中。</p>
<ul>
<li>1.假如有一百个页面，都有相同的头部，底部；</li>
<li>2.这样改的时候，就一次可以改100个；</li>
</ul>
<p>2.标准语法：<code>&#123;&#123;include '模板'&#125;&#125;</code><br>原始语法：<code>&lt;%include(&#39;模板&#39;) %&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 标准语法 --&gt;</span></span><br><span class="line">&#123;&#123;include &#x27;./header.art&#x27;&#125;&#125;</span><br><span class="line"> <span class="comment">&lt;!-- 原始语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">include</span>(&#x27;<span class="attr">.</span>/<span class="attr">header.art</span>&#x27;) %&gt;</span></span><br></pre></td></tr></table></figure>



<p>2.1 子模板与循环条件不一样，是单标签。（好啊，这里也有）</p>
<ul>
<li>循环or条件有开始与结束；</li>
</ul>
<p>2.2 在标准语法中，include是一个关键字。但在原始语法中，include是一个方法，要加括号；</p>
<h5 id="1-代码"><a href="#1-代码" class="headerlink" title="1. 代码"></a>1. 代码</h5><p>3.接下来，我们去编辑器中，验证这个代码</p>
<ul>
<li>1.创建新文件夹common；放头部和底部的；</li>
<li>2.创建头部header.art</li>
<li>3.创建底部：footer.art</li>
</ul>
<p>4.代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;include &#x27;../common/header.art&#x27;&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;&#123;include &#x27;../common/footer.art&#x27;&#125;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>header.art文件里面有：我是头部</li>
<li>footer.art：我是底部</li>
</ul>
<p>4.1 返回值：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">PS F:\<span class="number">2</span><span class="number">-3</span>ciyuan\<span class="number">11</span>-data base-shujuk\<span class="number">3</span>-lianxi\<span class="number">5</span>-template&gt; node .\<span class="number">4.</span>js</span><br><span class="line">我是头部</span><br><span class="line">&lt;div&gt; 我是首页&lt;/div&gt;</span><br><span class="line">我是底部</span><br></pre></td></tr></table></figure>



<h5 id="2-原始语法-1"><a href="#2-原始语法-1" class="headerlink" title="2. 原始语法"></a>2. 原始语法</h5><p>1.代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">include</span>(&#x27;<span class="attr">..</span>/<span class="attr">common</span>/<span class="attr">header.art</span>&#x27;) %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">include</span>(&#x27;<span class="attr">..</span>/<span class="attr">common</span>/<span class="attr">footer.art</span>&#x27;) %&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="3-6-模板继承"><a href="#3-6-模板继承" class="headerlink" title="3.6 模板继承"></a>3.6 模板继承</h4><p>0.</p>
<p>1.使用模板继承可以将网站HTML骨架抽离到单独的文件中，其他页面模板可以继承骨架文件。</p>
<p><img src="../../img/15.1/7.png" alt="7"></p>
<p>2.虽然同一个骨架，但每个页面的css，js链接是不一样的。可以在骨架留坑</p>
<p><img src="../../img/15.1/8.png" alt="8"></p>
<ul>
<li>1.不过看上面这张图，是看不出什么玩意；</li>
</ul>
<p>3.示例代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML骨架模板<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        &#123;&#123;block &#x27;head&#x27;&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        &#123;&#123;block &#x27;content&#x27;&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>1.预留位置怎么留？block；</li>
<li>2.后面的是名字，用于区分不同的block；</li>
</ul>
<p>4.其他模板，如何继承骨架模板？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.art 首页模板--&gt;</span></span><br><span class="line">&#123;&#123;extend &#x27;./layout.art&#x27;&#125;&#125;</span><br><span class="line">&#123;&#123;block &#x27;head&#x27;&#125;&#125; <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;custom.css&quot;</span>&gt;</span> &#123;&#123;/block&#125;&#125;</span><br><span class="line">&#123;&#123;block &#x27;content&#x27;&#125;&#125; <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is just an awesome page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> &#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>1.比如，现在是首页模板</li>
<li>2.extend就是继承的意思；</li>
<li>3.填坑，也需要写block。</li>
</ul>
<h5 id="2-代码演示"><a href="#2-代码演示" class="headerlink" title="2. 代码演示"></a>2. 代码演示</h5><p>1.新建5.js与5.art；</p>
<ul>
<li><p>5.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> views = path.join(__dirname, <span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;4.art&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> html = template(views, &#123;</span><br><span class="line">    msg: <span class="string">&#x27;我是首页&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(html);</span><br></pre></td></tr></table></figure>

<ul>
<li>和4.js一样；</li>
</ul>
</li>
<li><p>5.art</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>2.在common文件夹，新建layout[^5].art（骨架文件）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;&#123;block &#x27;link&#x27;&#125;&#125; &#123;&#123;/block&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;&#123;block &#x27;content&#x27;&#125;&#125; &#123;&#123;/block&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3.在5.art里面继承骨架模板；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;extend &#x27;../common/layout.art&#x27;&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;block &#x27;link&#x27;&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;/block&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;block &#x27;content&#x27;&#125;&#125;<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure>



<p>4.运行5.js，查看打印结果，看有没有骨架和填坑的；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">PS F:\2-3ciyuan\11-data base-shujuk\3-lianxi\5-template&gt; node .\5.js</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是首页<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>继承骨架成功</li>
<li>填坑成功</li>
</ul>
<h5 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h5><p>1.所谓的模板继承，就是把页面当中的骨架放在一个单独的模板</p>
<p>2.其他的页面模板，可以用继承的方式，获得这个骨架</p>
<p>3.</p>
<h4 id="3-7-模板配置"><a href="#3-7-模板配置" class="headerlink" title="3.7 模板配置"></a>3.7 模板配置</h4><h5 id="1-导入变量"><a href="#1-导入变量" class="headerlink" title="1. 导入变量"></a>1. 导入变量</h5><p>0.变量可以是，第三方模块的方法；用这些方法，可以处理数据；</p>
<p>1.向模板中导入变量 template.defaults[^6].imports.变量名 = 变量值;</p>
<ul>
<li>1.比如说，我们从数据库中，查出了文章的发布时间。</li>
<li>2.但是，时间的格式，是原始的格式。</li>
<li>3.我们需要对时间的格式，格式化，或者自定义<ul>
<li>1.如何格式化？</li>
<li>2.最简单的，用别人写好的方法</li>
</ul>
</li>
<li>4.在模板中，允许调用方法吗？直接调用不行，用变量装着可以；</li>
</ul>
<p>1.1 找一个处理时间的第三方模块</p>
<ul>
<li>1.dateformat</li>
<li>2.下载它：npm install dateformat</li>
<li>3.引入</li>
<li>4.引入之后返回一个方法</li>
<li>5.第一个参数，是要处理的时间，</li>
</ul>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=72&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=72&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.2 创建6.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> dateformat = <span class="built_in">require</span>(<span class="string">&#x27;dateformat&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> views = path.join(__dirname, <span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;6.art&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入模板变量</span></span><br><span class="line">template.defaults.imports.date_format = dateformat;</span><br><span class="line"><span class="keyword">const</span> html = template(views, &#123;</span><br><span class="line">    time: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(html);</span><br></pre></td></tr></table></figure>



<p>1.3 创建模板6.art；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; date_format(time, &#x27;yyyy-mm-dd&#x27;) &#125;&#125;</span><br></pre></td></tr></table></figure>



<p>1.4 打印测试结果；</p>
<p>1.5 复习一下，看能根据笔记，自己写出来不；</p>
<ul>
<li><p>1.dateformat的文档：<a href="https://github.com/felixge/node-dateformat">https://github.com/felixge/node-dateformat</a></p>
</li>
<li><p>2.js一致，art自写：</p>
<p><code>&#123;&#123; date_format(time,'yyyy-mm-dd HH:MM:ss 星期N') &#125;&#125;</code></p>
</li>
</ul>
<h5 id="2-设置根目录"><a href="#2-设置根目录" class="headerlink" title="2. 设置根目录"></a>2. 设置根目录</h5><p>1.art-template，允许我们去配置全局根目录；</p>
<p>2.模板根目录 template.defaults.root = 模板目录</p>
<p>3.虽然视频里面看着不像是全局；</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=73&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=73&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>4.设置根目录后，可以直接在template方法里面写文件名；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> dateformat = <span class="built_in">require</span>(<span class="string">&#x27;dateformat&#x27;</span>);</span><br><span class="line"><span class="comment">//const views = path.join(__dirname, &#x27;views&#x27;, &#x27;6.art&#x27;);</span></span><br><span class="line"><span class="comment">// 设置模板的根目录</span></span><br><span class="line">template.defaults.root = path.join(__dirname, <span class="string">&#x27;views&#x27;</span>);</span><br><span class="line"><span class="comment">// 导入模板变量</span></span><br><span class="line">template.defaults.imports.date_format = dateformat;</span><br><span class="line"><span class="keyword">const</span> html = template(<span class="string">&#x27;6.art&#x27;</span>, &#123;</span><br><span class="line">    time: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(html);</span><br></pre></td></tr></table></figure>



<h5 id="3-后缀"><a href="#3-后缀" class="headerlink" title="3. 后缀"></a>3. 后缀</h5><p>1.设置模板默认后缀 template.defaults.extname = ‘.art’</p>
<p><img src="../../img/15.1/9.png" alt="9"></p>
<ul>
<li>1.强行不想写；</li>
<li>2.设置了默认的后缀后，会自动渲染（添加）那个后缀；</li>
</ul>
<p>2.代码：<code>template.defaults.extname = &#39;.art&#39;;</code></p>
<p>3.报错：</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">PS F:<span class="symbol">\2</span>-3ciyuan<span class="symbol">\1</span>1-data base-shujuk<span class="symbol">\3</span>-lianxi<span class="symbol">\5</span>-template&gt; node .<span class="symbol">\6</span>.js</span><br><span class="line">F:<span class="symbol">\2</span>-3ciyuan<span class="symbol">\1</span>1-data base-shujuk<span class="symbol">\3</span>-lianxi<span class="symbol">\n</span>ode_modules<span class="symbol">\a</span>rt-template<span class="symbol">\l</span>ib<span class="symbol">\c</span>ompile<span class="symbol">\i</span>ndex.js:79</span><br><span class="line">                throw error;</span><br><span class="line">                ^</span><br><span class="line"></span><br><span class="line">[Error [TemplateError]: template not found: ENOENT: no such file or directory, open &#x27;F:<span class="symbol">\2</span>-3ciyuan<span class="symbol">\1</span>1-data base-shujuk<span class="symbol">\3</span>-lianxi<span class="symbol">\5</span>-template<span class="symbol">\v</span>iews<span class="symbol">\6</span>.1&#x27;]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>1.说没有找到文件</p>
</li>
<li><p>2.难道这里的方法更新了？</p>
</li>
<li><p>3.稍微百度了一下：template.defaults.extname;</p>
<ul>
<li>没啥结果，这种可能得找art-template文档；</li>
<li>说好的腾讯创建，中文文档呢？怎么连官网都没有？</li>
</ul>
</li>
</ul>
<p>3.1 找到原因：</p>
<p><img src="../../img/15.1/10.png" alt="10"></p>
<hr>
<h2 id="5-2-案例介绍-–-学生档案管理"><a href="#5-2-案例介绍-–-学生档案管理" class="headerlink" title="5.2 案例介绍 – 学生档案管理"></a>5.2 案例介绍 – 学生档案管理</h2><p>1.目标：模板引擎应用，强化node.js项目制作流程。</p>
<p>2.知识点：http请求响应、数据库、模板引擎、静态资源访问。</p>
<h3 id="1-制作流程"><a href="#1-制作流程" class="headerlink" title="1. 制作流程"></a>1. 制作流程</h3><p>建立项目文件夹并生成项目描述文件<br>创建网站服务器实现客户端和服务器端通信<br>连接数据库并根据需求设计学员信息表<br>创建路由并实现页面模板呈递<br>实现静态资源访问<br>实现学生信息添加功能<br>实现学生信息展示功能</p>
<h4 id="1-1-初始化创建"><a href="#1-1-初始化创建" class="headerlink" title="1.1 初始化创建"></a>1.1 初始化创建</h4><p>1.建立项目文件夹并生成项目描述文件</p>
<p>1.1 创建文件夹：文件名随便，我自己：Student_management_cases</p>
<p>1.2 初始化：npm init -y</p>
<ul>
<li><p>1.话说这一步的作用是什么？百度一下；</p>
</li>
<li><p>2.百度无果</p>
</li>
<li><p>3.查找以前的笔记</p>
</li>
<li><p>4.在15里面找到了，说的是项目的描述文档；记录文件？</p>
</li>
</ul>
<h4 id="1-2-创建本地服务器"><a href="#1-2-创建本地服务器" class="headerlink" title="1.2 创建本地服务器"></a>1.2 创建本地服务器</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.引入http模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="comment">// 2.创建网站服务器</span></span><br><span class="line"><span class="keyword">const</span> app = http.createServer();</span><br></pre></td></tr></table></figure>



<p>2.创建网站服务器实现客户端和服务器端通信</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.当客户端访问服务器端的时候</span></span><br><span class="line">app.on(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.end(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="1-3-链接数据库"><a href="#1-3-链接数据库" class="headerlink" title="1.3 链接数据库"></a>1.3 链接数据库</h4><p>3.连接数据库并根据需求设计学员信息表</p>
<p>3.1 链接数据库</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost:27017/playground&#x27;</span>, &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>, <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;数据库链接成功&#x27;</span>))</span><br><span class="line">    .catch(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;数据库链接失败&#x27;</span>))</span><br></pre></td></tr></table></figure>



<p>3.2 分离链接数据库</p>
<ul>
<li>1.创建model文件夹，创建connect.js</li>
<li>2.把代码剪切过去；</li>
</ul>
<p>3.3 在app.js引入链接数据库模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4.引入链接数据库模块</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./model/connect&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>1.因为在这里模块，没有导出</p>
</li>
<li><p>2.所以不需要变量或常量来接收返回结果；</p>
</li>
<li><p>3.突发奇想：打印出来看看？</p>
<ul>
<li><pre><code class="js">app.on(<span class="string">'request'</span>, (req, res) =&gt; &#123;
    <span class="built_in">console</span>.log(<span class="built_in">require</span>(<span class="string">'./model/connect'</span>));
    res.end(<span class="string">'ok'</span>);
&#125;)
&lt;!--hexoPostRenderEscape:&lt;figure class="highlight yaml"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;span class="string"&gt;+&lt;/span&gt; &lt;span class="string"&gt;返回的是空对象；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;span class="string"&gt;+&lt;/span&gt; &lt;span class="string"&gt;接收一下再打印试试；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;span class="string"&gt;+&lt;/span&gt; &lt;span class="string"&gt;还是空对象。。。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="string"&gt;+&lt;/span&gt; &lt;span class="number"&gt;3.1&lt;/span&gt; &lt;span class="string"&gt;哦，我想到了，是因为那边本来就没有什么键值对；那边就是连接数据库，就完了；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="string"&gt;+&lt;/span&gt; &lt;span class="number"&gt;4&lt;/span&gt;&lt;span class="string"&gt;.所以才不需要导出，不需要变量接收引入的返回值；因为也用不到调用某一个；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="string"&gt;+&lt;/span&gt; &lt;span class="number"&gt;5&lt;/span&gt;&lt;span class="string"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="number"&gt;3.4&lt;/span&gt; &lt;span class="string"&gt;创建学员集合规则模块；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="string"&gt;+&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="string"&gt;.在model文件夹下，创建user.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="string"&gt;+&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="string"&gt;.引入模块，创建规则与集合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;span class="string"&gt;```js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;span class="string"&gt;const&lt;/span&gt; &lt;span class="string"&gt;mongoose&lt;/span&gt; &lt;span class="string"&gt;=&lt;/span&gt; &lt;span class="string"&gt;require(&amp;#x27;mongoose&amp;#x27;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;span class="string"&gt;//&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="string"&gt;.创建学员集合规则&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;span class="string"&gt;const&lt;/span&gt; &lt;span class="string"&gt;students_Schema&lt;/span&gt; &lt;span class="string"&gt;=&lt;/span&gt; &lt;span class="string"&gt;new&lt;/span&gt; &lt;span class="string"&gt;mongoose.Schema(&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;      &lt;span class="attr"&gt;name:&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;          &lt;span class="attr"&gt;type:&lt;/span&gt; &lt;span class="string"&gt;String&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;          &lt;span class="attr"&gt;required:&lt;/span&gt; &lt;span class="literal"&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;          &lt;span class="attr"&gt;minlength:&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;          &lt;span class="attr"&gt;maxlength:&lt;/span&gt; &lt;span class="number"&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;      &amp;#125;&lt;span class="string"&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;      &lt;span class="attr"&gt;age:&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;          &lt;span class="attr"&gt;type:&lt;/span&gt; &lt;span class="string"&gt;Number&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;          &lt;span class="attr"&gt;min:&lt;/span&gt; &lt;span class="number"&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;          &lt;span class="attr"&gt;max:&lt;/span&gt; &lt;span class="number"&gt;30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;      &amp;#125;&lt;span class="string"&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;      &lt;span class="attr"&gt;sex:&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;          &lt;span class="attr"&gt;type:&lt;/span&gt; &lt;span class="string"&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;      &amp;#125;&lt;span class="string"&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;      &lt;span class="attr"&gt;email:&lt;/span&gt; &lt;span class="string"&gt;String,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;      &lt;span class="attr"&gt;hobbies:&lt;/span&gt; [&lt;span class="string"&gt;String&lt;/span&gt;]&lt;span class="string"&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;      &lt;span class="string"&gt;//&lt;/span&gt; &lt;span class="string"&gt;所属学院&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;      &lt;span class="attr"&gt;collage:&lt;/span&gt; &lt;span class="string"&gt;String,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;      &lt;span class="string"&gt;//&lt;/span&gt; &lt;span class="string"&gt;入学日期&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;      &lt;span class="attr"&gt;enterDate:&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;          &lt;span class="attr"&gt;type:&lt;/span&gt; &lt;span class="string"&gt;Date&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;          &lt;span class="string"&gt;//&lt;/span&gt; &lt;span class="string"&gt;默认&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;          &lt;span class="attr"&gt;default:&lt;/span&gt; &lt;span class="string"&gt;Date.now&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;span class="string"&gt;&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;span class="string"&gt;//&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="string"&gt;.创建集合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;span class="string"&gt;const&lt;/span&gt; &lt;span class="string"&gt;students&lt;/span&gt; &lt;span class="string"&gt;=&lt;/span&gt; &lt;span class="string"&gt;mongoose.model(&amp;#x27;Students&amp;#x27;,&lt;/span&gt; &lt;span class="string"&gt;students_Schema);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;span class="string"&gt;module.exports&lt;/span&gt; &lt;span class="string"&gt;=&lt;/span&gt; &lt;span class="string"&gt;students;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;


</code></pre>
</li>
</ul>
</li>
</ul>
<p>3.5 设计学员信息表</p>
<ul>
<li>1.好像没说这个，视频就到创建路由了；</li>
</ul>
<h4 id="1-4-路由"><a href="#1-4-路由" class="headerlink" title="1.4 路由"></a>1.4 路由</h4><blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=75&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=75&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.创建路由并实现页面模板呈递</p>
<p>2.记得以前写的路由，杂乱，不好维护；</p>
<h5 id="1-第三方模块-router"><a href="#1-第三方模块-router" class="headerlink" title="1. 第三方模块 router"></a>1. 第三方模块 router</h5><p>功能：实现路由<br>使用步骤：<br>1.获取路由对象<br>2.调用路由对象提供的方法创建路由<br>3.启用路由，使路由生效</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.获取路由对象</span></span><br><span class="line"><span class="keyword">const</span> getRouter = <span class="built_in">require</span>(<span class="string">&#x27;router&#x27;</span>)</span><br><span class="line"><span class="comment">//2.调用路由对象提供的方法创建路由</span></span><br><span class="line"><span class="keyword">const</span> router = getRouter();</span><br><span class="line"><span class="comment">//2.调用路由对象提供的方法创建路由</span></span><br><span class="line">router.get(<span class="string">&#x27;/add&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.end(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line">&#125;) </span><br><span class="line"><span class="comment">//3.启用路由，使路由生效</span></span><br><span class="line">server.on(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    router(req, res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>1.router.get，就是get请求响应的方法</li>
<li>2.router.post，是post请求响应的方法；</li>
<li>3.里面的第一个参数，就是路径；</li>
<li>4.第二个参数，就是写，如何处理这个请求，是一个回调函数。<ul>
<li>1.里面有两个参数，分别是请求对象和响应对象；</li>
</ul>
</li>
<li>5.</li>
</ul>
<p>3.1 启用路由，使路由生效</p>
<ul>
<li>1.require(‘router’)返回的，是一个函数。router所以也是一个函数</li>
<li>2.要调用，才能启用</li>
<li>3.调用这个路由，需要传递两个参数，分别是请求对象，响应对象<ul>
<li>为啥</li>
</ul>
</li>
<li>4.所以这个方法，需要在服务器对象下的request事件，调用；</li>
<li>5.每次客户端发来请求时，都会调用这个函数。</li>
<li>6.在方法内部，会判断，当前的请求方式与请求地址是什么。</li>
<li>7.然后在方法内部，会执行请求对应的处理函数。</li>
<li>8.也就是自己写的回调函数。</li>
</ul>
<p>4.使用</p>
<ul>
<li><p>1.先下载；npm install router</p>
</li>
<li><pre><code class="js"><span class="comment">// 6.引入router模块</span>
<span class="keyword">const</span> getRouter = <span class="built_in">require</span>(<span class="string">'router'</span>);
<span class="comment">// 6.1获取路由对象</span>
<span class="keyword">const</span> router = getRouter();
&lt;!--hexoPostRenderEscape:&lt;figure class="highlight coffeescript"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;+ ```&lt;span class="javascript"&gt;js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;  &lt;span class="comment"&gt;// 7.呈递学生档案信息页面&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;  router.get(&lt;span class="string"&gt;&amp;#x27;/add&amp;#x27;&lt;/span&gt;, &lt;span class="function"&gt;(&lt;span class="params"&gt;req, res&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;      res.end(&lt;span class="string"&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="javascript"&gt;  &amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;


</code></pre>
</li>
</ul>
<p>4.1 但是这里报错；</p>
<p><img src="../../img/15.1/11.png" alt="11"></p>
<p>4.2 确实没有get</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">Function</span>: router] &#123;</span><br><span class="line">  caseSensitive: <span class="literal">undefined</span>,</span><br><span class="line">  mergeParams: <span class="literal">undefined</span>,</span><br><span class="line">  params: &#123;&#125;,</span><br><span class="line">  strict: <span class="literal">undefined</span>,</span><br><span class="line">  stack: [</span><br><span class="line">    Layer &#123;</span><br><span class="line">      handle: [<span class="built_in">Function</span>: handle],</span><br><span class="line">      name: <span class="string">&#x27;handle&#x27;</span>,</span><br><span class="line">      params: <span class="literal">undefined</span>,</span><br><span class="line">      path: <span class="literal">undefined</span>,</span><br><span class="line">      keys: [],</span><br><span class="line">      regexp: <span class="regexp">/^\/add\/?$/i</span>,</span><br><span class="line">      route: [Route]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>4.3 这个得去官方文档查看一下，是不是变更了方法；</p>
<ul>
<li><p>1.这个是第三方模块</p>
</li>
<li><p>2.百度无果；</p>
</li>
<li><p>3.奇想：试试有没有效果</p>
</li>
<li><p>4.启用路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.当客户端访问服务器端的时候</span></span><br><span class="line">app.on(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    router(req, res, <span class="function">() =&gt;</span> &#123; &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>1.报错：</p>
<p><img src="../../img/15.1/12.png" alt="12"></p>
</li>
<li><p>2.还在报错；</p>
</li>
<li><p>3.不管！</p>
</li>
</ul>
</li>
<li><p>5.请求，响应，成功！</p>
</li>
<li><p>6.快速修复，禁止检查。滚！</p>
<ul>
<li><p>1.首先，不知道这个检测是哪来的</p>
<ul>
<li>1.百度说自带的；</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>7.那百度一下：此表达式不可调用，类型“Router”没有调用签名。</p>
<ul>
<li>1.无果</li>
</ul>
</li>
</ul>
<p>4.4 解决办法：// @ts-ignore；让ts检查无视这些错误；</p>
<ul>
<li>1.一个小时过去了；</li>
</ul>
<h4 id="1-5-页面模板呈递"><a href="#1-5-页面模板呈递" class="headerlink" title="1.5 页面模板呈递"></a>1.5 页面模板呈递</h4><p>1.当客户端，访问对应的路由的时候，我们要把对应的页面，呈递给用户</p>
<p>2.这需要模板引擎</p>
<ul>
<li>1.没下的，下载：npm install art-template</li>
</ul>
<p>3.在项目文件夹下面，创建，views[^2]文件夹；</p>
<p>4.在这个views文件夹下，我们要放模板文件；</p>
<ul>
<li><p>1.把前端文件复制过来</p>
</li>
<li><p>2.只留下html</p>
</li>
<li><p>3.CSS，JS剪切到上级文件里的public文件夹（新建）</p>
</li>
<li><p>同时，这些文件，也被称为，静态资源文件；</p>
</li>
</ul>
<p>5.回到app.js，引入模板引擎；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 8.引入模板引擎</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>6.接下来，在对应的路由里面，渲染模板；并把渲染的结果，响应给客户端；</p>
<ul>
<li><p>1.template方法第一个参数是路径</p>
<ul>
<li><p>1.去配置模板的根目录</p>
</li>
<li><p>2.需要引入模块path；</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 9.2 引入path模板</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 9.1 配置根目录</span></span><br><span class="line"><span class="keyword">const</span> views = template.defaults.root = path.join(__dirname, <span class="string">&#x27;views&#x27;</span>);</span><br></pre></td></tr></table></figure>



<ul>
<li>2.修改views下面的html为art；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line">router.get(<span class="string">&#x27;/add&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 9.渲染模板</span></span><br><span class="line">    <span class="keyword">let</span> html = template(<span class="string">&#x27;index.art&#x27;</span>, &#123;&#125;);</span><br><span class="line">    res.end(html);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<ul>
<li>3.页面一直在转：说明在等待返回结果。我们不是写了end返回了结果了吗？<ul>
<li>1.点击X；</li>
</ul>
</li>
</ul>
<p><img src="../../img/15.1/13.png" alt="13"></p>
<ul>
<li><p>4.会看到，加载出来的html；</p>
<p><img src="../../img/15.1/14.png" alt="14"></p>
<ul>
<li>1.还是问：为什么一直转？</li>
<li>2.因为html页面里面有link链接css；而这里找不到css；</li>
</ul>
</li>
<li><p>5.需要对静态资源做处理</p>
</li>
</ul>
<h5 id="1-第三方模块-serve-static"><a href="#1-第三方模块-serve-static" class="headerlink" title="1. 第三方模块 serve-static"></a>1. 第三方模块 serve-static</h5><p>0.服务serve-static静态</p>
<p>1.静态资源的代码，我们之前是写过的。但有更好的办法；</p>
<ul>
<li>1.做项目的时候，想把更多的关注点，放在项目的逻辑上；</li>
<li>2.如果在考虑项目逻辑的同时，还要想开放静态资源这样的底层代码，项目的开发结构就会被破坏；</li>
</ul>
<p>2.所以，一般会选择，使用第三方模板，来实现这功能；</p>
<p>3.功能：实现静态资源访问服务<br>4.步骤：</p>
<ul>
<li>1.引入serve-static模块获取创建静态资源服务功能的方法<ul>
<li>1.这个的返回值也是方法（现在返回值是对象变少了？）</li>
<li>2.require(‘serve-static’)返回的是一个方法<ul>
<li>1.第一个参数是静态资源目录；</li>
<li>2.返回的还是一个方法，也就是serve</li>
<li>3.这个方法是为了启用；</li>
</ul>
</li>
</ul>
</li>
<li>2.调用方法创建静态资源服务并指定静态资源服务目录</li>
<li>3.启用静态资源服务功能<ul>
<li>1.第三个参数，和路由的启用一样，是一个回调函数。必须参数；</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> serveStatic = <span class="built_in">require</span>(<span class="string">&#x27;serve-static&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> serve = serveStatic(<span class="string">&#x27;public&#x27;</span>)</span><br><span class="line">server.on(<span class="string">&#x27;request&#x27;</span>, <span class="function">() =&gt;</span> &#123; </span><br><span class="line">    serve(req, res)</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">3000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>5.在app.js中，有了app.listen，就不需要server.listen了；</p>
<p>6.刷新页面；css获取成功；</p>
<p>7.app.js的代码样子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 10. 引入静态资源访问模块</span></span><br><span class="line"><span class="keyword">const</span> serveStatic = <span class="built_in">require</span>(<span class="string">&#x27;serve-static&#x27;</span>);</span><br><span class="line"><span class="comment">// 10.1 实现静态资源访问服务</span></span><br><span class="line"><span class="keyword">const</span> serve = serveStatic(path.join(__dirname, <span class="string">&#x27;public&#x27;</span>));</span><br><span class="line"><span class="comment">// 3.当客户端访问服务器端的时候</span></span><br><span class="line">app.on(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    router(req, res, <span class="function">() =&gt;</span> &#123; &#125;);</span><br><span class="line">    <span class="comment">// 10.2 启用静态资源访问功能</span></span><br><span class="line">    serve(req, res, <span class="function">() =&gt;</span> &#123; &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>7.1 之前写的原生代码的样子：</p>
<ul>
<li>1.是模板继承吗？</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.art 首页模板--&gt;</span></span><br><span class="line">&#123;&#123;extend &#x27;./layout.art&#x27;&#125;&#125;</span><br><span class="line">&#123;&#123;block &#x27;head&#x27;&#125;&#125; <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;custom.css&quot;</span>&gt;</span> &#123;&#123;/block&#125;&#125;</span><br><span class="line">&#123;&#123;block &#x27;content&#x27;&#125;&#125; <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is just an awesome page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> &#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>2.如果是老办法，一百个模板，岂不是写一百次；</li>
</ul>
<p>8.复习；</p>
<h5 id="2-列表页面"><a href="#2-列表页面" class="headerlink" title="2. 列表页面"></a>2. 列表页面</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/list&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> html = template(<span class="string">&#x27;list.art&#x27;</span>, &#123;&#125;);</span><br><span class="line">    res.end(html);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>就完了；</li>
</ul>
<p>1.不用到各个页面模板写css了；</p>
<p>2.不需要再处理，第二个渲染模板的静态资源了；</p>
<h4 id="1-6-传递数据库"><a href="#1-6-传递数据库" class="headerlink" title="1.6 传递数据库"></a>1.6 传递数据库</h4><p>添加学生信息功能步骤分析</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=77">https://www.bilibili.com/video/BV1j5411K7EH?p=77</a></p>
</blockquote>
<p>1.在模板的表单中指定请求地址与请求方式</p>
<p>2.为每一个表单项添加name属性</p>
<p>3.添加实现学生信息功能路由</p>
<p>4.接收客户端传递过来的学生信息</p>
<p>5.将学生信息添加到数据库中</p>
<p>6.将页面重定向到学生信息列表页面</p>
<h5 id="1-表单操作"><a href="#1-表单操作" class="headerlink" title="1.表单操作"></a>1.表单操作</h5><p>1.给index.art修改代码</p>
<ul>
<li><p>1.<code>&lt;form action=&quot;/add&quot; method=&quot;POST&quot;&gt;</code></p>
</li>
<li><p>2.给input添加name；</p>
<ul>
<li>1.注意name，要与数据库集合的规则名相同；</li>
<li>2.所以name是name，不是username，集合规则那边是name，不是username；</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure>

<ul>
<li><p>3.有一个下拉菜单，这个把name写在哪？</p>
<ul>
<li><p>1.写在select那里；</p>
<p><code>&lt;select class=&quot;normal&quot; name=&quot;collage&quot;&gt;</code></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="2-路由"><a href="#2-路由" class="headerlink" title="2. 路由"></a>2. 路由</h5><p>1.新写一个router.post</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 11.实现学生信息添加功能路由</span></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line">router.post(<span class="string">&#x27;/add&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 接受post请求参数</span></span><br><span class="line">    <span class="keyword">let</span> formData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">param</span> =&gt;</span> &#123;</span><br><span class="line">        formData += param;</span><br><span class="line">    &#125;);</span><br><span class="line">    req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(formData);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>2.处理成对象，好像是新方法；</p>
<ul>
<li>1.不，是老办法；</li>
<li>2.引入querystring模块</li>
<li>3.querystring.parse</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 11.1 引入querystring模块</span></span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line">    req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 11.2 对象化</span></span><br><span class="line">        <span class="keyword">let</span> date = querystring.parse(formData);</span><br><span class="line">        <span class="built_in">console</span>.log(date);</span><br><span class="line">        res.end(<span class="string">&#x27;响应成功，结束&#x27;</span>);</span><br><span class="line">        <span class="comment">// 12. 乱码</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="3-传递给数据库"><a href="#3-传递给数据库" class="headerlink" title="3. 传递给数据库"></a>3. 传递给数据库</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">req.on(<span class="string">&#x27;end&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 11.2 对象化</span></span><br><span class="line">    <span class="keyword">let</span> date = querystring.parse(formData);</span><br><span class="line">    <span class="comment">// 13.传递数据库</span></span><br><span class="line">    <span class="comment">// 13.1 异步函数，await</span></span><br><span class="line">    <span class="keyword">await</span> student.create(date);</span><br><span class="line">    res.writeHead(<span class="number">301</span>, &#123;</span><br><span class="line">        Location: <span class="string">&#x27;/list&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(date);</span><br><span class="line">    res.end();</span><br><span class="line">    <span class="comment">// 12. 乱码</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>1.异步：await student.create(date);</p>
<p>2.直接返回返回值，省略回调函数；</p>
<ul>
<li><p>1.这里的回调函数是什么？去15-4.2-2. 创建文档–增；看以前笔记</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Course.create(&#123;<span class="attr">name</span>: <span class="string">&#x27;JavaScript基础&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;黑马讲师&#x27;</span>, <span class="attr">isPublish</span>: <span class="literal">true</span>&#125;, <span class="function">(<span class="params">err, doc</span>) =&gt;</span> &#123; </span><br><span class="line">     <span class="comment">//  错误对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">     <span class="comment">//  当前插入的文档</span></span><br><span class="line">    <span class="built_in">console</span>.log(doc)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>




</li>
</ul>
<p>2.1 老样子；问：await之后，怎么输出错误信息？</p>
<ul>
<li>1.百度了一下，全是try/catch；</li>
<li>2.还没有.then+.catch方便</li>
<li>3.也许后面的Express框架会说；</li>
</ul>
<h5 id="4-完毕"><a href="#4-完毕" class="headerlink" title="4. 完毕"></a>4. 完毕</h5><p>1.完毕，现在我们实习了数据添加到数据库当中；</p>
<p>2.不过在list那边，还不会呈现出来；</p>
<h4 id="1-7-list呈现"><a href="#1-7-list呈现" class="headerlink" title="1.7 list呈现"></a>1.7 list呈现</h4><h5 id="1-分析"><a href="#1-分析" class="headerlink" title="1. 分析"></a>1. 分析</h5><p>0.学生信息列表页面分析.</p>
<p>1.从数据库中将所有的学生信息查询出来<br>2.通过模板引擎将学生信息和HTML模板进行拼接<br>3.将拼接好的HTML模板响应给客户端</p>
<h5 id="2-模板拼接"><a href="#2-模板拼接" class="headerlink" title="2. 模板拼接"></a>2. 模板拼接</h5><p>4.找到呈现信息列表的路由；</p>
<p>5.查询学生信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 14. 查询学生信息</span></span><br><span class="line"><span class="keyword">let</span> students = <span class="keyword">await</span> student.find();</span><br></pre></td></tr></table></figure>



<p>6.找到了学生信息，与模板拼接；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/list&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 14. 查询学生信息</span></span><br><span class="line">    <span class="keyword">let</span> students = <span class="keyword">await</span> student.find();</span><br><span class="line">    <span class="keyword">let</span> html = template(<span class="string">&#x27;list.art&#x27;</span>, &#123;</span><br><span class="line">        students: students,</span><br><span class="line">    &#125;);</span><br><span class="line">    res.end(html);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>1.let students = await student.find();<ul>
<li>1.students是一个数组；</li>
</ul>
</li>
</ul>
<p>7.在list.art写循环，自动生成列表；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>学员信息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/list.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caption</span>&gt;</span>学员信息<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>邮箱地址<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>爱好<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>所属学院<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>入学时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;&#123;each students&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;$value.name&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;$value.age&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;$value.sex&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;$value.email&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;$value.hobbies&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;$value.collage&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;$value.enterDate&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;&#123;/each&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>变化：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;each students&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;$value.name&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;$value.age&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;$value.sex&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;$value.email&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;$value.hobbies&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;$value.collage&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;$value.enterDate&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;&#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-格式问题"><a href="#3-格式问题" class="headerlink" title="3. 格式问题"></a>3. 格式问题</h5><p>1.list能呈现了；但是：</p>
<p><img src="../../img/15.1/15.png" alt="15"></p>
<p>这些格式有问题；</p>
<p>2.性别</p>
<p>2.1 去添加数据的模块，看单选框里面存的值是什么？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">                性别:</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span> 男</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span> 女</span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.2 value是0与1</p>
<ul>
<li>1.改成男和女吗？</li>
<li>2.不，有时候会这样，value会写一些代替的数字</li>
</ul>
<p>2.3 在模板那边改；</p>
<p><code>&lt;th&gt;&#123;&#123;$value.sex == 0 ? '男' : '女'&#125;&#125;&lt;/th&gt;</code></p>
<p>3.同理去爱好修改：</p>
<ul>
<li>1.可能这里有三个吧，岂不是又是一个循环？</li>
<li>2.视频里面直接改value了</li>
</ul>
<p><img src="../../img/15.1/16.png" alt="16"></p>
<p>3.1 但是里面是数组，而且以前的也没变；</p>
<ul>
<li>1.还是要循环；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;&#123;each students&#125;&#125;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;th&gt;&#123;&#123;$value.name&#125;&#125;&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;&#123;&#123;$value.age&#125;&#125;&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;&#123;&#123;$value.sex == <span class="number">0</span> ? <span class="string">&#x27;男&#x27;</span> : <span class="string">&#x27;女&#x27;</span>&#125;&#125;&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;&#123;&#123;$value.email&#125;&#125;&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;</span><br><span class="line">        &#123;&#123;each $value.hobbies&#125;&#125;</span><br><span class="line">        &lt;span&gt;&#123;&#123;$value&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &#123;&#123;/each&#125;&#125;</span><br><span class="line">    &lt;/th&gt;</span><br><span class="line">    &lt;th&gt;&#123;&#123;$value.collage&#125;&#125;&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;&#123;&#123;$value.enterDate&#125;&#125;&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure>



<p>4.时间格式</p>
<ul>
<li><p>1.依然像上次一样，用第三方模块处理；</p>
</li>
<li><p>2.先引入：</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 14. 引入时间模块</span></span><br><span class="line"><span class="keyword">const</span> dateformat = <span class="built_in">require</span>(<span class="string">&#x27;dateformat&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>4.1 导入时间模板变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 14.1 导入时间模板变量</span></span><br><span class="line">template.defaults.imports.date_format = dateformat;</span><br></pre></td></tr></table></figure>



<p>4.2 去list.art直接使用方法，格式化；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;th&gt;</span><br><span class="line">    &#123;&#123;each $value.hobbies&#125;&#125;</span><br><span class="line">    &lt;span&gt;&#123;&#123;$value&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &#123;&#123;/each&#125;&#125;</span><br><span class="line">&lt;/th&gt;</span><br><span class="line">&lt;th&gt;&#123;&#123;$value.collage&#125;&#125;&lt;/th&gt;</span><br><span class="line">&lt;!-- <span class="number">14.3</span> --&gt;</span><br><span class="line">&lt;th&gt;&#123;&#123;date_format($value.enterDate,<span class="string">&#x27;yyyy-mm-dd HH:MM:ss 星期N&#x27;</span>)&#125;&#125;&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>1.为什么可以直接使用方法date_format？</p>
</li>
<li><p>2.app.js与list.art它们到底是什么关系？</p>
<ul>
<li><p>1.感觉这个是联系点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> html = template(<span class="string">&#x27;list.art&#x27;</span>, &#123;</span><br><span class="line">    students: students,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.const html = template(‘模板路径’, 数据);</p>
</li>
<li><p>3.第一个参数，只是模板路径；表示我用了某某模板</p>
</li>
<li><p>4.然后这个模板也能用app.js的方法了吗？</p>
</li>
<li><p>5.还是说，就像原生代码一样，只是有合在一起的效果，但视觉上是分离的</p>
</li>
<li><p>6.我认为上面假设合理；</p>
</li>
</ul>
</li>
</ul>
<hr>
<h3 id="2-优化"><a href="#2-优化" class="headerlink" title="2. 优化"></a>2. 优化</h3><p>1.有没有相对独立的代码</p>
<p>2.路由；</p>
<h4 id="2-1-路由"><a href="#2-1-路由" class="headerlink" title="2.1 路由"></a>2.1 路由</h4><p>1.把路由分离</p>
<p>2.在案例文件夹下面创建route文件夹，route文件夹下创建index.js文件</p>
<p>3.剪切代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 7.呈递学生档案信息页面</span></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line">router.get(<span class="string">&#x27;/add&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 9.渲染模板</span></span><br><span class="line">    <span class="keyword">let</span> html = template(<span class="string">&#x27;index.art&#x27;</span>, &#123;&#125;);</span><br><span class="line">    res.end(html);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line">router.get(<span class="string">&#x27;/list&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 14. 查询学生信息</span></span><br><span class="line">    <span class="keyword">let</span> students = <span class="keyword">await</span> student.find();</span><br><span class="line">    <span class="keyword">let</span> html = template(<span class="string">&#x27;list.art&#x27;</span>, &#123;</span><br><span class="line">        students: students,</span><br><span class="line">    &#125;);</span><br><span class="line">    res.end(html);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 11.实现学生信息添加功能路由</span></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line">router.post(<span class="string">&#x27;/add&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 接受post请求参数</span></span><br><span class="line">    <span class="keyword">let</span> formData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">param</span> =&gt;</span> &#123;</span><br><span class="line">        formData += param;</span><br><span class="line">    &#125;);</span><br><span class="line">    req.on(<span class="string">&#x27;end&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="comment">// 11.2 对象化</span></span><br><span class="line">        <span class="keyword">let</span> date = querystring.parse(formData);</span><br><span class="line">        <span class="comment">// 13.传递数据库</span></span><br><span class="line">        <span class="comment">// 13.1 异步函数，await</span></span><br><span class="line">        <span class="keyword">await</span> student.create(date);</span><br><span class="line">        res.writeHead(<span class="number">301</span>, &#123;</span><br><span class="line">            Location: <span class="string">&#x27;/list&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">console</span>.log(date);</span><br><span class="line">        res.end();</span><br><span class="line">        <span class="comment">// 12. 乱码</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>4.剪切需要的模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5.引入数据库集合模块</span></span><br><span class="line"><span class="keyword">const</span> student = <span class="built_in">require</span>(<span class="string">&#x27;../model/user&#x27;</span>);</span><br><span class="line"><span class="comment">// 6.引入router模块</span></span><br><span class="line"><span class="keyword">const</span> getRouter = <span class="built_in">require</span>(<span class="string">&#x27;router&#x27;</span>);</span><br><span class="line"><span class="comment">// 6.1获取路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = getRouter();</span><br><span class="line"><span class="comment">// 11.1 引入querystring模块</span></span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>1.注意user.js的路径</li>
</ul>
<p>5.需要复制的代码模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 8.引入模板引擎</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>6.导出router；引入router</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 15. 引入分离出去的router</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./route/index&#x27;</span>);</span><br></pre></td></tr></table></figure>



<hr>
<h1 id="6-Express框架"><a href="#6-Express框架" class="headerlink" title="6. Express框架"></a>6. Express框架</h1><p> 目标：</p>
<p>能够使用Express创建web服务器<br> 能够使用Express处理请求参数<br> 能够使用Express处理静态资源<br> 能够使用中间件处理请求<br> 能够在Express中集成art-template模板引擎</p>
<p>目录：</p>
<p> Express框架简介及初体验<br> Express框架请求处理<br> express-art-template模板引擎<br> Express中间件</p>
<h2 id="6-1-Express框架简介及初体验"><a href="#6-1-Express框架简介及初体验" class="headerlink" title="6.1 Express框架简介及初体验"></a>6.1 Express框架简介及初体验</h2><h3 id="1-Express框架是什么"><a href="#1-Express框架是什么" class="headerlink" title="1. Express框架是什么"></a>1. Express框架是什么</h3><p>1.Express是一个基于Node平台的web应用开发框架，它提供了一系列的强大特性，帮助你创建各种Web应用。我们可以使用 npm install express 命令进行下载。</p>
<h3 id="2-Express框架特性"><a href="#2-Express框架特性" class="headerlink" title="2. Express框架特性"></a>2. Express框架特性</h3><p>1.提供了方便简洁的路由定义方式</p>
<ul>
<li>1.第三方模块router，出至于express</li>
</ul>
<p>2.对获取HTTP请求参数进行了简化处理</p>
<p>3.对模板引擎支持程度高，方便渲染动态HTML页面</p>
<p>4.提供了中间件机制有效控制HTTP请求</p>
<p>5.拥有大量第三方中间件对功能进行扩展</p>
<h3 id="3-对比之路由"><a href="#3-对比之路由" class="headerlink" title="3. 对比之路由"></a>3. 对比之路由</h3><p>1.原生Node.js与Express框架对比之路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.on(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取客户端的请求路径</span></span><br><span class="line">    <span class="keyword">let</span> &#123; pathname &#125; = url.parse(req.url);</span><br><span class="line">    <span class="comment">// 对请求路径进行判断 不同的路径地址响应不同的内容</span></span><br><span class="line">    <span class="keyword">if</span> (pathname == <span class="string">&#x27;/&#x27;</span> || pathname == <span class="string">&#x27;index&#x27;</span>) &#123;</span><br><span class="line">       res.end(<span class="string">&#x27;欢迎来到首页&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname == <span class="string">&#x27;/list&#x27;</span>) &#123;</span><br><span class="line">       res.end(<span class="string">&#x27;欢迎来到列表页页&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname == <span class="string">&#x27;/about&#x27;</span>) &#123;</span><br><span class="line">       res.end(<span class="string">&#x27;欢迎来到关于我们页面&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       res.end(<span class="string">&#x27;抱歉, 您访问的页面出游了&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当客户端以get方式访问/时</span></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 对客户端做出响应</span></span><br><span class="line">    res.send(<span class="string">&#x27;Hello Express&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当客户端以post方式访问/add路由时</span></span><br><span class="line">app.post(<span class="string">&#x27;/add&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">   res.send(<span class="string">&#x27;使用post方式请求了/add路由&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="4-对比之获取请求参数"><a href="#4-对比之获取请求参数" class="headerlink" title="4. 对比之获取请求参数"></a>4. 对比之获取请求参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.on(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 获取GET参数</span></span><br><span class="line">   <span class="keyword">let</span> &#123;query&#125; = url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line">   <span class="comment">// 获取POST参数</span></span><br><span class="line">   <span class="keyword">let</span> postData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">   req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">       postData += chunk;</span><br><span class="line">   &#125;);</span><br><span class="line">   req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(querystring.parse(postData)</span><br><span class="line">   &#125;)); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 获取GET参数</span></span><br><span class="line">   <span class="built_in">console</span>.log(req.query);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 获取POST参数</span></span><br><span class="line">   <span class="built_in">console</span>.log(req.body);</span><br><span class="line">&#125;) </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="5-Express初体验"><a href="#5-Express初体验" class="headerlink" title="5. Express初体验"></a>5. Express初体验</h3><p>1.下载框架：npm install express</p>
<p>2.创建文件夹 7-express，创建 1.js</p>
<p>3.引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>4.引入了express，就不需要http了</p>
<p>4.1 创建网站服务器（不是本地服务器吗？）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.创建网站服务器</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br></pre></td></tr></table></figure>

<ul>
<li>1.直接就是调用方法。。。</li>
</ul>
<p>4.2 监听端口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.监听端口</span></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;网站服务器启动成功&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>5.创建路由。</p>
<ul>
<li>1.在express方法里面，有get方法与post方法；等于app有</li>
</ul>
<p><code>app.get()</code></p>
<ul>
<li><p>2.当客户端什么都不写，只访问localhost:3000；</p>
<ul>
<li>1.默认的地址是‘/’；</li>
<li>2.<code>app.get(&#39;/&#39;)</code></li>
</ul>
</li>
<li><p>3.第二个参数，是请求处理函数，也是回调函数。</p>
<ul>
<li><code>app.get(&#39;/&#39;, (req,res)=&gt;&#123;&#125;)</code></li>
</ul>
</li>
<li><p>4.对客户端响应；</p>
<ul>
<li><p>1.这里不用end了，而是send[^9]；</p>
</li>
<li><p>2.在send方法里面，会自动检查响应数据的类型，并自动写在响应报头中；</p>
<ul>
<li>1.同时也会设置响应类型的编码，以防止乱码的情况</li>
</ul>
</li>
<li><p>3.还会自动设置http状态码；</p>
</li>
<li><p>4.可以去F12-network看</p>
</li>
<li><p>5.找不到页面也进行了优化；</p>
</li>
<li><p>6.还可以写json数据，以前的end是不行的；</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4.创建路由</span></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">&#x27;Hello Express&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/list&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(&#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>6.以上是入门案例与基础；</p>
<hr>
<h2 id="6-2-中间件"><a href="#6-2-中间件" class="headerlink" title="6.2 中间件"></a>6.2 中间件</h2><h3 id="1-什么是中间件"><a href="#1-什么是中间件" class="headerlink" title="1. 什么是中间件"></a>1. 什么是中间件</h3><blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=81&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=81&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.中间件就是express提供的一堆方法，可以接收客户端发来的请求、可以对请求做出响应，也可以将请求继续交给下一个中间件继续处理。</p>
<ul>
<li>1.中间件，是专门接收请求与处理请求的。视频说的</li>
<li>2.中间件，像阀门；</li>
</ul>
<p><img src="../../img/15.1/17.png" alt="17"></p>
<p>2.中间件主要由两部分构成，中间件方法以及请求处理函数。<br>中间件方法由Express提供，负责拦截请求，请求处理函数由开发人员提供，负责处理请求。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;请求路径&#x27;</span>, <span class="string">&#x27;处理函数&#x27;</span>)   <span class="comment">// 接收并处理get请求</span></span><br><span class="line">app.post(<span class="string">&#x27;请求路径&#x27;</span>, <span class="string">&#x27;处理函数&#x27;</span>)  <span class="comment">// 接收并处理post请求</span></span><br></pre></td></tr></table></figure>

<ul>
<li>1.刚使用的路由，就是中间件</li>
</ul>
<p>3.可以针对同一个请求设置多个中间件，对同一个请求进行多次处理。<br>默认情况下，请求从上到下依次匹配中间件，一旦匹配成功，终止匹配。</p>
<p>3.1 请求处理函数，除了请求参数，响应参数，还有第三个参数，next方法；</p>
<ul>
<li>可以调用next方法将请求的控制权交给下一个中间件，直到遇到结束请求的中间件。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/request&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    req.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">&#x27;/request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(req.name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="2-app-use中间件用法"><a href="#2-app-use中间件用法" class="headerlink" title="2. app.use中间件用法"></a>2. app.use中间件用法</h3><p>1.app.use 匹配所有的请求方式，可以直接传入请求处理函数，代表接收所有的请求。</p>
<ul>
<li>1.无论get，post；</li>
<li>2.当然如果它在后面，前面的请求被其他路由处理了，也不会接收到；</li>
<li>3.用变量常量的说话：没有变量提升；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.url);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>2.app.use 第一个参数也可以传入请求地址，代表不论什么请求方式，只要是这个请求地址就接收这个请求。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(<span class="string">&#x27;/admin&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.url);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>3.注意，上面两者，不会互相阻断。两个路由都可以处理/admin；</p>
<h3 id="3-中间件应用"><a href="#3-中间件应用" class="headerlink" title="3. 中间件应用"></a>3. 中间件应用</h3><p>1.路由保护，客户端在访问需要登录的页面时，可以先使用中间件判断用户登录状态，用户如果未登录，则拦截请求，直接响应，禁止用户进入需要登录的页面。</p>
<p>1.1 代码：</p>
<ul>
<li>1.然而真实的判断是否登录，这里不是。</li>
<li>2.只是模拟的；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1.引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建网站服务器</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.判断是否登录</span></span><br><span class="line">app.use(<span class="string">&#x27;/admin&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 用户没有登录</span></span><br><span class="line">    <span class="keyword">let</span> isLogin = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isLogin) &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.send(<span class="string">&#x27;还没有登录，不能访问admin&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.创建需要登录才能访问的路由</span></span><br><span class="line">app.get(<span class="string">&#x27;/admin&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">&#x27;已经登录，可以访问&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.监听端口</span></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;网站服务器启动成功&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>2.网站维护公告，在所有路由的最上面定义接收所有请求的中间件，直接为客户端做出响应，网站正在维护中。</p>
<p>2.1 在所有路由前面，写use路由；不写next()即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 6.网站公告</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">&#x27;当前网站正在维护，可以问文杰&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>3.自定义404页面</p>
<p>3.1 这个就是放在最下面，上面的所有路由都没有接收到请求，那么这个请求的地址，就是404了</p>
<ul>
<li>1.但是，send返回的状态码是200</li>
<li>2.如果想改成404；<ul>
<li>1.使用res.status[^10]()</li>
<li>2.参数是状态码；</li>
</ul>
</li>
<li>3.它可以链式调用；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 7. 自定义404</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 为客户端响应404状态码，以及提示信息</span></span><br><span class="line">    res.status(<span class="number">404</span>).send(<span class="string">&#x27;404，没有找到这个地址的路由&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="4-错误处理中间件"><a href="#4-错误处理中间件" class="headerlink" title="4. 错误处理中间件"></a>4. 错误处理中间件</h3><h4 id="4-1-同步出错"><a href="#4-1-同步出错" class="headerlink" title="4.1 同步出错"></a>4.1 同步出错</h4><p>1.在程序执行的过程中，不可避免的会出现一些无法预料的错误，比如文件读取失败，数据库连接失败。错误处理中间件是一个集中处理错误的地方。</p>
<ul>
<li>1.逻辑错误，在开发阶段</li>
<li>2.读取文件，文件不在，或者等等错误，必须是执行后</li>
<li>3.而一旦出错，代码就会中断。也不会返回东西</li>
<li>4.必须要在开发阶段，处理错误才行；</li>
</ul>
<p>1.1 如果在每个可能出错的地方添加处理错误的代码；就很多了</p>
<ul>
<li>1.中间件提供了一个集合</li>
<li>2.注意有4个参数，不过next用不到的话，就可以不写；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.status(<span class="number">500</span>).send(<span class="string">&#x27;服务器发生未知错误&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>1.2 去代码验证：创建4.js</p>
<ul>
<li><p>1.创建错误处理中间件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4.错误处理中间件</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.status(<span class="number">500</span>).send(<span class="string">&#x27;服务器端错误&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.创建故意错误</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5.创建故意错误</span></span><br><span class="line">app.get(<span class="string">&#x27;/index&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Error</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>1.3 Error()</p>
<ul>
<li><p>1.在node.js当中，有一个构造函数，叫Error()</p>
<ul>
<li>构造函数，是包对象的；</li>
</ul>
</li>
<li><p>2.它的作用：创建错误；</p>
</li>
<li><p>3.代码：</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5.创建故意错误</span></span><br><span class="line">app.get(<span class="string">&#x27;/index&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;程序发生了未知错误&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>1.4 在处理错误中间中的 err参数，其实就是 new Error对象；</p>
<ul>
<li>1.下面的一个键名：message，就是里面的信息；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4.错误处理中间件</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// res.status(500).send(&#x27;服务器端错误&#x27;);</span></span><br><span class="line">    res.status(<span class="number">500</span>).send(err.message);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>1.5 执行文件，nodemon 4.js</p>
<p>1.6 没有错误，不会执行错误中间件；</p>
<p>1.7 注意，错误中间件，只能捕获到同步代码出错；</p>
<p>1.8 上面的总代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建网站服务器</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.创建故意错误</span></span><br><span class="line">app.get(<span class="string">&#x27;/index&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;程序发生了未知错误&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.错误处理中间件</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// res.status(500).send(&#x27;服务器端错误&#x27;);</span></span><br><span class="line">    res.status(<span class="number">500</span>).send(err.message);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.监听端口</span></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;网站服务器启动成功&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h4 id="4-2-异步出错"><a href="#4-2-异步出错" class="headerlink" title="4.2 异步出错"></a>4.2 异步出错</h4><p>1.异步出错的时候，需要我们手动去调用错误中间件；</p>
<p>2.当程序出现错误时，调用next()方法，并且将错误信息通过参数的形式传递给next()方法，即可触发错误处理中间件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> app.get(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">     fs.readFile(<span class="string">&quot;/file-does-not-exist&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            next(err);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>3.代码验证：</p>
<p>3.1 引入读取文件模块</p>
<p>3.2 故意读取错误文件</p>
<p>3.3 记得要添加next参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 3.1</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.创建故意错误</span></span><br><span class="line"><span class="comment">// 3.3 记得要添加next参数</span></span><br><span class="line">app.get(<span class="string">&#x27;/index&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// throw new Error(&#x27;程序发生了未知错误&#x27;);</span></span><br><span class="line">    <span class="comment">// 3.2 故意读取错误文件</span></span><br><span class="line">    fs.readFile(<span class="string">&#x27;./dem.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            next(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.send(<span class="string">&#x27;木问题&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.status(<span class="number">500</span>).send(err.message);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;网站服务器启动成功&#x27;</span>);</span><br></pre></td></tr></table></figure>





<h3 id="5-捕获错误"><a href="#5-捕获错误" class="headerlink" title="5. 捕获错误"></a>5. 捕获错误</h3><p>1.在node.js中，异步API的错误信息都是通过回调函数获取的，支持Promise对象的异步API发生错误可以通过catch方法捕获。</p>
<p>2.异步函数执行如果发生错误要如何捕获错误呢？</p>
<ul>
<li>异步函数就特殊了，它是异步代码，但是写成了同步形式；</li>
</ul>
<p>2.1 try catch 可以捕获异步函数以及其他同步代码在执行过程中发生的错误，但是不能其他类型的API发生的错误。</p>
<ul>
<li><p>try/catch，是node.js专门来捕获异步函数的出错的；</p>
</li>
<li><p>1.同时也能捕获同步错误；但不能捕获 除了异步函数的，异步错误</p>
</li>
<li><p>2.同时也为前面解惑了；</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> User.find(&#123;<span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>&#125;)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(ex) &#123;</span><br><span class="line">        next(ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>2.2 语法解析</p>
<ul>
<li>1.try[^11]与catch后面都是大括号</li>
<li>2.try里面写可能出错的代码<ul>
<li>1.没有错误，跳出try/catch</li>
<li>2.报错：进入catch</li>
</ul>
</li>
<li>3.catch[^12]的参数，是错误信息；</li>
</ul>
<p>2.3 代码验证：创建5.js</p>
<ul>
<li>1.我们还是读取文件，但要改造成支持异步函数的形式；</li>
<li>2.需要引入新的模块；fs默认不支持异步函数；<ul>
<li>1.它是util模块下的方法，util模块不熟。但这里先不去查阅了解；</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promisify = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>).promisify;</span><br></pre></td></tr></table></figure>



<ul>
<li>3.异步API化 fs.readFile , 异步函数化 回调函数，</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 3.1</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promisify = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>).promisify;</span><br><span class="line"><span class="comment">// 1.异步API化 fs.readFile</span></span><br><span class="line"><span class="keyword">const</span> readFile = promisify(fs.readFile);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.异步函数化 回调函数</span></span><br><span class="line">app.get(<span class="string">&#x27;/index&#x27;</span>, <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 如果这样，命名行那边会报错，但是客户端看不到</span></span><br><span class="line">    <span class="comment">// await readFile(&#x27;./1111.js&#x27;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.try/catch</span></span><br><span class="line">    <span class="comment">// 3.1 这样写之后，命名行那边不会报错，因为有处理报错</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> readFile(<span class="string">&#x27;./1111.js&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        next(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.status(<span class="number">500</span>).send(err.message);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;网站服务器启动成功&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>2.4 这样写之后，命名行那边不会报错，因为有处理报错。</p>
<ul>
<li>1.程序不会因为某个文件没读取到，而终止所有运行；</li>
</ul>
<h2 id="6-3-Express框架请求处理"><a href="#6-3-Express框架请求处理" class="headerlink" title="6.3 Express框架请求处理"></a>6.3 Express框架请求处理</h2><blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=86&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=86&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<h3 id="1-构建模块化路由"><a href="#1-构建模块化路由" class="headerlink" title="1. 构建模块化路由"></a>1. 构建模块化路由</h3><h4 id="1-1-创建路由"><a href="#1-1-创建路由" class="headerlink" title="1.1 创建路由"></a>1.1 创建路由</h4><p>1.项目的路由是很多的；</p>
<p>2.有时候多了，就要分类；分成各个模块</p>
<p>3.先看一个代码：二级路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>) </span><br><span class="line"><span class="comment">// 创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> home = express.Router();</span><br><span class="line"><span class="comment">// 将路由和请求路径进行匹配</span></span><br><span class="line">app.use(<span class="string">&#x27;/home&#x27;</span>, home);</span><br><span class="line"> <span class="comment">// 在home路由下继续创建路由</span></span><br><span class="line">home.get(<span class="string">&#x27;/index&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">         <span class="comment">//  /home/index</span></span><br><span class="line">        res.send(<span class="string">&#x27;欢迎来到博客展示页面&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>3.1 这句代码：<code>app.use(&#39;/home&#39;, home);</code></p>
<ul>
<li>1.以前home那里，都是写的回调函数，而这里，写的是路由对象；</li>
<li>查看app.use；没看到什么信息</li>
</ul>
<p>3.2  express.Router();的文档倒是没问题，就是创建路由对象。</p>
<blockquote>
<p><a href="http://expressjs.com/en/api.html#express.router">http://expressjs.com/en/api.html#express.router</a></p>
</blockquote>
<ul>
<li>1.平常在express的框架下，处理get请求，post请求，都是在app(服务器)下处理的</li>
<li>2.而这个路由对象，居然可以替代app；来形成几个层次的路由；</li>
</ul>
<p>4.这个怎么模块化了？模块化到底是什么？</p>
<ul>
<li><p>1.回想刚学node的时候</p>
<blockquote>
<p>Node.js规定一个==JavaScript文件==就是一个模块，模块==内部定义的变量和函数==默认情况下在==外部无法得到==</p>
</blockquote>
</li>
<li><p>2.也就是说，express的路由，会和上面没用express框架的路由一样，会在一个单独的js文件。不在app.js里</p>
</li>
</ul>
<p>5.视频说，上面是创建路由的基础代码。上面才是创建路由？那之前的app.get，app.post，其实不是在创建路由？</p>
<ul>
<li>1.不，我感觉是路由，反正是路由的功能；</li>
</ul>
<h4 id="1-2-路由模块化"><a href="#1-2-路由模块化" class="headerlink" title="1.2 路由模块化"></a>1.2 路由模块化</h4><p>6.看代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// home.js</span></span><br><span class="line"><span class="keyword">const</span> home = express.Router(); </span><br><span class="line">home.get(<span class="string">&#x27;/index&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">&#x27;欢迎来到博客展示页面&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = home;</span><br></pre></td></tr></table></figure>



<p>6.1 先是创建了home路由，再用home.get；路由再路由，创建了2级路由；</p>
<p>7.上面，其实就已经是一个模块</p>
<p>8.看另一个模块：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// admin.js</span></span><br><span class="line"><span class="keyword">const</span> admin = express.Router();</span><br><span class="line">admin.get(<span class="string">&#x27;/index&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">&#x27;欢迎来到博客管理页面&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = admin;</span><br></pre></td></tr></table></figure>



<p>8.1 和6一模一样；最后，要记得导出路由对象；</p>
<ul>
<li>1.创建路由对象</li>
<li>2.路由再路由，二级路由。</li>
<li>3.res.send返回什么；</li>
</ul>
<p>8.2 二级路由的回调函数里面，都没看到req，与res；</p>
<p>9.要想使用路由模块，还是需要在app引入，然后为每个路由模块，匹配请求路径；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> home = <span class="built_in">require</span>(<span class="string">&#x27;./route/home.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> admin = <span class="built_in">require</span>(<span class="string">&#x27;./route/admin.js&#x27;</span>);</span><br><span class="line">app.use(<span class="string">&#x27;/home&#x27;</span>, home);</span><br><span class="line">app.use(<span class="string">&#x27;/admin&#x27;</span>, admin);</span><br></pre></td></tr></table></figure>



<p>10.代码验证：上面的6.js没写东西，就写使用路由模块吧；</p>
<ul>
<li><p>1.要创建新文件了；route，路由文件夹；装路由模块；为啥少一个r，不是router；查查两个单词；</p>
</li>
<li><blockquote>
<p>route<br>英 [ruːt]   美 [ruːt]<br>n.路线;路途;(公共汽车和列车等的)常规路线，固定线路;途径;渠道<br>v.按某路线发送</p>
</blockquote>
<blockquote>
<p>router<br>英 [ˈruːtə(r) , ˈraʊtə(r)]  美 [ˈruːtər , ˈraʊtər]<br>n.路由器(传送信息的专用网络设备)<br>n.槽刨</p>
</blockquote>
</li>
<li><p>2.感觉不出什么区别，不过，规律是：文件夹使用route，代码里面基本都是router；模块名，方法名也是router</p>
</li>
</ul>
<p>10.1 route文件夹下，创建home.js，admin.js</p>
<ul>
<li><p>1.写入上面的代码；要引入express模块，而且二级路由回调函数写了参数！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// home.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"> <span class="keyword">const</span> home = express.Router(); </span><br><span class="line"> home.get(<span class="string">&#x27;/index&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">     res.send(<span class="string">&#x27;欢迎来到博客展示页面&#x27;</span>);</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="built_in">module</span>.exports = home;</span><br></pre></td></tr></table></figure>
</li>
<li><pre><code class="js"> <span class="comment">// admin.js</span>
<span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);
 <span class="keyword">const</span> admin = express.Router();
 admin.get(<span class="string">'/index'</span>, (req,res) =&gt; &#123;
     res.send(<span class="string">'欢迎来到博客管理页面'</span>);
 &#125;);
 <span class="built_in">module</span>.exports = admin;
&lt;!--hexoPostRenderEscape:&lt;figure class="highlight http"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;10.2 等等！这个创建路由对象，是不是为了分离而用的？以前不用express框架是怎么分离路由的？&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&amp;lt;img src=&amp;quot;../../img/15.1/18.png&amp;quot; alt=&amp;quot;18&amp;quot; style=&amp;quot;zoom:80%;&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;+ 1.为什么是二级路由？都是这个过程，以前就不是；因为↑&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;10.3 app.js使用模块：&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;```js&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;const express = require(&amp;#x27;express&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;const app = express();&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;const home = require(&amp;#x27;./route/home&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;const admin = require(&amp;#x27;./route/admin&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;app.use(&amp;#x27;/home&amp;#x27;, home);&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;app.use(&amp;#x27;/admin&amp;#x27;, admin);&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="attribute"&gt;app.listen(3000);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre>
</li>
<li><p>1.app.js就这点代码，现在真的变整洁了；</p>
</li>
</ul>
<p>10.4 运行测试；</p>
<p><a href="http://localhost:3000/admin/index">http://localhost:3000/admin/index</a></p>
<p><a href="http://localhost:3000/home/index">http://localhost:3000/home/index</a></p>
<hr>
<h3 id="2-GET参数的获取"><a href="#2-GET参数的获取" class="headerlink" title="2. GET参数的获取"></a>2. GET参数的获取</h3><p>1.Express框架中使用req.query即可获取GET参数，框架内部会将GET参数转换为对象并返回。</p>
<ul>
<li><p>1.不需要引入url模块了；</p>
</li>
<li><p>2.不过实验证明，即使没有引入url模块，req.url仍然有效果；</p>
</li>
<li><p>3.假设：是你记错了，url模块不是这个功能</p>
<ul>
<li>1.找笔记</li>
</ul>
<blockquote>
<ul>
<li><p>1.在node里面，有一种模块叫内置模块。</p>
</li>
<li><p>2.而这里面有一个叫url的内置模块。用于处理url地址；</p>
</li>
<li><p>3.url有一个解析的方法：url.parse。</p>
<ul>
<li>3.1 它都够把url转换成对象的形式；</li>
<li>url.parse(req.url)；转换请求地址</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p>4.那么，在不引入的情况下，url.parse有效果吗？即使是弃用的方法，在引入url的情况是有效果的，实验不引入有没有效果；</p>
<ul>
<li>1.如果有效果，那么不引入也没事。</li>
<li>2.如果没效果，那确实需要引入；</li>
<li>3.结果：引入了才有效果；</li>
</ul>
</li>
<li><p>5.那么新方法需要引入吗？不需要引入；</p>
<ul>
<li>1.那也是应该的，因为没有使用url.xxoo；</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接收地址栏中问号后面的参数</span></span><br><span class="line"><span class="comment">// 例如: http://localhost:3000/?name=zhangsan&amp;age=30</span></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(req.query); <span class="comment">// &#123;&quot;name&quot;: &quot;zhangsan&quot;, &quot;age&quot;: &quot;30&quot;&#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>2.验证代码；</p>
<ul>
<li>1.创建新文件：7.js；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.query); <span class="comment">// &#123;&quot;name&quot;: &quot;zhangsan&quot;, &quot;age&quot;: &quot;30&quot;&#125;</span></span><br><span class="line">    res.send(req.query);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;网站服务器启动成功&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>2.然后网址：<a href="http://localhost:3000/?name=zhangsan&amp;age=30">http://localhost:3000/?name=zhangsan&amp;age=30</a><ul>
<li>1.返回：{“name”:”zhangsan”,”age”:”30”}</li>
</ul>
</li>
<li>3.如果没有问候后面的，就是空对象；</li>
</ul>
<p>3.获取get参数，很轻松，express框架</p>
<h3 id="3-post参数获取"><a href="#3-post参数获取" class="headerlink" title="3. post参数获取"></a>3. post参数获取</h3><blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=89&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=89&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.Express中接收post请求参数需要借助第三方包 body-parser[^13]。</p>
<ul>
<li>1.urlencoded = url_encoded[^14]</li>
<li>2.extended[^15]</li>
<li>3.这个模块是express官方提供的；<ul>
<li>1.为了使express小。要用的时候再npm下载</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入body-parser模块</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="comment">// 配置body-parser模块</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"><span class="comment">// 接收请求</span></span><br><span class="line">app.post(<span class="string">&#x27;/add&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 接收请求参数</span></span><br><span class="line">   <span class="built_in">console</span>.log(req.body);</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>



<p>1.1  app.use(bodyParser.urlencoded({ extended: false }));</p>
<ul>
<li>1.抢先在所有请求前，先用bodyParser下的urlencoded方法处理；</li>
<li>2.该方法会检测当前请求中是否有请求参数，如果有，会接收请求参数，处理成对象类型；</li>
<li>3.然后再为req对象，添加一个属性，属性的名字是body，并把请求参数的值，赋值了req.body</li>
<li>4.最后在方法内部，调用了next()方法，将请求控制权，交给了下一个中间件</li>
<li>5.所以，在接下来的路由中，我们可以通过req.body拿到这个对象类型的请求参数。</li>
</ul>
<p>1.2 extended: false</p>
<ul>
<li><p>0.这还是个必选参数；</p>
</li>
<li><p>1.扩展</p>
</li>
<li><p>2.当为false时，会使用querystring系统模块处理；</p>
</li>
<li><p>3.当为true时，会使用一个叫QS的第三方模块处理，QS也能把请求参数，转换为对象类型，而且比querystring系统模块功能，更加强大；</p>
</li>
<li><p>4.但是现在flase就够用，加上官方也建议不用的不用；</p>
</li>
</ul>
<p>1.3 代码验证：</p>
<ul>
<li>1.新建文件9.js</li>
<li>2.下载body-parser；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br></pre></td></tr></table></figure>

<ul>
<li>3.说bodyParser被弃用。。。</li>
<li>4.百度了一番，无果，如果有作用效果，那无视弃用信息；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入body-parser模块</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置body-parser模块</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"><span class="comment">// 接收请求</span></span><br><span class="line">app.post(<span class="string">&#x27;/add&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 接收请求参数</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.body);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;网站服务器启动成功&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>1.3.1 创建表单：express文件夹下，创建post.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:3000/add&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>1.3.2 验证；没问题；</p>
<h3 id="4-app-user方法疑惑"><a href="#4-app-user方法疑惑" class="headerlink" title="4. app.user方法疑惑"></a>4. app.user方法疑惑</h3><p>0.app.use(bodyParser.urlencoded({ extended: false }));</p>
<p>1.app.user方法，需要传递一个请求处理函数进去，为什么这里又是方法的调用呢？</p>
<ul>
<li>实际上这个方法的返回值，还是一个方法（函数）。</li>
</ul>
<p>2.代码验证：</p>
<p>2.1 创建新的js；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入body-parser模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// app.use(fn());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1可以等于</span></span><br><span class="line"><span class="comment">// app.use(function (req, res, next) &#123;</span></span><br><span class="line"><span class="comment">//     console.log(req.method);</span></span><br><span class="line"><span class="comment">//     next();</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(req.method);</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;网站服务器启动成功&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>2.2 证明，函数里面的函数，能被调用；</p>
<p>2.3 好处：在调用某个请求函数的同时，可以向这个函数内部，添加一些额外的参数。</p>
<ul>
<li><p>1.在请求函数内部，可以根据参数，改变行为；</p>
</li>
<li><p>2.演示</p>
<ul>
<li>1.我们在<code>app.use(fn());</code>内部写入一个对象；</li>
<li>2.<code>app.use(fn(&#123;a: 1&#125;))</code></li>
<li>3.写入了一个实参，那么这个函数那边必须要有一个形参</li>
<li>4.<code>function fn(obj)</code></li>
<li>5.写一个判断</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 5</span></span><br><span class="line">        <span class="keyword">if</span> (obj.a == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(req.url)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(req.method)</span><br><span class="line">        &#125;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>3.这样就改变了行为….虽然我现在还不知道具体能干嘛；</p>
</li>
</ul>
<p>2.4 总代码；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入body-parser模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">app.use(fn(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1可以等于</span></span><br><span class="line"><span class="comment">// app.use(function (req, res, next) &#123;</span></span><br><span class="line"><span class="comment">//     console.log(req.method);</span></span><br><span class="line"><span class="comment">//     next();</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 5</span></span><br><span class="line">        <span class="keyword">if</span> (obj.a == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(req.url)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(req.method)</span><br><span class="line">        &#125;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;网站服务器启动成功&#x27;</span>);</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="5-Express路由参数"><a href="#5-Express路由参数" class="headerlink" title="5. Express路由参数"></a>5. Express路由参数</h3><p>1.在express框架下，接收get请求的参数，还有另一种方式；</p>
<ul>
<li>1.被称作为路由参数；</li>
<li>2.这个参数，可以让请求地址更美观；</li>
</ul>
<p>2.请求地址是<code>/find</code>，<code>/:id</code>是请求参数；这个<code>:</code>不是实际的东西，url里面没有的，是一个占位符；表示请求当前路由，需要传递一个id作为参数</p>
<ul>
<li>这个参数，就没 ？分隔了？</li>
</ul>
<p>2.1 这是在服务器端指定路由方式；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/find/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="comment">// 服务器端接收参数</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.params); <span class="comment">// &#123;id: 123&#125; </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>2.2 在客户端书写请求地址，只不过不是问号？，分隔了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">localhost:<span class="number">3000</span>/find/<span class="number">123</span></span><br></pre></td></tr></table></figure>



<p>2.3 服务器端接收参数</p>
<ul>
<li>1.在req对象里，有一个params的属性。这个属性的值，是一个对象，对象中就存储着路由参数；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务器端接收参数</span></span><br><span class="line"><span class="built_in">console</span>.log(req.params); <span class="comment">// &#123;id: 123&#125; </span></span><br></pre></td></tr></table></figure>



<p>2.4 代码验证；</p>
<ul>
<li><p>1.如果只写路径，不写参数，是匹配不到路由的</p>
</li>
<li><p>2.和问号不一样；</p>
</li>
<li><p>3.如果想写问个参数，直接加</p>
<p><code>/xxx/:id/:name/:age</code></p>
</li>
<li><p>4.</p>
</li>
</ul>
<p>2.5 路由参数与get参数，没有具体好坏之分。都可以使用；</p>
<h3 id="6-静态资源的处理"><a href="#6-静态资源的处理" class="headerlink" title="6. 静态资源的处理"></a>6. 静态资源的处理</h3><p>1.通过Express内置的express.static可以方便地托管静态文件，例如img、CSS、JavaScript 文件等。</p>
<ul>
<li>1.这个方法有一个参数，就是静态资源目录；</li>
</ul>
<p><code>app.use(express.static(&#39;public&#39;));</code></p>
<p>2.现在，public 目录下面的文件就可以访问了。</p>
<ul>
<li><p><a href="http://localhost:3000/images/kitten.jpg">http://localhost:3000/images/kitten.jpg</a><br><a href="http://localhost:3000/css/style.css">http://localhost:3000/css/style.css</a><br><a href="http://localhost:3000/js/app.js">http://localhost:3000/js/app.js</a><br><a href="http://localhost:3000/images/bg.png">http://localhost:3000/images/bg.png</a><br><a href="http://localhost:3000/hello.html">http://localhost:3000/hello.html</a> </p>
</li>
<li><p>等于</p>
</li>
<li><pre><code>http://localhost:3000/public/images/kitten.jpg
http://localhost:3000/public/css/style.css
http://localhost:3000/public/js/app.js
http://localhost:3000/public/images/bg.png
http://localhost:3000/public/hello.html 
&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight lua&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;接下来代码验证：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ &lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;又是拦截所有请求，那多个拦截所有请求，咋办…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  + &lt;span class=&quot;built_in&quot;&gt;next&lt;/span&gt;()几个！？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ &lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt;目录路径，推荐写绝对路径，引入&lt;span class=&quot;built_in&quot;&gt;path&lt;/span&gt;；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const &lt;span class=&quot;built_in&quot;&gt;path&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;path&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let static_url = &lt;span class=&quot;built_in&quot;&gt;path&lt;/span&gt;.join(__dirname, &lt;span class=&quot;string&quot;&gt;&amp;#x27;public&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.use(express.static(static_url));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;


</code></pre></li>
</ul>
<ul>
<li>3.还可以指定虚拟路径；</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>localhost:<span class="number">3000</span><span class="regexp">/static/im</span>ages/kitten.jpg</span><br><span class="line">http:<span class="regexp">//</span>localhost:<span class="number">3000</span><span class="regexp">/static/</span>css/style.css</span><br><span class="line">http:<span class="regexp">//</span>localhost:<span class="number">3000</span><span class="regexp">/static/</span>js/app.js</span><br><span class="line">http:<span class="regexp">//</span>localhost:<span class="number">3000</span><span class="regexp">/static/im</span>ages/bg.png</span><br><span class="line">http:<span class="regexp">//</span>localhost:<span class="number">3000</span><span class="regexp">/static/</span>hello.html</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入body-parser模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> static_url = path.join(__dirname, <span class="string">&#x27;public&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&#x27;/static&#x27;</span>, express.static(static_url));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;网站服务器启动成功&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h3 id="7-express-art-template模板引擎"><a href="#7-express-art-template模板引擎" class="headerlink" title="7. express-art-template模板引擎"></a>7. express-art-template模板引擎</h3><p>1.在express使用模板引擎是怎样的？</p>
<p>2.为了使art-template模板引擎能够更好的和Express框架配合，模板引擎官方在原art-template模板引擎的基础上封装了express-art-template。</p>
<ul>
<li>使用npm install art-template express-art-template命令进行安装。</li>
<li>1.模板语法一样，模板配置有些变化</li>
</ul>
<p>3.<code>app.engine(&#39;art&#39;, require(&#39;express-art-template&#39;));</code></p>
<ul>
<li>1.告诉express框架，你使用的模板引擎是什么；什么时候使用（第一个参数）</li>
<li>engine：引擎；</li>
</ul>
<p>3.1 告诉模板文件的地方：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 设置模板存放目录</span></span><br><span class="line">app.set(<span class="string">&#x27;views&#x27;</span>, path.join(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>app.set很有多效果；是用来配置express的</li>
<li>1.第一个参数，是配置什么，配置模板的关键字 就是 views；</li>
<li>2.第二个参数，是模板的位置信息；推荐写绝对路径；</li>
<li></li>
</ul>
<p>3.2 设置模板后缀</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 渲染模板时不写后缀 默认拼接art后缀</span></span><br><span class="line">app.set(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;art&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>1.express可以同时使用多个模板引擎；</li>
<li>2.配置模板后缀的关键字：view engine</li>
<li>3.当写了这个关键字后，第二个参数，就是后缀名了；</li>
</ul>
<p>3.3 写这些的好处是什么？</p>
<ul>
<li>1.为了使用res.render[^16]</li>
<li>2.是res，是响应下的方法；</li>
<li>3.在方法内部，做了很多事情；<ul>
<li>1.里面写模板名称。</li>
<li>2.自动拼接，模板路径，模板后缀，模板文件使用哪个模板引擎；这些不都是自己先set了吗？</li>
<li>3.然后把拼接好的结果响应给客户端</li>
</ul>
</li>
<li>4.还有第二个参数，就是向模板中传入的数据；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 当渲染后缀为art的模板时 使用express-art-template</span></span><br><span class="line">app.engine(<span class="string">&#x27;art&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;express-art-template&#x27;</span>));</span><br><span class="line"> <span class="comment">// 设置模板存放目录</span></span><br><span class="line">app.set(<span class="string">&#x27;views&#x27;</span>, path.join(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line"> <span class="comment">// 渲染模板时不写后缀 默认拼接art后缀</span></span><br><span class="line">app.set(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;art&#x27;</span>);</span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 渲染模板</span></span><br><span class="line">    res.render(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure>



<p>4.代码验证：</p>
<p>4.1 需要创建views文件夹，和.art文件</p>
<ul>
<li><code>&#123;&#123; msg &#125;&#125;</code>art文件里面写一个这个就可以了；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入body-parser模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当渲染后缀为art的模板时 使用express-art-template</span></span><br><span class="line">app.engine(<span class="string">&#x27;art&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;express-art-template&#x27;</span>));</span><br><span class="line"><span class="comment">// 设置模板存放目录</span></span><br><span class="line">app.set(<span class="string">&#x27;views&#x27;</span>, path.join(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line"><span class="comment">// 渲染模板时不写后缀 默认拼接art后缀</span></span><br><span class="line">app.set(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;art&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/index&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 渲染模板</span></span><br><span class="line">    res.render(<span class="string">&#x27;index&#x27;</span>, &#123;</span><br><span class="line">        msg: <span class="string">&#x27;index&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/list&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 渲染模板</span></span><br><span class="line">    res.render(<span class="string">&#x27;list&#x27;</span>, &#123;</span><br><span class="line">        msg: <span class="string">&#x27;list&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 不需要res.send了！</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;网站服务器启动成功&#x27;</span>);</span><br></pre></td></tr></table></figure>







<h3 id="8-app-locals-对象"><a href="#8-app-locals-对象" class="headerlink" title="8. app.locals 对象"></a>8. app.locals 对象</h3><p>1.将变量设置到app.locals对象下面，这个数据在所有的模板中都可以获取到。</p>
<ul>
<li>1.不用每次在调用模板后面写数据对象了！ye！</li>
<li>2021-4-29 11:15:28</li>
</ul>
<p>1.1 不过这里，只能写公共数据，特定的还是要在自己那里写；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> app.locals.users = [&#123;</span><br><span class="line">     name: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">     age: <span class="number">20</span></span><br><span class="line"> &#125;,&#123;</span><br><span class="line">     name: <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">     age: <span class="number">20</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>



<p>2.代码验证：</p>
<p>2.1 app.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入body-parser模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当渲染后缀为art的模板时 使用express-art-template</span></span><br><span class="line">app.engine(<span class="string">&#x27;art&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;express-art-template&#x27;</span>));</span><br><span class="line"><span class="comment">// 设置模板存放目录</span></span><br><span class="line">app.set(<span class="string">&#x27;views&#x27;</span>, path.join(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line"><span class="comment">// 渲染模板时不写后缀 默认拼接art后缀</span></span><br><span class="line">app.set(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;art&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.locals.users = [&#123;</span><br><span class="line">    name: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    name: <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/index&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 渲染模板</span></span><br><span class="line">    res.render(<span class="string">&#x27;index&#x27;</span>, &#123;</span><br><span class="line">        msg: <span class="string">&#x27;index&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/list&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 渲染模板</span></span><br><span class="line">    res.render(<span class="string">&#x27;list&#x27;</span>, &#123;</span><br><span class="line">        msg: <span class="string">&#x27;list&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 不需要res.send了！</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;网站服务器启动成功&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>2.2 art</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; msg &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;&#123;each users&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;$value.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;$value.age&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    &#123;&#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2.3 地址：<a href="http://localhost:3000/list">http://localhost:3000/list</a></p>
<ul>
<li>有效；</li>
</ul>
<p>下一个文件15.2</p>
<h1 id="X-题注"><a href="#X-题注" class="headerlink" title="X. 题注"></a>X. 题注</h1><p>[^1]:template英 [ˈtempleɪt]   美 [ˈtemplət]  n.样板;模板;型板;模框;标准</p>
<p>[^2]:views 英 [vjuːz]   美 [vjuːz]  <br>n.(个人的)看法，意见，见解;态度;(理解或思维的)方法，方式;观看;看;视野;视域;视线<br>v.把…视为;以…看待;看;观看;(尤指)仔细察看;查看，察看(房子等，以便购买或租用)<br>view的第三人称单数和复数</p>
<p>[^3]:each英 [iːtʃ]   美 [iːtʃ]  det./pron.(两个或两个以上的人或物中)各自，各个，每个</p>
<p>[^4]:target 英 [ˈtɑːɡɪt]   美 [ˈtɑːrɡɪt]  n.目标;指标;(攻击的)目标，对象;靶;靶子v.把…作为攻击目标;把…作为批评的对象;面向，把…对准(某群体)</p>
<p>[^5]:layout 英 [ˈleɪaʊt]   美 [ˈleɪaʊt]  n.布局;布置;设计;安排<br>[^6]:defaults英 [dɪˈfɔːlts]   美 [dɪˈfɔːlts]  v.违约;不履行义务(尤指不偿还债务);默认;预设;预置default的第三人称单数<br>[^7]:format英 [ˈfɔːmæt]   美 [ˈfɔːrmæt]  n.总体安排;计划;设计;(出版物的)版式，开本;格式v.格式化;安排…的版式</p>
<p>[^8]:router英 [ˈruːtə(r) , ˈraʊtə(r)]  美 [ˈruːtər , ˈraʊtər]  n.路由器(传送信息的专用网络设备)n.槽刨</p>
<p>[^9]:send英 [send]   美 [send]  v.邮寄;发送;传达;转致;告知;派遣;打发;安排去<br>[^10]:status英 [ˈsteɪtəs]   美 [ˈsteɪtəs]  n.状态;地位;身份;职位;高级职位;社会上层地位<br>[^11]:try 英 [traɪ]   美 [traɪ]  v.试图;想要;设法;努力;试;试用;试做;试验;审理;审讯;审判n.尝试;试图;努力;在对方球门线后带球触地;持球触地得分<br>[^12]:catch 英 [kætʃ]   美 [kætʃ]  v.接住;截住;拦住;接(落下的液体);抓住;握住n.接(球等);总捕获量;扣拴物;扣件<br>[^13]:parser 英 [ˈpɑːzə]   美 [ˈpɑrsər]  解析器;分析器;剖析器;解析;语法分析器<br>[^14]:encoded英 [ɪnˈkəʊdɪd]   美 [ɪnˈkoʊdɪd]  v.把…译成电码(或密码);把…编码;把…译成外语encode的过去分词和过去式<br>[^15]:extended英 <br>[ɪkˈstendɪd]   美 [ɪkˈstendɪd]   <br>adj.延长了的;扩展了的 <br>v.使伸长;扩大;扩展;延长;使延期;扩大…的范围(或影响) <br>extend的过去分词和过去式</p>
<p>[^16]:render英 [ˈrendə(r)]   美 [ˈrendər]  v.使成为;使变得;使处于某状态;给予;提供;回报;递交;呈献;提交</p>
<h2 id="末尾"><a href="#末尾" class="headerlink" title="末尾"></a>末尾</h2><p>​    </p>
<p>​    </p>
<p>​</p>
]]></content>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>15.2-node.js</title>
    <url>/1-(0~50)/15.2-nodeJS/</url>
    <content><![CDATA[<h1 id="7-博客"><a href="#7-博客" class="headerlink" title="7. 博客"></a>7. 博客</h1><p>1.虽然是案例，但这个案例会有很多新知识点；</p>
<p>2.是案例驱动知识点的章节</p>
<a id="more"></a>

<h2 id="7-1-项目环境搭建"><a href="#7-1-项目环境搭建" class="headerlink" title="7.1 项目环境搭建"></a>7.1 项目环境搭建</h2><h3 id="1-项目介绍"><a href="#1-项目介绍" class="headerlink" title="1. 项目介绍"></a>1. 项目介绍</h3><p>1.多人博客管理系统</p>
<ul>
<li>博客内容展示<br>博客管理功能</li>
</ul>
<h3 id="2-案例初始化"><a href="#2-案例初始化" class="headerlink" title="2. 案例初始化"></a>2. 案例初始化</h3><ol>
<li>建立项目所需文件夹</li>
</ol>
<ul>
<li>public 静态资源<br>model 数据库操作<br>route 路由<br>views 模板</li>
</ul>
<p>2.初始化项目描述文件<br>  npm init -y<br>3.下载项目所需第三方模块<br>  npm install express mongoose art-template express-art-template</p>
<p>4.创建网站服务器</p>
<ul>
<li><p>1.创建app.js；这个文件是项目的入口文件，也是项目的主文件；</p>
</li>
<li><p>2.引入express模块；创建服务器；监听端口；</p>
</li>
</ul>
<h4 id="5-构建模块化路由"><a href="#5-构建模块化路由" class="headerlink" title="5.构建模块化路由"></a>5.构建模块化路由</h4><ul>
<li><p>1.在route文件下，创建home.js；admin.js；</p>
<ul>
<li>1.home.js；页面路由</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> home = express.Router();</span><br><span class="line"></span><br><span class="line">home.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">&#x27;欢迎home&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = home;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li>2.admin.js；管理路由</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> admin = express.Router();</span><br><span class="line"></span><br><span class="line">admin.get(<span class="string">&#x27;/admin&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">&#x27;欢迎admin&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = admin;</span><br></pre></td></tr></table></figure>



<ul>
<li>2.app.js那边引入；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.引入express模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 2.创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> home = <span class="built_in">require</span>(<span class="string">&quot;./route/home&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> admin = <span class="built_in">require</span>(<span class="string">&#x27;./route/admin&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&#x27;/home&#x27;</span>, home);</span><br><span class="line">app.use(<span class="string">&#x27;/admin&#x27;</span>, admin);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;网站建立成功&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h4 id="6-构建博客管理页面模板"><a href="#6-构建博客管理页面模板" class="headerlink" title="6.构建博客管理页面模板"></a>6.构建博客管理页面模板</h4><ul>
<li><p>1.要构建模板文件，需要得到页面的静态文件；</p>
<ul>
<li>1.把前端的东西复制到public文件夹里面；</li>
</ul>
</li>
<li><p>2.把CSS,JS那些开放出去，静态资源开放出去；</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.开放静态资源文件</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"><span class="comment">// 3.1 引入path文件</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>6.1 静态资源，直接路径就可以访问，不需要路由：<a href="http://localhost:3000/home/article.html">http://localhost:3000/home/article.html</a></p>
<ul>
<li>1.需要添加的路由，是public里面的文件夹与文件名；</li>
<li>2.为什么静态资源，就可以直接访问，看看之前的笔记有没有信息；</li>
</ul>
<blockquote>
<p>服务器端不需要处理，可以直接响应给客户端的资源就是静态资源，例如CSS、JavaScript、image文件。——15-3-3.4-5</p>
</blockquote>
<p>6.2 在这里，我们不能把html当做静态文件，要与数据库的数据拼接，放到views文件里面去；</p>
<ul>
<li>1.但视频说方便管理也建立home与admin文件夹；</li>
</ul>
<p>6.3 渲染登录模板</p>
<ul>
<li>1.本来render里面要写绝对路径，但这里太多了，进行设置</li>
<li>2.告诉express框架，你的模板文件放在了哪里；</li>
</ul>
<p>6.3.1 所以，先是模板配置；</p>
<ul>
<li>1.缺一步就要报错；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4.模板配置根目录</span></span><br><span class="line">app.set(<span class="string">&#x27;views&#x27;</span>, path.join(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line"><span class="comment">// 4.1 配置模板后缀</span></span><br><span class="line">app.set(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;art&#x27;</span>);</span><br><span class="line"><span class="comment">// 4.2 当渲染后缀为art的模板时，用什么模板引擎</span></span><br><span class="line">app.engine(<span class="string">&#x27;art&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;express-art-template&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>6.3.2 admin.js路由配置路径；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> admin = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.渲染登录模板</span></span><br><span class="line"><span class="comment">// 1.1 本来render里面要写绝对路径，但这里太多了，进行设置</span></span><br><span class="line">admin.get(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 写/admin/login要报错</span></span><br><span class="line">    res.render(<span class="string">&#x27;admin/login&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = admin;</span><br></pre></td></tr></table></figure>



<h4 id="7-静态资源外部链接问题"><a href="#7-静态资源外部链接问题" class="headerlink" title="7.静态资源外部链接问题"></a>7.静态资源外部链接问题</h4><p>0.静态资源是浏览器解析的，所以相对路径，是相对的请求路径</p>
<p>1.虽然css能访问到，但这是一个意外；</p>
<p>2.在html文件，里面有外链的css；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;lib/bootstrap/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/base.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.这个href里面的路径，是拼接在路由请求的第一个参数后面；</p>
<ul>
<li>1.因为app.js和文件夹名都是admin，所有有效；</li>
<li>2.把app.js的路由路径改为abc就没效果了；</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">app</span><span class="selector-class">.use</span>(<span class="string">&#x27;/abc&#x27;</span>, admin);</span><br></pre></td></tr></table></figure>

<ul>
<li>3.找不到css；</li>
</ul>
<p>4.怎么解决？相对路径，改为，绝对路径；</p>
<p>4.1 怎么改成绝对路径；</p>
<ul>
<li><p>1.视频说，前面加个/，就可以了；。。。</p>
</li>
<li><p>2.因为绝对路径了，就不会与路由路径拼接了；</p>
</li>
<li><p>3.与静态资源路径拼接；</p>
</li>
<li><p>4.现在静态资源路径是：<code>app.use(express.static(path.join(__dirname, &#39;public&#39;)));</code></p>
</li>
<li><p>5.~\app.js所在的硬盘路径\public</p>
<ul>
<li>1.还差一步，中间还去一个\admin；</li>
<li>2.那么就只有手写填上：</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;lib/bootstrap/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/base.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/admin/lib/bootstrap/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/admin/css/base.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>5.成功响应；</p>
<p>6.总结：</p>
<p>6.1 外链的相对路径，是相对请求路径；</p>
<p>6.2 为了不出问题，要用绝对路径，代替相对路径，谁是哪个绝对路径呢？就是那个/</p>
<p>6.3 需要把其他的相对路径，都改成这样的绝对路径；</p>
<ul>
<li>1.我不想改，我把请求路径，改成文件夹名一样的！！！</li>
<li>2021-4-29 19:57:38</li>
</ul>
<h4 id="8-优化模板"><a href="#8-优化模板" class="headerlink" title="8. 优化模板"></a>8. 优化模板</h4><h5 id="8-1-公共分离"><a href="#8-1-公共分离" class="headerlink" title="8.1 公共分离"></a>8.1 公共分离</h5><p>1.什么叫优化模板，就是把模板的公共部分，抽到单独的文件里去</p>
<p>2.一旦要修改这些部分，就能一修全修；</p>
<p>3.先看看哪些是公共的，可以分到子模板里面去；</p>
<p>4.先把页面都打开，看看哪里感觉相同；</p>
<ul>
<li>1.然后去找代码；</li>
<li>例如这案例里面，是头部，与侧边栏；</li>
</ul>
<p>5.在模板文件夹里面，新建common文件夹；</p>
<ul>
<li>1.创建header.art（头部模板）<ul>
<li>1.把头部代码，剪切一份过去。</li>
</ul>
</li>
<li>2.创建aside.art（侧边栏模板）</li>
</ul>
<p>6.通过模板语法，拼接回来；</p>
<ul>
<li>1.头部：<code>&#123;&#123;include './common/header.art'&#125;&#125;</code></li>
<li>2.侧边栏：<code>&#123;&#123;include './common/aside.art'&#125;&#125;</code></li>
<li>3.因为这里是模板引擎解析，解析到的路径就是文件路径，与相对路径拼接正是正确路径；</li>
</ul>
<p>7.路由的路径，是什么算来着？</p>
<ul>
<li>1.查看代码</li>
<li>2.应该也是因为配置了模板目录吧；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4.模板配置根目录</span></span><br><span class="line">app.set(<span class="string">&#x27;views&#x27;</span>, path.join(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>3.不然路由这么写：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建后台用户列表路由</span></span><br><span class="line">admin.get(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.render(<span class="string">&#x27;admin/user&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>7.1 <code>admin/user</code>和模板根目录拼接，不正好；去复习一下路由；</p>
<ul>
<li>1.找到了</li>
</ul>
<blockquote>
<ul>
<li>1.为了使用res.render[^16]</li>
<li>2.是res，是响应下的方法；</li>
<li>3.在方法内部，做了很多事情；<ul>
<li>1.里面写模板名称。</li>
<li>2.自动拼接，模板路径，模板后缀，模板文件使用哪个模板引擎；这些不都是自己先set了吗？</li>
<li>3.然后把拼接好的结果响应给客户端</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li>2.在：15.1-6.3-7；2021-4-29 21:06:02</li>
</ul>
<h5 id="8-2-骨架分离"><a href="#8-2-骨架分离" class="headerlink" title="8.2 骨架分离"></a>8.2 骨架分离</h5><p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=100&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=100&amp;spm_id_from=pageDriver</a></p>
<p>2021-4-29 21:09:58</p>
<p>1.接下来，我们要把admin下面的模板文件的骨架分离出来；</p>
<ul>
<li>1.在common文件夹下，创建，layout[^2].art文件；</li>
</ul>
<p>2.因为他这里link的css，和，使用的js，一样，所以这些地方，没有个性化配置；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Blog - Content Manager<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;lib/bootstrap/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/base.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/jquery/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/bootstrap/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>1.把body外面的基本分离了，加了body里面链接js的代码。其他都是body外面的；</li>
</ul>
<p>3.留坑；</p>
<p>3.1 css需要留坑，方便自定义；JS同理；</p>
<p>3.2 每个页面，都有自己的主体部分，主体部分也留坑，大部分都是留坑的；</p>
<blockquote>
<p>01:50</p>
</blockquote>
<p>3.3 怎么留坑呢？</p>
<ul>
<li><p>1.语法：<code>&#123;&#123;block '坑名'&#125;&#125; &#123;&#123;/block&#125;&#125;</code></p>
</li>
<li><p>2.代码</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Blog - Content Manager<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;lib/bootstrap/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/base.css&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;block &#x27;link&#x27;&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;&#123;block &#x27;main&#x27;&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/jquery/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/bootstrap/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    &#123;&#123;block &#x27;JS&#x27;&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>4.继承；</p>
<p>4.1 分离了骨架，也留了坑。怎么让模板使用这些子模板？</p>
<ul>
<li>1.这需要继承</li>
</ul>
<p>4.2 我们修改user.art为例；</p>
<img src="../../img/15.2/1.png" alt="1" style="zoom:80%;" />



<p>5.测试代码；</p>
<ul>
<li>1.nodemon app.js</li>
<li>2.输入网址：<a href="http://localhost:3000/admin/user">http://localhost:3000/admin/user</a></li>
</ul>
<p>5.1 有效，成功；</p>
<p>6.接着把其他模板也继承；</p>
<ul>
<li>1.article-edit会有JS的填坑；</li>
</ul>
<h2 id="7-2-功能-登录"><a href="#7-2-功能-登录" class="headerlink" title="7.2 功能-登录"></a>7.2 功能-登录</h2><h3 id="1-基础登录"><a href="#1-基础登录" class="headerlink" title="1. 基础登录"></a>1. 基础登录</h3><ol>
<li>创建用户集合，初始化用户<br>连接数据库<br>创建用户集合<br>初始化用户</li>
<li>为登录表单项设置请求地址、请求方式以及表单项name属性</li>
<li>当用户点击登录按钮时，客户端验证用户是否填写了登录表单</li>
<li>如果其中一项没有输入，阻止表单提交</li>
<li>服务器端接收请求参数，验证用户是否填写了登录表单</li>
</ol>
<p>6.如果其中一项没有输入，为客户端做出响应，阻止程序向下执行</p>
<ol start="7">
<li><p>根据邮箱地址查询用户信息</p>
</li>
<li><p>如果用户不存在，为客户端做出响应，阻止程序向下执行</p>
</li>
<li><p>如果用户存在，将用户名和密码进行比对</p>
</li>
<li><p>比对成功，用户登录成功</p>
</li>
<li><p>比对失败，用户登录失败</p>
</li>
<li><p>保存登录状态</p>
</li>
<li><p>密码加密处理 </p>
</li>
</ol>
<h4 id="1-创建用户集合，初始化用户"><a href="#1-创建用户集合，初始化用户" class="headerlink" title="1.创建用户集合，初始化用户"></a>1.创建用户集合，初始化用户</h4><ul>
<li>连接数据库<br>创建用户集合<br>初始化用户</li>
</ul>
<p>1.1 链接数据库</p>
<ul>
<li>1.在model文件夹下面，创建connect.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1.1 引入mongoose第三方模块</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="comment">// 1.链接数据库</span></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost/blog&#x27;</span>)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;数据库链接成功&#x27;</span>))</span><br><span class="line">    .catch(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;数据库链接失败&#x27;</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>2.在项目入口文件中引入；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5.数据库链接，因为那边没有导出什么，这边也不需要用变量接收</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./model/connect&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>1.2 创建用户集合</p>
<ul>
<li>1.unique: true可以确保数据唯一，不能重复；</li>
<li>2.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.引入mongoose第三方模块</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建规则，调用构造函数mongoose.Schema</span></span><br><span class="line"><span class="keyword">const</span> userShema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    username: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        required: <span class="literal">true</span>,</span><br><span class="line">        minlength: <span class="number">2</span>,</span><br><span class="line">        maxlength: <span class="number">20</span>,</span><br><span class="line">        unique: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    email: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        unique: <span class="literal">true</span>,</span><br><span class="line">        required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    password: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 角色</span></span><br><span class="line">    role: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 状态，0为启用，1位禁用</span></span><br><span class="line">    state: &#123;</span><br><span class="line">        type: <span class="built_in">Number</span>,</span><br><span class="line">        required: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.创建集合,mongoose.model返回的是一个构造函数，需要一个量来接收；</span></span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">&#x27;User&#x27;</span>, userShema);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.导出,如果需要导出的多，可以写集合的形式；如果键与值相同可以只写键；</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    User</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>1.3 初始化用户，不然没得登录，不对，注册一个不就行了；不过项目里面没有注册模块，虽然有添加用户页面；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5.插入超级管理员文档</span></span><br><span class="line">User.create(&#123;</span><br><span class="line">    username: <span class="string">&#x27;70admin&#x27;</span>,</span><br><span class="line">    email: <span class="string">&#x27;70@70.com&#x27;</span>,</span><br><span class="line">    password: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    role: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    state: <span class="number">0</span></span><br><span class="line">&#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;用户创建成&#x27;</span>)</span><br><span class="line">&#125;).catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;用户创建失败&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>1.4 app.js导入user.js；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 6.导入数据库集合模板</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./model/user&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>1.引入后直接执行模板里面的代码</p>
</li>
<li><p>2.命令行工具那边会打印创建结果；</p>
</li>
<li><p>3.然后删除，不是在这里用，user.js要在路由那边用；</p>
</li>
</ul>
<p>1.5 1.3也要删掉，不然每次都要创建，会报错；这些只是测试代码；</p>
<hr>
<h4 id="1-2-表单设置"><a href="#1-2-表单设置" class="headerlink" title="1.2 表单设置"></a>1.2 表单设置</h4><h5 id="1-配置"><a href="#1-配置" class="headerlink" title="1. 配置"></a>1. 配置</h5><p>1.登录表单设置</p>
<ul>
<li>1.请求地址、请求方式以及表单项name属性</li>
<li>2.地方：views–login.art</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/login&quot;</span> method=<span class="string">&quot;POST&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">        &lt;label&gt;邮件&lt;/label&gt;</span><br><span class="line">        &lt;input name=<span class="string">&quot;email&quot;</span> type=<span class="string">&quot;email&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> placeholder=<span class="string">&quot;请输入邮件地址&quot;</span>&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">        &lt;label&gt;密码&lt;/label&gt;</span><br><span class="line">        &lt;input name=<span class="string">&quot;password&quot;</span> type=<span class="string">&quot;password&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> placeholder=<span class="string">&quot;请输入密码&quot;</span>&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;button name=<span class="string">&quot;submit&quot;</span> type=<span class="string">&quot;submit&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;登录&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>



<p>1.1 action=”/login”，为啥？</p>
<ul>
<li><p>1.这里是输入url；点击提交后，网站网址为：<a href="http://localhost:3000/login">http://localhost:3000/login</a></p>
</li>
<li><p>2.目前没有这个路由，所以是找不到的；</p>
</li>
<li><p><del>3.action里面的路径，写的是绝对路径；</del></p>
</li>
</ul>
<p>1.2 路径的写法</p>
<p><img src="../../img/12.b/6.png" alt="6"></p>
<ul>
<li>1.那么上面写的，和最终写的，都是相对路径里面的：下一级路径；</li>
<li>2.看来是相对于url的协议+host；（如果没有auth）</li>
</ul>
<h5 id="2-获取用户提交的信息"><a href="#2-获取用户提交的信息" class="headerlink" title="2. 获取用户提交的信息"></a>2. 获取用户提交的信息</h5><p>2.当用户点击登录按钮时，客户端验证用户是否填写了登录表单</p>
<ul>
<li><p>1.把登录请求先拦截，先过验证路由；</p>
</li>
<li><p>2.代码；视频里面写的是jq；oh no</p>
</li>
</ul>
<blockquote>
<p>视频：<a href="https://www.bilibili.com/video/BV1j5411K7EH?p=103&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=103&amp;spm_id_from=pageDriver</a></p>
<p>06:50~</p>
</blockquote>
<p>2.1 先给form加id；</p>
<p>2.2 然后下面加js；还以为验证是后端代码，是前端代码；</p>
<ul>
<li>1.serializeArray()；可以获取表单所有控件的，返回的是数组；<ul>
<li>1.比如上面是两个input，返回值应该是：</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">(2) <span class="selector-attr">[&#123;…&#125;, &#123;…&#125;]</span></span><br><span class="line">0: &#123;<span class="attribute">name</span>: <span class="string">&quot;email&quot;</span>, value: <span class="string">&quot;123@qq.com&quot;</span>&#125;</span><br><span class="line">1: &#123;<span class="attribute">name</span>: <span class="string">&quot;password&quot;</span>, value: <span class="string">&quot;213123&quot;</span>&#125;</span><br><span class="line"><span class="selector-tag">length</span>: 2</span><br><span class="line">__<span class="selector-tag">proto__</span>: <span class="selector-tag">Array</span>(0)</span><br></pre></td></tr></table></figure>



<p>2.3 但数组不方便，我们希望是对象；</p>
<ul>
<li><p>1.而且，也不是name，value；而是键值对的方式</p>
</li>
<li><p>email: ‘<a href="mailto:123@qq.com">123@qq.com</a>’,password: ‘213123’</p>
</li>
<li><p>2.有没有这样的方法呢？</p>
</li>
<li><p>没有，自己实现；</p>
</li>
</ul>
<h5 id="3-弄成对象"><a href="#3-弄成对象" class="headerlink" title="3. 弄成对象"></a>3. 弄成对象</h5><p>2.4 自己先写一个空对象，循环，把返回的数组里面的name的值作为键，value的值作为键的值；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">serializeToJson</span>(<span class="params">form</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 空对象</span></span><br><span class="line">        <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">    <span class="comment">// 表单信息数组化，变量接收返回值</span></span><br><span class="line">        <span class="keyword">var</span> f = form.serializeArray();</span><br><span class="line">    <span class="comment">// 循环数组，forEach回把每次循环的结果，都返回一次；</span></span><br><span class="line">        f.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 添加对象，但是，是这样的格式吗？疑问1</span></span><br><span class="line">            result[item.name] = item.value;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 为表单添加提交事件</span></span><br><span class="line">    $(<span class="string">&#x27;#loginForm&#x27;</span>).on(<span class="string">&#x27;submit&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> f = serializeToJson($(<span class="built_in">this</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(f);</span><br><span class="line">        <span class="comment">// 阻止表单默认提交的行为</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>1.疑问1：不过这里没有单引号；</p>
<blockquote>
<p>2.1 对象里面的属性调用 : 对象.属性名 ，这个小点 . 就理解为“ 的 ”  </p>
<p>对象里面属性的另一种调用方式 : 对象[‘属性名’]，注意方括号里面的属性必须加引号，我们后面会用</p>
<p>2.2 对象里面的方法调用：对象.方法名() ，注意这个方法名字后面一定加括号 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(star.name)     <span class="comment">// 调用名字属性</span></span><br><span class="line"><span class="built_in">console</span>.log(star[<span class="string">&#x27;name&#x27;</span>])  <span class="comment">// 调用名字属性</span></span><br><span class="line">star.sayHi();              <span class="comment">// 调用 sayHi 方法,注意，一定不要忘记带后面的括号</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>2.疑问2：item为什么是每一次循环的返回结果；</p>
<blockquote>
<p>1.forEach每次循环返回的那一个数组，作为了 实参，传到了 item上面去</p>
<p>2.function (item) {</p>
<pre><code>    // 添加对象，但是，是这样的格式吗？疑问1
    result[item.name] = item.value;
&#125;);</code></pre><p>3.直接写在forEach()的小括号里面，那么就省略了调用形参里面的函数；</p>
<p>4.等于函数本身就有调用回调函数；</p>
<p>5.那么关键点就是，回调函数的实参是什么？形参是item；</p>
<p>从结论来看，实参是  forEach每次循环返回的那一个数组</p>
</blockquote>
<ul>
<li>笔记：15-3-3.4-8.3</li>
</ul>
</li>
</ul>
<p>2.5 在一个项目中，对表单数据处理，非常正常。</p>
<ul>
<li>1.我们要把这个方法变成公共方法；</li>
<li>2.写入public,创建common.js；</li>
</ul>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=103&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=103&amp;spm_id_from=pageDriver</a></p>
<p>18:05~</p>
</blockquote>
<ul>
<li>3.在login.art引入这个js</li>
</ul>
<p><code>&lt;script src=&quot;/admin/js/common.js&quot;&gt;&lt;/script&gt;</code></p>
<ul>
<li>4.验证代码是否有问题：<a href="http://localhost:3000/admin/login">http://localhost:3000/admin/login</a><ul>
<li>1.输入数据，看console，打印出数据的对象没；</li>
<li>有，成功；</li>
</ul>
</li>
</ul>
<p>2.5.1 还是tm的放在了layout里面了；</p>
<h5 id="4-验证数据"><a href="#4-验证数据" class="headerlink" title="4. 验证数据"></a>4. 验证数据</h5><p>1.如果长度大于0，就输入了地址，但要排除空格；</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=103&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=103&amp;spm_id_from=pageDriver</a></p>
<p>20:38</p>
</blockquote>
<p>2.trim()，可以去除空格；trim[^3]</p>
<p>4.如果其中一项没有输入，阻止表单提交<br>5.服务器端接收请求参数，验证用户是否填写了登录表单</p>
<p>6.如果其中一项没有输入，为客户端做出响应，阻止程序向下执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 为表单添加提交事件</span></span><br><span class="line">    $(<span class="string">&#x27;#loginForm&#x27;</span>).on(<span class="string">&#x27;submit&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result = serializeToJson($(<span class="built_in">this</span>));</span><br><span class="line">        <span class="comment">// console.log(result)</span></span><br><span class="line">        <span class="comment">// 如果用户没有输入邮件地址</span></span><br><span class="line">        <span class="keyword">if</span> (result.email.trim().length == <span class="number">0</span>) &#123;</span><br><span class="line">            alert(<span class="string">&#x27;邮箱没输入&#x27;</span>);</span><br><span class="line">            <span class="comment">// 阻止程序向下执行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result.password.trim().length == <span class="number">0</span>) &#123;</span><br><span class="line">            alert(<span class="string">&#x27;密码没输入&#x27;</span>);</span><br><span class="line">            <span class="comment">// 阻止程序向下执行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 阻止表单默认提交的行为</span></span><br><span class="line">        <span class="comment">// return false;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<hr>
<h4 id="1-3-登录路由"><a href="#1-3-登录路由" class="headerlink" title="1.3 登录路由"></a>1.3 登录路由</h4><p>1.改action</p>
<ul>
<li><p><code>&lt;form action=&quot;/admin/login&quot;</code></p>
</li>
<li><p>之前是<code>&lt;form action=&quot;/login&quot;</code></p>
</li>
</ul>
<p>2.写路由；</p>
<ul>
<li>8-blog\route；的admin.js；里面</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// route\admin.js</span></span><br><span class="line"><span class="comment">// 1. 实现登录功能</span></span><br><span class="line">admin.post(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 接收请求参数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>2.1 要在express获得post的参数，需要引入第三方模块，bodyPaser</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="comment">// 2. 引入body-parser模块，用来处理post请求</span></span><br><span class="line"><span class="keyword">const</span> bodyPaser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>2.2 处理post参数，变成对象格式；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="comment">// 3. 处理post请求参数,无视弃用的报错，有效果，且没找到新的方法；</span></span><br><span class="line">app.use(bodyPaser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br></pre></td></tr></table></figure>



<p>2.3 接收请求参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// route\admin.js</span></span><br><span class="line"><span class="comment">// 2. 实现登录功能</span></span><br><span class="line">admin.post(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 2.3接收请求参数</span></span><br><span class="line">    res.send(req.body);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>2.4 上面那个步骤，只是测验接收到参数了没；</p>
<ul>
<li>1.对象解构；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 实现登录功能</span></span><br><span class="line">admin.post(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 接收请求参数</span></span><br><span class="line">    <span class="comment">// 2.4 对象解构</span></span><br><span class="line">    <span class="keyword">const</span> &#123; email, password &#125; = req.body;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>2.5 二次验证，因为浏览器可以禁用js；后端的代码无法操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 实现登录功能</span></span><br><span class="line">admin.post(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 接收请求参数</span></span><br><span class="line">    <span class="keyword">const</span> &#123; email, password &#125; = req.body;</span><br><span class="line">    <span class="comment">// 2.5</span></span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">&#x27;如果不是警告，而是页面内容，则你的JS没被使用&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> a = res.status(<span class="number">400</span>).send(<span class="string">&#x27;&lt;h4&gt;邮件地址或密码错误&lt;/h4&gt;&#x27;</span> + x);</span><br><span class="line">    <span class="keyword">if</span> (email.trim().length == <span class="number">0</span> || password.trim().length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>2.6 美化错误信息页面（可选）</p>
<ul>
<li>1.在admin/common/ 创建 error.art</li>
<li>2.视频里面是单独的页面，而我，想再login.art的基础上；</li>
</ul>
<p>2.6.1 继承能套吗？</p>
<ul>
<li>1.我在login.art里面写了<code>&#123;&#123;block 'err'&#125;&#125;&#123;&#123;/block&#125;&#125;</code></li>
<li>2.然后在error.art那边写：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;&#123;extend <span class="string">&#x27;./login.art&#x27;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;block <span class="string">&#x27;err&#x27;</span>&#125;&#125;</span><br><span class="line">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;bg-danger error&quot;</span>&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>3.没有效果；</li>
</ul>
<p>2.6.2 中间，还尝试了很多办法，包含，或者直接在login.art写html;</p>
<ul>
<li>1.都不行；</li>
</ul>
<p>2.6.3 后来，我突发奇想：事先在layout，里留下err坑；</p>
<ul>
<li>1.一级继承，login.art不填这个坑</li>
<li>2.二级继承，error.art可以填这个坑吗？</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// layout.art</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &#123;&#123;block <span class="string">&#x27;main&#x27;</span>&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br><span class="line">    &#123;&#123;block <span class="string">&#x27;err&#x27;</span>&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// error.art</span></span><br><span class="line">&#123;&#123;extend <span class="string">&#x27;./login.art&#x27;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;block <span class="string">&#x27;err&#x27;</span>&#125;&#125;</span><br><span class="line">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;bg-danger error&quot;</span>&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>3.有效果；</li>
</ul>
<p>2.6.4 写入node笔记；</p>
<h4 id="1-4-邮箱是否存在；"><a href="#1-4-邮箱是否存在；" class="headerlink" title="1.4 邮箱是否存在；"></a>1.4 邮箱是否存在；</h4><p>1.这个邮箱是用来登录使用的登录名，可以举一反三，手机号，用户名等等；</p>
<p>2.引入用户集合；</p>
<ul>
<li>1.返回的是匿名对象，</li>
<li>2.这里用对象解构出User，不给量接收取名；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// route/admin.js</span></span><br><span class="line"><span class="comment">// 6. 导入用户集合构造函数</span></span><br><span class="line"><span class="keyword">const</span> &#123; User &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../model/user&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>3.根据邮箱地址查询用户信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 6.1 根据邮箱地址查询用户信息</span></span><br><span class="line">User.findOne(&#123; <span class="attr">email</span>: email &#125;)</span><br></pre></td></tr></table></figure>

<p>3.1 在ES6语法中，如果键与值一样，可以只写一个键；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 6.1 根据邮箱地址查询用户信息</span></span><br><span class="line">User.findOne(&#123;email&#125;)</span><br></pre></td></tr></table></figure>

<p>3.2 通过异步函数的方式，获取到异步API查询方法findOne的返回值；</p>
<ul>
<li>1.用变量接收；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 实现登录功能</span></span><br><span class="line">admin.post(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 接收请求参数</span></span><br><span class="line">    <span class="keyword">const</span> &#123; email, password &#125; = req.body;</span><br><span class="line">    <span class="comment">// 2.5</span></span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">&#x27;如果不是警告，而是页面内容，则你的JS没被使用&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> a = res.status(<span class="number">400</span>).send(<span class="string">&#x27;&lt;h4&gt;邮件地址或密码错误&lt;/h4&gt;&#x27;</span> + x);</span><br><span class="line">    <span class="keyword">if</span> (email.trim().length == <span class="number">0</span> || password.trim().length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.1 根据邮箱地址查询用户信息</span></span><br><span class="line">    <span class="keyword">let</span> user = <span class="keyword">await</span> User.findOne(&#123; email &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>3.3 如果邮箱存在，user变量类型是对象类型，不存在，为空；</p>
<ul>
<li>1.根据返回值的类型判断</li>
</ul>
<p>4.报错：一直报错；</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">UnhandledPromiseRejectionWarning: <span class="builtin-name">Error</span> [ERR_HTTP_HEADERS_SENT]: Cannot <span class="builtin-name">set</span> headers after they are sent <span class="keyword">to</span> the client</span><br></pre></td></tr></table></figure>

<p>将头发送到客户端后无法设置头</p>
<ul>
<li>1.我何时发了什么头？</li>
<li>2.结果，一旦有路由过来</li>
</ul>
<p><code>let a = res.status(400).send(&#39;&lt;h4&gt;邮件地址或密码错误&lt;/h4&gt;&#39; + x);</code></p>
<p>就自动触发，不需要使用就触发了；占用了响应头；</p>
<p>4.1 百度无果，</p>
<p>5.这里的笔记好像有点乱了；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">admin.post(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 接收请求参数</span></span><br><span class="line">    <span class="keyword">const</span> &#123; email, password &#125; = req.body;</span><br><span class="line">    <span class="comment">// 2.5</span></span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">&#x27;如果不是警告，而是页面内容，则你的JS没被使用&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> ps_err = <span class="string">&#x27;密码错误&#x27;</span>;</span><br><span class="line">    <span class="comment">// let a = res.status(400).send(&#x27;&lt;h4&gt;邮件地址或密码为空&lt;/h4&gt;&#x27;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.1 根据邮箱地址查询用户信息</span></span><br><span class="line">    <span class="keyword">let</span> user = <span class="keyword">await</span> User.findOne(&#123; email &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// let a2 = res.status(401).render(&#x27;admin/error&#x27;, &#123; msg: &#x27;邮件地址或密码错误&#x27; &#125;);</span></span><br><span class="line">    <span class="keyword">if</span> (email.trim().length == <span class="number">0</span> || password.trim().length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> res.status(<span class="number">400</span>).send(<span class="string">&#x27;&lt;h4&gt;邮件地址或密码为空&lt;/h4&gt;&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user) &#123;</span><br><span class="line">        <span class="comment">// @ts-ignore</span></span><br><span class="line">        <span class="keyword">if</span> (password == user.password) &#123;</span><br><span class="line">            res.send(<span class="string">&#x27;登录成功&#x27;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;密码错误&#x27;</span>);</span><br><span class="line">            res.send(<span class="string">&#x27;密码错误&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;没有这账号&#x27;</span>);</span><br><span class="line">        res.send(<span class="string">&#x27;没有这账号&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<ul>
<li>主要是登录实现过程中</li>
</ul>
<p>6.无法触发邮箱不存在；</p>
<ul>
<li>1.如果只填一个错误邮箱，不写密码，会被</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (email.trim().length == <span class="number">0</span> || password.trim().length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> res.status(<span class="number">400</span>).send(<span class="string">&#x27;&lt;h4&gt;邮件地址或密码为空&lt;/h4&gt;&#x27;</span>);</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<p>返回邮件地址或密码为空密码为空</p>
<ul>
<li>2.于是，我注释了；不用这个了；</li>
</ul>
<p>6.1 然后是为空的时候，密码比对出错；</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">从数据库中根据eamil找到的user：<span class="literal">null</span></span><br><span class="line">(node:<span class="number">30052</span>) UnhandledPromiseRejectionWarning: <span class="built_in">TypeError</span>: Cannot read property <span class="string">&#x27;password&#x27;</span> <span class="keyword">of</span> <span class="literal">null</span></span><br><span class="line">    at <span class="built_in">module</span>.exports (F:\<span class="number">2</span><span class="number">-3</span>ciyuan\<span class="number">11</span>-data base-shujuk\<span class="number">3</span>-lianxi\<span class="number">8</span>-blog\route\admin\<span class="number">5</span>-login.js:<span class="number">28</span>:<span class="number">56</span>)</span><br><span class="line">    at processTicksAndRejections (internal/process/task_queues.js:<span class="number">93</span>:<span class="number">5</span>)</span><br><span class="line">(Use <span class="string">`node --trace-warnings ...`</span> to show where the warning was created)</span><br><span class="line">(node:<span class="number">30052</span>) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside <span class="keyword">of</span> an <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">without</span> <span class="title">a</span> <span class="title">catch</span> <span class="title">block</span>, <span class="title">or</span> <span class="title">by</span> <span class="title">rejecting</span> <span class="title">a</span> <span class="title">promise</span> <span class="title">which</span> <span class="title">was</span> <span class="title">not</span> <span class="title">handled</span> <span class="title">with</span> .<span class="title">catch</span>(<span class="params"></span>). <span class="title">To</span> <span class="title">terminate</span> <span class="title">the</span> <span class="title">node</span> <span class="title">process</span> <span class="title">on</span> <span class="title">unhandled</span> <span class="title">promise</span> <span class="title">rejection</span>, <span class="title">use</span> <span class="title">the</span> <span class="title">CLI</span> <span class="title">flag</span> `--<span class="title">unhandled</span>-<span class="title">rejections</span>=<span class="title">strict</span>` (<span class="params">see https:<span class="regexp">//</span>nodejs.org<span class="regexp">/api/</span>cli.html#cli_unhandled_rejections_mode</span>). (<span class="params">rejection id: <span class="number">1</span></span>)</span></span><br><span class="line">(node:30052) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>1.第56列，是user.password；也就是说，找不到集合中的password；</p>
</li>
<li><p>2.而表单那边password null是不报错的；</p>
</li>
<li><p>3.找不到集合中的password，是因为邮箱不存在，找不到集合</p>
</li>
<li><p>4.只有邮箱存在的时候，才比对密码；</p>
</li>
<li><p>5.把这个比对，放在集合已经找到的前提下；</p>
</li>
</ul>
<h3 id="2-密码加密"><a href="#2-密码加密" class="headerlink" title="2. 密码加密"></a>2. 密码加密</h3><p>1.关于登录的基本逻辑，就到这里了；</p>
<p>2.在数据库中，以明文的形式，存储数据是不安全的。</p>
<ul>
<li>1.一下就看到了密码；</li>
</ul>
<p><img src="../../img/15.2/2.png" alt="2"></p>
<p>3.哈希加密是单程加密方式：1234 =&gt; abcd<br>在加密的密码中加入随机字符串可以增加密码被破解的难度。</p>
<ul>
<li>1.不能解密，只能加密；</li>
</ul>
<p>4.看一串代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入bcrypt模块</span></span><br><span class="line"><span class="keyword">const</span> bcrypt = <span class="built_in">require</span>(<span class="string">&#x27;bcrypt&#x27;</span>);</span><br><span class="line"><span class="comment">// 生成随机字符串 gen =&gt; generate 生成 salt 盐</span></span><br><span class="line"><span class="keyword">let</span> salt = <span class="keyword">await</span> bcrypt.genSalt(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// 使用随机字符串对密码进行加密</span></span><br><span class="line"><span class="keyword">let</span> pass = <span class="keyword">await</span> bcrypt.hash(<span class="string">&#x27;明文密码&#x27;</span>, salt);</span><br></pre></td></tr></table></figure>



<p>4.1 genSalt一看就是个方法，参数是数值参数，数值越大越复杂。</p>
<ul>
<li><p>1.不知道生成多少位；</p>
</li>
<li><p>2.默认值是10，不需要修改，使用默认值就行了；</p>
</li>
<li><p>3.是异步api，返回 什么 对象来着？听不清；</p>
</li>
</ul>
<p>4.2 <code>bcrypt.hash(&#39;明文密码&#39;, salt);</code></p>
<ul>
<li>1.明文密码，就是明文的密码，你要加密的密码；</li>
<li>2.这个方法就是加密，上面那个算是规则；</li>
<li>3.hash[^16]</li>
<li>4.hash方法，也是一个异步api；</li>
</ul>
<h4 id="2-2-代码验证"><a href="#2-2-代码验证" class="headerlink" title="2.2 代码验证"></a>2.2 代码验证</h4><p>1.有很多依赖的东西：</p>
<ul>
<li><p>bcrypt依赖的其他环境<br>1.python 2.x<br>2.node-gyp</p>
<pre><code>npm install -g node-gyp</code></pre><p>3.windows-build-tools</p>
<pre><code>npm install --global --production windows-build-tools</code></pre></li>
<li><p>windows-build-tools；是windows用户要安装的；</p>
</li>
</ul>
<p>2.npm install –global –production windows-build-tools；需要一定的时间，跳过这两节课；</p>
<p>安装好了，再回来；</p>
<p>3.<del>在route/admin.js中，引入模块</del></p>
<ul>
<li>1.好吧，错了，在model/user.js中引入</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 7.导入加密模块</span></span><br><span class="line"><span class="keyword">const</span> bcrypt = <span class="built_in">require</span>(<span class="string">&#x27;bcrypt&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>4.把下面的5.插入超级管理员文档，注释去掉；复活；</p>
<p>5.创建加密函数；超级管理员文档也剪切了进去</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建加密函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">encryption</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> salt = <span class="keyword">await</span> bcrypt.genSalt(<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">const</span> pass = <span class="keyword">await</span> bcrypt.hash(<span class="string">&#x27;admin&#x27;</span>, salt);</span><br><span class="line">    <span class="comment">// 5.插入超级管理员文档</span></span><br><span class="line">    <span class="keyword">const</span> user = User.create(&#123;</span><br><span class="line">        username: <span class="string">&#x27;70admin&#x27;</span>,</span><br><span class="line">        email: <span class="string">&#x27;70@70.com&#x27;</span>,</span><br><span class="line">        password: pass,</span><br><span class="line">        role: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">        state: <span class="number">0</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">encryption();</span><br></pre></td></tr></table></figure>



<h4 id="2-3-比对密码"><a href="#2-3-比对密码" class="headerlink" title="2.3 比对密码"></a>2.3 比对密码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 密码比对</span></span><br><span class="line"><span class="keyword">let</span> isEqual = <span class="keyword">await</span> bcrypt.compare(<span class="string">&#x27;明文密码&#x27;</span>, <span class="string">&#x27;加密密码&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>1.还是异步api；</p>
<p>2.方法的返回值，是一个布尔类型，true就比对成功，false比对失败；</p>
<p>3.这个是验证密码用的吗？</p>
<p>4.Equal[^6]</p>
<p>5.这个方法，做了三件事情：</p>
<ul>
<li>1.知道加密密码里面，哪些是随机字符串；</li>
<li>2.对明文密码，进行加密；将获取的随机字符串，随机添加到密码中；</li>
<li>3.把刚加密的，明文密码；与，第二个参数，加密密码；比对；</li>
<li>4.</li>
</ul>
<p>6.代码验证：</p>
<p>6.1 去admin的路由那边，找到密码比对；</p>
<p>6.2 还是要引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 7.导入加密模块</span></span><br><span class="line"><span class="keyword">const</span> bcrypt = <span class="built_in">require</span>(<span class="string">&#x27;bcrypt&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>6.3 密码加密了，以前的判断条件不行了</p>
<p><code>if (password == user.password)</code></p>
<p>6.4</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 7.1 比对密码</span></span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    <span class="comment">// 前面的是请求参数的，后面的是数据库里面的</span></span><br><span class="line">    <span class="keyword">let</span> is_valid = <span class="keyword">await</span> bcrypt.compare(password, user.password);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user) &#123;</span><br><span class="line">        <span class="comment">// @ts-ignore</span></span><br><span class="line">        <span class="keyword">if</span> (is_valid) &#123;</span><br><span class="line">            res.send(<span class="string">&#x27;登录成功&#x27;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br></pre></td></tr></table></figure>



<h3 id="3-登录缺陷"><a href="#3-登录缺陷" class="headerlink" title="3. 登录缺陷"></a>3. 登录缺陷</h3><p>1.登录成功后，浏览器没记住。和没登录一样；</p>
<p>2.代码验证</p>
<ul>
<li>1.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将用户名存储在请求对象中</span></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line">req.username = user.username;</span><br></pre></td></tr></table></figure>

<ul>
<li>2.向页面传入数据；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">admin.get(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.render(<span class="string">&#x27;admin/user&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">// @ts-ignore</span></span><br><span class="line">        msg: req.username,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>3.</li>
</ul>
<p>3.算了，这里不笔记了</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=109&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=109&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<h4 id="3-2-cookie与session"><a href="#3-2-cookie与session" class="headerlink" title="3.2 cookie与session"></a>3.2 cookie与session</h4><blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=110&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=110&amp;spm_id_from=pageDriver</a></p>
<p>2021-4-30 23:17:12</p>
</blockquote>
<h5 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h5><p>1.cookie：浏览器在电脑硬盘中开辟的一块空间，主要供服务器端存储数据。<br>2.cookie中的数据是以域名的形式进行区分的。<br>3.cookie中的数据是有过期时间的，超过时间数据会被浏览器自动删除。</p>
<ul>
<li>1.如果不设置过期时间，关闭浏览器的时候，cookie就会被删除；</li>
</ul>
<p>4.cookie中的数据会随着请求被自动发送到服务器端。</p>
<ul>
<li>1.请求才有；</li>
</ul>
<p><img src="../../img/15.2/3.png" alt="3"></p>
<p>5.session：实际上就是一个对象，存储在服务器端的内存中，在session对象中也可以存储多条数据，每一条数据都有一个sessionid做为唯一标识。</p>
<ul>
<li>1.第一次请求时</li>
</ul>
<p><img src="../../img/15.2/4.png" alt="3"></p>
<ul>
<li>2.再一次请求；客户端发cookie给服务器；</li>
</ul>
<p><img src="../../img/15.2/5.png" alt="3"></p>
<h5 id="2-如何使用"><a href="#2-如何使用" class="headerlink" title="2. 如何使用"></a>2. 如何使用</h5><p>1.在node.js中需要借助express-session实现session[^7]功能</p>
<p>1.1 示例代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line">app.use(session(&#123; <span class="attr">secret</span>: <span class="string">&#x27;secret key&#x27;</span> &#125;));</span><br></pre></td></tr></table></figure>

<ul>
<li>secret[^8]</li>
</ul>
<p>1.2 express-session，也是官方提供的，是中间件；</p>
<p>1.3 用use在所有请求之前，先处理</p>
<p>1.4 session方法做了什么</p>
<ul>
<li><p>1.会在请求对象添加一个属性，属性名叫session，这个属性值是一个对象。</p>
<ul>
<li><p>0.添加了属性后，就可以<code>req.session</code>使用</p>
</li>
<li><p>1.这个对象，可以在用户登录成功后，保存用户信息。</p>
</li>
</ul>
</li>
<li><p>2.方法内部，在我们给session存储数据时，生成session_ID。</p>
<ul>
<li>1.这个ID，是当前存储数据的，唯一标识；</li>
</ul>
</li>
<li><p>3.然后将这个id，存储在客户端的cookie[^9]当中；</p>
</li>
<li><p>4.客户端，再次访问服务器端的时候，方法会拿到客户端传过来的cookie，在cookie里提取出session_ID；</p>
</li>
<li><p>5.然后根据ID，在cookie中找到用户信息。</p>
</li>
<li><p>6.此时服务器知道了，访问服务器的客户端是谁；也就真正建立了客户端与服务器的联系；</p>
</li>
</ul>
<p>1.5 在调用session方法时，传递了一个参数secret[^8]，含义是：存储一个密钥；</p>
<ul>
<li>1.这个密钥可以自定义；</li>
<li>2.用来加密cookie的信息；</li>
<li>3.加密后，value就是乱码的；</li>
</ul>
<p><img src="../../img/15.2/9.png" alt="9"></p>
<h5 id="3-在项目中添加代码"><a href="#3-在项目中添加代码" class="headerlink" title="3. 在项目中添加代码"></a>3. 在项目中添加代码</h5><p>1.下载模块express-session</p>
<ul>
<li>1.npm install express-session</li>
</ul>
<p>2.导入app.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 7.引入express-session模块，这个模块返回一个方法，我们用一个量来接收它</span></span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>3.使用方法</p>
<ul>
<li>1.配置session密匙；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 7.1 配置session</span></span><br><span class="line">app.use(session(&#123; <span class="attr">secret</span>: <span class="string">&#x27;qilinc key&#x27;</span> &#125;))</span><br></pre></td></tr></table></figure>



<ul>
<li>2.然后去route/admin.js；在用户登录成功后，要把用户的信息，存储在session当中；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (user) &#123;</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    <span class="keyword">if</span> (is_valid) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将用户名存储在请求对象中</span></span><br><span class="line">        <span class="comment">// @ts-ignore</span></span><br><span class="line">        <span class="comment">// req.username = user.username;</span></span><br><span class="line">        <span class="comment">// 8.在用户登录成功后，要把用户的信息，存储在session当中；</span></span><br><span class="line">        req.session.username = user.username;</span><br><span class="line">        res.send(<span class="string">&#x27;登录成功&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>4.nodemon app.js运行本地服务器，打开登录页面；输入正确邮箱和密码；</p>
<ul>
<li>1.在这里，会报两句提示；</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">express-session</span> <span class="selector-tag">deprecated</span> <span class="selector-tag">undefined</span> <span class="selector-tag">resave</span> <span class="selector-tag">option</span>; <span class="selector-tag">provide</span> <span class="selector-tag">resave</span> <span class="selector-tag">option</span> <span class="selector-tag">app</span><span class="selector-class">.js</span><span class="selector-pseudo">:23</span><span class="selector-pseudo">:9</span></span><br><span class="line"><span class="selector-tag">express-session</span> <span class="selector-tag">deprecated</span> <span class="selector-tag">undefined</span> <span class="selector-tag">saveUninitialized</span> <span class="selector-tag">option</span>; <span class="selector-tag">provide</span> <span class="selector-tag">saveUninitialized</span> <span class="selector-tag">option</span> <span class="selector-tag">app</span><span class="selector-class">.js</span><span class="selector-pseudo">:23</span><span class="selector-pseudo">:9</span></span><br></pre></td></tr></table></figure>

<ul>
<li>2.翻译</li>
</ul>
<blockquote>
<p>express session已弃用未定义的resave选项；提供重新保存选项app.js:23:9</p>
<p>express session不推荐使用未定义的saveUninitialized选项；提供saveUninitialized选项app.js:23:9</p>
</blockquote>
<ul>
<li>3.获取这些属性的含义</li>
</ul>
<blockquote>
<p>resave:(是否允许)当客户端并行发送多个请求时，其中一个请求在另一个请求结束时对session进行修改覆盖并保存。</p>
<p>默认为true。但是(后续版本)有可能默认失效，所以最好手动添加。</p>
<p>saveUninitialized:初始化session时是否保存到存储。默认为true， 但是(后续版本)有可能默认失效，所以最好手动添加。<br>原文链接：<a href="https://blog.csdn.net/u012679583/article/details/50510717">https://blog.csdn.net/u012679583/article/details/50510717</a></p>
</blockquote>
<p>引用来源：<a href="https://www.imooc.com/wenda/detail/439174">https://www.imooc.com/wenda/detail/439174</a></p>
<p>4.1 回到上面的3.1步，修改配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(session(&#123;</span><br><span class="line">    secret: <span class="string">&#x27;qilinc key&#x27;</span>,</span><br><span class="line">    resave: <span class="literal">true</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">true</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>



<p>4.2 登录成功后，F12；</p>
<p><img src="../../img/15.2/6.png" alt="6"></p>
<p>4.3 connect.sid；是express-session设置的默认名字，value是加密的字符串，里面保存了，服务器端为客户端生成的session-id；</p>
<ul>
<li>1.接下来，我们再往服务器端，发送请求的时候，这个cookie，就会被自动携带；</li>
<li>2.这个cookie就是value</li>
<li>3.然后服务器提取id，查找用户数据；为一个登录成功</li>
</ul>
<p>4.4 视频里，接下来是验证4.3所说；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">admin.get(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.render(<span class="string">&#x27;admin/user&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">// @ts-ignore</span></span><br><span class="line">        <span class="comment">// 8.1 验证cookie与session</span></span><br><span class="line">        msg: req.session.username,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>route/admin.js</p>
</li>
<li><p>1.res.render，是返回与渲染模板文件的；</p>
</li>
</ul>
<p>4.5 需要在模板admin/user.art里，添加放置msg；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 分类标题 --&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">    &lt;h4&gt;用户 &#123;&#123;msg&#125;&#125;&lt;/h4&gt;</span><br></pre></td></tr></table></figure>



<p>4.6 每次修改代码保存后，服务器会重启，session当服务器重启后就会失效。</p>
<ul>
<li>1.重新登录</li>
<li>2.然后去user看；</li>
</ul>
<p>4.7 成功，没有问题；</p>
<ul>
<li>1.到现在，登录的功能，才实现好；</li>
<li>2021-5-1 15:52:30</li>
</ul>
<hr>
<h3 id="4-登录后"><a href="#4-登录后" class="headerlink" title="4. 登录后"></a>4. 登录后</h3><h4 id="4-1-跳转到用户页面"><a href="#4-1-跳转到用户页面" class="headerlink" title="4.1 跳转到用户页面"></a>4.1 跳转到用户页面</h4><p>1.重定向，express的重定向怎么写？</p>
<p>1.1 <code>res.redirect()</code>方法；redirect[^10]</p>
<ul>
<li>1.参数是，你要跳转的地址；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (user) &#123;</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    <span class="keyword">if</span> (is_valid) &#123;</span><br><span class="line">        <span class="comment">// 将用户名存储在请求对象中</span></span><br><span class="line">        <span class="comment">// @ts-ignore</span></span><br><span class="line">        <span class="comment">// req.username = user.username;</span></span><br><span class="line">        <span class="comment">// 8.在用户登录成功后，要把用户的信息，存储在session当中；</span></span><br><span class="line">        req.session.username = user.username;</span><br><span class="line">        <span class="comment">// res.send(&#x27;登录成功&#x27;);</span></span><br><span class="line">        <span class="comment">// console.log(&#x27;2&#x27;);</span></span><br><span class="line">        <span class="comment">// 9.重定向到用户列表页面</span></span><br><span class="line">        res.redirect(<span class="string">&#x27;/admin/user&#x27;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-2-显示在右上角"><a href="#4-2-显示在右上角" class="headerlink" title="4.2 显示在右上角"></a>4.2 显示在右上角</h4><p>1.右上角是公共区域；</p>
<p>2.去views/admin/common/header.art</p>
<ul>
<li><p>1.先需要公共数据；在登录成功后</p>
</li>
<li><p>2.虽然是公共数据，但这个数据，不是一开始就有。而是登录成功后，才知道这个登录进来的用户名；</p>
</li>
<li><p>3.看起来是，私人数据。</p>
</li>
<li><p>4.但这里要在公共模板里，所以有私人数据，公共化显示。</p>
</li>
<li><p>5.所以在成功后，才生成这个数据；</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (user) &#123;</span><br><span class="line">        <span class="comment">// @ts-ignore</span></span><br><span class="line">        <span class="keyword">if</span> (is_valid) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将用户名存储在请求对象中</span></span><br><span class="line">            <span class="comment">// @ts-ignore</span></span><br><span class="line">            <span class="comment">// req.username = user.username;</span></span><br><span class="line">            <span class="comment">// 8.在用户登录成功后，要把用户的信息，存储在session当中；</span></span><br><span class="line">            req.session.username = user.username;</span><br><span class="line">            <span class="comment">// res.send(&#x27;登录成功&#x27;);</span></span><br><span class="line">            <span class="comment">// console.log(&#x27;2&#x27;);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 10. 生成公共用户数据</span></span><br><span class="line">            req.app.locals.userInfo = user;</span><br><span class="line">            <span class="comment">// 9.重定向到用户列表页面</span></span><br><span class="line">            res.redirect(<span class="string">&#x27;/admin/user&#x27;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<p>2.1 req.app.locals.userInfo = user;</p>
<ul>
<li>1.上面的app，和app.js里面的app，是一个app；</li>
<li>2.为什么?</li>
<li>3.个人猜想：<ul>
<li>1.请求报文里面，一定有，向谁请求的标识。存储了向那个服务器请求的名字，app；</li>
<li>2.在创建服务器入口的app.js里面。</li>
<li>3.写了监听和路由，这样，在正确的url里面，req就能知道服务器的名字，也就是app；</li>
<li>req.app = app.js里面的app；</li>
</ul>
</li>
</ul>
<p>3.去掉路由里面传入的数据，也就是8.1；因为这个数据在公共里面有了；userInfo.username;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建后台用户列表路由</span></span><br><span class="line">admin.get(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.render(<span class="string">&#x27;admin/user&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">// @ts-ignore</span></span><br><span class="line">        <span class="comment">// 8.1 验证cookie与session</span></span><br><span class="line">        msg: req.session.username,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><del>msg: req.session.username,</del></p>
<p>3.1 然后去hearer.art里面，把admin改为模板语法：<code>&#123;&#123;userInfo.username&#125;&#125;</code></p>
<p>3.2 同时，在user.art里面，以前写的<code>&#123;&#123;msg&#125;&#125;</code>，也可以改为userInfo.username</p>
<ul>
<li>1.验证；</li>
</ul>
<h4 id="4-3-登录拦截"><a href="#4-3-登录拦截" class="headerlink" title="4.3 登录拦截"></a>4.3 登录拦截</h4><p>1.现在你不登录，直接输入域名admin/user</p>
<ul>
<li>1.也能过去，不过是报错；</li>
<li>2.因为userInfo.username没有东西；</li>
</ul>
<p><code>RuntimeError: Cannot read property &#39;username&#39; of undefined</code></p>
<ul>
<li>3.改为<code>&#123;&#123;userInfo && userInfo.username&#125;&#125;</code></li>
<li>4.就不会报错了，不过也能跳转到user页面了；</li>
</ul>
<p>1.2 我们不能让用户在没有登录的情况下，跑到某个用户的个人页面去；</p>
<ul>
<li>1.如果这个请求，是admin开头的；</li>
<li>2.判断用户登录状态</li>
<li>3.如果用户是登录的，我们让请求，继续往下走；一级路由通过；</li>
<li>4.反之不往下走，一级路由拦截；重定向到登录界面；</li>
</ul>
<p>1.3 不过，登录模板，也是在admin下面，所以要除开login，其他的是1.2那样；</p>
<p>1.4 明显是用中间件（视频说）</p>
<ul>
<li>1.中间件，是有顺序的，从上到下；</li>
<li>2.所以，要写在一级路由上面（express的路由，也是中间件）</li>
</ul>
<p>1.5 代码</p>
<ul>
<li>1.<code>req.a = user.username;</code>为空，就不是登录状态</li>
<li>2.这个重定向，是与localhost+端口；拼接的；</li>
<li>3.模板那些，有模板设置的路径；</li>
<li>4.路由那些，也是localhost+端口；二级路由会相对于一级路由的路径；</li>
<li>5.静态资源那些，也有设置静态资源根目录；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 8. 判断用户登录状态</span></span><br><span class="line">app.use(<span class="string">&#x27;/admin&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.url != <span class="string">&#x27;/login&#x27;</span> &amp;&amp; !req.session.username) &#123;</span><br><span class="line">        res.redirect(<span class="string">&#x27;/admin/login&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>2.不用重启服务器，在F12里面删除cookie，就可以重新登录了；</p>
<h3 id="5-优化"><a href="#5-优化" class="headerlink" title="5. 优化"></a>5. 优化</h3><h4 id="5-1-分离登录拦截"><a href="#5-1-分离登录拦截" class="headerlink" title="5.1 分离登录拦截"></a>5.1 分离登录拦截</h4><p>1.app.js一般不写具体的功能代码；</p>
<ul>
<li>1.分离登录拦截；</li>
</ul>
<p>2.在项目文件夹下面，创建新文件：middleware；ware[^11]</p>
<ul>
<li>1.建立login_guard.js</li>
<li>2.guard[^12]</li>
</ul>
<p>3.剪切代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    <span class="keyword">if</span> (req.url != <span class="string">&#x27;/login&#x27;</span> &amp;&amp; !req.session.username) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// @ts-ignore</span></span><br><span class="line">        <span class="built_in">console</span>.log(req.session.username);</span><br><span class="line">        res.redirect(<span class="string">&#x27;/admin/login&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 若是登录状态，放行；</span></span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>只剩：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 8. 判断用户登录状态</span></span><br><span class="line">app.use(<span class="string">&#x27;/admin&#x27;</span>,);</span><br></pre></td></tr></table></figure>



<p>3.1 给个名字；</p>
<p><code>const guard = (req, res, next)</code></p>
<p>4.导出：<code>module.exports = guard;</code></p>
<p>5.app.js引入；</p>
<ul>
<li>1.登录拦截路由使用；</li>
</ul>
<h4 id="5-2-admin分离处理函数（可选）"><a href="#5-2-admin分离处理函数（可选）" class="headerlink" title="5.2 admin分离处理函数（可选）"></a>5.2 admin分离处理函数（可选）</h4><blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=114&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=114&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.在真实的项目中，路由非常多；</p>
<p>2.分离路由的处理方法；路由的请求函数；</p>
<p>3.分离</p>
<p>4.分离方法和5.1一样，我觉得这么写挺好的，我不分离；</p>
<ul>
<li><p>1.主要有些处理方法有模块依赖；</p>
</li>
<li><p>2.依赖模块的路由也会变化</p>
</li>
</ul>
<h2 id="7-3-功能-新增用户"><a href="#7-3-功能-新增用户" class="headerlink" title="7.3 功能-新增用户"></a>7.3 功能-新增用户</h2><p>思路：</p>
<ol>
<li>为用户列表页面的新增用户按钮添加链接</li>
<li>添加一个连接对应的路由，在路由处理函数中渲染新增用户模板<br>3 .为新增用户表单指定请求地址、请求方式、为表单项添加name属性</li>
<li>增加实现添加用户的功能路由</li>
<li>接收到客户端传递过来的请求参数</li>
<li>对请求参数的格式进行验证</li>
<li>验证当前要注册的邮箱地址是否已经注册过</li>
<li>对密码进行加密处理</li>
<li>将用户信息添加到数据库中</li>
</ol>
<p>10.重定向页面到用户列表页面</p>
<h3 id="1-按钮设置"><a href="#1-按钮设置" class="headerlink" title="1.按钮设置"></a>1.按钮设置</h3><h4 id="1-1-表单设置"><a href="#1-1-表单设置" class="headerlink" title="1.1 表单设置"></a>1.1 表单设置</h4><p>1.action</p>
<ul>
<li>1.在admin/user.art</li>
</ul>
<p><code>&lt;a href=&quot;user-edit.html&quot; class=&quot;btn btn-primary new&quot;&gt;新增用户&lt;/a&gt;</code></p>
<p>1.1 是一个a，不是input</p>
<p>1.2 修改href</p>
<p><code>href=&quot;/admin/user-edit&quot;</code></p>
<ul>
<li>1.这里的跳转是怎样的？</li>
<li>2.先是直接是单纯的url</li>
<li>3.一级路由，admin；</li>
<li>4.二级路由，admin下的user-edit；</li>
</ul>
<p>1.3  路由再route文件下，能获取到吗？</p>
<ul>
<li>1.能</li>
<li>2.因为app.js里面有引入；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> home = <span class="built_in">require</span>(<span class="string">&quot;./route/home&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> admin = <span class="built_in">require</span>(<span class="string">&#x27;./route/admin&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>2.增加路由；</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=115&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=115&amp;spm_id_from=pageDriver</a></p>
<p>03:20</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.创建用户编辑页面路由</span></span><br><span class="line">admin.get(<span class="string">&#x27;/user-edit&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;./admin/1-user-edit&#x27;</span>));</span><br></pre></td></tr></table></figure>



<p>3.user-edit页面表单设置</p>
<p><code>&lt;form class=&quot;form-container&quot; action=&quot;/admin/user-edit&quot; method=&quot;POST&quot;&gt;</code></p>
<ul>
<li>1.请求地址，就是这个页面的路径么</li>
</ul>
<p>3.1 input加name；</p>
<ul>
<li>1.与数据库一致，去数据库看看名字；</li>
<li>2.</li>
</ul>
<p>3.2 注意选择栏里面，加value，因为role</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;select name=<span class="string">&quot;role&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span>&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;normal&quot;</span>&gt;普通用户&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;admin&quot;</span>&gt;超级管理员&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>1.解析：<ul>
<li>1.你选普通用户，提交的是normal</li>
<li>2.你选管理员，提交的是admin；</li>
</ul>
</li>
</ul>
<p>3.3 状态这边也是这样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">    &lt;label&gt;状态&lt;/label&gt;</span><br><span class="line">    &lt;select name=<span class="string">&quot;state&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span>&gt;</span><br><span class="line">        &lt;option value=<span class="string">&quot;0&quot;</span>&gt;启用&lt;/option&gt;</span><br><span class="line">        &lt;option value=<span class="string">&quot;1&quot;</span>&gt;禁用&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>



<p>3.4 表单的提交地址，提交方式，name都设置完了；</p>
<ul>
<li>1.又要去新增用户，做提交功能；</li>
</ul>
<h4 id="1-2-提交功能"><a href="#1-2-提交功能" class="headerlink" title="1.2 提交功能"></a>1.2 提交功能</h4><p>1.admin.js路由添加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.1 创建用户添加路由</span></span><br><span class="line">admin.post(<span class="string">&#x27;/user-edit&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;./admin/2-userEditPost&#x27;</span>));</span><br></pre></td></tr></table></figure>



<p>2.编写处理函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 接收请求参数</span></span><br><span class="line">    res.send(req.body);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>req.body是啥来着？</p>
</li>
<li><p>1.把post参数弄成对象类型，并在req下创建body，传给body</p>
</li>
<li><p>2.15.1-6.3.3 post参数获取</p>
</li>
</ul>
<h5 id="1-Joi"><a href="#1-Joi" class="headerlink" title="1. Joi"></a>1. Joi</h5><p>0.现在呢，请求参数已经接收到了。接下来，我们要对请求参数的格式，进行验证</p>
<ul>
<li><p>1.因为当前表单的字段比较多；</p>
</li>
<li><p>2.代码写起来不难，但啰嗦，费时间</p>
</li>
<li><p>3.使用第三方模块Joi</p>
</li>
<li><p>4.读作：zuai，zhuai。拽</p>
</li>
</ul>
<p>1.JavaScript对象的规则描述语言和验证器。</p>
<p>2.示例代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Joi = <span class="built_in">require</span>(<span class="string">&#x27;joi&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> schema = &#123;</span><br><span class="line">    username: Joi.string().alphanum().min(<span class="number">3</span>).max(<span class="number">30</span>).required().error(<span class="keyword">new</span> <span class="built_in">Error</span>(‘错误信息’)),</span><br><span class="line">    password: Joi.string().regex(<span class="regexp">/^[a-zA-Z0-9]&#123;3,30&#125;$/</span>),</span><br><span class="line">    access_token: [Joi.string(), Joi.number()],</span><br><span class="line">    birthyear: Joi.number().integer().min(<span class="number">1900</span>).max(<span class="number">2013</span>),</span><br><span class="line">    email: Joi.string().email()</span><br><span class="line">&#125;;</span><br><span class="line">Joi.validate(&#123; <span class="attr">username</span>: <span class="string">&#x27;abc&#x27;</span>, <span class="attr">birthyear</span>: <span class="number">1994</span> &#125;, schema);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>2.1 <code>Joi.string()</code></p>
<ul>
<li>1.表示类型；</li>
</ul>
<p>2.2 <code>alphanum()</code>；字母or数字，字符串；下划线,@那些不行；不能特殊字符</p>
<p>2.3 required() ；表示必选属性；如果没有，验证不通过；</p>
<p>2.4 以上方法都可选；</p>
<p>2.5 error(new Error(‘错误信息’))</p>
<ul>
<li>1.自定义错误信息，外面的error是个方法；</li>
<li>2.里面的参数，是一个Error对象，两个不一样；</li>
</ul>
<p>2.6 <code>[Joi.string(), Joi.number()]</code></p>
<ul>
<li>1.数组的话，就是，都可以；</li>
</ul>
<p>2.7 integer()  ;   必须整数；</p>
<p>2.8 email() ；满足邮件格式；</p>
<p>2.9 valid()；合法值；</p>
<ul>
<li>例如：valid(‘normal’,’admin’) ；valid(0,1)</li>
</ul>
<p>3.每一个属性第一个是 数据类型方法，不同的数据类型，后面的验证规则也不一样；</p>
<p>4.Joi，还有很多其他规则，实际的需求，再；</p>
<p>5.<code>Joi.validate(&#123; username: &#39;abc&#39;, birthyear: 1994 &#125;, schema);</code></p>
<ul>
<li>1.是验证的</li>
<li>2.第一个参数，是被验证的数据；第二个参数，是验证的规则；</li>
</ul>
<p>5.1 validate方法，返回的是promise对象；</p>
<ul>
<li>1.可以使用异步函数的方式，使用；</li>
</ul>
<p>6.代码：</p>
<ul>
<li>1.新建joi.js</li>
<li>2.8-blog\joi.js</li>
<li>3.就在项目文件夹下面新建；</li>
</ul>
<ol start="7">
<li>在项目中添加验证；</li>
</ol>
<p>7.1 在8-blog\route\admin\2-userEditPost.js 里面；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.验证规则</span></span><br><span class="line">    <span class="keyword">const</span> schema = &#123;</span><br><span class="line">        username: Joi.string().min(<span class="number">2</span>).max(<span class="number">12</span>).required().error(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;用户名不符合验证规则&#x27;</span>)),</span><br><span class="line">        email: Joi.string().email().required().error(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;邮箱格式不符合要求&#x27;</span>)),</span><br><span class="line">        password: Joi.string().regex(<span class="regexp">/^[a-zA-Z0-9]&#123;3,30&#125;$/</span>).required().error(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;密码格式不符合要求&#x27;</span>)),</span><br><span class="line">        role: Joi.string().valid(<span class="string">&#x27;normal&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>).required().error(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;角色值非法&#x27;</span>)),</span><br><span class="line">        state: Joi.number().valid(<span class="number">0</span>, <span class="number">1</span>).required().error(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;状态值非法&#x27;</span>))</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>



<p>7.2 验证数据；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Joi = <span class="built_in">require</span>(<span class="string">&#x27;joi&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 1.验证规则</span></span><br><span class="line">    <span class="keyword">const</span> schema = &#123;</span><br><span class="line">        username: Joi.string().min(<span class="number">2</span>).max(<span class="number">12</span>).required().error(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;用户名不符合验证规则&#x27;</span>)),</span><br><span class="line">        email: Joi.string().email().required().error(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;邮箱格式不符合要求&#x27;</span>)),</span><br><span class="line">        password: Joi.string().regex(<span class="regexp">/^[a-zA-Z0-9]&#123;3,30&#125;$/</span>).required().error(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;密码格式不符合要求&#x27;</span>)),</span><br><span class="line">        role: Joi.string().valid(<span class="string">&#x27;normal&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>).required().error(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;角色值非法&#x27;</span>)),</span><br><span class="line">        state: Joi.number().valid(<span class="number">0</span>, <span class="number">1</span>).required().error(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;状态值非法&#x27;</span>))</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 验证数据</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 实施验证</span></span><br><span class="line">        <span class="comment">// @ts-ignore</span></span><br><span class="line">        <span class="keyword">await</span> Joi.validate(req.body, schema);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="comment">// res.redirect(&#x27;/admin/user-edit?message=&#x27; + err.message);</span></span><br><span class="line">        res.redirect(<span class="string">`/admin/user-edit?message=<span class="subst">$&#123;err.message&#125;</span>`</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(err.message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 接收请求参数</span></span><br><span class="line">    <span class="comment">// res.send(req.body);</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<ul>
<li>1.报错：Joi.validate is not a function</li>
<li>2.网上说版本新了，不支持；</li>
</ul>
<p>7.2.1 我下载的版本：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">PS F:\<span class="number">2</span><span class="number">-3</span>ciyuan\<span class="number">11</span>-data base-shujuk\<span class="number">3</span>-lianxi\<span class="number">8</span>-blog&gt; npm install joi</span><br><span class="line">npm WARN <span class="number">8</span>-<span class="symbol">blog@</span><span class="number">1.0</span><span class="number">.0</span> No description</span><br><span class="line">npm WARN <span class="number">8</span>-<span class="symbol">blog@</span><span class="number">1.0</span><span class="number">.0</span> No repository field.</span><br><span class="line"></span><br><span class="line">+ <span class="symbol">joi@</span><span class="number">17.4</span><span class="number">.0</span></span><br><span class="line">added <span class="number">6</span> packages <span class="keyword">in</span> <span class="number">1.636</span>s</span><br></pre></td></tr></table></figure>

<ul>
<li><p>1.但是，网上有2014年，就说有这错误；2021-5-1 20:50:04</p>
</li>
<li><p>2.我想找找新方法；</p>
</li>
</ul>
<p>7.2.2 </p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/64383989/typeerror-joi-validate-is-not-a-function">https://stackoverflow.com/questions/64383989/typeerror-joi-validate-is-not-a-function</a></p>
</blockquote>
<p>这里的新格式不行；</p>
<p><code>await schema.validate(req.body);</code></p>
<p>7.2.3</p>
<blockquote>
<p><a href="https://www.pianshen.com/article/38651932782/">https://www.pianshen.com/article/38651932782/</a></p>
</blockquote>
<p>也不行；<code>await schema.validateAsync(req.body);</code></p>
<p>7.2.4 卸载最新版本，下载14.3.1</p>
<ul>
<li>1.卸载：<code>npm uninstall joi</code></li>
<li>2.下载：<code>npm install joi@14.3.1</code></li>
</ul>
<p>7.3 再次验证；</p>
<ul>
<li>1.成功，没有问题；2021-5-1 21:03:07</li>
</ul>
<p>8.把这个错误返回信息，弄到页面上去；</p>
<p>8.1 找到这个页面的get请求路由；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.创建用户编辑页面路由</span></span><br><span class="line">admin.get(<span class="string">&#x27;/user-edit&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;./admin/1-user-edit&#x27;</span>));</span><br></pre></td></tr></table></figure>



<p>8.2 在处理函数里面写</p>
<ul>
<li>1.获取get请求参数，<code>req.query</code></li>
<li>2.解构出message</li>
</ul>
<p><code>const &#123; message &#125; = req.query;</code></p>
<ul>
<li>3.传入数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; message &#125; = req.query;</span><br><span class="line">    <span class="comment">// 渲染用户编辑页面</span></span><br><span class="line">    res.render(<span class="string">&#x27;admin/user-edit&#x27;</span>, &#123;</span><br><span class="line">        message</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>4.修改模板文件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分类标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>5b9a716cb2d2bf17706bcc0a<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;tips&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>9.over</p>
<h4 id="1-3-验证邮箱"><a href="#1-3-验证邮箱" class="headerlink" title="1.3 验证邮箱"></a>1.3 验证邮箱</h4><p>1.回到：8-blog\route\admin\2-userEditPost.js</p>
<p>2.在验证下面写查询：</p>
<ul>
<li>1.查询，要用到用户集合的构造函数。</li>
<li>2.引入</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.1 引入用户集合</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="built_in">require</span>(<span class="string">&#x27;../../model/user&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>3.视频里是这样的：<code>const &#123; User &#125; = require(&#39;../../model/user&#39;);</code><ul>
<li>1.想了想，好像是这样没错；</li>
<li>2.我试试自己的写法；</li>
</ul>
</li>
<li>4.我的3是错误的；</li>
<li>5.根据邮箱地址，查询用户是否存在</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 根据邮箱地址，查询用户是否存在</span></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">await</span> User.findOne(&#123; <span class="attr">email</span>: req.body.email &#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>6.如果存在，就有那个用户的对象，如果不存在就为空；</li>
<li>7.利用返回值判断；</li>
<li>8.测试</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.2 测试</span></span><br><span class="line">res.send(user);</span><br></pre></td></tr></table></figure>

<ul>
<li>9.输入<a href="mailto:70@70.com">70@70.com</a>，会返回这个文档的信息；输入其他为空；</li>
</ul>
<p>2.1 写判断：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (user) &#123;</span><br><span class="line">    <span class="comment">// 3.3 重定向回用户添加页面</span></span><br><span class="line">    <span class="keyword">return</span> res.redirect(<span class="string">`/admin/user-edit?message=邮件已被注册`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>2.2 测试；</p>
<ul>
<li>1.</li>
</ul>
<h3 id="2-密码加密；"><a href="#2-密码加密；" class="headerlink" title="2. 密码加密；"></a>2. 密码加密；</h3><p>1.处于思路中的第八步；</p>
<blockquote>
<ol start="8">
<li>对密码进行加密处理</li>
</ol>
</blockquote>
<p>2.位置：8-blog\route\admin\2-userEditPost.js</p>
<p>3.引入加密模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4. 引入加密模块</span></span><br><span class="line"><span class="keyword">const</span> bcrypt = <span class="built_in">require</span>(<span class="string">&#x27;bcrypt&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>4.生成随机字符串.</p>
<p>5.加密</p>
<p>6.替换密码；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4.1 生成随机字符串</span></span><br><span class="line"><span class="keyword">const</span> salt = <span class="keyword">await</span> bcrypt.genSalt(<span class="number">7</span>);</span><br><span class="line"><span class="comment">// 4.2 加密</span></span><br><span class="line"><span class="keyword">const</span> password = <span class="keyword">await</span> bcrypt.hash(req.body.password, salt);</span><br><span class="line"><span class="comment">// 4.3 替换密码，替换到post参数里；上传就能上传加密的</span></span><br><span class="line">req.body.password = password;</span><br></pre></td></tr></table></figure>

<p>hash[^4]，</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=118&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=118&amp;spm_id_from=pageDriver</a></p>
<p>09:45</p>
</blockquote>
<h3 id="3-添加到数据库"><a href="#3-添加到数据库" class="headerlink" title="3. 添加到数据库"></a>3. 添加到数据库</h3><p>1.继续：8-blog\route\admin\2-userEditPost.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5.将用户信息添加到数据库中</span></span><br><span class="line"><span class="keyword">await</span> User.create(req.body);</span><br></pre></td></tr></table></figure>



<p>2.重定向到用户列表页面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 5.1 重定向到用户列表页面</span></span><br><span class="line">res.redirect(<span class="string">&#x27;./admin/user&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h3 id="4-代码优化"><a href="#4-代码优化" class="headerlink" title="4. 代码优化"></a>4. 代码优化</h3><h4 id="4-1-分离验证post参数"><a href="#4-1-分离验证post参数" class="headerlink" title="4.1 分离验证post参数"></a>4.1 分离验证post参数</h4><p>1.对请求参数格式验证的代码，也是处理数据的操作；</p>
<p>1.1 所以应该放到，专门操作数据的地方</p>
<p>1.2 其实就是model文件夹；</p>
<p>1.3 又和用户相关，所以放到user.js中；</p>
<ul>
<li>8-blog\model\user.js</li>
</ul>
<p>1.4 将验证代码，从路由中分离出来，也有利于代码==复用==，因为修改还要用</p>
<p>2.代码操作；</p>
<p>1.验证用户信息，接收从\route\admin\2-userEditPost.js分离过来的验证函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 8.验证用户信息，接收从\route\admin\2-userEditPost.js分离过来的验证函数</span></span><br><span class="line"><span class="keyword">const</span> validate_User = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>2.剪切规则过去</p>
<p>3.剪切验证过去</p>
<p><code>return Joi.validate(req.body, schema);</code></p>
<blockquote>
<p>5.<code>Joi.validate(&#123; username: &#39;abc&#39;, birthyear: 1994 &#125;, schema);</code></p>
<ul>
<li>1.是验证的</li>
<li>2.第一个参数，是被验证的数据；第二个参数，是验证的规则；</li>
</ul>
</blockquote>
<ul>
<li><p>1.不过，在新版本里面没有这个方法，这里用的和视频百度一直14.3.1；</p>
</li>
<li><p>2.剪切过去后，用返回。估计等会，会在2-userEditPost.js调用这里的validate_User方法</p>
</li>
</ul>
<p>4.函数添加形参，接收提交的用户信息；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 8.验证用户信息，接收从\route\admin\2-userEditPost.js分离过来的验证函数</span></span><br><span class="line"><span class="keyword">const</span> validate_User = <span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> schema = &#123;</span><br><span class="line">        username: Joi.string().min(<span class="number">2</span>).max(<span class="number">12</span>).required().error(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;用户名不符合验证规则&#x27;</span>)),</span><br><span class="line">        email: Joi.string().email().required().error(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;邮箱格式不符合要求&#x27;</span>)),</span><br><span class="line">        password: Joi.string().regex(<span class="regexp">/^[a-zA-Z0-9]&#123;3,30&#125;$/</span>).required().error(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;密码格式不符合要求&#x27;</span>)),</span><br><span class="line">        role: Joi.string().valid(<span class="string">&#x27;normal&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>).required().error(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;角色值非法&#x27;</span>)),</span><br><span class="line">        state: Joi.number().valid(<span class="number">0</span>, <span class="number">1</span>).required().error(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;状态值非法&#x27;</span>))</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Joi.validate(user, schema);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>1.目前是怎么接收到的，我还不清楚；</li>
<li>下面6.1.2有了</li>
</ul>
<p>5.导出方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    User,</span><br><span class="line">    <span class="comment">// 8.1 导出</span></span><br><span class="line">    validate_User,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>6.在8-blog\route\admin\2-userEditPost.js，引入验证</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.1 引入用户集合</span></span><br><span class="line"><span class="comment">// 6. 引入验证</span></span><br><span class="line"><span class="keyword">const</span> &#123; User, validate_User &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../../model/user&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>6.1 给try调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 1.验证规则</span></span><br><span class="line">    <span class="comment">// 2. 验证数据</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 实施验证</span></span><br><span class="line">        <span class="keyword">await</span> validate_User(req.body);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="comment">// res.redirect(&#x27;/admin/user-edit?message=&#x27; + err.message);</span></span><br><span class="line">        res.redirect(<span class="string">`/admin/user-edit?message=<span class="subst">$&#123;err.message&#125;</span>`</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(err.message);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>1.传入实参req.body</li>
<li>2.validate_User方法那边，形参user接收；</li>
</ul>
<p>7.验证；成功；2021-5-2 10:12:06</p>
<h4 id="4-2-错误处理"><a href="#4-2-错误处理" class="headerlink" title="4.2 错误处理"></a>4.2 错误处理</h4><p>1.post参数不符合规则，邮箱已被注册；</p>
<p>2.express给我们了一个错误处理的中间件，让我们把错误都写在那里；</p>
<p>3.在：app.js；写错误处理中间件；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 10.错误处理中间件</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 10.1 post验证错误，来自8-blog\route\admin\2-userEditPost.js</span></span><br><span class="line">    res.redirect(<span class="string">`/admin/user-edit?message=<span class="subst">$&#123;err.message&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>4.为了使错误信息灵活，不能写死路径和错误信息；</p>
<ul>
<li>1.这两个地方，应该通过参数，传递过来</li>
</ul>
<p>5.要调用错误处理中间件，要使用next方法，说的是之前学过；</p>
<ul>
<li>1.并且要为next方法，传递一个参数</li>
<li>2.在路由这里先把next加上；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 1.验证规则</span></span><br><span class="line">    <span class="comment">// 2. 验证数据</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 实施验证</span></span><br><span class="line">        <span class="keyword">await</span> validate_User(req.body);</span><br></pre></td></tr></table></figure>



<p>5.1 发生错误的地方，调用next函数</p>
<ul>
<li>1.首先在请求参数格式出错的地方</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 1.验证规则</span></span><br><span class="line">    <span class="comment">// 2. 验证数据</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 实施验证</span></span><br><span class="line">        <span class="keyword">await</span> validate_User(req.body);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="comment">// res.redirect(&#x27;/admin/user-edit?message=&#x27; + err.message);</span></span><br><span class="line">        <span class="comment">// res.redirect(`/admin/user-edit?message=$&#123;err.message&#125;`);转移app.js</span></span><br><span class="line">        next();</span><br></pre></td></tr></table></figure>



<ul>
<li>2.即使调用next方法，也需要停止向下运行，这里是处理错误；</li>
</ul>
<p><code>return next()</code></p>
<ul>
<li><p>3.next方法，只能传递一个参数，且是字符串类型；</p>
<ul>
<li>1.现在我们需要传递两个参数</li>
<li>2.我们传递一个参数，写成对象。然后把对象转换成字符串；</li>
<li>3.使用转换方法：<code>JSON.stringify()</code></li>
<li>4.方法的返回值，是，转换之后的结果；</li>
</ul>
</li>
<li><p>4.一个参数，两个属性；</p>
<ul>
<li>1.第一个属性是path</li>
<li>2.message</li>
</ul>
<p><code>&#123;path: &#39;/admin/user-edit&#39;,message: err.message&#125;</code></p>
</li>
<li><p>5.转换成字符串给next</p>
</li>
</ul>
<p><code>return next(JSON.stringify(&#123; path: &#39;/admin/user-edit&#39;, message: err.message &#125;));</code></p>
<p>5.2 <del>在express中，凡是错误里面的next，会next到错误处理中间件；</del></p>
<ul>
<li><del>1.所以不用担心，本来next是向下传的。怎么就传到app.js里面了呢？</del></li>
<li><del>2.是框架设置的</del></li>
<li>3.下面6.1发现了这个假设的错误；2021-5-2 11:05:21</li>
</ul>
<p>5.3 但字符串不好用，在app.js这里，还是转换回来</p>
<ul>
<li>1.<code>JSON.parse()</code></li>
<li>2.上面错误里的next的参数，是错误信息，在app.js的错误中间件中，是形参err的实参；</li>
<li>3.所以，处理err</li>
<li>4.<code>const result = JSON.parse(err);</code></li>
<li>5.修改重定向</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.redirect(<span class="string">`<span class="subst">$&#123;result.path&#125;</span>?message=<span class="subst">$&#123;result.message&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>



<p>5.4 <code>$&#123;&#125;</code>是模板的语法，那<code>&#123;&#123;&#125;&#125;`呢

+ 1.`$&#123;&#125;`是ES6模板字符串的语法，`&#123;&#123;好像是模板引擎的&#125;&#125;</code></p>
<p>5.5 测试，成功；2021-5-2 10:54:06</p>
<p>6.把邮箱已注册的重定向也修改了；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 根据邮箱地址，查询用户是否存在</span></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">await</span> User.findOne(&#123; <span class="attr">email</span>: req.body.email &#125;)</span><br><span class="line"><span class="comment">// 3.2 测试</span></span><br><span class="line"><span class="comment">// res.send(user);</span></span><br><span class="line"><span class="keyword">if</span> (user) &#123;</span><br><span class="line">    <span class="comment">// 3.3 重定向回用户添加页面</span></span><br><span class="line">    <span class="comment">// return res.redirect(`/admin/user-edit?message=邮件已被注册`); </span></span><br><span class="line">    <span class="keyword">return</span> next((<span class="built_in">JSON</span>.stringify(&#123; <span class="attr">path</span>: <span class="string">&#x27;/admin/user-edit&#x27;</span>, <span class="attr">message</span>: <span class="string">`邮件已被注册`</span> &#125;)));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>6.1 我在上面5.2做出了假设：在express中，凡是错误里面的next</p>
<ul>
<li>1.是错误的；因为这里不是报错；含义是报错，但关键字不是</li>
<li>2.所以5.2的假设是错的</li>
</ul>
<p>6.2 新假设：8-blog\route\admin\2-userEditPost.js的调用是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.1 创建用户添加路由</span></span><br><span class="line">admin.post(<span class="string">&#x27;/user-edit&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;./admin/2-userEditPost&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>的调用；</p>
<ul>
<li>2.而这个的调用，是：<code>app.use(&#39;/admin&#39;, admin);</code>一级路由；</li>
<li>3.所以这里的next，如同一级路由的处理函数。</li>
<li>4.而一级路由下面，正是错误处理中间件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用路由模块</span></span><br><span class="line">app.use(<span class="string">&#x27;/home&#x27;</span>, home);</span><br><span class="line">app.use(<span class="string">&#x27;/admin&#x27;</span>, admin);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.错误处理中间件</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 10.1 post验证错误，来自8-blog\route\admin\2-userEditPost.js</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">JSON</span>.parse(err);</span><br><span class="line">    res.redirect(<span class="string">`<span class="subst">$&#123;result.path&#125;</span>?message=<span class="subst">$&#123;result.message&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>6.3 验证，提交已经注册过的邮箱，看有没有错误提示；</p>
<ul>
<li>1.成功；</li>
</ul>
<hr>
<h3 id="5-渲染用户列表"><a href="#5-渲染用户列表" class="headerlink" title="5. 渲染用户列表"></a>5. 渲染用户列表</h3><p>1.post参数添加给数据库后，就是显示在列表页面了；</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=120&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=120&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>2.找到路由；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建后台用户列表路由</span></span><br><span class="line">admin.get(<span class="string">&#x27;/user&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;./admin/3-user&#x27;</span>));</span><br></pre></td></tr></table></figure>



<p>3.用对象解构，导出User方法；</p>
<p>3.1 查询，传递；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 9.1 引入集合模块</span></span><br><span class="line"><span class="comment">// const user = require(&#x27;../../model/user&#x27;);</span></span><br><span class="line"><span class="comment">// 9.2 用对象解构，导出User方法；</span></span><br><span class="line"><span class="keyword">const</span> &#123; User &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../../model/user&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 9. 将用户信息从数据库中查询出来</span></span><br><span class="line">    <span class="comment">// 9.3 查询</span></span><br><span class="line">    <span class="keyword">let</span> users = <span class="keyword">await</span> User.find(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">    res.render(<span class="string">&#x27;admin/user&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">// 9.4 传递User集合的数据</span></span><br><span class="line">        user: users,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3.2 查询返回的结果是一个数组，find()方法返回的是一个数组；</p>
<p>3.3 去模板页面，循环；</p>
<ul>
<li><p>1.8-blog\views\admin\user.art</p>
</li>
<li><p>2.代码</p>
<ul>
<li>1.<code>$value</code>，是当前循环时。第一次循环就是第一次，第二次循环就是第二次</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    &#123;&#123;each user&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;$value._id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;$value.username&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;$value.email&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;$value.role&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;$value.state&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;user-edit.html&quot;</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-edit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-remove&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;.confirm-modal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>3.测试，报错：<code>SyntaxError: Unexpected token T in JSON at position 0</code></li>
<li>4.没有加<code>&#123;&#123;/each&#125;&#125;</code></li>
</ul>
<p>3.4 优化列表里面的角色与状态</p>
<p><img src="../../img/15.2/7.png" alt="7"></p>
<ul>
<li>1.状态代码：<code>&lt;td&gt;&#123;&#123;$value.state == 0? '启用':'禁用'&#125;&#125;&lt;/td&gt;</code></li>
<li>2.角色不改，就这样；</li>
</ul>
<p>3.5 去掉id的引号；</p>
<p><img src="../../img/15.2/8.png" alt="8"></p>
<ul>
<li>1.因为id，在数据库中是一个特殊的类型，obj_id类型？？？</li>
<li>2.在模板中，会对这种类型，加上引号</li>
<li>3.如何去掉引号，只需要对_id原文输出；</li>
<li>4.在模板语法的，标准语法里面：@是原文输出<ul>
<li>1.代码</li>
<li>2.<code>&lt;td&gt;&#123;&#123;@$value._id&#125;&#125;&lt;/td&gt;</code></li>
</ul>
</li>
</ul>
<h3 id="6-分页"><a href="#6-分页" class="headerlink" title="6. 分页"></a>6. 分页</h3><p>1.当数据库中的数据非常多时，数据需要分批次显示，这时就需要用到数据分页功能。</p>
<p>2.分页功能核心要素：</p>
<ul>
<li>当前页，用户通过点击上一页或者下一页或者页码产生，客户端通过get参数方式传递到服务器</li>
<li>总页数，根据总页数判断当前页是否为最后一页，根据判断结果做响应操作</li>
</ul>
<p>3.问题：能给用户列表里面加一个序号吗？</p>
<ul>
<li>1.现在不知道这个，赶时间，以后再说吧；2021-5-2 20:33:56</li>
</ul>
<p>4.总页数，自己算；结果向上取进；</p>
<ul>
<li>1.Math.ceil（总数据条数 / 每页显示数据条数）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 10.3 总页数</span></span><br><span class="line"><span class="keyword">let</span> total = <span class="built_in">Math</span>.ceil(count / pagesize);</span><br></pre></td></tr></table></figure>



<p>5.接收客户端传来的当前页参数，这个参数是自己设置；啥意思？怎么自己设置的？</p>
<ul>
<li>1.每一页显示的数据条数</li>
<li>2.查询用户数据的总数<ul>
<li>1.集合下的一个方法：countDocuments；计数文档</li>
<li>2.count；计数</li>
<li>3.documents[^13]</li>
<li>4.第一个参数，是查询条件；如果不设置条件，那么是无或空对象；表示，查询所有；</li>
</ul>
</li>
<li>3.计算总页数；</li>
<li>4.代码；上面1~3，对应10.1~10.3</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 10. 接收客户端传来的当前页参数，这个参数是自己设置</span></span><br><span class="line">    <span class="keyword">let</span> page = req.query.page;</span><br><span class="line">    <span class="comment">// 10.1 每一页显示的数据条数</span></span><br><span class="line">    <span class="keyword">let</span> pagesize = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 10.2 查询用户数据的总数</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="keyword">await</span> User.countDocuments(&#123;&#125;);</span><br><span class="line">    <span class="comment">// 10.3 总页数</span></span><br><span class="line">    <span class="keyword">let</span> total = <span class="built_in">Math</span>.ceil(count / pagesize);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 9. 将用户信息从数据库中查询出来</span></span><br><span class="line">    <span class="comment">// 9.3 查询</span></span><br><span class="line">    <span class="keyword">let</span> users = <span class="keyword">await</span> User.find(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">    res.render(<span class="string">&#x27;admin/user&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">// 9.4 传递User集合的数据</span></span><br><span class="line">        user: users,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>6.limit()，与，skip()</p>
<ul>
<li>1.skip()跳过多少条数据，跳过多少条数据开始查询<ul>
<li>0.第一条数据，是0</li>
<li>1.在分页中，是指定查询开始的位置；</li>
<li>2.比如，你想查询第一页的数据，开始位置就是0</li>
<li>3.第二页的数据，就要从10开始查询，第一页是0~9</li>
<li>4.客户端传递的是，当前页的页码，而不是数据开始位置；<ul>
<li>1.所以，我们要把当前页，转换到数据开始的位置；</li>
<li>2.如何转换？</li>
<li>3.比如，你想查询第二页的数据；数据应该从10开始，</li>
<li>4.我们可以用当前页2，减去1，再乘以10；</li>
<li>5.结果就是页码2的开始条数；</li>
</ul>
</li>
</ul>
</li>
<li>1.1 数据开始查询位置=（当前页-1）* 每页显示的数据条数（这里每页显示10条数据）</li>
</ul>
<ul>
<li>2.limit()限制查询数量，只查询设置的数量<ul>
<li>这个是从1开始的</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">limit(<span class="number">2</span>) <span class="comment">// limit 限制查询数量  传入每页显示的数据数量</span></span><br><span class="line">skip(<span class="number">1</span>) <span class="comment">// skip 跳过多少条数据  传入显示数据的开始位置</span></span><br></pre></td></tr></table></figure>



<p>6.1 切换到编辑器中；</p>
<p>6.2 设置限制查询数量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 9.3 查询</span></span><br><span class="line"><span class="keyword">let</span> users = <span class="keyword">await</span> User.find(&#123;&#125;).limit(pagesize);</span><br></pre></td></tr></table></figure>

<ul>
<li>1.每页显示10条，但能不写死，就不写死；</li>
<li>2.pagesize正是每页显示的数据条数。</li>
</ul>
<p>6.3 页码对应的，数据查询的，开始位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 10.4 页码对应的，数据查询的，开始位置</span></span><br><span class="line"><span class="keyword">let</span> start = (page - <span class="number">1</span>) * pagesize;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 9.3 查询</span></span><br><span class="line"><span class="keyword">let</span> users = <span class="keyword">await</span> User.find(&#123;&#125;).limit(pagesize).skip(start);</span><br></pre></td></tr></table></figure>



<p>6.4 页码默认1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 10. 接收客户端传来的当前页参数，这个参数是自己设置</span></span><br><span class="line"><span class="keyword">let</span> page = req.query.page || <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>1.这个参数是自己的设置的，到底是什么意思？</p>
</li>
<li><p>1.1 自己在req.query里面添加了一个page？</p>
</li>
<li><p>1.2 回到15-node md文档中查看了req.query的返回值，确实没有page</p>
</li>
<li><p>1.3 那么，是如何自己设置的呢？</p>
<ul>
<li><p>1.因为：Express框架中使用req.query即可获取GET参数，框架内部会将GET参数转换为对象并返回。</p>
</li>
<li><p>2.而在模板那边，我们自己手动设置了get参数：page</p>
<p><code>&lt;a href=&quot;/admin/user?page=&lt;%=i%&gt;&quot;&gt;&#123;&#123;i&#125;&#125;&lt;/a&gt;&lt;/li&gt;</code></p>
</li>
<li><p>3.</p>
</li>
</ul>
</li>
</ul>
<h3 id="7-分页按钮"><a href="#7-分页按钮" class="headerlink" title="7. 分页按钮"></a>7. 分页按钮</h3><p>1.路由传递数据，当前页码page，总页数total</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.render(<span class="string">&#x27;admin/user&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">// 9.4 传递User集合的数据</span></span><br><span class="line">        user: users,</span><br><span class="line">        page,</span><br><span class="line">        total</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>



<p>2.去模板，找分页器；</p>
<ul>
<li>8-blog\views\admin\user.art</li>
</ul>
<p>2.1 我们要让页码有多少，才显示多少个</p>
<ul>
<li>1.原来模板的原始语法就是这；</li>
<li>2.为什么不使用标准语法？<ul>
<li>1.因为这里的total是一个数值，不是一个对象；</li>
<li>2.为什么这么说？</li>
<li>3.查看：15.1-5.1-3.4.1</li>
</ul>
</li>
</ul>
<p>2.2 设置盒子的超链接</p>
<p>2.3 实现上一页，下一页可以点击；</p>
<ul>
<li><p>1.第一个page，是请求参数，第二个page，才是渲染模板传递的数据；</p>
</li>
<li><p>2.上一页成功，下一页失败，变成了11</p>
<ul>
<li>1.减号有隐式转换，+没有；</li>
<li>2.转换成数值page-0</li>
</ul>
</li>
</ul>
<p>2.4 不能超过总页数，第二页再点击下一页，url的page参数变成了3</p>
<ul>
<li>1.判断，如果是最后一页，下一页按钮隐藏；<ul>
<li>1.block会破坏样式，inline也能显示；</li>
</ul>
</li>
<li>2.同理上一页；</li>
</ul>
<p>2.5 代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.2 上一页按钮 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4.1 上一页判断 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;display: &lt;%= page-1 &lt; 1 ? &#x27;none&#x27; : &#x27;inline&#x27; %&gt;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/admin/user?page=&lt;%=page-1%&gt;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="symbol">&amp;laquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.设置页码 --&gt;</span></span><br><span class="line">    &lt;% for (var i=1; i&lt;=total; i++) &#123; %&gt;</span><br><span class="line">        <span class="comment">&lt;!-- 2.设置盒子的超链接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/admin/user?page=&lt;%=i%&gt;&quot;</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%&#125;%</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 4.判断，如果是最后一页，下一页按钮隐藏； --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;display: &lt;%= page-0+1 &gt; total ? &#x27;none&#x27; : &#x27;inline&#x27; %&gt;&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 3.1 下一页按钮 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 3.3 转换成数值page-0 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/admin/user?page=&lt;%=page-0+1%&gt;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="symbol">&amp;raquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /分页 --&gt;</span></span><br></pre></td></tr></table></figure>



<hr>
<h2 id="7-4-修改用户"><a href="#7-4-修改用户" class="headerlink" title="7.4 修改用户"></a>7.4 修改用户</h2><p>0.思路：</p>
<ol>
<li><p>将要修改的用户ID传递到服务器端</p>
</li>
<li><p>建立用户信息修改功能对应的路由</p>
</li>
<li><p>接收客户端表单传递过来的请求参数 </p>
</li>
<li><p>根据id查询用户信息，并将客户端传递过来的密码和数据库中的密码进行比对</p>
</li>
<li><p>如果比对失败，对客户端做出响应</p>
</li>
<li><p>如果密码对比成功，将用户信息更新到数据库中</p>
</li>
</ol>
<p>1.添加和修改页面都是同一个模板</p>
<ul>
<li>1.如何区分是修改，还是添加？</li>
</ul>
<p>2.如果是添加，直接跳转，如果是修改，把id参数，由get传递过去；</p>
<p>2.1 如果是修改操作，我们还要从数据库中查询文档，并显示在页面中；</p>
<ul>
<li>1.找到user.art</li>
<li>2.设置修改按钮的href</li>
<li>3.传递id</li>
<li>views\admin\user.art:51</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 15.2-7.4-2.1.2 设置修改按钮的href --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 15.2-7.4-2.1.3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/admin/user-edit?id=&#123;&#123;@$value._id&#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-edit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-remove&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;.confirm-modal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3.找到路由；8-blog\route\admin\1-user-edit.js</p>
<ul>
<li>1.获取到地址栏中的id参数<ul>
<li>route\admin\1-user-edit.js:5</li>
</ul>
</li>
<li>2.如果当前传递了id，就是修改操作；否则是添加操作；<ul>
<li>route\admin\1-user-edit.js:8</li>
</ul>
</li>
<li>3.查询当前修改的文档信息；<ul>
<li>route\admin\1-user-edit.js:11</li>
</ul>
</li>
<li>4.引入用户集合的构造函数；<ul>
<li>route\admin\1-user-edit.js:2</li>
</ul>
</li>
</ul>
<p>3.1 传递给模板，已经查找到的当前修改文档的信息；</p>
<ul>
<li>route\admin\1-user-edit.js:16</li>
</ul>
<p>3.2 去模板获取信息；</p>
<p><code>value=&quot;&#123;&#123;user.username&#125;&#125;&quot;</code></p>
<p>这种格式</p>
<p>3.3 现在在修改的渲染模板里面，添加了user，但是添加的时候没有。</p>
<ul>
<li>1.而模板里面又改了</li>
<li>2.那么添加的时候会报错；</li>
<li>3.用并且；<ul>
<li><code>&#123;&#123;user && user.username&#125;&#125;</code></li>
<li>1.判断用户存不存在；不存在，就不执行<code>&#123;&#123;user.username&#125;&#125;</code></li>
<li>2.这样的写法，用了并且的短路特性；</li>
<li>3.如果左边的数据为假，右边的就不会执行；直接返回false；</li>
</ul>
</li>
<li>4.密码，先不弄</li>
<li>5.看角色<ul>
<li>1.角色是一个下拉框</li>
<li>2.如果是管理员，让管理员选中；反之如果是普通用户，就普通被选中；</li>
<li>3.</li>
</ul>
</li>
</ul>
<p>3.4 禁用同理；</p>
<p>3.5 密码等会处理；</p>
<p>3.6 提交地址</p>
<ul>
<li><p>1.修改和添加的提交一样不一样；</p>
</li>
<li><p>2.但这里是固定的action</p>
</li>
<li><p>3.在渲染模板里面，添加新的数据link；这样能区别修改和添加的表单地址</p>
</li>
<li><p>4.回模板，在action写判断</p>
</li>
<li><p>5.修改用户名显示，添加隐藏盒子；</p>
<ul>
<li>1.报错</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SyntaxError: Unexpected token T <span class="keyword">in</span> JSON at position <span class="number">0</span></span><br><span class="line">    at JSON.parse (&lt;anonymous&gt;)</span><br><span class="line">    at F:\<span class="number">2</span><span class="number">-3</span>ciyuan\<span class="number">11</span>-data base-shujuk\<span class="number">3</span>-lianxi\<span class="number">8</span>-blog\app.js:<span class="number">49</span>:<span class="number">25</span></span><br><span class="line">    at module.exports (F:\<span class="number">2</span><span class="number">-3</span>ciyuan\<span class="number">11</span>-data base-shujuk\<span class="number">3</span>-lianxi\<span class="number">8</span>-blog\route\admin\<span class="number">1</span>-user-edit.js:<span class="number">24</span>:<span class="number">13</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>2.首先，错误是：anonymous不存在；</li>
<li>3.<code>1-user-edit.js:24:13</code></li>
<li>4.后面是行和列；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.render(<span class="string">&#x27;admin/user-edit&#x27;</span>, &#123;</span><br><span class="line">    message,</span><br><span class="line">    <span class="comment">// 15.2-7.4-3.6·3 在渲染模板里面，添加新的数据link；</span></span><br><span class="line">    link: <span class="string">&#x27;/admin/user-edit&#x27;</span>,</span><br><span class="line">    button: <span class="string">&#x27;新增&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>5.没有东西，没有user</li>
<li>6.解决：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;h4 style=<span class="string">&quot;display: &#123;&#123;button == &#x27;修改&#x27; ? &#x27;block&#x27; : &#x27;none&#x27;&#125;&#125;;&quot;</span>&gt;用户：&#123;&#123;user &amp;&amp; user.username&#125;&#125;&lt;/h4&gt;</span><br></pre></td></tr></table></figure>




</li>
</ul>
<h3 id="4-修改提交地址"><a href="#4-修改提交地址" class="headerlink" title="4. 修改提交地址"></a>4. 修改提交地址</h3><p>1.找到地址</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 15.2-7.4-3.6·3 在渲染模板里面，添加新的数据link；</span></span><br><span class="line">link: <span class="string">&#x27;/admin/user-modify&#x27;</span>,</span><br></pre></td></tr></table></figure>



<p>2.把id作为get参数，传递给服务器端，告诉服务器，我们修改的谁；</p>
<p><code>link: &#39;/admin/user-modify?id=&#39; + id,</code>；</p>
<p>3.建立用户信息修改功能对应的路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 15.2-7.4-4.3 建立用户信息修改功能对应的路由</span></span><br><span class="line">admin.post(<span class="string">&#x27;/user-modify&#x27;</span>,)</span><br></pre></td></tr></table></figure>



<p>3.1 测试</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 15.2-7.4-4_3.1</span></span><br><span class="line">    res.send(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>4.获取admin/user-edit传递过来的修改post参数</p>
<p>4.1 获得被修改的id</p>
<p>5.密码比对；</p>
<ul>
<li>1.后去修改post过来的密码；</li>
<li>2.引入User集合；</li>
</ul>
<p>5.1 根据id查询文档；</p>
<p>5.2 引入bcrypt</p>
<p><code>const bcrypt = require(&#39;bcrypt&#39;);</code></p>
<p>5.3 对比</p>
<ul>
<li>1.第一个参数，是明文；第二个参数是 加密后的密码；</li>
<li>2.是异步方法；返回的是布尔值；</li>
</ul>
<h3 id="5-对比密码"><a href="#5-对比密码" class="headerlink" title="5. 对比密码"></a>5. 对比密码</h3><blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=126&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=126&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.判断；</p>
<ul>
<li><p>1.失败后去错误处理中间件；</p>
</li>
<li><p>2.重定向到页面修改，并提示原密码错误；</p>
</li>
<li><p>3.转换成，字符串；为next参数</p>
</li>
</ul>
<p>2.错误信息的拼接写死了；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.redirect(<span class="string">`<span class="subst">$&#123;result.path&#125;</span>?message=<span class="subst">$&#123;result.message&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>



<p>2.1 视频中，说写循环；</p>
<ul>
<li>1.接收到错误信息后，转回对象类型；</li>
<li>2.对象循环用 for in<ul>
<li>1.for in 循环笔记：25.1-14.4 ；</li>
<li>2.push 方法：添加元素（在数组最后一项元素的后面添加</li>
</ul>
</li>
<li>3.循环后，传递给res.redirect；<ul>
<li>1.数组.join：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join</a></li>
<li><code>join()</code> 方法将一个数组（或一个<a href="https://developer.mozilla.org/zh-CN_docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects">类数组对象</a>）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。</li>
</ul>
</li>
</ul>
<p>app.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// y_2.1·2</span></span><br><span class="line">    <span class="keyword">let</span> params = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> attr <span class="keyword">in</span> result) &#123;</span><br><span class="line">        <span class="keyword">if</span> (attr != <span class="string">&#x27;path&#x27;</span>) &#123;</span><br><span class="line">            params.push(attr + <span class="string">&#x27;=&#x27;</span> + result[attr]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// res.redirect(`$&#123;result.path&#125;?message=$&#123;result.message&#125;`);</span></span><br><span class="line">    res.redirect(<span class="string">`<span class="subst">$&#123;result.path&#125;</span>?<span class="subst">$&#123;params.join(<span class="string">&#x27;&amp;&#x27;</span>)&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>3.密码比对成功，我们就需要把修改过的信息，传递到数据库中；</p>
<ul>
<li>1.使用的是，数据库更新方法。</li>
<li>2.第一个参数是查询条件；</li>
<li>3.第二个参数，是一个对象，是已经被修改过的用户信息；</li>
<li>4.req.body是post参数，但这里的密码，只是比对，</li>
</ul>
<p>3.1 所以，第二个参数，我们写具体的数据；</p>
<ul>
<li><p>1.先解构</p>
</li>
<li><p>2.当键值对的键与值都是一个名的时候，可以只写一个键；</p>
</li>
</ul>
<p>4.数据更新到数据库后，我们要重定向到用户列表页面；</p>
<p>5.测试；</p>
<ul>
<li>1.出错；没有报错；</li>
<li>2.但没有效果；</li>
</ul>
<p>5.1 原来是没有写 await，所以获取不到返回值；</p>
<ul>
<li>1.但是不报错，有点不爽；</li>
<li>2.用try/catch，试试能不能报错；</li>
<li>3.没有反应；</li>
<li>4.查看错误中间件，添加：console.log(err.message);</li>
</ul>
<p>5.2 再次实验；还是没有打印任何报错；</p>
<ul>
<li>1.先放在这里吧，下次再来；</li>
</ul>
<h2 id="7-5-删除用户"><a href="#7-5-删除用户" class="headerlink" title="7.5 删除用户"></a>7.5 删除用户</h2><p>0.思路</p>
<ol>
<li><p>在确认删除框中添加隐藏域用以存储要删除用户的ID值</p>
</li>
<li><p>为删除按钮添自定义属性用以存储要删除用户的ID值</p>
</li>
<li><p>为删除按钮添加点击事件，在点击事件处理函数中获取自定义属性中存储的ID值并将ID值存储在表单的隐藏域中</p>
</li>
<li><p>为删除表单添加提交地址以及提交方式</p>
</li>
<li><p>在服务器端建立删除功能路由</p>
</li>
<li><p>接收客户端传递过来的id参数</p>
</li>
<li><p>根据id删除用户</p>
</li>
</ol>
<p>1.点击删除，弹出确认警示框；</p>
<p>2.但视频说，这个框是一个表单</p>
<p>2.1 要通过这个表单，把要删除的用户id传递给服务器端；</p>
<p>2.2 如何传递？</p>
<ul>
<li>1.在表单中，写一个隐藏域<ul>
<li>1.这是啥玩意？</li>
</ul>
</li>
</ul>
<p>2.3 代码了，我得先去学习一下隐藏域；</p>
<ul>
<li>1.隐藏域在页面中对于用户是不可见的，在表单中插入隐藏域的目的在于收集或发送信息，以利于被处理表单的程序所使用。浏览者单击发送按钮发送表单的时候，隐藏域的信息也被一起发送到服务器</li>
<li>2.个人理解：看不到的input；</li>
</ul>
<p>2.4 代码：添加隐藏域；</p>
<ul>
<li>1.首先找到位置，在用户列表页面；</li>
</ul>
<p>2.5 接下来，找到删除案例；我们要把当前用户的id，作为自定义属性，存储在删除按钮上；</p>
<ul>
<li><p>1.data-id=“” ；是自定义属性，这就自定义了？</p>
</li>
<li><p>2.F12看html，可以看里面有没有id；</p>
</li>
<li><p>3.有</p>
</li>
<li><p>4.然我想想，为什么？</p>
<ul>
<li>1.是路由那边</li>
<li>2.路由那边，渲染模板的时候，传过来了集合<code>user: users</code></li>
<li>3.然后这个按钮，在each user；</li>
<li>4.所以<code>@$value._id</code>能接收到；</li>
</ul>
</li>
</ul>
<p>2.6 给删除按钮，添加点击事件，在点击事件里面，要获取id值；</p>
<ul>
<li>1.给删除按钮添加一个类名，delete</li>
<li>2.在下面填js的坑；</li>
<li>3.获取用户id；<ul>
<li>1.<code>.attr</code>是什么的属性；</li>
</ul>
</li>
<li>4.获取失败，上面的自定义写错了，写成了date，改为data</li>
</ul>
<p>2.7 把获取的id，存储在隐藏域中；</p>
<ul>
<li>1.给隐藏域添加id属性；</li>
</ul>
<p><code>&lt;input type=&quot;hidden&quot; name=&quot;id&quot; id=&quot;delete_userID&quot;&gt;</code></p>
<ul>
<li><p>2.让这个隐藏域的值，等于获取的id；</p>
<ul>
<li>1.点击的时候，会增加value属性，值是id</li>
<li>2.</li>
</ul>
</li>
<li><p>3.这些是在user.art操作；</p>
</li>
</ul>
<p>3.为删除表单添加提交地址以及提交方式</p>
<p>4.在服务器端建立删除功能路由</p>
<ul>
<li>1.找到：8-blog\route\admin.js</li>
<li>2.添加二级路由；</li>
</ul>
<p><code>admin.get(&#39;./delete&#39;, require(&#39;./admin/6-user_delete&#39;));</code></p>
<ul>
<li>3.</li>
</ul>
<p>5.接收客户端传递过来的id参数</p>
<p>6.根据id删除用户</p>
<ul>
<li>1.需要用户集合模块；引入；</li>
<li>2.当用户删除成功后，重定向会用户列表页面；</li>
</ul>
<p>7.res.send 没有中断效果，会继续执行下面的代码；只是显示效果拦截</p>
<p>8.完毕</p>
<h2 id="7-6-文章管理"><a href="#7-6-文章管理" class="headerlink" title="7.6 文章管理"></a>7.6 文章管理</h2><blockquote>
<p><a href="https://www.bilibili.com/video/BV1j5411K7EH?p=129&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1j5411K7EH?p=129&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<h1 id="X-题注"><a href="#X-题注" class="headerlink" title="X. 题注"></a>X. 题注</h1><p>[^1]:common英 [ˈkɒmən]   美 [ˈkɑːmən]  adj.常见的;通常的;普遍的;共有的;共享的;共同的;普通的;平常的;寻常的;平凡的n.公共用地;公地;(学校、大学等的)学生公共食堂</p>
<p>[^2]:layout英 [ˈleɪaʊt]   美 [ˈleɪaʊt]  n.布局;布置;设计;安排<br>[^3]:trim英 [trɪm]   美 [trɪm]  v.修剪;修整;切去，割掉，剪下，除去(不必要的部分);装饰，修饰，点缀(尤指某物的边缘)<br>n.(尤指毛发的)修剪;(衣服、家具、汽车等的)饰物，边饰，装饰配件<br>adj.苗条的;修长的;健康优雅的;整齐的;精心照管的;井然有序的<br>[^4]:hash英 [hæʃ]   美 [hæʃ]  n.回锅)肉丁土豆;(尤指电话上的)#号v.反复推敲;仔细考虑;把……弄糟（乱）;斩碎;斩（肉）;剁（肉）;细切（肉）<br>[^5]:compare英 [kəmˈpeə(r)]   美 [kəmˈper]  v.比较;对比;与…类似(或相似);表明…与…相似;将…比作n.比较<br>[^6]:equal英 [ˈiːkwəl]   美 [ˈiːkwəl]  adj.(大小、数量、价值等)相同的，同样的;相等的;平等的;同等的;(力气、勇气、能力等)相当的;能胜任的;能应付的n.<br>同等的人;相等物<br>v.(大小、数量、价值等)与…相等，等于;比得上;敌得过;导致;结果为</p>
<p>[^7]:session英 [ˈseʃn]   美 [ˈseʃn]  n.一场;一节;一段时间;(法庭的)开庭，开庭期;(议会等的)会议，会期;学年<br>[^8]:secret英 [ˈsiːkrət]   美 [ˈsiːkrət]  adj.秘密的;保密的;外人不得而知的;(指行为与习惯)暗中进行的，未公开的，隐秘的;诡秘;神秘n.秘密;机密;诀窍;秘诀;奥秘;奥妙<br>[^9]:cookie英 [ˈkʊki]   美 [ˈkʊki]  n.曲奇饼;精明强干的人;坚强的人;网络饼干(网络或互联网使用者发给中央服务器信息的计算机文件)</p>
<p>[^10]:redirect英 [ˌriːdəˈrekt , ˈriːdərekt]   美 [ˌriːdəˈrekt , ˈriːdərekt]  v.(以新的方式或目的)重新使用;改寄;改变投递方向<br>[^11]:ware英 [weə(r)]   美 [wer]  n.用某材料(或以某方式、在某地)制造的物品;作…用的器皿;…室的物品;(尤指小商贩在大街上或市场里出售的)物品<br>[^12]:guard英 [ɡɑːd]   美 [ɡɑːrd]  n.卫兵;警卫员;看守;(统称)卫兵，警卫;警戒;保卫;保护v.警卫;守卫;保卫;看守;监视</p>
<p>[^13]:documents英 [ˈdɒkjuments]   美 [ˈdɑːkjuments]  n.文件;公文;文献;证件;(计算机)文档v.记录，记载(详情);用文件证明(或证实)document的第三人称单数和复数<br>[^14]:limit英 [ˈlɪmɪt]   美 [ˈlɪmɪt]  n.限度;限制;极限;限量;限额;(地区或地方的)境界，界限，范围v.限制;限定;限量;减量</p>
<p>[^15]:unique英 [juˈniːk]   美 [juˈniːk]  adj.唯一的;独一无二的;独特的;罕见的;(某人、地或事物)独具的，特有的<br>[^16]:hash英 [hæʃ]   美 [hæʃ]  n.回锅)肉丁土豆;(尤指电话上的)#号v.反复推敲;仔细考虑;把……弄糟（乱）;斩碎;斩（肉）;剁（肉）;细切（肉）</p>
<h2 id="末尾"><a href="#末尾" class="headerlink" title="末尾"></a>末尾</h2>]]></content>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>15.3-node笔记</title>
    <url>/1-(0~50)/15.3-node%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="1-多层继承模板"><a href="#1-多层继承模板" class="headerlink" title="1. 多层继承模板"></a>1. 多层继承模板</h2><a id="more"></a>

<p>2.6 美化错误信息页面（可选）</p>
<ul>
<li>1.在<code>admin/common/</code> 创建 error.art</li>
<li>2.视频里面是单独的页面，而我，想再login.art的基础上；</li>
</ul>
<p>2.6.1 继承能套吗？</p>
<ul>
<li>1.我在login.art里面写了<code>&#123;&#123;block 'err'&#125;&#125;&#123;&#123;/block&#125;&#125;</code></li>
<li>2.然后在error.art那边写：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;&#123;extend <span class="string">&#x27;./login.art&#x27;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;block <span class="string">&#x27;err&#x27;</span>&#125;&#125;</span><br><span class="line">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;bg-danger error&quot;</span>&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>3.没有效果；</li>
</ul>
<p>2.6.2 中间，还尝试了很多办法，包含，或者直接在login.art写html;</p>
<ul>
<li>1.都不行；</li>
</ul>
<p>2.6.3 后来，我突发奇想：事先在layout，里留下err坑；</p>
<ul>
<li>1.一级继承，login.art不填这个坑</li>
<li>2.二级继承，error.art可以填这个坑吗？</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// layout.art</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &#123;&#123;block <span class="string">&#x27;main&#x27;</span>&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br><span class="line">    &#123;&#123;block <span class="string">&#x27;err&#x27;</span>&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// error.art</span></span><br><span class="line">&#123;&#123;extend <span class="string">&#x27;./login.art&#x27;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;block <span class="string">&#x27;err&#x27;</span>&#125;&#125;</span><br><span class="line">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;bg-danger error&quot;</span>&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>3.有效果；</li>
</ul>
<p>2.6.4 写入node笔记；</p>
<p>2.7 我如何能写进main的div的后面？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// layout.art</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &#123;&#123;block <span class="string">&#x27;main&#x27;</span>&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br><span class="line">    &#123;&#123;block <span class="string">&#x27;err&#x27;</span>&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>写成：可以吗？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// layout.art</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &#123;&#123;block <span class="string">&#x27;main&#x27;</span>&#125;&#125;</span><br><span class="line">    &#123;&#123;block <span class="string">&#x27;err&#x27;</span>&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br><span class="line">    &#123;&#123;/block&#125;&#125; </span><br></pre></td></tr></table></figure>



<ul>
<li>1.实验；</li>
<li>没有效果</li>
</ul>
<h3 id="2-坑就算不填，写了能二级继承"><a href="#2-坑就算不填，写了能二级继承" class="headerlink" title="2. 坑就算不填，写了能二级继承"></a>2. 坑就算不填，写了能二级继承</h3><p>2.8 如果一级继承没有写上不填坑的X坑，那么二级继承不会X坑；</p>
<p>2.9 反之就会有；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// layout.art</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &#123;&#123;block <span class="string">&#x27;main&#x27;</span>&#125;&#125;</span><br><span class="line">    &#123;&#123;block <span class="string">&#x27;err&#x27;</span>&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br><span class="line">    &#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>login.art</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- <span class="number">1.</span>继承骨架模块 --&gt;</span><br><span class="line">&#123;&#123;extend <span class="string">&#x27;./common/layout.art&#x27;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">2.</span>这里是主体部分，填坑 --&gt;</span><br><span class="line">&#123;&#123;block <span class="string">&#x27;main&#x27;</span>&#125;&#125;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;login-body&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;login-container&quot;</span>&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &#123;&#123;block <span class="string">&#x27;err&#x27;</span>&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>error.art</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;&#123;extend <span class="string">&#x27;./login.art&#x27;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;block <span class="string">&#x27;err&#x27;</span>&#125;&#125;</span><br><span class="line">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;bg-danger error&quot;</span>&gt;asdas &#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure>



<p>3.如果在被继承文件里面，不是那样的格式；</p>
<ul>
<li>1.即使是这样</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &#123;&#123;block <span class="string">&#x27;main&#x27;</span>&#125;&#125;</span><br><span class="line">    &#123;&#123;/block&#125;&#125;</span><br><span class="line">    &#123;&#123;block <span class="string">&#x27;err&#x27;</span>&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>2.不是这样</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &#123;&#123;block <span class="string">&#x27;main&#x27;</span>&#125;&#125;</span><br><span class="line">    &#123;&#123;block <span class="string">&#x27;err&#x27;</span>&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br><span class="line">    &#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure>



<p>3.1 效果也一样；</p>
<ul>
<li>1.是不是可以假设！</li>
<li>2.坑在继承中，可以随意调整位置；</li>
<li>3.每一个坑，都是单独了一个东西，与包它，和，被它包的坑，没关系；</li>
</ul>
<p>3.2 但是留坑，必须是原始被继承文件配置，中间的继承文件无法留坑；</p>
<h3 id="3-如果一级换坑位"><a href="#3-如果一级换坑位" class="headerlink" title="3. 如果一级换坑位"></a>3. 如果一级换坑位</h3><p>1.那么二级会出现两个坑；</p>
<p>2.然而并不是，只是浏览器，或者是本地服务器没有刷新过来；</p>
<p>3.一个坑都没有了；</p>
<p>4.如果保留，原始坑位，复制坑位；效果是怎样？</p>
<ul>
<li>1.原始坑位</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;&#123;block <span class="string">&#x27;main&#x27;</span>&#125;&#125;</span><br><span class="line">&#123;&#123;/block&#125;&#125;</span><br><span class="line">&#123;&#123;block <span class="string">&#x27;err&#x27;</span>&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>2.login.art继承</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.继承骨架模块 --&gt;</span></span><br><span class="line">&#123;&#123;extend &#x27;./common/layout.art&#x27;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.这里是主体部分，填坑 --&gt;</span></span><br><span class="line">&#123;&#123;block &#x27;main&#x27;&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login-body&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 复制的坑位 --&gt;</span></span><br><span class="line">        &#123;&#123;block &#x27;err&#x27;&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;&#123;/block&#125;&#125;</span><br><span class="line">&#123;&#123;block &#x27;err&#x27;&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>3.看有没有效果</li>
</ul>
<p>4.1 没有效果；</p>
<h3 id="4-报错；"><a href="#4-报错；" class="headerlink" title="4. 报错；"></a>4. 报错；</h3><p>多重继承好像要报错；</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">// admin.js:45</span><br><span class="line">let a2 = res.status(401).render(&#x27;admin/error&#x27;, &#123; msg: &#x27;邮件地址或密码错误&#x27; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">Error </span>[ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the </span><br><span class="line"></span><br><span class="line">at F:\2<span class="string">-3</span>ciyuan\11-data base-shujuk\3-lianxi\8-blog\route\admin.js:45:30</span><br></pre></td></tr></table></figure>





<h2 id="2-问题"><a href="#2-问题" class="headerlink" title="2. 问题"></a>2. 问题</h2><h3 id="2-1-自己调用变量"><a href="#2-1-自己调用变量" class="headerlink" title="2.1 自己调用变量"></a>2.1 自己调用变量</h3><p>3.2 通过异步函数的方式，获取到异步API查询方法findOne的返回值；</p>
<ul>
<li>1.用变量接收；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 实现登录功能</span></span><br><span class="line">admin.post(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 接收请求参数</span></span><br><span class="line">    <span class="keyword">const</span> &#123; email, password &#125; = req.body;</span><br><span class="line">    <span class="comment">// 2.5</span></span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">&#x27;如果不是警告，而是页面内容，则你的JS没被使用&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> a = res.status(<span class="number">400</span>).send(<span class="string">&#x27;&lt;h4&gt;邮件地址或密码错误&lt;/h4&gt;&#x27;</span> + x);</span><br><span class="line">    <span class="keyword">if</span> (email.trim().length == <span class="number">0</span> || password.trim().length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.1 根据邮箱地址查询用户信息</span></span><br><span class="line">    <span class="keyword">let</span> user = <span class="keyword">await</span> User.findOne(&#123; email &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>3.3 如果邮箱存在，user变量类型是对象类型，不存在，为空；</p>
<ul>
<li>1.根据返回值的类型判断</li>
</ul>
<p>4.报错：一直报错；</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">UnhandledPromiseRejectionWarning: <span class="builtin-name">Error</span> [ERR_HTTP_HEADERS_SENT]: Cannot <span class="builtin-name">set</span> headers after they are sent <span class="keyword">to</span> the client</span><br></pre></td></tr></table></figure>

<p>将头发送到客户端后无法设置头</p>
<ul>
<li>1.我何时发了什么头？</li>
<li>2.结果，一旦有路由过来</li>
</ul>
<p><code>let a = res.status(400).send(&#39;&lt;h4&gt;邮件地址或密码错误&lt;/h4&gt;&#39; + x);</code></p>
<p>就自动触发，不需要使用就触发了；占用了响应头；</p>
<p>4.1 百度无果，</p>
<h4 id="1-结论："><a href="#1-结论：" class="headerlink" title="1.结论："></a>1.结论：</h4><p>1.原因：无；</p>
<p>2.结果：</p>
<ul>
<li>1.就是要调用；</li>
</ul>
<p>2.1 例如app.js里面的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> home = <span class="built_in">require</span>(<span class="string">&quot;./route/home&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> admin = <span class="built_in">require</span>(<span class="string">&#x27;./route/admin&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>2.2 虽然home接收了，但右边的，自己也用了；</p>
<ul>
<li>1.相当于：函数名();</li>
<li>2.相当于，函数下面，接了一个 函数名();</li>
<li>3.运行了这个方法；</li>
</ul>
<p>2.3 平常，我们感受不到，因为，有些函数，他的返回结果，既不面向前端，也不面向后端。</p>
<ul>
<li><p>1.就是一个数据，一个运算。</p>
</li>
<li><p>2.但这些：<code>res.status(400).send(&#39;&lt;h4&gt;邮件地址或密码错误&lt;/h4&gt;&#39; + x);</code></p>
</li>
<li><p>3.是响应给服务器的，有没有量接收，服务器都会反应；</p>
</li>
</ul>
<p>2021-5-1 17:07:27</p>
<h3 id="3-为什么if里就一个量"><a href="#3-为什么if里就一个量" class="headerlink" title="3. 为什么if里就一个量"></a>3. 为什么if里就一个量</h3><p>0.例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (user) &#123;</span><br><span class="line">        <span class="comment">// @ts-ignore</span></span><br><span class="line">        <span class="keyword">if</span> (is_valid)</span><br><span class="line">            req.session.username = user.username;</span><br><span class="line"></span><br><span class="line">            req.app.locals.userInfo = user;</span><br><span class="line">            <span class="comment">// 9.重定向到用户列表页面</span></span><br><span class="line">            res.redirect(<span class="string">&#x27;/admin/user&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;密码错误&#x27;</span>);</span><br><span class="line">            res.send(<span class="string">&#x27;密码错误&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;没有这账号&#x27;</span>);</span><br><span class="line">        res.send(<span class="string">&#x27;没有这账号&#x27;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>1.这是C语言的，应该差不多</p>
<blockquote>
<p>C语言里面使用0代表逻辑假，非0代表逻辑真。</p>
<p>if(n)这种写法和if(n!=0)是完全等价的。</p>
<p>因为n=0时，n本身为0就是逻辑假<br>n!=0时，n本身非0就是逻辑真</p>
<p>if(n)只有当n!=0的时候，里面的条件才是逻辑真，才会走到if分支里面。那不就是和n!=0完全等价了？一种省略的写法而已。</p>
</blockquote>
<hr>
<h2 id="3-路径"><a href="#3-路径" class="headerlink" title="3. 路径"></a>3. 路径</h2><p>1.后端很多路径；</p>
<ul>
<li>2.这个重定向，是与localhost+端口；拼接的；</li>
<li>3.模板那些，有模板设置的路径；</li>
<li>4.路由那些，也是localhost+端口；二级路由会相对于一级路由的路径；</li>
<li>5.静态资源那些，也有设置静态资源根目录；</li>
</ul>
<h3 id="2-render"><a href="#2-render" class="headerlink" title="2.render"></a>2.render</h3><p>2.res.render放到的路径呢？</p>
<ul>
<li><p>2.自动拼接，模板路径，模板后缀，模板文件使用哪个模板引擎；这些不都是自己先set了吗？</p>
</li>
<li><p>3.然后把拼接好的结果响应给客户端</p>
</li>
<li><p>4.还有第二个参数，就是向模板中传入的数据；</p>
</li>
</ul>
<p>3.<code>app.engine(&#39;art&#39;, require(&#39;express-art-template&#39;));</code></p>
<ul>
<li>1.告诉express框架，你使用的模板引擎是什么；什么时候使用（第一个参数）</li>
<li>engine：引擎；</li>
</ul>
<p>3.1 告诉模板文件的地方：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 设置模板存放目录</span></span><br><span class="line">app.set(<span class="string">&#x27;views&#x27;</span>, path.join(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>app.set很有多效果；是用来配置express的</li>
<li>1.第一个参数，是配置什么，配置模板的关键字 就是 views；</li>
<li>2.第二个参数，是模板的位置信息；推荐写绝对路径；</li>
<li></li>
</ul>
<p>3.2 设置模板后缀</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 渲染模板时不写后缀 默认拼接art后缀</span></span><br><span class="line">app.set(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;art&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>1.express可以同时使用多个模板引擎；</li>
<li>2.配置模板后缀的关键字：view engine</li>
<li>3.当写了这个关键字后，第二个参数，就是后缀名了；</li>
</ul>
<h3 id="3-2-表单路径"><a href="#3-2-表单路径" class="headerlink" title="3.2 表单路径"></a>3.2 表单路径</h3><p>1.表单里面的 相对路径，跟url的host后面拼接；</p>
<p><img src="../../img/15/56.png" alt="26"></p>
<h2 id="4-req-body"><a href="#4-req-body" class="headerlink" title="4. req.body"></a>4. req.body</h2><p>1.是啥来着？</p>
<p>1.1  <code>app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</code></p>
<ul>
<li>1.抢先在所有请求前，先用bodyParser下的urlencoded方法处理；</li>
<li>2.该方法会检测当前请求中是否有请求参数，如果有，会接收请求参数，处理成对象类型；</li>
<li>3.然后再为req对象，添加一个属性，属性的名字是body，并把请求参数的值，赋值了req.body</li>
<li>4.最后在方法内部，调用了next()方法，将请求控制权，交给了下一个中间件</li>
<li>5.所以，在接下来的路由中，我们可以通过req.body拿到这个对象类型的请求参数。</li>
</ul>
<p>1.2 出至：15.1-6.3.3 post参数获取</p>
<h2 id="5-res-render"><a href="#5-res-render" class="headerlink" title="5. res.render"></a>5. res.render</h2><p>1.渲染一个<code>view</code>带有响应的回调，该回调以渲染的字符串作为响应。当发生错误时，<code>next(err)</code> 在内部调用。提供回调时，可能的错误和呈现的字符串都将传递，并且不会执行自动响应。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.render(<span class="string">&#x27;index&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, html</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">res.render(<span class="string">&#x27;user&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;Tobi&#x27;</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, html</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>1.1 <code>res.render(view, [locals], callback)</code></p>
<p>2.</p>
<ul>
<li>1.为了使用res.render[^16]</li>
<li>2.是res，是响应下的方法；</li>
<li>3.在方法内部，做了很多事情；<ul>
<li>1.里面写模板名称。</li>
<li>2.自动拼接，模板路径，模板后缀，模板文件使用哪个模板引擎；这些不都是自己先set了吗？</li>
<li>3.然后把拼接好的结果响应给客户端</li>
</ul>
</li>
<li>4.还有第二个参数，就是向模板中传入的数据；</li>
</ul>
<blockquote>
<p>15.1-6.3-7</p>
</blockquote>
<h3 id="5-1-官方"><a href="#5-1-官方" class="headerlink" title="5.1 官方"></a>5.1 官方</h3><p>1.<a href="http://expressjs.com/en/api.html#res.render">http://expressjs.com/en/api.html#res.render</a></p>
<p>2.呈现a<code>view</code>并将呈现的HTML字符串发送到客户端。可选参数：</p>
<ul>
<li><code>locals</code>，一个对象，其属性定义视图的局部变量。</li>
<li><code>callback</code>，一个回调函数。如果提供了该方法，则该方法将同时返回可能的错误和呈现的字符串，但不会执行自动响应。发生错误时，该方法在<code>next(err)</code>内部调用。</li>
</ul>
<p>该<code>view</code>参数是一个字符串，它是视图文件来渲染的文件路径。这可以是绝对路径，也可以是相对于<code>views</code>设置的路径。如果路径不包含文件扩展名，则该<code>view engine</code>设置确定文件扩展名。如果路径中确实包含文件扩展名，则Express将（通过<code>require()</code>）为指定的模板引擎加载模块，并使用加载的模块的<code>__express</code>功能对其进行呈现。</p>
<p>有关更多信息，请参阅<a href="http://expressjs.com/guide/using-template-engines.html">将模板引擎与Express结合使用</a>。</p>
<p><strong>注意：</strong>该<code>view</code>参数执行文件系统操作，例如从磁盘读取文件并评估Node.js模块，因此出于安全原因，不应包含最终用户的输入。</p>
<p>局部变量<code>cache</code>启用视图缓存。将其设置为<code>true</code>，以在开发过程中缓存视图；默认情况下，生产中启用了视图缓存。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// send the rendered view to the client</span></span><br><span class="line">res.render(<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// if a callback is specified, the rendered HTML string has to be sent explicitly</span></span><br><span class="line">res.render(<span class="string">&#x27;index&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, html</span>) </span>&#123;</span><br><span class="line">  res.send(html)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// pass a local variable to the view</span></span><br><span class="line">res.render(<span class="string">&#x27;user&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;Tobi&#x27;</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, html</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





<h2 id="6-模板与模板引擎"><a href="#6-模板与模板引擎" class="headerlink" title="6. 模板与模板引擎"></a>6. 模板与模板引擎</h2><p><code>$&#123;&#125;</code>与<code>&#123;&#123;&#125;&#125;`

1. `$&#123;&#125;`是模板的语法，那`&#123;&#123;&#125;&#125;</code>呢</p>
<ul>
<li>1.<code>$&#123;&#125;</code>是ES6模板字符串的语法，<code>&#123;&#123;好像是模板引擎的&#125;&#125;</code></li>
</ul>
<p>2021-5-2 10:52:50</p>
<!--more-->

<p>2.但具体下一步，搜索：模板字符串 里的 美元符号 是什么意思；</p>
<ul>
<li>1.百度不到；</li>
</ul>
<h2 id="7-res-send"><a href="#7-res-send" class="headerlink" title="7. res.send"></a>7. res.send</h2><ol>
<li><code>res.send（[body]）</code></li>
</ol>
<p>发送HTTP响应。</p>
<p>所述<code>body</code>参数可以是一个<code>Buffer</code>对象，一个<code>String</code>，对象，<code>Boolean</code>或<code>Array</code>。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.send(Buffer.from(<span class="string">&#x27;whoop&#x27;</span>))</span><br><span class="line">res.send(&#123; <span class="attr">some</span>: <span class="string">&#x27;json&#x27;</span> &#125;)</span><br><span class="line">res.send(<span class="string">&#x27;&lt;p&gt;some html&lt;/p&gt;&#x27;</span>)</span><br><span class="line">res.status(<span class="number">404</span>).send(<span class="string">&#x27;Sorry, we cannot find that!&#x27;</span>)</span><br><span class="line">res.status(<span class="number">500</span>).send(&#123; <span class="attr">error</span>: <span class="string">&#x27;something blew up&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure>

<p>此方法对简单的非流式响应执行许多有用的任务：例如，它自动分配<code>Content-Length</code>HTTP响应标头字段（除非先前定义），并提供自动的HEAD和HTTP缓存新鲜度支持。</p>
<p>当参数为<code>Buffer</code>对象时，该方法将<code>Content-Type</code> 响应头字段设置为“ application / octet-stream”，除非事先定义如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.set(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)</span><br><span class="line">res.send(Buffer.from(<span class="string">&#x27;&lt;p&gt;some html&lt;/p&gt;&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>当参数为a时<code>String</code>，该方法将设置<code>Content-Type</code>为“ text / html”：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.send(<span class="string">&#x27;&lt;p&gt;some html&lt;/p&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>当参数为<code>Array</code>或时<code>Object</code>，Express将以JSON表示形式进行响应：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.send(&#123; <span class="attr">user</span>: <span class="string">&#x27;tobi&#x27;</span> &#125;)</span><br><span class="line">res.send([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure>



<h3 id="2-中断"><a href="#2-中断" class="headerlink" title="2. 中断"></a>2. 中断</h3><p>没有中断效果，会继续执行下面的代码；只是显示效果拦截</p>
<h2 id="8-论文重温"><a href="#8-论文重温" class="headerlink" title="8. 论文重温"></a>8. 论文重温</h2><p>1.在写论文的过程中，有对代码有一些问题；2021-5-3 22:29:44</p>
<p>2.在写这个笔记之前，就已经做了很多了，都没笔记，虽然都自己会做；</p>
<ul>
<li>1.但还是写几笔思路比较好，因为我现在，都记不起刚才遇到的什么问题了；2021-5-3 22:30:37</li>
</ul>
<p>3.</p>
]]></content>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>16-Python-collect</title>
    <url>/1-(0~50)/16-Python-collect_%E6%94%B6%E8%97%8F/</url>
    <content><![CDATA[<h2 id="1-10-行-Python-代码自动清理电脑重复文件"><a href="#1-10-行-Python-代码自动清理电脑重复文件" class="headerlink" title="1.  10 行 Python 代码自动清理电脑重复文件"></a>1.  10 行 Python 代码自动清理电脑重复文件</h2><p><a href="https://mp.weixin.qq.com/s/CBinFZO8iSUIdjy71bIhCw">https://mp.weixin.qq.com/s/CBinFZO8iSUIdjy71bIhCw</a></p>
<a id="more"></a>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>17-DNS</title>
    <url>/1-(0~50)/17-DNS/</url>
    <content><![CDATA[<h2 id="1-DNS-1-1-1-1"><a href="#1-DNS-1-1-1-1" class="headerlink" title="1. DNS - 1.1.1.1"></a>1. DNS - 1.1.1.1</h2><p>1.<a href="https://1.1.1.1/dns/">https://1.1.1.1/dns/</a></p>
<p>DNS：Internet目录</p>
<a id="more"></a>

<p>Internet上几乎所有内容都以DNS请求开头。DNS是Internet的目录。单击链接，打开一个应用程序，发送电子邮件，然后您的设备首先询问目录：<strong>在哪里可以找到它？</strong></p>
<p>不幸的是，默认情况下，DNS通常缓慢且不安全。您的ISP和任何其他在Internet上侦听的人都可以看到您访问的每个站点以及您使用的每个应用程序，即使它们的内容是加密的。令人毛骨悚然的是，一些DNS提供商会出售有关您的Internet活动的数据，或将其用于广告定位。</p>
<p>我们认为这很严重。如果您也这样做，现在可以选择：<strong>1.1.1.1</strong></p>
<h3 id="1-2-配置"><a href="#1-2-配置" class="headerlink" title="1.2 配置"></a>1.2 配置</h3><p>1.在电脑上安装</p>
<p>设置<strong>1.1.1.1</strong>需要两分钟，并且不需要任何技术技能或特殊软件。即使您是计算机的新手，也请在下面选择您的设备，以获取易于遵循的设置指南。</p>
<p>苹果手机安卓系统苹果系统视窗的Linux路由器</p>
<ol>
<li>单击开始菜单，然后单击<strong>控制面板</strong>。</li>
<li>单击<strong>网络和Internet</strong>。</li>
<li>单击<strong>更改适配器设置</strong>。</li>
<li>右键点击您所连接的Wi-Fi网络，然后点击<strong>属性</strong>。</li>
<li>选择“ <strong>Internet协议版本4”</strong>（如果需要，则选择<strong>“版本</strong> 6”）。</li>
<li>单击<strong>属性</strong>。</li>
<li>记下任何现有的DNS服务器条目，以备将来参考。</li>
<li>单击“ <strong>使用以下DNS服务器地址”</strong>。</li>
<li>将这些地址替换为1.1.1.1 DNS地址：<ul>
<li>对于IPv4：<strong>1.1.1.1</strong>和<strong>1.0.0.1</strong></li>
<li>对于IPv6：<strong>2606：4700：4700 :: 1111</strong>和<strong>2606：4700：4700 :: 1001</strong></li>
</ul>
</li>
<li>单击<strong>确定</strong>，然后单击<strong>关闭</strong>。</li>
<li>重新启动浏览器。</li>
<li>你们都准备好了！您的设备现在具有更快，更多的私有DNS服务器✌️✌️</li>
</ol>
<hr>
<h2 id="2-公共DNS网址"><a href="#2-公共DNS网址" class="headerlink" title="2. 公共DNS网址"></a>2. 公共DNS网址</h2><p>1.<a href="https://dns.iui.im/">https://dns.iui.im</a></p>
<hr>
<h2 id="3-Dns-Jumper"><a href="#3-Dns-Jumper" class="headerlink" title="3. Dns Jumper"></a>3. Dns Jumper</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>Dns Jumper是一款一款快速切换DNS的工具。现爱绿软为大家带来的DNS切换工具 Dns Jumper 绿色便携优化版已经更新到<strong>v2.2</strong></p>
<p>Dns Jumper可以一键帮您更换你本地Windows系统的默认DNS服务器。在某些情况下，您可以使用第三方公共DNS可以提高浏览速度和安全性。@爱绿软</p>
<h3 id="3-2-应用说明"><a href="#3-2-应用说明" class="headerlink" title="3.2 应用说明"></a>3.2 应用说明</h3><p>DNS切换工具 Dns Jumper</p>
<p>1.它可以帮助访问被阻止的网站<br>2.通过更改为更安全的DNS服务器可以提高安全性<br>3.通过选择一个不适当的网站（例如成人材料），可以帮助保护孩子的安全家庭安全DNS服务器。<br>4.可以通过移动到更快的DNS服务器来加快浏览速度<br>5.可以手动更改DNS服务器，但是DNS Jumper大大简化了该过程</p>
<h3 id="3-3-下载"><a href="#3-3-下载" class="headerlink" title="3.3 下载"></a>3.3 下载</h3><p>1.下载地址：<a href="http://dl.greensofts.xyz/dir/884953-38370394-b9d822">http://dl.greensofts.xyz/dir/884953-38370394-b9d822</a></p>
<p>2.信息来源网址：<a href="https://ilvruan.com/28063.html">https://ilvruan.com/28063.html</a></p>
<ul>
<li>网址来源：灵逗士QQ聊天，语句序号1330左右</li>
</ul>
<hr>
]]></content>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>18-Typora</title>
    <url>/1-(0~50)/18-typora/</url>
    <content><![CDATA[<h2 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h2><h3 id="1-0-来源"><a href="#1-0-来源" class="headerlink" title="1.0 来源"></a>1.0 来源</h3><p><a href="https://www.jianshu.com/p/2f40341df631">https://www.jianshu.com/p/2f40341df631</a></p>
<hr>
<a id="more"></a>

<h3 id="1-1-符号输入"><a href="#1-1-符号输入" class="headerlink" title="1.1 符号输入"></a>1.1 符号输入</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="tag">\<span class="name">\</span></span>   反斜线</span><br><span class="line"><span class="tag">\<span class="name">`</span></span>   反引号</span><br><span class="line"><span class="tag">\<span class="name">*</span></span>   星号</span><br><span class="line"><span class="tag">\<span class="name">_</span></span>   底线</span><br><span class="line"><span class="tag">\<span class="name">&#123;</span></span> <span class="tag">\<span class="name">&#125;</span></span>  花括号</span><br><span class="line"><span class="tag">\<span class="name">[</span></span> <span class="tag">\<span class="name">]</span></span>  方括号</span><br><span class="line"><span class="tag">\<span class="name">(</span></span> <span class="tag">\<span class="name">)</span></span>  括弧</span><br><span class="line"><span class="tag">\<span class="name">#</span></span>   井字号</span><br><span class="line"><span class="tag">\<span class="name">+</span></span>   加号</span><br><span class="line"><span class="tag">\<span class="name">-</span></span>   减号</span><br><span class="line"><span class="tag">\<span class="name">.</span></span>   英文句点</span><br><span class="line"><span class="tag">\<span class="name">!</span></span>   惊叹号</span><br><span class="line"><span class="tag">\<span class="name">&gt;</span>= </span>//单独一行写&gt;=,写不出，会变成引用</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p>\   反斜线<br>`   反引号<br>*   星号<br>_   底线<br>{ }  花括号<br>[ ]  方括号<br>( )  括弧<br>#   井字号<br>+   加号<br>-   减号<br>.   英文句点<br>!   惊叹号</p>
<p>&gt;= 大于等于</p>
<ul>
<li>很多不想使用快捷键，使用符号本身而变成快捷键的效果时，都可以用”\“，这应该是语法(代码逻辑了)了</li>
</ul>
<hr>
<h3 id="1-2-特殊字符"><a href="#1-2-特殊字符" class="headerlink" title="1.2 特殊字符"></a>1.2 特殊字符</h3><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta">&amp;copy;      版权      </span></span><br><span class="line"><span class="meta">&amp;reg;       注册商标</span></span><br><span class="line"><span class="meta">&amp;trade;     商标</span></span><br><span class="line"><span class="meta">&amp;nbsp;      空格</span></span><br><span class="line"><span class="meta">&amp;amp;       和号</span></span><br><span class="line"><span class="meta">&amp;quot;      引号</span></span><br><span class="line"><span class="meta">&amp;apos;      撇号</span></span><br><span class="line"><span class="meta">&amp;lt;        小于号</span></span><br><span class="line"><span class="meta">&amp;gt;        大于号</span></span><br><span class="line"><span class="meta">&amp;ne;        不等号</span></span><br><span class="line"><span class="meta">&amp;le;        小于等于</span></span><br><span class="line"><span class="meta">&amp;ge;        大于等于</span></span><br><span class="line"><span class="meta">&amp;cent;      分</span></span><br><span class="line"><span class="meta">&amp;pound;     磅</span></span><br><span class="line"><span class="meta">&amp;euro;      欧元</span></span><br><span class="line"><span class="meta">&amp;yen;       元</span></span><br><span class="line"><span class="meta">&amp;sect;      节</span></span><br><span class="line"><span class="meta">&amp;times;     乘号</span></span><br><span class="line"><span class="meta">&amp;divide;    除号</span></span><br><span class="line"><span class="meta">&amp;plusmn;    正负号</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p>&copy;      版权<br>&reg;       注册商标<br>&trade;     商标<br>&nbsp;      空格<br>&amp;       和号<br>&quot;      引号<br>&apos;      撇号<br>&lt;        小于号<br>&gt;        大于号<br>&ne;        不等号<br>&le;        小于等于<br>&ge;        大于等于<br>&cent;      分<br>&pound;     磅<br>&euro;      欧元<br>&yen;       元<br>&sect;      节<br>&times;     乘号<br>&divide;    除号<br>&plusmn;    正负号</p>
<hr>
<h3 id="1-3-快捷键"><a href="#1-3-快捷键" class="headerlink" title="1.3 快捷键"></a>1.3 快捷键</h3><h3 id="快捷键操作"><a href="#快捷键操作" class="headerlink" title="快捷键操作"></a>快捷键操作</h3><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="center">作用</th>
<th align="center">快捷键</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Ctrl + 1</td>
<td align="center">一级 标题</td>
<td align="center">Ctrl + B</td>
<td align="center">字体加粗</td>
</tr>
<tr>
<td align="center">Ctrl + 2</td>
<td align="center">二级标题</td>
<td align="center">Ctrl + I</td>
<td align="center">字体倾斜</td>
</tr>
<tr>
<td align="center">Ctrl + 3</td>
<td align="center">三级标题</td>
<td align="center">Ctrl + U</td>
<td align="center">下划线</td>
</tr>
<tr>
<td align="center">Ctrl + 4</td>
<td align="center">四级标题</td>
<td align="center">Ctrl + Home</td>
<td align="center">返回顶部</td>
</tr>
<tr>
<td align="center">Ctrl + 5</td>
<td align="center">五级标题</td>
<td align="center">Ctrl + End</td>
<td align="center">返回底部</td>
</tr>
<tr>
<td align="center">Ctrl + 6</td>
<td align="center">六级标题</td>
<td align="center">Ctrl + T</td>
<td align="center">创建表格</td>
</tr>
<tr>
<td align="center">Ctrl + L</td>
<td align="center">选中一行</td>
<td align="center">Ctrl + K</td>
<td align="center">创造超链接</td>
</tr>
<tr>
<td align="center">Ctrl + D</td>
<td align="center">选择一个单词</td>
<td align="center">Ctrl + F</td>
<td align="center">搜索</td>
</tr>
<tr>
<td align="center">Ctrl + E</td>
<td align="center">选中相同格式的文字</td>
<td align="center">Ctrl + H</td>
<td align="center">搜索并替换</td>
</tr>
<tr>
<td align="center">Alt + Shift + 5</td>
<td align="center">删除线</td>
<td align="center">Ctrl + Shift + I</td>
<td align="center">插入图片</td>
</tr>
</tbody></table>
<p>作者：buddyhs<br>链接：<a href="https://www.jianshu.com/p/2f40341df631">https://www.jianshu.com/p/2f40341df631</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<hr>
<h3 id="1-4-多行代码-代码"><a href="#1-4-多行代码-代码" class="headerlink" title="1.4 多行代码+代码"></a>1.4 多行代码+代码</h3><figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">​```(~~~) language</span><br><span class="line">​```              -&gt;普通文本</span><br><span class="line">​```c             -&gt;c语言</span><br><span class="line">​```python        -&gt;python </span><br><span class="line">​```c++           -&gt;c++</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-改变高亮颜色"><a href="#2-改变高亮颜色" class="headerlink" title="2. 改变高亮颜色"></a>2. 改变高亮颜色</h2><p>网上所说：</p>
<p><a href="https://blog.csdn.net/tl4832194/article/details/107921933">https://blog.csdn.net/tl4832194/article/details/107921933</a></p>
<p>1.位置：</p>
<p>C:\Users\Administrator\AppData\Roaming\Typora\themes</p>
<p>2.这是自己找到过一次了，最开始在这：</p>
<ul>
<li>在typora左上角文件里面</li>
<li>偏好设置</li>
<li>外观</li>
<li>打开主题文件夹；就是上面的路径；</li>
</ul>
<p>3.正文：</p>
<ul>
<li>mark是找不到的，自己添加</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">mark</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#DC143C</span>;  <span class="comment">/* #DC143C 代表红色 */</span></span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">0px</span> solid <span class="number">#ffffff</span>;  <span class="comment">/* 这里是字体颜色，也可以更改 */</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.0px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>不知道border-bottom干嘛，说是字体颜色，也没有变化；</p>
<p>难道要把 0px 改为 1px？</p>
<p>我没有多想，直接改为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">mark</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>);  <span class="comment">/* #DC143C 代表红色 */</span></span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#DC143C</span>;  <span class="comment">/* 这里是字体颜色，也可以更改 */</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>backgorund是背景色，如果不修改，默认是黄色</p>
<p>而且：修改为：#fafafa，居然有灰色；</p>
<p>就换成255，255，255（也是white）</p>
<p>没有灰色；</p>
</blockquote>
<p>依然有效；</p>
<br />

<hr>
<h2 id="3-改变背景颜色"><a href="#3-改变背景颜色" class="headerlink" title="3. 改变背景颜色"></a>3. 改变背景颜色</h2><p>1.去主题文件修改css</p>
<ul>
<li><p>主题文件路径：</p>
<p>C:\Users\Administrator\AppData\Roaming\Typora\themes</p>
</li>
<li><p>正确前往方向：</p>
<p><img src="http://bucket-c70.test.upcdn.net/18/1.png" alt="1"></p>
</li>
</ul>
<p>2.修改github.css</p>
<ul>
<li><p>我是直接在body添加代码</p>
<p><code>background-color: rgb(204, 232, 207)</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Open Sans&quot;</span>,<span class="string">&quot;Clear Sans&quot;</span>, <span class="string">&quot;Helvetica Neue&quot;</span>, Helvetica, Arial, sans-serif;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">51</span>, <span class="number">51</span>, <span class="number">51</span>);</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.6</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">204</span>, <span class="number">232</span>, <span class="number">207</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>body在第45行</p>
</li>
</ul>
<p>3.修改为：rgb(187, 205, 179)；以前那个有点亮</p>
<hr>
<h2 id="4-改变鼠标样式"><a href="#4-改变鼠标样式" class="headerlink" title="4. 改变鼠标样式"></a>4. 改变鼠标样式</h2><p>1.当修改了背景颜色后，比如修改为这种颜色；</p>
<p><img src="../../img/18/1.png" alt="1"></p>
<ul>
<li>当鼠标放在文本上时，光标成一个 I 的形状，且是浅灰色。根本看不到；</li>
<li>我没有找到修改光标颜色的法子。只好修改光标的样式；</li>
<li>2020-10-14 05:56:32</li>
</ul>
<p>2.当时是在第90行；</p>
<p><img src="../../img/18/2.png" alt="2"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">h1,</span><br><span class="line">h2,</span><br><span class="line">h3,</span><br><span class="line">h4,</span><br><span class="line">h5,</span><br><span class="line">h6 &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    margin-top: <span class="number">1</span>rem;</span><br><span class="line">    margin-bottom: <span class="number">1</span>rem;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    line-height: <span class="number">1.4</span>;</span><br><span class="line">    cursor: <span class="keyword">default</span>; <span class="comment">/*自己添加的，因为调整了背景颜色，看不到没有这句话的鼠标样式（文本样式），又不知道怎么设置文本样式的颜色*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br />

<hr>
]]></content>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>19-chrome</title>
    <url>/1-(0~50)/19-%E8%B0%B7%E6%AD%8C%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h2 id="1-扩展"><a href="#1-扩展" class="headerlink" title="1. 扩展"></a>1. 扩展</h2><h3 id="1-1-IDM"><a href="#1-1-IDM" class="headerlink" title="1.1 IDM"></a>1.1 IDM</h3><p>1.本地IDM.exe无法下载，没有权限</p>
<ul>
<li>IDM之前我一直用的本地；</li>
<li>后来脚本生成百度云盘的直连无法用IDM下载了；</li>
</ul>
<a id="more"></a>

<p>2.组队灵逗士给我说：</p>
<ul>
<li>用扩展插件下</li>
<li>不然IDM获取不了浏览器的cookie</li>
<li>度盘现在未登录就是无法下载的</li>
<li>你不用扩展插件拿到的链接，没有附带cookie，就不是登录状态啊</li>
</ul>
<p>3.然后扩展文件在本地目录下有</p>
<ul>
<li>IDM安装目录下应该有，crx格式的</li>
</ul>
<p>4.为什么不去chrome的扩展市场里面搜IDM扩展呢？</p>
<ul>
<li>因为<a href="https://www.internetdownloadmanager.com/register/new_faq/bi9.html">官方文档</a>说了在Google Store里找到的都是伪造的；</li>
<li>官网没在扩展市场里面部署IDM插件</li>
<li>即使你搜到了，也不是官方的；</li>
<li>官方的就是目录下的；</li>
<li>同时文档里面有使用扩展的一些==配置==</li>
</ul>
<hr>
<h3 id="1-2-解除B站区域限制"><a href="#1-2-解除B站区域限制" class="headerlink" title="1.2 解除B站区域限制"></a>1.2 解除B站区域限制</h3><p>链接：<a href="https://greasyfork.org/zh-CN/scripts/25718-解除b站区域限制">https://greasyfork.org/zh-CN/scripts/25718-解除b站区域限制</a></p>
<hr>
<h3 id="1-3-二维码"><a href="#1-3-二维码" class="headerlink" title="1.3 二维码"></a>1.3 二维码</h3><p>1.来源：<a href="https://c7sky.com/category/web-extension-qrcode.html">https://c7sky.com/category/web-extension-qrcode.html</a></p>
<ul>
<li>这个的来源是百度–知乎：<a href="https://www.zhihu.com/question/35553474">https://www.zhihu.com/question/35553474</a></li>
</ul>
<p>2.扩展下载：<a href="https://chrome.google.com/webstore/detail/hkojjajclkgeijhcmfjcjkddfjpaimek">https://chrome.google.com/webstore/detail/hkojjajclkgeijhcmfjcjkddfjpaimek</a></p>
<p>3.预览：</p>
<p><img src="../../img/19/1.png" alt="1"></p>
<p>如果你右键的是图片，还会有识别二维码的菜单项，如果识别结果是网址，可以选择直接打开网址。</p>
<p>双击弹出的二维码可以编辑二维码内容。</p>
<p>2020-10-22 18:20:46</p>
<hr>
]]></content>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>20-Pixiv</title>
    <url>/1-(0~50)/20-Pixiv/</url>
    <content><![CDATA[<h2 id="1-下载动图"><a href="#1-下载动图" class="headerlink" title="1. 下载动图"></a>1. 下载动图</h2><p>P站直接鼠标右键是无法下载动图的；</p>
<a id="more"></a>

<h3 id="1-1-Pixiv工具箱"><a href="#1-1-Pixiv工具箱" class="headerlink" title="1.1 Pixiv工具箱"></a>1.1 Pixiv工具箱</h3><p>0.下载</p>
<ul>
<li>这是谷歌浏览器扩展</li>
<li>也不是必须谷歌浏览器，基于chromium内核的都能用chrome扩展</li>
<li>即：极速浏览器</li>
</ul>
<p><img src="http://bucket-c70.test.upcdn.net/20/1.png" alt="1"></p>
<p>1.刚开始无效</p>
<ul>
<li><p>就是没效果，不知道哪里下载；</p>
</li>
<li><p>具体是没这个：</p>
<p><img src="http://bucket-c70.test.upcdn.net/20/2.png" alt="2"></p>
</li>
</ul>
<p>2.配置</p>
<ul>
<li><img src="http://bucket-c70.test.upcdn.net/20/3.png" alt="3" style="zoom:80%;" />
</li>
<li><p>如何可以配置？</p>
<p>左上角，鼠标右键，选项；</p>
</li>
<li><p><img src="http://bucket-c70.test.upcdn.net/20/5.png" alt="5"></p>
</li>
</ul>
<p>3.还是无效</p>
<ul>
<li>其实我当时，这些弄了，还是无效。配置里面感觉能打开的，都打开了；</li>
</ul>
<p>3.1 后来我关闭所有浏览器所有页面，再打开有效。</p>
<ul>
<li>我感觉是关闭浏览器所有页面的效果</li>
<li>新建页面和刷新都不行，实验过</li>
</ul>
<p>3.2 也许扩展设置的刷新，就是需要这样</p>
<hr>
<h3 id="1-2-PixivAnimatDownloader"><a href="#1-2-PixivAnimatDownloader" class="headerlink" title="1.2 PixivAnimatDownloader"></a>1.2 PixivAnimatDownloader</h3><p>1.这是一个小程序，小软件，exe。</p>
<ul>
<li>但也需要扩展插件协助；</li>
</ul>
<p>2.自己还没用</p>
<ul>
<li>我在上面成功使用了Pixiv工具箱过，就没用了</li>
</ul>
<p>3.百度，是百度不到最新版本的，可能在微博</p>
<ul>
<li>微博找也麻烦。</li>
<li>还好群友给了一份，我问他怎么找的，他说百度。</li>
<li>我叫他教教我怎么百度到了，就没回话了。又少一招</li>
</ul>
<p>4.软件下载</p>
<ul>
<li><a href="https://wws.lanzous.com/b01nlyb7i">https://wws.lanzous.com/b01nlyb7i</a><br>密码:36z8</li>
<li>是蓝奏云，能不百度云盘，就不百度云盘</li>
<li>里面有crx（扩展文件）</li>
</ul>
<p>5.时间：2020-9-6 11:52:44</p>
<hr>
]]></content>
      <tags>
        <tag>P站</tag>
      </tags>
  </entry>
  <entry>
    <title>21-window系统</title>
    <url>/1-(0~50)/21-windows/</url>
    <content><![CDATA[<h2 id="1-window10"><a href="#1-window10" class="headerlink" title="1. window10"></a>1. window10</h2><h3 id="1-1-两种方法，让最新版-Windows-10-的字体更「养眼」"><a href="#1-1-两种方法，让最新版-Windows-10-的字体更「养眼」" class="headerlink" title="1.1 两种方法，让最新版 Windows 10 的字体更「养眼」"></a>1.1 两种方法，让最新版 Windows 10 的字体更「养眼」</h3><p><a href="https://zhuanlan.zhihu.com/p/96114832">https://zhuanlan.zhihu.com/p/96114832</a></p>
<a id="more"></a>

<h3 id="1-2-什么样的机器-配置该装什么版本的系统？"><a href="#1-2-什么样的机器-配置该装什么版本的系统？" class="headerlink" title="1.2 什么样的机器/配置该装什么版本的系统？"></a>1.2 什么样的机器/配置该装什么版本的系统？</h3><p><a href="https://www.winos.me/archives/481.html">https://www.winos.me/archives/481.html</a></p>
<hr>
<h3 id="1-3-win10-字体渲染优化-色彩调整"><a href="#1-3-win10-字体渲染优化-色彩调整" class="headerlink" title="1.3 win10 字体渲染优化 色彩调整"></a>1.3 win10 字体渲染优化 色彩调整</h3><p> <a href="https://www.cnblogs.com/hongdada/p/8432667.html">链接：win10 字体渲染优化 色彩调整</a></p>
<hr>
<h3 id="1-4-emoji"><a href="#1-4-emoji" class="headerlink" title="1.4 emoji"></a>1.4 emoji</h3><p> 补全Windows10中的emoji 替换系统emoji字体</p>
<p><a href="https://blog.csdn.net/u014390186/article/details/103969682">https://blog.csdn.net/u014390186/article/details/103969682</a></p>
<p>1.也可以直接2.1，然后安全模式。</p>
<p>2.与win7的差别，仅是能不能直接拖入C:\Windows\fonts文件夹；2020-9-13 00:25:14</p>
<hr>
<h2 id="2-win7"><a href="#2-win7" class="headerlink" title="2. win7"></a>2. win7</h2><h3 id="2-1-添加字体Segoe-UI-Emoji"><a href="#2-1-添加字体Segoe-UI-Emoji" class="headerlink" title="2.1 添加字体Segoe UI Emoji"></a>2.1 添加字体Segoe UI Emoji</h3><p>0.组队给我说的  ；2020-9-12 22:49:45</p>
<p>1.<a href="http://getemoji.com/">http://getemoji.com/</a> ; 看看这网页，有显示不出来的么</p>
<p>2.Windows上，emoji符号也是依赖于字体的</p>
<ul>
<li>emoji表情本来就是一个一个的unicode码所定义的字符</li>
<li><img src="http://bucket-c70.test.upcdn.net/21/1.png" alt="1"></li>
<li>主要是这两个字体</li>
</ul>
<p>3.安装要放在：C:\Windows\fonts，之前都不知道这里有一个字体文件夹。</p>
<ul>
<li>这个文件夹内容是不会变的，你安装的字体会在另一个地方引用</li>
<li>进PE，手动覆盖文件</li>
<li>安全模式应该也行</li>
<li>系统是在离线模式下，覆盖文件就行</li>
</ul>
<p>4.字体资源：</p>
<ul>
<li><a href="https://wws.lanzous.com/iylDwgkghpe">Segoe UI Emoji - 版本 1.29</a></li>
<li><a href="https://wws.lanzous.com/ilxqrgkghqf">Segoe UI Symbol - Version 6.23</a></li>
</ul>
<p>5.不过，也可以试试。</p>
<ul>
<li><p>试试不用PE，安全模式安装，看有没有效果；2020-9-12 23:10:12</p>
</li>
<li><p>win7有效；2020-9-12 23:16:24</p>
<ul>
<li><p>不过我是拖进C:\Windows\fonts 安装的。不是在控制面板那边的字体安装的。</p>
</li>
<li><p>不知道拖进控制面板字体那边安装是否有效</p>
<p>不过这次拖进C:\Windows\fonts安装，控制面板那边也能看到；</p>
<p>至少C:\Windows\fonts这边的操作是影响那边的</p>
</li>
<li><p>组队说，这两把都是同一个地方，看来我误会了“另一个地方”</p>
<p><img src="http://bucket-c70.test.upcdn.net/21/2.png" alt="2"></p>
<p>最终是什么地方，不清楚；</p>
</li>
</ul>
</li>
</ul>
<p>6.</p>
<hr>
<h2 id="3-文件夹权限"><a href="#3-文件夹权限" class="headerlink" title="3. 文件夹权限"></a>3. 文件夹权限</h2><p>1.C盘下有一些文件夹说没有权限打开</p>
<p><img src="../img/21/1.png" alt="1"></p>
<p>2.鼠标右键的-管理员获取权限不够快</p>
<p>3.右键文件夹–属性–安全-编辑-添加-写入名字-检查-确定</p>
<p><img src="../img/21/2.png" alt="1"></p>
<br />

<hr>
]]></content>
      <tags>
        <tag>window</tag>
      </tags>
  </entry>
  <entry>
    <title>22-NAS</title>
    <url>/1-(0~50)/22-NAS/</url>
    <content><![CDATA[<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><p><a href="https://www.bilibili.com/read/cv1786828">https://www.bilibili.com/read/cv1786828</a></p>
<p>这个介绍，只是介绍有什么用，没说怎么用；2020-9-10 03:34:29</p>
<a id="more"></a>

<h2 id="2-组装"><a href="#2-组装" class="headerlink" title="2. 组装"></a>2. 组装</h2><p><a href="https://www.bilibili.com/read/cv2095823">https://www.bilibili.com/read/cv2095823</a></p>
]]></content>
      <tags>
        <tag>NAS</tag>
      </tags>
  </entry>
  <entry>
    <title>23-VMware-虚拟机</title>
    <url>/1-(0~50)/23-VMware_WorkStation/</url>
    <content><![CDATA[<h2 id="1-怎么删除虚拟机"><a href="#1-怎么删除虚拟机" class="headerlink" title="1. 怎么删除虚拟机"></a>1. 怎么删除虚拟机</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a><strong>方法一：</strong></h3><a id="more"></a>

<p>1、选中要删除的虚拟机操作系统，单击右键，选择 “管理” 选项。</p>
<p>2、然后在选择 “从磁盘中删除” 选项即可删除该虚拟机操作系统。</p>
<img src="../img/23/1.png" alt="1" style="zoom:80%;" />

<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a><strong>方法二：</strong></h3><p>1、选中要删除的虚拟机操作系统，选择 VMware 软件最上方的 “虚拟机”选项。</p>
<p>2、然后选择 “管理” 选项。</p>
<p>3、然后选择 “从磁盘中删除” 选项即可删除该虚拟机操作系统 。</p>
<h3 id="1-2-空间恢复"><a href="#1-2-空间恢复" class="headerlink" title="1.2 空间恢复"></a>1.2 空间恢复</h3><p>1.以前是分区给虚拟机使用的。</p>
<ul>
<li>现在不用了，弄回去；</li>
</ul>
<p>2.用软件：DiskGenius.exe；</p>
<ul>
<li>下载网址：<a href="https://www.diskgenius.cn">https://www.diskgenius.cn</a></li>
</ul>
<p>3.把不用的分区删除，变成空闲状态，在分配给x分区，我感觉比较好；</p>
<ul>
<li>删除分区后，要在右上角-磁盘-保存分区</li>
</ul>
<hr>
]]></content>
      <tags>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>24-vscode</title>
    <url>/1-(0~50)/24-VScode/</url>
    <content><![CDATA[<h2 id="1-插件"><a href="#1-插件" class="headerlink" title="1. 插件"></a>1. 插件</h2><h3 id="1-1-Bracket-Pair-Colorizer-2"><a href="#1-1-Bracket-Pair-Colorizer-2" class="headerlink" title="1.1 Bracket Pair Colorizer 2"></a>1.1 Bracket Pair Colorizer 2</h3><a id="more"></a>

<p><img src="../../img/24/1.png" alt="1"></p>
<p>1.是一个找括号的</p>
<ul>
<li>虽然vscode自带了，但不明显</li>
</ul>
<p>2.效果：</p>
<p>会有一条线，颜色根据主题，链接两个括号；</p>
<h3 id="1-2-Auto-Rename-Tag"><a href="#1-2-Auto-Rename-Tag" class="headerlink" title="1.2 Auto Rename Tag"></a>1.2 Auto Rename Tag</h3><p>1.自动改标签</p>
<p>2.标签一般有两个，你改前面一个的时候，后面自动改了</p>
<p><img src="../img/24/2.png" alt="2"></p>
<p>3.它具备 auto close tag的功能，不需要安装这个；2020-9-14 20:24:02</p>
<ul>
<li>如果是需要闭合的标签，会自动闭合；</li>
</ul>
<hr>
<h3 id="1-3-CSS-Peek"><a href="#1-3-CSS-Peek" class="headerlink" title="1.3 CSS Peek"></a>1.3 CSS Peek</h3><p>1.在html代码这边可以直接寻找css</p>
<ul>
<li>ctrl + 鼠标左键</li>
<li>原本放在上面就能看到css，如果只有单一的css</li>
</ul>
<p>2.</p>
<hr>
<h3 id="1-4-formate-CSS-LESS-SCSS-formatter"><a href="#1-4-formate-CSS-LESS-SCSS-formatter" class="headerlink" title="1.4 formate: CSS/LESS/SCSS formatter"></a>1.4 formate: CSS/LESS/SCSS formatter</h3><p>格式化css的；很工整；2021-3-12 15:22:42</p>
<p>预览：</p>
<img src="../../img/24/4.png" alt="1" style="zoom:80%;" />



<h2 id="2-自动格式化"><a href="#2-自动格式化" class="headerlink" title="2. 自动格式化"></a>2. 自动格式化</h2><p>1.如图所示：</p>
<p><img src="../../img/24/3.jpg" alt="1"></p>
]]></content>
      <tags>
        <tag>VScode</tag>
      </tags>
  </entry>
  <entry>
    <title>25-JavaScript</title>
    <url>/1-(0~50)/25-JavaScript_%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="1-计算机编程基础"><a href="#1-计算机编程基础" class="headerlink" title="1. 计算机编程基础"></a>1. 计算机编程基础</h2><h3 id="1-1-编程语言"><a href="#1-1-编程语言" class="headerlink" title="1.1 编程语言"></a>1.1 编程语言</h3><h4 id="1-1-1-编程"><a href="#1-1-1-编程" class="headerlink" title="1.1.1 编程"></a>1.1.1 编程</h4><p>1.==编程==：就是让计算机为解决某个问题而使用某种程序设计语言编写程序代码，并最终得到结果的过程。</p>
<a id="more"></a>

<p>2.==计算机程序==：就是计算机所执行的一系列的==指令集合==，而程序全部都是用我们所掌握的语言来编写的，所以人们要控制计算机一定要通过计算机语言向计算机发出命令。</p>
<p>3.从事编程的人员，就是==程序员==。  但是一般程序员都比较幽默，为了形容自己的辛苦工作，也成为“码农”， 或者  “程序猿”/ “程序媛”</p>
<p>4.注意：上面所定义的计算机指的是<strong>任何能够执行代码的设备</strong>，可能是智能手机、ATM机、黑莓PI、服务器等等。</p>
<hr>
<h4 id="1-1-2-计算机语言"><a href="#1-1-2-计算机语言" class="headerlink" title="1.1.2 计算机语言"></a>1.1.2 计算机语言</h4><p>1.==计算机语言==指用于==人与计算机之间通讯的语言==，它是人与计算机之间传递信息的==媒介==。</p>
<p>计算机语言的种类非常的多，总的来说可以分成机器语言，汇编语言和高级语言三大类。</p>
<p>实际上计算机最终所执行的都是 机器语言，它是由“0”和“1”组成的二进制数，二进制是计算机语言的基础。</p>
<ul>
<li>计算机只认识机器语言。</li>
</ul>
<blockquote>
<p>0=00000000 1=00000001 2=00000010 3=00000011 4=00000100<br>5=00000101 6=00000110 7=00000111 8=00001000 9=00001001<br>10=00001010</p>
</blockquote>
<hr>
<h4 id="1-1-3-编程语言"><a href="#1-1-3-编程语言" class="headerlink" title="1.1.3 编程语言"></a>1.1.3 编程语言</h4><p>可以通过类似于人类语言的 ”语言”来控制计算机，让计算机为我们做事情，这样的语言就叫做编程语言（Programming Language）。</p>
<p>编程语言是用来控制计算机的一系列指令，它有固定的格式和词汇（不同编程语言的格式和词汇不一样），必须遵守。</p>
<p>如今通用的编程语言有两种形式：汇编语言和高级语言。</p>
<ul>
<li><p>汇编语言和机器语言实质是相同的，都是直接对硬件操作，只不过指令采用了英文缩写的标识符，容易识别和记忆。</p>
</li>
<li><p>高级语言主要是相对于低级语言而言，它并不是特指某一种具体的语言，而是包括了很多编程语言，常用的有C语言、C++、Java、C#、Python、PHP、JavaScript、Go语言、Objective-C、Swift等。</p>
</li>
</ul>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">C语言：puts(<span class="string">&quot;你好&quot;</span>)<span class="comment">;</span></span><br><span class="line">PHP：echo <span class="string">&quot;你好&quot;</span><span class="comment">;</span></span><br><span class="line">Java：System.out.println(<span class="string">&quot;你好&quot;</span>)<span class="comment">;</span></span><br><span class="line">JavaScript： alert(<span class="string">&quot;你好&quot;</span>）<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<br />

<hr>
<h4 id="1-1-4-翻译器"><a href="#1-1-4-翻译器" class="headerlink" title="1.1.4 翻译器"></a>1.1.4 翻译器</h4><p>高级语言所编制的程序不能直接被计算机识别，必须经过转换才能被执行，为此，我们需要一个翻译器。</p>
<p>翻译器可以将我们所编写的源代码转换为机器语言，这也被称为二进制化。 记住1和 0。</p>
<p><img src="../../img/25/1.png" alt="1"></p>
<h4 id="1-1-5-编程语言与标记语言区别"><a href="#1-1-5-编程语言与标记语言区别" class="headerlink" title="1.1.5 编程语言与标记语言区别"></a>1.1.5 编程语言与标记语言区别</h4><p>1.编程语言有很强的逻辑和行为能力。在编程语言里, 你会看到很多 if else 、for 、while等具有逻辑性和行为能力的指令，这是主动的。</p>
<p>2.标记语言（html）不用于向计算机发出指令，常用于格式化和链接。标记语言的存在是用来被读取的, 他是被动的。</p>
<h5 id="1-1-6-总结"><a href="#1-1-6-总结" class="headerlink" title="1.1.6 总结"></a>1.1.6 总结</h5><p>1.计算机可以帮助人类解决某些问题<br>2.程序员利用编程语言编写程序发出指令控制计算机来实现这些任务<br>3.编程语言有机器语言、汇编语言、高级语言<br>4.高级语言需要一个翻译器转换为计算机识别的机器语言<br>5.编程语言是主动的有很强的逻辑性</p>
<hr>
<h3 id="1-2-计算机基础"><a href="#1-2-计算机基础" class="headerlink" title="1.2 计算机基础"></a>1.2 计算机基础</h3><h4 id="1-2-1-计算机组成"><a href="#1-2-1-计算机组成" class="headerlink" title="1.2.1 计算机组成"></a>1.2.1 计算机组成</h4><p><img src="../../img/25/2.png" alt="2"></p>
<br />

<hr>
<h4 id="1-2-2-数据存储"><a href="#1-2-2-数据存储" class="headerlink" title="1.2.2 数据存储"></a>1.2.2 数据存储</h4><p>1.计算机内部使用二进制 0 和 1来表示数据。</p>
<p>2.所有数据，包括文件、图片等最终都是以二进制数据（0 和 1）的形式存放在硬盘中的。</p>
<p>3.所有程序，包括操作系统，本质都是各种数据，也以二进制数据的形式存放在硬盘中。平时我们所说的安装软件，其实就是把程序文件复制到硬盘中。</p>
<p>4.硬盘、内存都是保存的二进制数据。</p>
<h4 id="1-2-3-存储单位"><a href="#1-2-3-存储单位" class="headerlink" title="1.2.3 存储单位"></a>1.2.3 存储单位</h4><p>bit &lt; byte &lt; kb &lt; GB &lt; TB&lt;…..</p>
<ul>
<li>位(bit)：   1bit 可以保存一个 0 或者 1 （最小的存储单位）</li>
<li>字节(Byte)：1B = 8b</li>
<li>千字节(KB)：1KB = 1024B</li>
<li>兆字节(MB)：1MB = 1024KB</li>
<li>吉字节(GB):  1GB = 1024MB</li>
<li>太字节(TB):  1TB = 1024GB</li>
<li>……</li>
</ul>
<h4 id="1-2-4-程序运行"><a href="#1-2-4-程序运行" class="headerlink" title="1.2.4 程序运行"></a>1.2.4 程序运行</h4><p><img src="../../img/25/3.png" alt="3"></p>
<p>1.打开某个程序时，先从硬盘中把程序的代码加载到内存中<br>2.CPU执行内存中的代码</p>
<p>==注意==：之所以要内存的一个重要原因，是因为 cpu 运行太快了，如果只从硬盘中读数据，会浪费cpu性能，所以，才使用存取速度更快的内存来保存运行时的数据。（内存是电，硬盘是机械）</p>
<hr>
<h2 id="2-初识JavaScript"><a href="#2-初识JavaScript" class="headerlink" title="2. 初识JavaScript"></a>2. 初识JavaScript</h2><p>1.目标：</p>
<p> 能够说出 JavaScript 是什么<br> 能够知道 JavaScript 的发展历史<br> 能够说出浏览器执行 JavaScript 的原理<br> 能够说出 JavaScript 由哪三部分组成<br> 能够写出 JavaScript 三个输入输出语句</p>
<hr>
<h3 id="2-1-初识js"><a href="#2-1-初识js" class="headerlink" title="2.1 初识js"></a>2.1 初识js</h3><h4 id="2-1-1-JavaScript-历史"><a href="#2-1-1-JavaScript-历史" class="headerlink" title="2.1.1 JavaScript 历史"></a>2.1.1 JavaScript 历史</h4><ul>
<li>布兰登·艾奇（Brendan Eich，1961年～）。</li>
<li>神奇的大哥用10天完成 JavaScript 设计。</li>
<li>最初命名为 LiveScript，后来在与 Sun 合作之后将其改名为 JavaScript。</li>
</ul>
<hr>
<h4 id="2-1-2-JavaScript-是什么"><a href="#2-1-2-JavaScript-是什么" class="headerlink" title="2.1.2 JavaScript 是什么"></a>2.1.2 JavaScript 是什么</h4><ul>
<li>JavaScript 是世界上最流行的语言之一，是一种运行在客户端的脚本语言 （Script 是脚本的意思）<ul>
<li>自己的电脑，客户端；远程接收请求的是服务器；</li>
</ul>
</li>
<li>脚本语言：不需要编译，运行过程中由 js 解释器( js 引擎）逐行来进行解释并执行</li>
<li>现在也可以基于 Node.js 技术进行服务器端编程<ul>
<li>既可以做前端，也可以做后端；</li>
</ul>
</li>
</ul>
<p><img src="../../img/25/4.png" alt="4"></p>
<hr>
<h4 id="2-1-3-JS的作用"><a href="#2-1-3-JS的作用" class="headerlink" title="2.1.3 JS的作用"></a>2.1.3 JS的作用</h4><ul>
<li>表单动态校验（密码强度检测）  （ JS 产生最初的目的 ）<ul>
<li>以前，输入不合格的数据，例如：要求数字结构，输入字母；</li>
<li>也要送往后台，后台验证后，把不合格打回</li>
<li>增加了后端的压力；</li>
</ul>
</li>
<li>网页特效</li>
<li>服务端开发(Node.js)</li>
<li>桌面程序(Electron)</li>
<li>App(Cordova) </li>
<li>控制硬件-物联网(Ruff)</li>
<li>游戏开发(cocos2d-js)</li>
</ul>
<hr>
<h4 id="2-1-4-HTML-CSS-JS-的关系"><a href="#2-1-4-HTML-CSS-JS-的关系" class="headerlink" title="2.1.4 HTML/CSS/JS 的关系"></a>2.1.4 HTML/CSS/JS 的关系</h4><p>1.HTML/CSS 标记语言–描述类语言</p>
<ul>
<li>HTML 决定网页结构和内容( 决定看到什么 )，相当于人的身体</li>
<li>CSS 决定网页呈现给用户的模样( 决定好不好看 )，相当于给人穿衣服、化妆</li>
</ul>
<p>2.JS 脚本语言–编程类语言 </p>
<ul>
<li>实现业务逻辑和页面控制( 决定功能 )，相当于人的各种动作 </li>
</ul>
<hr>
<h4 id="2-1-5-浏览器执行js简介"><a href="#2-1-5-浏览器执行js简介" class="headerlink" title="2.1.5 浏览器执行js简介"></a>2.1.5 浏览器执行js简介</h4><p>浏览器分成两部分：渲染引擎和 JS 引擎</p>
<ul>
<li>渲染引擎：用来解析HTML与CSS，俗称内核，比如 chrome 浏览器的 blink ，老版本的 webkit</li>
<li>JS 引擎：也称为 JS 解释器。 用来读取网页中的JavaScript代码，对其处理后运行，比如 chrome 浏览器的 V8</li>
</ul>
<p>浏览器本身并不会执行JS代码，而是通过内置 JavaScript 引擎(解释器) 来执行 JS 代码 。JS 引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行，</p>
<p>所以 JavaScript 语言归为脚本语言，会逐行解释执行。</p>
<p><img src="../../img/25/5.png" alt="5"></p>
<hr>
<h4 id="2-1-6-JS的组成"><a href="#2-1-6-JS的组成" class="headerlink" title="2.1.6 JS的组成"></a>2.1.6 JS的组成</h4><p><img src="../../img/25/6.png" alt="6"></p>
<p>1.JS基础，学习的是ECMAScript，js语法</p>
<p>2.JS-API，学习的是dom与bom；</p>
<hr>
<h5 id="1-ECMA"><a href="#1-ECMA" class="headerlink" title="1. ECMA"></a>1. ECMA</h5><p>1.什么是ECMA？</p>
<ul>
<li>ECMAScript 是由ECMA 国际（ 原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为 JavaScript 或 JScript，但实际上后两者是 ECMAScript 语言的实现和扩展。</li>
</ul>
<p><img src="../../img/25/7.png" alt="7"></p>
<ul>
<li>ECMAScript：ECMAScript 规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准。</li>
<li>更多参看MDN:  <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/JavaScript_technologies_overview">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/JavaScript_technologies_overview</a></li>
</ul>
<hr>
<h5 id="2-DOM"><a href="#2-DOM" class="headerlink" title="2. DOM"></a>2. DOM</h5><p>1.DOM ——文档对象模型</p>
<p>2.文档对象模型（Document Object Model，简称DOM），是==W3C==组织推荐的处理可扩展标记语言的==标准编程接口==。通过 DOM 提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）。</p>
<hr>
<h5 id="3-BOM"><a href="#3-BOM" class="headerlink" title="3. BOM"></a>3. BOM</h5><ul>
<li>BOM ——浏览器对象模型</li>
<li>BOM (Browser Object Model，简称BOM) 是指浏览器对象模型，它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。通过BOM可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等。<ul>
<li>例如，滑动右侧滚动条，到一定的地方（或者说滑到一定的高度）弹出一个窗口</li>
</ul>
</li>
</ul>
<hr>
<h4 id="2-1-7-JS初体验"><a href="#2-1-7-JS初体验" class="headerlink" title="2.1.7 JS初体验"></a>2.1.7 JS初体验</h4><p>JS 有3种书写位置，分别为行内、内嵌和外部。 </p>
<h5 id="1-行内式-JS"><a href="#1-行内式-JS" class="headerlink" title="1. 行内式 JS"></a>1. 行内式 JS</h5><p><code>&lt;input type=&quot;button&quot; value=&quot;点我试试&quot; onclick=&quot;alert(&#39;Hello World&#39;)&quot; /&gt;</code></p>
<ul>
<li>可以将单行或少量 JS 代码写在HTML标签的事件属性中（以 on 开头的属性），如：onclick</li>
<li>注意单双引号的使用：在HTML中我们推荐使用双引号, JS 中我们推荐使用单引号</li>
<li>可读性差， 在html中编写JS大量代码时，不方便阅读；</li>
<li>引号易错，引号多层嵌套匹配时，非常容易弄混；</li>
<li>特殊情况下使用</li>
</ul>
<h5 id="2-内嵌-JS"><a href="#2-内嵌-JS" class="headerlink" title="2. 内嵌 JS"></a>2. 内嵌 JS</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">   alert(<span class="string">&#x27;Hello  World~!&#x27;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以将多行JS代码写到 <code>&lt;script&gt;</code> 标签中</li>
<li>内嵌 JS 是学习时常用的方式</li>
</ul>
<h5 id="3-外部-JS文件"><a href="#3-外部-JS文件" class="headerlink" title="3. 外部 JS文件"></a>3. 外部 JS文件</h5><p><code>&lt;script src=&quot;my.js&quot;&gt;&lt;/script&gt;</code></p>
<ul>
<li>利于HTML页面代码结构化，把大段 JS代码独立到 HTML 页面之外，既美观，也方便文级别的复用</li>
<li>引用外部 JS文件的 script 标签中间不可以写代码<ul>
<li><code>&lt;script src=&quot;my.js&quot;&gt;1123&lt;/script&gt;</code>不能在这个地方写1123，当然其他的也不能写</li>
</ul>
</li>
<li>适合于JS 代码量比较大的情况</li>
</ul>
<hr>
<h3 id="2-2-JS注释"><a href="#2-2-JS注释" class="headerlink" title="2.2 JS注释"></a>2.2 JS注释</h3><h4 id="2-2-1-单行注释"><a href="#2-2-1-单行注释" class="headerlink" title="2.2.1 单行注释"></a>2.2.1 单行注释</h4><p>为了提高代码的可读性，JS与CSS一样，也提供了注释功能。JS中的注释主要有两种，分别是单行注释和多行注释。</p>
<p>单行注释的注释方式如下：</p>
<p><code>// 我是一行文字，不想被 JS引擎 执行，所以 注释起来</code></p>
<p>//  用来注释单行文字（  快捷键   ctrl  +  /   ）</p>
<hr>
<h4 id="2-2-2-多行注释"><a href="#2-2-2-多行注释" class="headerlink" title="2.2.2 多行注释"></a>2.2.2 多行注释</h4><p>多行注释的注释方式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  获取用户年龄和姓名</span></span><br><span class="line"><span class="comment">  并通过提示框显示出来</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>/* */  用来注释多行文字（ 默认快捷键  alt +  shift  + a ） </p>
<p>快捷键修改为：   ctrl + shift  +  /  </p>
<p>vscode → 首选项按钮  →  键盘快捷方式 →  查找 原来的快捷键  → 修改为新的快捷键 → 回车确认</p>
<hr>
<h3 id="2-3-JavaScript-输入输出语句"><a href="#2-3-JavaScript-输入输出语句" class="headerlink" title="2.3 JavaScript 输入输出语句"></a>2.3 JavaScript 输入输出语句</h3><p>为了方便信息的输入输出，JS中提供了一些输入输出语句，其常用的语句如下：</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>说明</strong></th>
<th><strong>归属</strong></th>
</tr>
</thead>
<tbody><tr>
<td>alert(msg)</td>
<td>浏览器弹出警示框</td>
<td>浏览器</td>
</tr>
<tr>
<td>console.log(msg)</td>
<td>浏览器控制台打印输出信息</td>
<td>浏览器</td>
</tr>
<tr>
<td>prompt(info)</td>
<td>浏览器弹出输入框，用户可以输入</td>
<td>浏览器</td>
</tr>
</tbody></table>
<p>注意：alert() 主要用来显示消息给用户，console.log() 用来给程序员自己看运行时的消息。</p>
<hr>
<h2 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. 变量</h2><p>目标：</p>
<p> 能够说出变量的主要作用<br> 能够写出变量的初始化<br> 能够说出变量的命名规范<br> 能够画出变量是如何在内存中存储的<br> 能够写出交换变量案例</p>
<hr>
<h3 id="3-1-变量的概述"><a href="#3-1-变量的概述" class="headerlink" title="3.1 变量的概述"></a>3.1 变量的概述</h3><h4 id="3-1-1-什么是变量"><a href="#3-1-1-什么是变量" class="headerlink" title="3.1.1 什么是变量"></a>3.1.1 什么是变量</h4><p>白话：变量就是一个装东西的盒子。<br>通俗：变量是用于存放数据的==容器==。 我们通过 ==变量名== 获取数据，甚至数据可以修改。</p>
<hr>
<h4 id="3-1-2-变量在内存中的存储"><a href="#3-1-2-变量在内存中的存储" class="headerlink" title="3.1.2 变量在内存中的存储"></a>3.1.2 变量在内存中的存储</h4><p>本质：变量是程序在<strong>内存</strong>中申请的一块用来存放数据的<strong>空间</strong>。</p>
<p>类似我们酒店的房间，一个房间就可以看做是一个变量。  </p>
<img src="../../img/25/8.png" alt="8" style="zoom:80%;" />

<ul>
<li>变量由：num2（变量名）+ 6（向内存申请的空间）组成的；</li>
</ul>
<hr>
<h3 id="3-2-变量的使用"><a href="#3-2-变量的使用" class="headerlink" title="3.2 变量的使用"></a>3.2 变量的使用</h3><p>变量在使用时分为两步： 1. 声明变量   2. 赋值 </p>
<h4 id="3-2-1-声明变量"><a href="#3-2-1-声明变量" class="headerlink" title="3.2.1 声明变量"></a>3.2.1 声明变量</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  声明变量  </span></span><br><span class="line"><span class="keyword">var</span> age; <span class="comment">//  声明一个 名称为age 的变量     </span></span><br></pre></td></tr></table></figure>

<ul>
<li>==var== 是一个 JS关键字，用来声明变量( <a href="https://fanyi.baidu.com/translate?aldtype=16047&query=ECMA&keyfrom=baidu&smartresult=dict&lang=auto2zh#en/zh/variable">variable</a> 变量的意思 )。使用该关键字声明变量后，计算机会自动为变量分配内存空间，不需要程序员管</li>
<li>age 是程序员定义的变量名，我们要通过变量名来访问内存中分配的空间</li>
</ul>
<h4 id="3-2-2-赋值"><a href="#3-2-2-赋值" class="headerlink" title="3.2.2 赋值"></a>3.2.2 赋值</h4><p><code>age = 10; // 给 age  这个变量赋值为 10</code></p>
<ul>
<li>= 用来把右边的值赋给左边的变量空间中，此处代表赋值的意思</li>
<li>变量值是程序员保存到变量空间里的值</li>
</ul>
<h4 id="3-2-3-变量的初始化"><a href="#3-2-3-变量的初始化" class="headerlink" title="3.2.3 变量的初始化"></a>3.2.3 变量的初始化</h4><p><code>var age  = 18;  // 声明变量同时赋值为 18</code></p>
<p>声明一个变量并赋值， 我们称之为==变量的初始化==。</p>
<hr>
<h4 id="3-2-4-案例"><a href="#3-2-4-案例" class="headerlink" title="3.2.4 案例"></a>3.2.4 案例</h4><p>1.弹出一个输入框，提示用户输入姓名。<br>2.弹出一个对话框，输出用户刚才输入的姓名。</p>
<p>3.代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> myname = prompt (<span class="string">&#x27;请输入姓名&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&#x27;欢迎&#x27;</span> + myname);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<hr>
<h3 id="3-3-变量语法扩展"><a href="#3-3-变量语法扩展" class="headerlink" title="3.3 变量语法扩展"></a>3.3 变量语法扩展</h3><h4 id="3-3-1-更新变量"><a href="#3-3-1-更新变量" class="headerlink" title="3.3.1 更新变量"></a>3.3.1 更新变量</h4><p>一个变量被重新复赋值后，它原有的值就会被覆盖，变量值将以最后一次赋的值为准。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line">age = <span class="number">81</span>;   <span class="comment">// 最后的结果就是81因为18 被覆盖掉了          </span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>声明过的变量不需要再次声明。</p>
<p>原理：内存空间已经开辟与分配，并取名为age，所以再次使用这片空间，直接用变量名 age 即可；</p>
</li>
</ul>
<br />

<h4 id="3-3-2-同时声明多个变量"><a href="#3-3-2-同时声明多个变量" class="headerlink" title="3.3.2 同时声明多个变量"></a>3.3.2 同时声明多个变量</h4><p>同时声明多个变量时，只需要写一个 var， 多个变量名之间使用英文逗号隔开。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">/* var age = 18;</span></span><br><span class="line"><span class="comment">    var address = &#x27;或影城&#x27;;</span></span><br><span class="line"><span class="comment">    var gz = 2000; */</span></span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">18</span>,</span><br><span class="line">        address = <span class="string">&#x27;火隐村&#x27;</span>,</span><br><span class="line">        gz = <span class="number">2000</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>逗号隔开</li>
</ul>
<p>也可以一排：</p>
<p><code>var age = 10,  name = &#39;zs&#39;, sex = 2;</code></p>
<hr>
<h4 id="3-3-3-声明变量的特殊情况"><a href="#3-3-3-声明变量的特殊情况" class="headerlink" title="3.3.3 声明变量的特殊情况"></a>3.3.3 声明变量的特殊情况</h4><table>
<thead>
<tr>
<th><strong>情况</strong></th>
<th><strong>说明</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>var age ; console.log (age);</td>
<td>只声明 不赋值</td>
<td>undefined</td>
</tr>
<tr>
<td>console.log(age)</td>
<td>不声明 不赋值 直接使用</td>
<td>报错</td>
</tr>
<tr>
<td>age  = 10; console.log (age);</td>
<td>不声明 只赋值</td>
<td>10</td>
</tr>
</tbody></table>
<ul>
<li><p>只声明 不赋值，程序也不知道是什么 = 未定义(undefined)</p>
</li>
<li><p>不声明 不赋值 直接使用 , vscode里不会保存，F12里能看到会报错</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">Uncaught ReferenceError: tset <span class="literal">is</span><span class="built_in"> not</span> defined</span><br><span class="line">    <span class="keyword">at</span> index3.html:<span class="number">13</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>不声明 只赋值，可以使用，默认为全局变量；</p>
</li>
</ul>
<p>2.当然，还是申明 + 赋值 的好；</p>
<hr>
<h3 id="3-4-变量命名规范"><a href="#3-4-变量命名规范" class="headerlink" title="3.4 变量命名规范"></a>3.4 变量命名规范</h3><ol>
<li><p>由字母(A-Za-z)、数字(0-9)、下划线(_)、美元符号( $ )组成，如：usrAge, num01, _name</p>
</li>
<li><p>严格区分大小写。var app; 和 var App; 是两个变量</p>
</li>
<li><p>不能 以数字开头。  18age   是错误的</p>
</li>
<li><p>不能 是关键字、保留字。例如：var、for、while</p>
</li>
</ol>
<ul>
<li>它们本身已经有了特殊的意义，能被申明就会破坏语言逻辑；</li>
</ul>
<ol start="5">
<li>变量名必须有意义： nl(nianling)   →     age  </li>
</ol>
<ul>
<li>如果要写中文，就得拼全:  xb = xiaBan;</li>
</ul>
<ol start="6">
<li><p>遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。 myFirstName</p>
</li>
<li><p>不要用name作为变量名。</p>
<ul>
<li><p>虽然不是关键字 或 保留字，但本身不是未定义；</p>
</li>
<li><p>验证：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">console</span>.log(tel);</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>只有console.log(tel)报错：<code>Uncaught ReferenceError: tset is not defined</code></p>
<p>说明找得到name的含义，明明灭申明；2021-3-24 20:56:25</p>
</li>
</ul>
</li>
</ol>
<p>7.1 而且百度一下，有很多 使用 name 作为 变量名，出错的情况；</p>
<ul>
<li><a href="https://blog.csdn.net/line233/article/details/82838686">做表单验证时</a></li>
<li><a href="https://blog.csdn.net/Shore_W/article/details/19004831?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param">数组·名时</a></li>
</ul>
<hr>
<h4 id="3-4-2-案例"><a href="#3-4-2-案例" class="headerlink" title="3.4.2 案例"></a>3.4.2 案例</h4><p>一下哪些是合法的变量名？</p>
<p><img src="../../img/25/9.png" alt="9"></p>
<p>1-2. 不能数字开头</p>
<p>1-4. 不能数字开头</p>
<p>2-4. 没有安排&amp;符号，虽然这里是开头，但估计不是开头也不行</p>
<p>3-2. 中间不能空格</p>
<p>3-4. 关键字了</p>
<table>
<thead>
<tr>
<th>第一组</th>
<th>第二组</th>
<th>第三组</th>
</tr>
</thead>
<tbody><tr>
<td>var a</td>
<td>var userName</td>
<td>var thwWorld</td>
</tr>
<tr>
<td>var 1==×==</td>
<td>var $name</td>
<td>var the world==×==</td>
</tr>
<tr>
<td>var age18</td>
<td>var _sex</td>
<td>var the_world</td>
</tr>
<tr>
<td>var 18age==×==</td>
<td>var &amp;sex==×==</td>
<td>var for==×==</td>
</tr>
</tbody></table>
<br />

<hr>
<h3 id="3-5-案例"><a href="#3-5-案例" class="headerlink" title="3.5 案例"></a>3.5 案例</h3><p>要求：交换两个变量的值 ( 实现思路：使用一个 临时变量 用来做中间存储 )</p>
<p>1.自写：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> age = <span class="number">18</span>,</span></span><br><span class="line">            gz = 2000,</span><br><span class="line">            zhongjian;</span><br><span class="line">        zhongjian = age;</span><br><span class="line">        age = gz;</span><br><span class="line">        gz = zhongjian;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;age:&#x27;</span>+ age, <span class="string">&#x27;zhongjian:&#x27;</span> + zhongjian, <span class="string">&#x27;gz:&#x27;</span> + gz);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.资料：</p>
<img src="../../img/25/10.png" alt="10" style="zoom:90%;" />

<br />

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// js 是编程语言有很强的逻辑性在里面： 实现这个要求的思路 先怎么做后怎么做 </span></span><br><span class="line">    <span class="comment">// 1. 我们需要一个临时变量帮我们</span></span><br><span class="line">    <span class="comment">// 2. 把apple1 给我们的临时变量 temp </span></span><br><span class="line">    <span class="comment">// 3. 把apple2 里面的苹果给 apple1 </span></span><br><span class="line">    <span class="comment">// 4. 把临时变量里面的值 给 apple2 </span></span><br><span class="line">    <span class="keyword">var</span> temp; <span class="comment">// 声明了一个临时变量为空</span></span><br><span class="line">    <span class="keyword">var</span> apple1 = <span class="string">&#x27;青苹果&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> apple2 = <span class="string">&#x27;红苹果&#x27;</span>;</span><br><span class="line">    temp = apple1; <span class="comment">// 把右边给左边</span></span><br><span class="line">    apple1 = apple2;</span><br><span class="line">    apple2 = temp;</span><br><span class="line">    <span class="built_in">console</span>.log(apple1);</span><br><span class="line">    <span class="built_in">console</span>.log(apple2);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<br />

<hr>
<h3 id="3-6-小结"><a href="#3-6-小结" class="headerlink" title="3.6 小结"></a>3.6 小结</h3><table>
<thead>
<tr>
<th>为什么需要变量？</th>
<th>因为我们一些数据需要保存，所以需要变量</th>
</tr>
</thead>
<tbody><tr>
<td>变量是什么？</td>
<td>变量就是一个容器，用来存放数据的。方便我们以后使用里面的数据</td>
</tr>
<tr>
<td>变量的本质是什么?</td>
<td>变量是内存里的一块空间，用来存储数据。</td>
</tr>
<tr>
<td>变量怎么使用的？</td>
<td>1.我们使用变量的时候，一定要声明变量，然后赋值<br />2.声明变量本质是去内存申请空间。</td>
</tr>
<tr>
<td>什么是变量的初始化？</td>
<td>声明变量并赋值我们称之为变量的初始化</td>
</tr>
<tr>
<td>变量命名规范有哪些？</td>
<td>这个多了，详见上面3.4 变量命名规范</td>
</tr>
<tr>
<td>交换2个变量值的思路？</td>
<td>1. 我们需要一个临时变量帮我们<br/>2. 把 a 给我们的临时变量 c <br/>3. 把 b 里面的苹果给 a <br/>4. 把 c 里面的值 给 b</td>
</tr>
</tbody></table>
<br />

<hr>
<h3 id="3-x-参考资料"><a href="#3-x-参考资料" class="headerlink" title="3.x 参考资料"></a>3.x 参考资料</h3><ul>
<li>PPT 与 PDF：<a href="https://wws.lanzous.com/itsU2gol10h">https://wws.lanzous.com/itsU2gol10h</a></li>
</ul>
<hr>
<h2 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4. 数据类型"></a>4. 数据类型</h2><h3 id="4-1-目标"><a href="#4-1-目标" class="headerlink" title="4.1 目标"></a>4.1 目标</h3><p> 能够说出5种简单数据类型<br> 能够使用 typeof 获取变量的类型<br> 能够说出1<del>2种转换为数值型的方法<br> 能够说出1</del>2种转换为字符型的方法<br> 能够说出什么是隐式转换</p>
<hr>
<h3 id="4-2-数据类型简介"><a href="#4-2-数据类型简介" class="headerlink" title="4.2 数据类型简介"></a>4.2 数据类型简介</h3><h4 id="4-2-1-为何需要数据类型"><a href="#4-2-1-为何需要数据类型" class="headerlink" title="4.2.1 为何需要数据类型"></a>4.2.1 为何需要数据类型</h4><p>1.在计算机中，不同的数据所需占用的存储空间是不同的，为了便于把数据分成所需内存大小不，同的数据，充分利用存储空间，于是定义了不同的数据类型。</p>
<p>2.简单来说，数据类型就是数据的类别型号。比如姓名“张三”，年龄18，这些数据的类型是不一样的。</p>
<hr>
<h4 id="4-2-2-变量的数据类型"><a href="#4-2-2-变量的数据类型" class="headerlink" title="4.2.2 变量的数据类型"></a>4.2.2 变量的数据类型</h4><p>1.变量是用来存储值的所在处，它们有名字和数据类型。变量的数据类型决定了如何将代表这些值的位存储到计算机的内存中。==JavaScript 是一种弱类型或者说动态语言==。这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;        <span class="comment">// 这是一个数字型</span></span><br><span class="line"><span class="keyword">var</span> areYouOk = <span class="string">&#x27;是的&#x27;</span>;   <span class="comment">// 这是一个字符串     </span></span><br></pre></td></tr></table></figure>

<p>2.在代码运行时，变量的数据类型是由 JS引擎 <strong>根据 = 右边变量值的数据类型来判断</strong> 的，运行完毕之后， 变量就确定了数据类型。</p>
<p>3.JavaScript 拥有动态类型，同时也意味着相同的变量可用作不同的类型：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">6</span>;           <span class="comment">// x 为数字</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;Bill&quot;</span>;      <span class="comment">// x 为字符串   </span></span><br></pre></td></tr></table></figure>

<ul>
<li>即使刚才给了6（数字），也能马上换一个”bill”（字符串）</li>
</ul>
<p>4.无法提前确认变量是什么类型，如果没有值。不像java，申明时就确定了类型：</p>
<p><code>int num = 10; java</code></p>
<br />

<hr>
<h4 id="4-2-3-分类"><a href="#4-2-3-分类" class="headerlink" title="4.2.3 分类"></a>4.2.3 分类</h4><p>1.JS 把数据类型分为两类：</p>
<ul>
<li>简单数据类型 （Number,String,Boolean,Undefined,Null）</li>
<li>复杂数据类型 （object)</li>
</ul>
<hr>
<h3 id="4-3-简单数据类型"><a href="#4-3-简单数据类型" class="headerlink" title="4.3 简单数据类型"></a>4.3 简单数据类型</h3><h4 id="4-3-1-基本数据类型"><a href="#4-3-1-基本数据类型" class="headerlink" title="4.3.1 基本数据类型"></a>4.3.1 基本数据类型</h4><p>1.简单数据类型也可以称为基本数据类型</p>
<p>2.JavaScript 中的简单数据类型及其说明如下：</p>
<table>
<thead>
<tr>
<th>简单数据类型</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>Number</td>
<td>数字型，包含 整型值 和 浮点型值，如21、0.21</td>
<td>0</td>
</tr>
<tr>
<td>Boolean</td>
<td>布尔值类型，只有true、false，等价于1和0</td>
<td>false</td>
</tr>
<tr>
<td>String</td>
<td>字符串类型，如“张三” 。注意js里面，字符串都带引号</td>
<td>“”</td>
</tr>
<tr>
<td>Undefined</td>
<td>var a; 声明变量a但没有给值，此时 a = undefined</td>
<td>undefined</td>
</tr>
<tr>
<td>Null</td>
<td>var a = null; 声明了变量a 为空值</td>
<td>null</td>
</tr>
</tbody></table>
<br />

<hr>
<h4 id="4-3-2-数字型-Number"><a href="#4-3-2-数字型-Number" class="headerlink" title="4.3.2 数字型 Number"></a>4.3.2 数字型 Number</h4><p>JavaScript 数字类型既可以用来保存整数值，也可以保存小数(浮点数）。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">21</span>;       <span class="comment">// 整数</span></span><br><span class="line"><span class="keyword">var</span> Age = <span class="number">21.3747</span>;  <span class="comment">// 小数     </span></span><br></pre></td></tr></table></figure>

<br  />

<h5 id="1-进制"><a href="#1-进制" class="headerlink" title="1. 进制"></a>1. 进制</h5><p>最常见的进制有二进制、八进制、十进制、十六进制。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 1.八进制数字序列范围：0~7</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">07</span>;   <span class="comment">// 对应十进制的7</span></span><br><span class="line"><span class="keyword">var</span> num11 = <span class="number">010</span>; <span class="comment">// 十进制的8</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">12</span>; <span class="comment">// 十进制的12</span></span><br><span class="line"> <span class="comment">// 2.十六进制数字序列范围：0~9以及A~F</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0xA</span>; <span class="comment">// 十进制的10   </span></span><br></pre></td></tr></table></figure>

<p>现阶段我们只需要记住，在JS中八进制前面加0，十六进制前面加 0x  </p>
<ul>
<li>好像A~F，也可以小写。没有强求吧？</li>
</ul>
<h5 id="2-数字型范围"><a href="#2-数字型范围" class="headerlink" title="2. 数字型范围"></a>2. 数字型范围</h5><p>1.JavaScript中数值的最大和最小值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="built_in">Number</span>.MAX_VALUE); <span class="comment">// 1.7976931348623157e+308</span></span><br><span class="line">alert(<span class="built_in">Number</span>.MIN_VALUE); <span class="comment">// 5e-324</span></span><br></pre></td></tr></table></figure>

<p>最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308</p>
<ul>
<li>E数是在科学计数上的一种数量控制,能够将数据计数并表示，使计数更加的规律性和代表性，即7×10^4=7E4。用指数表示法显示数字，以 E+n 替换部分数字，其中 E（代表指数）表示将前面的数字乘以 10 的 n 次幂。</li>
</ul>
<p>最小值：Number.MIN_VALUE，这个值为：5e-32</p>
<h5 id="3-三个特殊值"><a href="#3-三个特殊值" class="headerlink" title="3. 三个特殊值"></a>3. 三个特殊值</h5><p>1.数字型的三个特殊值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="literal">Infinity</span>);  <span class="comment">// Infinity</span></span><br><span class="line">alert(-<span class="literal">Infinity</span>); <span class="comment">// -Infinity</span></span><br><span class="line">alert(<span class="literal">NaN</span>);       <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>

<p><a href="https://fanyi.baidu.com/translate?aldtype=16047&query=alert&keyfrom=baidu&smartresult=dict&lang=auto2zh#en/zh/infinity">Infinity</a> ，代表无穷大，大于任何数值<br>-Infinity ，代表无穷小，小于任何数值<br>NaN ，Not a number，代表一个非数值</p>
<h5 id="4-isNaN"><a href="#4-isNaN" class="headerlink" title="4. isNaN()"></a>4. isNaN()</h5><p>用来判断一个变量是否为非数字的类型，返回 true 或者 false</p>
<p><img src="../../img/25/11.png" alt="11"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> usrAge = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">var</span> isOk = <span class="built_in">isNaN</span>(userAge);</span><br><span class="line"><span class="built_in">console</span>.log(isOk);            <span class="comment">// false ，21 不是一个非数字</span></span><br><span class="line"><span class="keyword">var</span> usrName = <span class="string">&quot;andy&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(userName));  <span class="comment">// true ，&quot;andy&quot;是一个非数字</span></span><br></pre></td></tr></table></figure>

<br />

<h4 id="4-3-3-字符串型-String"><a href="#4-3-3-字符串型-String" class="headerlink" title="4.3.3 字符串型 String"></a>4.3.3 字符串型 String</h4><p>0.别叫成字符型了；（视频里面说的</p>
<p>字符串型可以是引号中的任意文本，其语法为 双引号 “” 和 单引号’’</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strMsg = <span class="string">&quot;我爱北京天安门~&quot;</span>;  <span class="comment">// 使用双引号表示字符串</span></span><br><span class="line"><span class="keyword">var</span> strMsg2 = <span class="string">&#x27;我爱吃猪蹄~&#x27;</span>;    <span class="comment">// 使用单引号表示字符串</span></span><br><span class="line"><span class="comment">// 常见错误</span></span><br><span class="line"><span class="keyword">var</span> strMsg3 = 我爱大肘子;       <span class="comment">// 报错，没使用引号，会被认为是js代码，但js没有这些语法</span></span><br></pre></td></tr></table></figure>

<ul>
<li>用了字符串，不加引号是不行的，代码语法里面没有分类这些数据，会被以为是代码</li>
<li>简称，无效代码；</li>
</ul>
<p>因为 HTML 标签里面的属性使用的是双引号，JS 这里我们更推荐使用单引号。</p>
<p>1.即使是’12’，’true’。</p>
<ul>
<li>原本是其他类型的数据，加了单引号或双引号，也是字符串类型；</li>
</ul>
<hr>
<h5 id="1-嵌套"><a href="#1-嵌套" class="headerlink" title="1. 嵌套"></a>1. 嵌套</h5><p>1.字符串引号嵌套</p>
<p>2.JS 可以用单引号嵌套双引号 ，或者用双引号嵌套单引号 (外双内单，外单内双)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strMsg = <span class="string">&#x27;我是&quot;高帅富&quot;程序猿&#x27;</span>;   <span class="comment">// 可以用&#x27;&#x27;包含&quot;&quot;</span></span><br><span class="line"><span class="keyword">var</span> strMsg2 = <span class="string">&quot;我是&#x27;高帅富&#x27;程序猿&quot;</span>;  <span class="comment">// 也可以用&quot;&quot; 包含&#x27;&#x27;</span></span><br><span class="line"><span class="comment">//  常见错误</span></span><br><span class="line"><span class="keyword">var</span> badQuotes = <span class="string">&#x27;What on earth?&quot;; // 报错，不能 单双引号搭配</span></span><br></pre></td></tr></table></figure>

<br />

<h5 id="2-字符串转义符"><a href="#2-字符串转义符" class="headerlink" title="2. 字符串转义符"></a>2. 字符串转义符</h5><p>类似HTML里面的特殊字符，字符串中也有特殊字符，我们称之为转义符。<br>转义符都是 \ 开头的，常用的转义符及其说明如下：</p>
<table>
<thead>
<tr>
<th><strong>转义符</strong></th>
<th><strong>解释说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>\n</td>
<td>换行符，n 是 newline 的意思</td>
</tr>
<tr>
<td>\ \</td>
<td>斜杠 \</td>
</tr>
<tr>
<td>\‘</td>
<td>‘  单引号</td>
</tr>
<tr>
<td>\“</td>
<td>”双引号</td>
</tr>
<tr>
<td>\t</td>
<td>tab 缩进</td>
</tr>
<tr>
<td><del>\b</del>，\xa0</td>
<td><del>空格 ，b 是 blank 的意思</del>，</td>
</tr>
</tbody></table>
<ul>
<li><p>html的空格是<code>&amp;nbsp</code>;</p>
</li>
<li><p>空格，后来实验了一下：<code>console.log(&#39;asd\xa0ssd&#39;+&#39;asd\basd&#39;+&#39;asd&amp;nbspasd&#39;);</code></p>
<ul>
<li>只有\xa0，才有效</li>
</ul>
</li>
<li><p>2.1 案例-弹出网页警示框</p>
<p><img src="../../img/25/12.png" alt="12"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&#x27;酷热难耐，火辣的太阳底下，我挺拔的身姿，成为了最为独特的风景。\n我审视四周，这里，是我的舞台，我就是天地间的王者。\n这一刻，我豪气冲天，终于大喊一声：&quot;收破烂啦～&quot;&#x27;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<br />

<h5 id="3-字符串长度"><a href="#3-字符串长度" class="headerlink" title="3. 字符串长度"></a>3. 字符串长度</h5><ul>
<li><p>1.字符串是由若干字符组成的，这些字符的数量就是字符串的长度。通过字符串的 length 属性可以获取整个字符串的长度。</p>
</li>
<li><pre><code class="js"><span class="keyword">var</span> strMsg = <span class="string">"我是帅气多金的程序猿！"</span>;
alert(strMsg.length); <span class="comment">// 显示 11</span>
&lt;!--hexoPostRenderEscape:&lt;figure class="highlight awk"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="comment"&gt;##### 4. 字符串拼接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;+ &lt;span class="number"&gt;1&lt;/span&gt;.多个字符串之间可以使用 + 进行拼接，其拼接方式为 字符串 + 任何类型 = 拼接之后的字符串&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;+ &lt;span class="number"&gt;2&lt;/span&gt;.拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;```js&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="regexp"&gt;//&lt;/span&gt;&lt;span class="number"&gt;1.1&lt;/span&gt; 字符串 &lt;span class="string"&gt;&amp;quot;相加&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;alert(&lt;span class="string"&gt;&amp;#x27;hello&amp;#x27;&lt;/span&gt; + &lt;span class="string"&gt;&amp;#x27; &amp;#x27;&lt;/span&gt; + &lt;span class="string"&gt;&amp;#x27;world&amp;#x27;&lt;/span&gt;); &lt;span class="regexp"&gt;//&lt;/span&gt; hello world&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="regexp"&gt;//&lt;/span&gt;&lt;span class="number"&gt;1.2&lt;/span&gt; 数值字符串 &lt;span class="string"&gt;&amp;quot;相加&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;alert(&lt;span class="string"&gt;&amp;#x27;100&amp;#x27;&lt;/span&gt; + &lt;span class="string"&gt;&amp;#x27;100&amp;#x27;&lt;/span&gt;); &lt;span class="regexp"&gt;//&lt;/span&gt; &lt;span class="number"&gt;100100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="regexp"&gt;//&lt;/span&gt;&lt;span class="number"&gt;1.3&lt;/span&gt; 数值字符串 + 数值&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;alert(&lt;span class="string"&gt;&amp;#x27;11&amp;#x27;&lt;/span&gt; + &lt;span class="number"&gt;12&lt;/span&gt;);     &lt;span class="regexp"&gt;//&lt;/span&gt; &lt;span class="number"&gt;1112&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;
</code></pre>
</li>
</ul>
<p>+ 号总结口诀：数值相加 ，字符相连</p>
<hr>
<h5 id="5-字符串拼接加强"><a href="#5-字符串拼接加强" class="headerlink" title="5. 字符串拼接加强"></a>5. 字符串拼接加强</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;pink老师&#x27;</span> + <span class="number">18</span>);           <span class="comment">// 只要有字符就会相连 </span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="comment">// console.log(&#x27;pink老师age岁啦&#x27;);       // 这样不行哦</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;pink老师&#x27;</span> + age);          <span class="comment">// pink老师18</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;pink老师&#x27;</span> + age + <span class="string">&#x27;岁啦&#x27;</span>);  <span class="comment">// pink老师18岁啦</span></span><br></pre></td></tr></table></figure>

<ul>
<li>我们经常会将字符串和变量来拼接，因为变量可以很方便地修改里面的值</li>
<li>变量是不能添加引号的，因为加引号的变量会变成字符串</li>
<li>如果变量两侧都有字符串拼接，口诀“引引加加 ”，删掉数字，变量写加中间</li>
</ul>
<br />

<h5 id="6-案例"><a href="#6-案例" class="headerlink" title="6. 案例"></a>6. 案例</h5><p>1.弹出一个输入框，需要用户输入年龄，之后弹出一个警示框显示“您今年 xx 岁啦”（xx 表示刚才输入的年龄）</p>
<p><img src="../../img/25/13.png" alt="13"></p>
<p>2.案例分析</p>
<p>交互编程的三个基本要素：</p>
<ul>
<li>用户输入 </li>
<li>程序内部处理   </li>
<li>这是 输出结果  </li>
</ul>
<p>3.那么在程序中要如何实现呢？</p>
<p>3.1 弹出一个输入框（prompt)，让用户输入年龄（用户输入）<br>3.2 把用户输入的值用变量保存起来,把刚才输入的年龄与所要输出的字符串拼接 （程序内部处理）<br>3.3 使用alert语句弹出警示框（输出结果）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> yourAge = prompt(<span class="string">&#x27;请输入你的年龄&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&#x27;你今年&#x27;</span> + yourAge + <span class="string">&#x27;岁啦&#x27;</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br />

<h4 id="4-3-4-布尔型"><a href="#4-3-4-布尔型" class="headerlink" title="4.3.4 布尔型"></a>4.3.4 布尔型</h4><p>1.布尔型 Boolean</p>
<p>2.布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。<br>布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + <span class="number">1</span>);  <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> + <span class="number">1</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<br />

<h4 id="4-3-5-Undefined-和-Null"><a href="#4-3-5-Undefined-和-Null" class="headerlink" title="4.3.5 Undefined 和 Null"></a>4.3.5 Undefined 和 Null</h4><p>一个声明后没有被赋值的变量会有一个默认值 undefined ( 如果进行相连或者相加时，注意结果）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> variable;</span><br><span class="line"><span class="built_in">console</span>.log(variable);           <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;你好&#x27;</span> + variable);  <span class="comment">// 你好undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11</span> + variable);     <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + variable);   <span class="comment">//  NaN</span></span><br></pre></td></tr></table></figure>

<p>一个声明变量给 null 值，里面存的值为空（学习对象时，我们继续研究null)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vari = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;你好&#x27;</span> + vari);  <span class="comment">// 你好null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11</span> + vari);     <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + vari);   <span class="comment">//  1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>null可以与数值运算，这也是 null 与 undefined 的不同之一</li>
</ul>
<hr>
<h3 id="4-4-获取变量数据类型"><a href="#4-4-获取变量数据类型" class="headerlink" title="4.4 获取变量数据类型"></a>4.4 获取变量数据类型</h3><h4 id="4-4-1-获取"><a href="#4-4-1-获取" class="headerlink" title="4.4.1  获取"></a>4.4.1  获取</h4><p>1.获取检测变量的数据类型</p>
<ul>
<li>typeof 可用来获取检测变量的数据类型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num) <span class="comment">// 结果 number</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str);<span class="comment">// string</span></span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> flag);<span class="comment">// boolean</span></span><br></pre></td></tr></table></figure>

<p>不同类型的返回值:</p>
<p><img src="../../img/25/14.png" alt="14"></p>
<ul>
<li>学了对象，就知道 为什么 typeof null 是 object;</li>
</ul>
<p>2.这个获取数据类型，有什么用呢==？==</p>
<ul>
<li><p>2.1 有些地方，会有歧义，不能明确是什么类型的数据</p>
</li>
<li><p>2.2 例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = prompt(<span class="string">&#x27;请输入你的年龄&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> age);</span><br></pre></td></tr></table></figure>

<p>里面我们输入的是数字，但其实是字符串型。</p>
</li>
<li><p>这样避免了，有些地方你以为是数值类型，拿去做运算了，结果它是字符串类型，就会<strong>达不到</strong>程序员想要的效果。</p>
</li>
</ul>
<hr>
<h4 id="4-4-2-字面量"><a href="#4-4-2-字面量" class="headerlink" title="4.4.2 字面量"></a>4.4.2 字面量</h4><p>1.字面量是在源代码中一个固定值的表示法，通俗来说，就是字面量表示如何表达这个值。</p>
<ul>
<li>数字字面量：8, 9, 10</li>
<li>字符串字面量：’黑马程序员’, “大前端”</li>
<li>布尔字面量：true，false</li>
</ul>
<p>2.虽然我们人类一眼能看出，或者只要学习几句话，就能明白。</p>
<ul>
<li>但是，要给计算机下定义，是没这么简单的，字面量就是教计算机分辨什么是什么类型的数据；</li>
</ul>
<hr>
<h3 id="4-5-数据类型转换"><a href="#4-5-数据类型转换" class="headerlink" title="4.5 数据类型转换"></a>4.5 数据类型转换</h3><h4 id="4-5-1-是什么？"><a href="#4-5-1-是什么？" class="headerlink" title="4.5.1 是什么？"></a>4.5.1 是什么？</h4><p>1.使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算，而需要转换变量的数据类型。通俗来说，就是把==一种数据类型的变量转换成另外一种数据类型==。<br>我们通常会实现3种方式的转换：</p>
<ul>
<li>转换为字符串类型</li>
<li>转换为数字型</li>
<li>转换为布尔型</li>
</ul>
<h4 id="4-5-2-转换为字符串"><a href="#4-5-2-转换为字符串" class="headerlink" title="4.5.2 转换为字符串"></a>4.5.2 转换为字符串</h4><p>1.转换为字符串类型</p>
<table>
<thead>
<tr>
<th>方式</th>
<th>说明</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>toString()</td>
<td>转成字符串</td>
<td>var num=1; alert(num.toString());</td>
</tr>
<tr>
<td>String() 强制转换</td>
<td>转成字符串</td>
<td>var num=1; alert(String(num));</td>
</tr>
<tr>
<td>加号拼接字符串</td>
<td>和字符串拼接的结果都是字符串</td>
<td>var num =1; alert(num+ “我是字符串”);</td>
</tr>
</tbody></table>
<ul>
<li>toString() 和 String()  使用方式不一样。</li>
<li>三种转换方式，我们更喜欢用第三种加号拼接字符串转换方式， 这一种方式也称之为隐式转换。</li>
</ul>
<p>2.案例</p>
<p>2.1 把数字型转换为字符串型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> str = num.toString();</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str);</span><br></pre></td></tr></table></figure>

<br />

<hr>
<h4 id="4-5-3-转换为数字型（重点）"><a href="#4-5-3-转换为数字型（重点）" class="headerlink" title="4.5.3 转换为数字型（重点）"></a>4.5.3 转换为数字型（重点）</h4><p>1.</p>
<table>
<thead>
<tr>
<th>方式</th>
<th>说明</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>parse[^1]Int(string) 函数</td>
<td>将string类型转成整数数字型</td>
<td>parselnt(‘78’)</td>
</tr>
<tr>
<td>parseFloat(string) 函数</td>
<td>将string类型转成浮点数 数字型</td>
<td>parseFloat(‘78.21’)</td>
</tr>
<tr>
<td>Number() 强制转换函数</td>
<td>将string类型转换成数字型</td>
<td>Number(‘12’)</td>
</tr>
<tr>
<td>js 隐式转换( - * / )，+号不行</td>
<td>利用算术运算符隐式转换为数字型</td>
<td>‘12’ - 0</td>
</tr>
</tbody></table>
<p>1.1 word:</p>
<ul>
<li>1.<a href="https://fanyi.baidu.com/translate#en/zh/parse">parse</a></li>
</ul>
<p>1.2 详细点的案例 - parseInt(string)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = prompt(<span class="string">&#x27;请输入你的年龄&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(age));</span><br></pre></td></tr></table></figure>

<ul>
<li><p>1.2.1 parseInt会取整，但不会四舍五入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;3.14&#x27;</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;3.94&#x27;</span>)); <span class="comment">// 3，还是3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>1.2.2 以数字开头的字符串，可以提取出数字</p>
<p><code>console.log(parseInt(&#39;120sadwdsad&#39;)); 结果：120</code></p>
<p>如果是字符开头的就是：NaN</p>
<ul>
<li>说明，每一个字符会检验一次是否能转换为数字类型。</li>
<li>遇到第一个不能的，就切掉，保留前面已经转换的数据</li>
<li>而第一个字符就是不能转换的数据，就返回NaN</li>
</ul>
</li>
</ul>
<p>1.3 parseFloat(string) 函数</p>
<ul>
<li>1.3.1 与1.2差不多，就是能保留小数，不卡头了</li>
</ul>
<p>1.4 Number() 强制转换函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">Number</span>(str);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(str));</span><br><span class="line"><span class="built_in">console</span>.log(num1+<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&#x27;12&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>1.5 隐式转换( - * / )，+号不行</p>
<p><code>console.log(&#39;120&#39; - 0) // 120</code></p>
<ul>
<li>1.5.1 也可以两者都是字符串型</li>
</ul>
<p><code>console.log(&#39;123&#39; - &#39;120&#39;)// 3</code></p>
<ul>
<li>如果是加好，就会得到：<code>123120</code>;</li>
</ul>
<br />

<p>2.注意 parseInt 和 parseFloat 单词的大小写，这2个是重点</p>
<ul>
<li>2.1 隐式转换是我们在进行算数运算的时候，JS 自动转换了数据类型</li>
</ul>
<p>3.案例：此案例要求在页面中弹出一个输入框，我们输入出生年份后， 能计算出我们的年龄。</p>
<p>3.1 案例分析：</p>
<ul>
<li>弹出一个输入框（prompt)，让用户输入出生年份 （用户输入）</li>
<li>把用户输入的值用变量保存起来，然后用今年的年份减去变量值，结果就是现在的年龄  （程序内部处理）</li>
<li>弹出警示框（alert) ， 把计算的结果输出 （输出结果）</li>
</ul>
<p>3.2 代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 弹出输入框，输入出生年份，并存储在变量中  </span></span><br><span class="line"><span class="keyword">var</span> year = prompt(<span class="string">&#x27;请输入您的出生年份：&#x27;</span>);  <span class="comment">// 用户输入</span></span><br><span class="line"><span class="comment">// 2. 用今年减去刚才输入的年份   </span></span><br><span class="line"><span class="keyword">var</span> result = <span class="number">2019</span> - year;               <span class="comment">// 程序内部处理</span></span><br><span class="line"><span class="comment">// 3. 弹出提示框  </span></span><br><span class="line">alert(<span class="string">&#x27;您的年龄是:&#x27;</span> + result + <span class="string">&#x27;岁&#x27;</span>);     <span class="comment">// 输出结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自写：</span></span><br><span class="line"><span class="keyword">var</span> years = prompt(<span class="string">&#x27;请输入出生年份&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">2020</span> - years;</span><br><span class="line"><span class="keyword">var</span> info = <span class="string">&#x27;你今年 &#x27;</span> + age + <span class="string">&#x27; 岁&#x27;</span>;</span><br><span class="line">alert(info);</span><br></pre></td></tr></table></figure>

<ul>
<li>主要是：<code>2019 - year</code>的隐式转换；</li>
</ul>
<br />

<p>4.案例：简单加法；</p>
<p>计算两个数的值， 用户输入第一个值后，继续弹出第二个输入框并输入第二个值，最后通过弹出窗口显示出两次输入值相加的结果。</p>
<ul>
<li><p>4.1 分析：</p>
</li>
<li><p>先弹出第一个输入框，提示用户输入第一个值  保存起来<br>再弹出第二个框，提示用户输入第二个值  保存起来<br>把这两个值相加，并将结果赋给新的变量（注意数据类型转换）<br>弹出警示框（alert) ， 把计算的结果输出 （输出结果）</p>
</li>
<li><p>4.2 代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.自写：</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseFloat</span>(prompt(<span class="string">&#x27;请输入第一个数&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseFloat</span>(prompt(<span class="string">&#x27;请输入第二个数&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> add = num1 + num2;</span><br><span class="line"><span class="keyword">var</span> export1 = <span class="string">&#x27;两个数相加得：&#x27;</span> + add;</span><br><span class="line">alert(export1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 资料：</span></span><br><span class="line"><span class="comment">// 1. 先弹出第一个输入框，提示用户输入第一个值 </span></span><br><span class="line"> <span class="keyword">var</span> num1 = prompt(<span class="string">&#x27;请输入第一个值：&#x27;</span>);</span><br><span class="line"><span class="comment">// 2. 再弹出第二个框，提示用户输入第二个值 </span></span><br><span class="line"> <span class="keyword">var</span> num2 = prompt(<span class="string">&#x27;请输入第二个值：&#x27;</span>);</span><br><span class="line"><span class="comment">// 3. 将输入的值转换为数字型后，把这两个值相加，并将结果赋给新的变量  </span></span><br><span class="line"> <span class="keyword">var</span> result = <span class="built_in">parseFloat</span>(num1) + <span class="built_in">parseFloat</span>(num2);</span><br><span class="line"><span class="comment">// 4. 弹出结果</span></span><br><span class="line"> alert(<span class="string">&#x27;结果是:&#x27;</span> + result);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br />

</li>
</ul>
<h4 id="4-5-4-转换为布尔型"><a href="#4-5-4-转换为布尔型" class="headerlink" title="4.5.4 转换为布尔型"></a>4.5.4 转换为布尔型</h4><table>
<thead>
<tr>
<th>方式</th>
<th>说明</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>Boolean()函数</td>
<td>其他类型转成布尔值</td>
<td>Boolean(‘true’);</td>
</tr>
</tbody></table>
<p>代表空、否定的值会被转换为 false  ，如 ‘’、0、NaN、null、undefined<br>其余值都会被转换为 true</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">&#x27;&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">NaN</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">null</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">undefined</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">&#x27;小白&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">12</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<br />

<hr>
<h3 id="4-6-扩展阅读"><a href="#4-6-扩展阅读" class="headerlink" title="4.6 扩展阅读"></a>4.6 扩展阅读</h3><h4 id="4-6-1-解释与编译"><a href="#4-6-1-解释与编译" class="headerlink" title="4.6.1 解释与编译"></a>4.6.1 解释与编译</h4><h5 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h5><p>1.解释型语言和编译型语言</p>
<p>计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序员所写的程序语言翻译成机器语言才能执行程序。程序语言翻译成机器语言的工具，被称为翻译器。</p>
<p><img src="../../img/25/16.png" alt="16"></p>
<ul>
<li>翻译器翻译的方式有两种：一个是==编译==，另外一个是==解释==。两种方式之间的区别在于==翻译的时间点不同==</li>
<li>编译器是在<strong>代码执行之前进行编译</strong>，生成中间代码文件</li>
<li>解释器是在<strong>运行时进行及时解释</strong>，并立即执行(当编译器以解释方式运行的时候，也称之为解释器)</li>
</ul>
<h5 id="2-执行过程"><a href="#2-执行过程" class="headerlink" title="2. 执行过程"></a>2. 执行过程</h5><img src="../../img/25/17.png" alt="17" style="zoom:80%;" />

<p>编译语言：把代码全部编译，编译完了才执行；<br>解释语言：读到第一行代码，解释成机器语言执行，然后执行。然后读到第二代码….</p>
<h5 id="3-优劣点"><a href="#3-优劣点" class="headerlink" title="3. 优劣点"></a>3. 优劣点</h5><p>1.来源：<a href="https://blog.csdn.net/w782373711/article/details/88366471">https://blog.csdn.net/w782373711/article/details/88366471</a></p>
<p><strong>编译型语言：</strong></p>
<ol>
<li>编译型语言最大的优势之一就是其执行速度。用C/C++编写的程序运行速度要比用Java编写的相同程序快30%-70%。</li>
<li>编译型程序比解释型程序消耗的内存更少。</li>
<li>不利的一面——编译器比解释器要难写得多。</li>
<li>编译器在调试程序时提供不了多少帮助——有多少次在你的C语言代码中遇到一个“空指针异常”时，需要花费好几个小时来明确错误到底在代码中的什么位置。</li>
<li>可执行的编译型代码要比相同的解释型代码大许多。例如，C/C++的.exe文件要比同样功能的Java的.class文件大很多。</li>
<li>编译型程序是面向特定平台的因而是平台依赖的。</li>
<li>编译型程序不支持代码中实现安全性——例如，一个编译型的程序可以访问内存的任何区域，并且可以对你的PC做它想做的任何事情（大部分病毒是使用编译型语言编写的）</li>
<li>由于松散的安全性和平台依赖性，编译型语言不太适合开发因特网或者基于Web的应用。</li>
</ol>
<p><strong>解释型语言：</strong></p>
<ol>
<li>解释型语言提供了极佳的调试支持。一名Java程序员只需要几分钟就可以定位并修复一个“空指针异常”，因为Java运行环境不仅指明了异常的性质，而且给出了异常发生位置具体的行号和函数调用顺序（著名的堆栈跟踪信息）。这样的便利是编译型语言所无法提供的。</li>
<li>另一个优势是解释器比编译器容易实现</li>
<li>解释型语言最大的优势之一是其平台独立性</li>
<li>解释型语言也可以保证高度的安全性——这是互联网应用迫切需要的</li>
<li>中间语言代码的大小比编译型可执行代码小很多</li>
<li>平台独立性，以及严密的安全性是使解释型语言成为适合互联网和Web应用的理想语言的2个最重要的因素。</li>
<li>解释型语言存在一些严重的缺点。解释型应用占用更多的内存和CPU资源。这是由于，为了运行解释型语言编写的程序，相关的解释器必须首先运行。解释器是复杂的，智能的，大量消耗资源的程序并且它们会占用很多CPU周期和内存。</li>
<li>由于解释型应用的decode-fetch-execute（解码-抓取-执行）的周期，它们比编译型程序慢很多。</li>
<li>解释器也会做很多代码优化，运行时安全性检查；这些额外的步骤占用了更多的资源并进一步降低了应用的运行速度。</li>
</ol>
<hr>
<h4 id="4-6-2-标识符、关键字、保留字"><a href="#4-6-2-标识符、关键字、保留字" class="headerlink" title="4.6.2 标识符、关键字、保留字"></a>4.6.2 标识符、关键字、保留字</h4><h5 id="1-标识符"><a href="#1-标识符" class="headerlink" title="1. 标识符"></a>1. 标识符</h5><p>1.标识(zhi)符：就是指开发人员为变量、属性、函数、参数取的名字。</p>
<p><strong>标识符不能是关键字或保留字</strong>。</p>
<h5 id="2-关键字"><a href="#2-关键字" class="headerlink" title="2. 关键字"></a>2. 关键字</h5><p>1.关键字：是指 JS本身已经使用了的字，不能再用它们充当变量名、方法名。</p>
<ul>
<li>包括：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with 等。</li>
</ul>
<h5 id="3-保留字"><a href="#3-保留字" class="headerlink" title="3. 保留字"></a>3. 保留字</h5><p>1.保留字：实际上就是预留的“关键字”，意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不能使用它们当变量名或方法名。</p>
<ul>
<li>包括：boolean、byte、<a href="https://fanyi.baidu.com/translate?aldtype=16047&query=login&keyfrom=baidu&smartresult=dict&lang=auto2zh#en/zh/char">char</a>、class、const、debugger、double、enum、export、extends、fimal、float、goto、implements、import、int、interface、long、mative、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile 等。</li>
<li><strong>注意</strong>：如果将保留字用作变量名或函数名，那么除非将来的浏览器实现了该保留字，否则很可能收不到任何错误消息。当浏览器将其实现后，该单词将被看做关键字，如此将出现关键字错误。</li>
</ul>
<hr>
<h2 id="5-js运算符"><a href="#5-js运算符" class="headerlink" title="5. js运算符"></a>5. js运算符</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>运算符（operator[^2]）也被称为<strong>操作符</strong>，是用于实现赋值、比较和执行算数运算等功能的符号。</p>
<p>JavaScript中常用的运算符有：</p>
<ul>
<li>算数运算符</li>
<li>递增和递减运算符</li>
<li>比较运算符</li>
<li>逻辑运算符</li>
<li>赋值运算符</li>
</ul>
<hr>
<h3 id="5-2-算数运算符"><a href="#5-2-算数运算符" class="headerlink" title="5.2 算数运算符"></a>5.2 算数运算符</h3><p>1.概念：算术运算使用的符号，用于执行两个变量或值的算术运算。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加</td>
<td>10 + 20 = 30</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>10 - 20 = -10</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>10 * 20 = 200</td>
</tr>
<tr>
<td>/</td>
<td>除</td>
<td>10 / 20 = 0.2</td>
</tr>
<tr>
<td>%</td>
<td>取余数（取模）</td>
<td>返回除法的余数 9 % 2 = 1</td>
</tr>
</tbody></table>
<br />

<hr>
<h4 id="5-2-2-浮点数的精度问题"><a href="#5-2-2-浮点数的精度问题" class="headerlink" title="5.2.2 浮点数的精度问题"></a>5.2.2 浮点数的精度问题</h4><p>1.浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">0.1</span> + <span class="number">0.2</span>;    <span class="comment">// 结果不是 0.3，而是：0.30000000000000004</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0.07</span> * <span class="number">100</span>);   <span class="comment">// 结果不是 7，  而是：7.000000000000001</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0.3</span> == reseult); <span class="comment">// false </span></span><br></pre></td></tr></table></figure>

<p>2.整数的话，1+2 就等于 3，没其他的；</p>
<p>3.尽量不要用浮点数做运算。</p>
<p>所以：==不要直接判断两个浮点数是否相等== !  </p>
<hr>
<p>4.提问：</p>
<ul>
<li><p>4.1 我们怎么判断 一个数能够被整除呢？</p>
<p>它的余数是0 就说明这个数能被整除， 这就是 %  取余运算符的主要用途</p>
</li>
<li><p>4.2. 请问 1 + 2  *  3 结果是？</p>
<p>结果是7 ，注意算术运算符优先级的，先乘除，后加减，有小括号先算小括号里面的</p>
</li>
</ul>
<hr>
<h4 id="5-2-3-表达式和返回值"><a href="#5-2-3-表达式和返回值" class="headerlink" title="5.2.3 表达式和返回值"></a>5.2.3 表达式和返回值</h4><p>1.表达式：是由数字、运算符、变量等以能求得数值的有意义排列方法所得的组合<br>简单理解：是由数字、运算符、变量等组成的式子</p>
<p>例如： 1+1</p>
<p>2.表达式最终都会有一个结果，返回给我们，我们成为返回值</p>
<p>例如 1+1，会有一个2的结果；</p>
<p>3.在外面，1+1=2.</p>
<ul>
<li><p>在程序：2=1+1，我们右边表达式计算完毕，返回值给左边。</p>
<p><code>var num = 1+1;</code></p>
</li>
</ul>
<hr>
<h3 id="5-3-递增和递减"><a href="#5-3-递增和递减" class="headerlink" title="5.3 递增和递减"></a>5.3 递增和递减</h3><p>1.递增和递减运算符</p>
<h4 id="5-3-1-概述"><a href="#5-3-1-概述" class="headerlink" title="5.3.1 概述"></a>5.3.1 概述</h4><p>如果需要反复给数字变量添加或减去1，可以使用<strong>递增</strong>（++）和<strong>递减</strong>（ – ）运算符来完成。</p>
<p>在 JavaScript 中，递增（++）和递减（ – ）既可以放在变量前面，也可以放在变量后面。放在变量前面时，我们可以称为<strong>前置</strong>递增（递减）运算符，放在变量后面时，我们可以称为<strong>后置</strong>递增（递减）运算符。</p>
<p>注意：递增和递减运算符必须和变量配合使用。 </p>
<hr>
<h4 id="5-3-2-前置递增"><a href="#5-3-2-前置递增" class="headerlink" title="5.3.2 前置递增"></a>5.3.2 前置递增</h4><p>++num 前置递增，就是自加1，类似于 num =  num + 1，但是 ++num 写起来更简单。<br>使用口诀：==先自加==，后返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  num = <span class="number">10</span>;</span><br><span class="line">alert(++num + <span class="number">10</span>);   <span class="comment">// 21</span></span><br></pre></td></tr></table></figure>

<br />

<h4 id="5-3-3-后置递增"><a href="#5-3-3-后置递增" class="headerlink" title="5.3.3 后置递增"></a>5.3.3 后置递增</h4><p>1.后置递增运算符</p>
<p>num++ 后置递增，就是自加1，类似于 num =  num + 1 ，但是 num++ 写起来更简单。<br>使用口诀：先返回原值，==后自加== </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  num = <span class="number">10</span>;</span><br><span class="line">alert(<span class="number">10</span> + num++);  <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="5-3-4-练习"><a href="#5-3-4-练习" class="headerlink" title="5.3.4 练习"></a>5.3.4 练习</h4><p>1.看代码，计算出值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">++a;</span><br><span class="line"><span class="keyword">var</span> b = ++a + <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">10</span>;</span><br><span class="line">c++;</span><br><span class="line"><span class="keyword">var</span> d = c++ + <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> f = e++ + ++e;</span><br><span class="line"><span class="built_in">console</span>.log(f);</span><br></pre></td></tr></table></figure>

<p>b14，c13，f22；</p>
<ul>
<li><p>f我第一次算成21了；</p>
</li>
<li><p>错在：</p>
<p>e++,虽然返回的是10，但在++e的时候，已经是11了，再加上++e本身先+1，那么++e返回的值是12；</p>
<p>∴是10+12=22；</p>
</li>
<li><p>第一次算成了：10+11=21；错误；</p>
<ul>
<li>2021-3-25 17:24:10，又错；捂脸；</li>
</ul>
</li>
</ul>
<hr>
<h4 id="5-3-5-小结"><a href="#5-3-5-小结" class="headerlink" title="5.3.5 小结"></a>5.3.5 小结</h4><ul>
<li>前置递增和后置递增运算符可以简化代码的编写，让变量的值 + 1  比以前写法更简单</li>
<li>单独使用时，运行结果相同</li>
<li>与其他代码联用时，执行结果会不同 </li>
<li>后置：先原值运算，后自加（先人后己） </li>
<li>前置：先自加，后运算（先已后人）</li>
<li>开发时，大多使用后置递增/减，并且代码独占一行，例如：num++; 或者 num–;</li>
</ul>
<hr>
<h3 id="5-4-比较运算符"><a href="#5-4-比较运算符" class="headerlink" title="5.4 比较运算符"></a>5.4 比较运算符</h3><h4 id="5-4-1概述"><a href="#5-4-1概述" class="headerlink" title="5.4.1概述"></a>5.4.1概述</h4><p>1.概念：比较运算符（关系运算符）是两个数据进行比较时所使用的运算符，比较运算后，会返回一个布尔值（true / false）作为比较运算的结果。</p>
<table>
<thead>
<tr>
<th>运算符名称</th>
<th>说明</th>
<th>案例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;</td>
<td>小于号</td>
<td>1 &lt; 2</td>
<td>true</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于号</td>
<td>1 &gt; 2</td>
<td>false</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于号(大于或者等于)</td>
<td>2 &gt;= 2</td>
<td>true</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于号(小于或者等于)</td>
<td>3 &lt;= 2</td>
<td>false</td>
</tr>
<tr>
<td>==</td>
<td>判等号（会转型）</td>
<td>37 == 37</td>
<td>true</td>
</tr>
<tr>
<td>!=</td>
<td>不等号</td>
<td>37 != 37</td>
<td>false</td>
</tr>
<tr>
<td>===    !==</td>
<td>全等 要求值和 数据类型都一致</td>
<td>37 === ‘37’</td>
<td>false</td>
</tr>
</tbody></table>
<br />

<h4 id="5-4-2-号"><a href="#5-4-2-号" class="headerlink" title="5.4.2 =号"></a>5.4.2 =号</h4><table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>赋值</td>
<td>把右边给左边</td>
</tr>
<tr>
<td>==</td>
<td>判断</td>
<td>判断两边值是否相等,会转换数据类型</td>
</tr>
<tr>
<td>===</td>
<td>全等</td>
<td>判断两边的值 和 数据类型是否完全相同</td>
</tr>
</tbody></table>
<br />

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">18</span> == <span class="string">&#x27;18&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">18</span> === <span class="string">&#x27;18&#x27;</span>); </span><br></pre></td></tr></table></figure>

<p>1.在<code>console.log(18 == &#39;18&#39;);</code>中</p>
<ul>
<li>‘18’ 被转换成了 数字类型18；</li>
<li>而 === 不会；</li>
</ul>
<p>2.练习：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> res1 = num1 &gt; num2; <span class="comment">// false  </span></span><br><span class="line"><span class="keyword">var</span> res2 = num1 == <span class="number">11</span>;  <span class="comment">// false </span></span><br><span class="line"><span class="keyword">var</span> res3 = num1 != num2; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>3.问题：</p>
<ul>
<li>3.1 !== 是什么？!=，我们认为是不相等；看来都是不相等；<ul>
<li>也许!==，是类型不同，也算不相等；2021-3-25 17:27:56</li>
</ul>
</li>
</ul>
<p>3.2 百度：<a href="https://zhidao.baidu.com/question/467153011.html">https://zhidao.baidu.com/question/467153011.html</a></p>
<p>1、比较结果上的区别</p>
<p>!=返回同类型值比较结果。</p>
<p>!== 不同类型不比较，且无结果，同类型才比较。</p>
<p>2、比较过程上的区别</p>
<p>!= 比较时，若类型不同，会偿试转换类型。</p>
<p>!== 只有相同类型才会比较。</p>
<br />

<hr>
<h3 id="5-5-逻辑运算符"><a href="#5-5-逻辑运算符" class="headerlink" title="5.5 逻辑运算符"></a>5.5 逻辑运算符</h3><h4 id="5-5-1-概述"><a href="#5-5-1-概述" class="headerlink" title="5.5.1 概述"></a>5.5.1 概述</h4><p>概念：逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值。后面开发中经常用于多个条件的判断</p>
<table>
<thead>
<tr>
<th>逻辑运算符</th>
<th>说明</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;&amp;</td>
<td>“逻辑与”，简称“与” and，两边都是 true才返回 true，否则返回 false</td>
<td>true &amp;&amp; false</td>
</tr>
<tr>
<td>||</td>
<td>“逻辑或”，简称 “或” or，两边都为 false 才返回 false，否则都为true</td>
<td>true || false</td>
</tr>
<tr>
<td>!</td>
<td>“逻辑非“，简称 ”非“ not</td>
<td>! true</td>
</tr>
</tbody></table>
<br />

<h4 id="5-5-2-逻辑与-amp-amp"><a href="#5-5-2-逻辑与-amp-amp" class="headerlink" title="5.5.2 逻辑与&amp;&amp;"></a>5.5.2 逻辑与&amp;&amp;</h4><p>两边都是 true才返回 true，否则返回 false</p>
<p><img src="../../img/25/18.png" alt="18"></p>
<h4 id="5-5-3-逻辑或"><a href="#5-5-3-逻辑或" class="headerlink" title="5.5.3 逻辑或 ||"></a>5.5.3 逻辑或 ||</h4><p>两边都为 false 才返回 false，否则都为true</p>
<p><img src="../../img/25/19.png" alt="19"></p>
<h4 id="5-5-4-逻辑非-！"><a href="#5-5-4-逻辑非-！" class="headerlink" title="5.5.4 逻辑非 ！"></a>5.5.4 逻辑非 ！</h4><p>逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 true 的相反值是 false</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isOk = !<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(isOk);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<br />

<h4 id="5-5-5-练习"><a href="#5-5-5-练习" class="headerlink" title="5.5.5 练习"></a>5.5.5 练习</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;我爱你~中国~&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num &gt; <span class="number">5</span> &amp;&amp; str.length &gt;= num); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(num &lt; <span class="number">5</span> &amp;&amp; str.length &gt;= num); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!(num &lt; <span class="number">10</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!(num &lt; <span class="number">10</span> || str.length == num)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<br />

<hr>
<h4 id="5-5-6-短路运算（逻辑中断）"><a href="#5-5-6-短路运算（逻辑中断）" class="headerlink" title="5.5.6 短路运算（逻辑中断）"></a>5.5.6 短路运算（逻辑中断）</h4><p>0.上面都是布尔值参加的逻辑运算 true &amp;&amp; false == false</p>
<ul>
<li>如果是 值 123 &amp;&amp; 456 ,或表达式，参与逻辑运算呢？</li>
</ul>
<p><strong>短路运算的原理</strong>：当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值;</p>
<h5 id="1-逻辑与"><a href="#1-逻辑与" class="headerlink" title="1. 逻辑与"></a>1. 逻辑与</h5><ul>
<li>语法： 表达式1 &amp;&amp; 表达式2</li>
<li>如果第一个表达式的值为真，则返回表达式2</li>
<li>如果第一个表达式的值为假，则返回表达式1</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="number">123</span> &amp;&amp; <span class="number">456</span> );        <span class="comment">// 456</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">0</span> &amp;&amp; <span class="number">456</span> );          <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">0</span> &amp;&amp; <span class="number">456</span> &amp;&amp; <span class="number">789</span> );   <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">123</span> &amp;&amp; <span class="number">456</span>&amp;&amp; <span class="number">789</span> );  <span class="comment">// 789</span></span><br></pre></td></tr></table></figure>

<p>2.除了0以外，所有数值都是真的（负数也是吗？）实验一下：</p>
<p><code>console.log( -20 &amp;&amp; 123);</code>返回了123，看来负数也是返回true;</p>
<p>3.为==假==的还有：’ ‘，null，undefined，NaN</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log ( <span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="number">1</span>+<span class="number">2</span> &amp;&amp; <span class="number">456</span>); <span class="comment">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<br />

<h5 id="2-逻辑或"><a href="#2-逻辑或" class="headerlink" title="2. 逻辑或"></a>2. 逻辑或</h5><ul>
<li>语法： 表达式1 || 表达式2</li>
<li>如果第一个表达式的值为真，则返回表达式1</li>
<li>如果第一个表达式的值为假，则返回表达式2</li>
<li>与逻辑与的逻辑中断相反</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="number">123</span> || <span class="number">456</span> );         <span class="comment">//  123</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">0</span> ||  <span class="number">456</span> );          <span class="comment">//  456</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">0</span> || <span class="number">456</span> || <span class="number">789</span> );    <span class="comment">//  456,第一个值为0位假，返回第二个值，第二个值为456为真，返回本身的值</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">123</span> || <span class="number">456</span> || <span class="number">789</span> );  <span class="comment">//  123</span></span><br></pre></td></tr></table></figure>

<p>2.练习：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span> || num++);</span><br><span class="line"><span class="built_in">console</span>.log(num);   </span><br></pre></td></tr></table></figure>

<ul>
<li><p>2.1 第一次算的的时候：123 与 1；</p>
<p>==错了==，中断，中断。不是都执行了，而返回的某。是中断，逻辑或短路运算返回123后，就不在执行 num++，</p>
<p>所以：num 为0，不是1；</p>
</li>
<li><p>这次算的是0，但不是一味num++中断了，而是一味num++，还没+1，我也是服了自己；2021-3-25 17:43:26</p>
</li>
</ul>
<h5 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h5><p>1.逻辑中断很重要，会直接影响是否进行运算，从而影响运算结果。</p>
<hr>
<h3 id="5-6-赋值运算符"><a href="#5-6-赋值运算符" class="headerlink" title="5.6 赋值运算符"></a>5.6 赋值运算符</h3><p>1.概念：用来把数据赋值给变量的运算符。</p>
<ul>
<li>1.1 虽然可以num++，+1。但如果要+2怎么办？+=2;</li>
</ul>
<table>
<thead>
<tr>
<th>赋值运算符</th>
<th>说明</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>直接赋值</td>
<td>var usrName = ‘我是值’;</td>
</tr>
<tr>
<td>+=、-=</td>
<td>加、减 一个 数 后在赋值</td>
<td>var age =10; age+=5; //15</td>
</tr>
<tr>
<td>*=、/=、%=</td>
<td>乘、除、取模 后再赋值</td>
<td>var age =2; age*=5; //10</td>
</tr>
</tbody></table>
<p>2.例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line">age += <span class="number">5</span>;  <span class="comment">// 相当于 age = age + 5;</span></span><br><span class="line">age -= <span class="number">5</span>;  <span class="comment">// 相当于 age = age - 5;</span></span><br><span class="line">age *= <span class="number">10</span>; <span class="comment">// 相当于 age = age * 10;</span></span><br></pre></td></tr></table></figure>

<br />

<h3 id="5-7-运算符优先级"><a href="#5-7-运算符优先级" class="headerlink" title="5.7 运算符优先级"></a>5.7 运算符优先级</h3><table>
<thead>
<tr>
<th>优先级</th>
<th>运算符</th>
<th>顺序</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>小括号</td>
<td>()</td>
</tr>
<tr>
<td>2</td>
<td>一元运算符：递加，递减，非</td>
<td>++、 – 、!</td>
</tr>
<tr>
<td>3</td>
<td>算术运算符</td>
<td>先* / %, 后 + -</td>
</tr>
<tr>
<td>4</td>
<td>关系运算符</td>
<td>&gt;、 &gt;=、 &lt; 、&lt;=</td>
</tr>
<tr>
<td>5</td>
<td>相等运算符</td>
<td>==、 != 、===、 !==</td>
</tr>
<tr>
<td>6</td>
<td>逻辑运算符</td>
<td>先&amp;&amp; , 后 ||</td>
</tr>
<tr>
<td>7</td>
<td>赋值运算符</td>
<td>=</td>
</tr>
<tr>
<td>8</td>
<td>逗号运算符</td>
<td>,</td>
</tr>
</tbody></table>
<ul>
<li>一元运算符里面的逻辑非优先级很高</li>
<li>逻辑与比逻辑或优先级高</li>
</ul>
<p>2.逗号是什么运算符？？？？怎么运算的？</p>
<p>2.1 逗号运算符，它将先计算左边的参数，再计算右边的参数值。然后返回最右边参数的值。</p>
<p>2.2 例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CommaTest</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a++, b++, <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> c = CommaTest();</span><br><span class="line"> </span><br><span class="line">alert(a); <span class="comment">// 返回11</span></span><br><span class="line">alert(b); <span class="comment">// 返回21</span></span><br><span class="line">alert(c); <span class="comment">// 返回10</span></span><br></pre></td></tr></table></figure>

<ul>
<li>变量c的值是函数CommaTest返回的值。而a和b多加1了，但不是函数返回的值。</li>
<li>来源：<a href="https://www.cnblogs.com/taohuaya/p/10955117.html；">https://www.cnblogs.com/taohuaya/p/10955117.html；</a></li>
</ul>
<p>3.练习：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="number">4</span> &gt;= <span class="number">6</span> || <span class="string">&#x27;人&#x27;</span> != <span class="string">&#x27;阿凡达&#x27;</span> &amp;&amp; !(<span class="number">12</span> * <span class="number">2</span> == <span class="number">144</span>) &amp;&amp; <span class="literal">true</span>) <span class="comment">//true</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">5</span> == num / <span class="number">2</span> &amp;&amp; (<span class="number">2</span> + <span class="number">2</span> * num).toString() === <span class="string">&#x27;22&#x27;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>3.1 第一个：<code>console.log( 4 &gt;= 6 || &#39;人&#39; != &#39;阿凡达&#39; &amp;&amp; !(12 * 2 == 144) &amp;&amp; true)</code></p>
<ul>
<li>1.你以为是去找括号？不是，这里是判断真假，不是数学运算，找出结构</li>
<li>2.找到结构：||,&amp;&amp;。有一个逻辑或，两个逻辑与；</li>
<li>3.==先算逻辑与==</li>
<li>3.1 第一个逻辑与：<code>&#39;人&#39; != &#39;阿凡达&#39; &amp;&amp; !(12 * 2 == 144)</code></li>
<li>3.2 true &amp;&amp; true = true</li>
<li>3.3 第二个逻辑与：<code>!(12 * 2 == 144) &amp;&amp; true</code><ul>
<li>也许，会纠结：是计算<code>!(12 * 2 == 144) &amp;&amp; true</code>，还是计算<code>前面逻辑与的结果 &amp;&amp; true</code></li>
<li>视频里面是计算<code>!(12 * 2 == 144) &amp;&amp; true</code></li>
<li>两边都是true，结果为true；</li>
</ul>
</li>
<li>3.4 逻辑与计算完了，计算逻辑或</li>
<li><code>4 &gt;= 6 ||true</code>，虽然左边是false，但右边是true。所以还是true；</li>
<li>4.结果为：true；</li>
</ul>
<p>4.练习2：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span> &gt; <span class="number">5</span> &amp;&amp; <span class="number">2</span> &lt; <span class="number">7</span> &amp;&amp; <span class="number">3</span> == <span class="number">4</span>; <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(a);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">3</span> &lt;= <span class="number">4</span> || <span class="number">3</span> &gt; <span class="number">1</span> || <span class="number">3</span> != <span class="number">2</span>; <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(b); </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">2</span> === <span class="string">&quot;2&quot;</span>; <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(c);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = !c || b &amp;&amp; a ; <span class="comment">// ture</span></span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="6-JS流程控制-分支"><a href="#6-JS流程控制-分支" class="headerlink" title="6. JS流程控制-分支"></a>6. JS流程控制-分支</h2><p>1.目标：</p>
<ul>
<li>能够使用 if 分支语句</li>
<li>能够使用 switch 分支语句</li>
<li>能够使用三元表达式</li>
</ul>
<h3 id="6-1-流程控制"><a href="#6-1-流程控制" class="headerlink" title="6.1 流程控制"></a>6.1 流程控制</h3><p>1.在一个程序执行的过程中，各条代码的执行顺序对程序的结果是有直接影响的。很多时候我们要通过控制代码的执行顺序来实现我们要完成的功能。</p>
<p>2.简单理解： 流程控制就是来控制我们的代码按照什么结构顺序来执行</p>
<p>3.流程控制主要有三种结构，分别是<strong>顺序结构</strong>、<strong>分支结构</strong>和<strong>循环结构</strong>，这三种结构代表三种代码执行的顺序。</p>
<p><img src="../../img/25/20.png" alt="20"></p>
<br />

<h3 id="6-2-顺序流程控制"><a href="#6-2-顺序流程控制" class="headerlink" title="6.2 顺序流程控制"></a>6.2 顺序流程控制</h3><p>1.顺序结构是程序中最简单、最基本的流程控制，它没有特定的语法结构，程序会按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。</p>
<hr>
<h3 id="6-3-分支流程控制"><a href="#6-3-分支流程控制" class="headerlink" title="6.3 分支流程控制"></a>6.3 分支流程控制</h3><p>1.分支结构：由上到下执行代码的过程中，根据不同的条件，执行不同的路径代码（执行代码多选一的过程），从而得到不同的结果</p>
<p>2.JS 语言提供了两种分支结构语句</p>
<ul>
<li>if 语句</li>
<li>switch 语句</li>
</ul>
<h4 id="6-3-1-if语句"><a href="#6-3-1-if语句" class="headerlink" title="6.3.1 if语句"></a>6.3.1 if语句</h4><h5 id="1-语法结构"><a href="#1-语法结构" class="headerlink" title="1. 语法结构"></a>1. 语法结构</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 条件成立执行代码，否则什么也不做</span></span><br><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">// 条件成立执行的代码语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>语句可以理解为一个行为，循环语句和分支语句就是典型的语句。一个程序由很多个语句组成，一般情况下，会分割成一个一个的语句。</p>
<h5 id="2-执行流程"><a href="#2-执行流程" class="headerlink" title="2. 执行流程"></a>2. 执行流程</h5><p><img src="http://bucket-c70.test.upcdn.net/25/21.png" alt="21"></p>
<br />

<h5 id="3-案例"><a href="#3-案例" class="headerlink" title="3. 案例"></a>3. 案例</h5><p>1.弹出一个输入框，要求用户输入年龄，如果年龄大于等于 18 岁，允许进网吧。</p>
<p>2.分析：</p>
<ul>
<li>弹出 prompt 输入框，用户输入年龄， 程序把这个值取过来保存到变量中</li>
<li>使用 if 语句来判断年龄，如果年龄大于18 就执行 if 大括号里面的输出语句</li>
</ul>
<p>3.代码，自：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ages = prompt(<span class="string">&#x27;请输入你的年龄&#x27;</span>);</span></span><br><span class="line">        if (ages &gt;= 18)&#123;</span><br><span class="line"><span class="javascript">            alert(<span class="string">&#x27;欢迎来到虚拟世界&#x27;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&#x27;抱歉，根据国家规定，暂时不能让贵客进入&#x27;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>资料：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> usrAge = prompt(<span class="string">&#x27;请输入您的年龄：&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(usrAge &gt;= <span class="number">18</span>)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;您的年龄合法，欢迎来天际网吧享受学习的乐趣！&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br />

<hr>
<h4 id="6-3-2-if-else语句"><a href="#6-3-2-if-else语句" class="headerlink" title="6.3.2 if else语句"></a>6.3.2 if else语句</h4><p>1.双分支语句</p>
<h5 id="1-语法结构-1"><a href="#1-语法结构-1" class="headerlink" title="1. 语法结构"></a>1. 语法结构</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 条件成立  执行 if 里面代码，否则执行else 里面的代码</span></span><br><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">// [如果] 条件成立执行的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// [否则] 执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br />

<h5 id="2-执行过程-1"><a href="#2-执行过程-1" class="headerlink" title="2. 执行过程"></a>2. 执行过程</h5><p><img src="http://bucket-c70.test.upcdn.net/25/22.png" alt="22"></p>
<br />

<h5 id="3-案例-判断闰年"><a href="#3-案例-判断闰年" class="headerlink" title="3. 案例-判断闰年"></a>3. 案例-判断闰年</h5><p>1.接收用户输入的年份，如果是闰年就弹出闰年，否则弹出是平年</p>
<p>2.分析：</p>
<ul>
<li>算法：能被4整除,且,不能被100整除的为闰年（如2004年就是闰年，1901年不是闰年）或者能够被 400 整除的就是闰年</li>
<li>弹出prompt 输入框，让用户输入年份，把这个值取过来保存到变量中</li>
<li>使用 if 语句来判断是否是闰年，如果是闰年，就执行 if 大括号里面的输出语句，否则就执行 else里面的输出语句</li>
<li>一定要注意里面的且 &amp;&amp;  还有或者 || 的写法，同时注意判断整除的方法是取余为 0</li>
</ul>
<p>3.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">   alert(<span class="string">&quot;这个年份是闰年&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 剩下的是平年</span></span><br><span class="line">   alert(<span class="string">&quot;这个年份是平年&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> year1 = prompt(<span class="string">&#x27;请输入年份&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> year2 = year1 % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year1 % <span class="number">100</span> != <span class="number">0</span> || year1 % <span class="number">400</span> == <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (year2) &#123;</span><br><span class="line">      alert(<span class="string">&#x27;这是闰年&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">&#x27;这是平年&#x27;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>3.1 与的运算级比或高，估计是把与先当做一个整体，然后再算或；</p>
<p><img src="http://bucket-c70.test.upcdn.net/25/43.png" alt="43"></p>
<br />

<h4 id="6-3-3-if-else-if"><a href="#6-3-3-if-else-if" class="headerlink" title="6.3.3 if+else if"></a>6.3.3 if+else if</h4><h5 id="1-语法结构-2"><a href="#1-语法结构-2" class="headerlink" title="1. 语法结构"></a>1. 语法结构</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 适合于检查多重条件。</span></span><br><span class="line"><span class="keyword">if</span> (条件表达式<span class="number">1</span>) &#123;</span><br><span class="line">    语句<span class="number">1</span>；</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">2</span>)  &#123;</span><br><span class="line">    语句<span class="number">2</span>；</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">3</span>)  &#123;</span><br><span class="line">   语句<span class="number">3</span>；</span><br><span class="line"> ....</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 上述条件都不成立执行此处代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br />

<h5 id="2-执行过程-2"><a href="#2-执行过程-2" class="headerlink" title="2. 执行过程"></a>2. 执行过程</h5><img src="http://bucket-c70.test.upcdn.net/25/23.png" alt="23" style="zoom:80%;" />

<br />

<h5 id="3-案例："><a href="#3-案例：" class="headerlink" title="3. 案例："></a>3. 案例：</h5><p>1.案例： 判断成绩级别</p>
<p>2.要求：</p>
<p>要求：接收用户输入的分数，根据分数输出对应的等级字母 A、B、C、D、E。<br>其中：<br>1.90分(含)以上 ，输出：A</p>
<p>2.80分(含)~ 90 分(不含)，输出：B</p>
<p>3.70分(含)~ 80 分(不含)，输出：C</p>
<p>4.60分(含)~ 70 分(不含)，输出：D</p>
<p>5.60分(不含) 以下，输出： E</p>
<p>3.分析：</p>
<ul>
<li>按照从大到小判断的思路</li>
<li>弹出prompt输入框，让用户输入分数，把这个值取过来保存到变量中</li>
<li>使用多分支 if else if 语句来分别判断输出不同的值</li>
</ul>
<p>4.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> score = prompt(<span class="string">&#x27;请您输入分数:&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">alert(<span class="string">&#x27;宝贝，你是我的骄傲&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">alert(<span class="string">&#x27;宝贝，你已经很出色了&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">alert(<span class="string">&#x27;你要继续加油喽&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">alert(<span class="string">&#x27;孩子，你很危险&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">alert(<span class="string">&#x27;熊孩子，我不想和你说话，我只想用鞭子和你说话&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> chengJi = prompt(<span class="string">&#x27;请输入成绩分数&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (chengJi &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">            alert(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (chengJi &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">            alert(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (chengJi &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">            alert(<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (chengJi &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">            alert(<span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>5.问题：为什么这么写，80分一下都是B？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> chengJi = prompt(<span class="string">&#x27;请输入成绩分数&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (chengJi &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">            alert(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">80</span> &lt;= chengJi &lt; <span class="number">90</span>) &#123;</span><br><span class="line">            alert(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">70</span> &lt;= chengJi &lt; <span class="number">80</span>) &#123;</span><br><span class="line">            alert(<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">60</span> &lt;= chengJi &lt; <span class="number">70</span>) &#123;</span><br><span class="line">            alert(<span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>5.1 根据实验，这样的写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">80</span> &lt;= chengJi &lt; <span class="number">90</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>先算：80 &lt;= chengJi，返回true or false，true变成1，false变成0。再与 &lt; 90 计算；</p>
</li>
<li><p>记住，是 80小于等于chengJi，不是chengJi &gt;= 80。不要搞反了</p>
<p>如果搞反：假设cj是85，那么80 &lt;= chengJi 返回 true , chengJi &gt;= 80也是true；….emmm</p>
<p>好吧，还是结果一样，意义不一样；2020-9-24 00:52:42</p>
</li>
</ul>
</li>
<li><p>5.2 如何能写这样的，区间模样的呢？</p>
<ul>
<li>用逻辑运算符：chengJi &gt;= 80 &amp;&amp; chengJi &lt; 90；</li>
<li>即使：80 &lt;= chengJi &amp;&amp; chengJi &lt; 90，结果一样。但意义不一样：chengJi &gt;= 80，是chengJi与80做比较。而80 &lt;= chengJi，是80与chengJi做比较；</li>
</ul>
</li>
</ul>
<hr>
<h4 id="6-3-4-switch"><a href="#6-3-4-switch" class="headerlink" title="6.3.4 switch"></a>6.3.4 switch</h4><p>分支流程控制 switch 语句</p>
<h5 id="1-语法结构-3"><a href="#1-语法结构-3" class="headerlink" title="1 语法结构"></a>1 语法结构</h5><p>1.<a href="https://fanyi.baidu.com/translate?aldtype=16047&query=switch&keyfrom=baidu&smartresult=dict&lang=auto2zh#en/zh/switch">switch</a> 语句也是多分支语句，它用于基于不同的条件来执行不同的代码。当要针对变量设置一系列的特定值的选项时，就可以使用 switch。</p>
<p>2.有固定的值，就适合用switch。区间值：大于，小于等等，适合用if else if 它们；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>( 表达式 )&#123; </span><br><span class="line">    <span class="keyword">case</span> value1:</span><br><span class="line">        <span class="comment">// 表达式 等于 value1 时要执行的代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value2:</span><br><span class="line">        <span class="comment">// 表达式 等于 value2 时要执行的代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 表达式 不等于任何一个 value 时要执行的代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子：</span></span><br><span class="line"><span class="keyword">switch</span> (<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;这是1&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;这是2&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;这是3&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;没有匹配结果&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>switch ：开关 转换  ， <a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/case">case</a> ：小例子   选项</li>
<li>关键字 switch 后面括号内可以是表达式或值， 通常是一个变量</li>
<li>关键字 case , 后跟一个选项的表达式或值，后面跟一个冒号</li>
<li>switch[^4] 表达式的值会与结构中的 case 的值做比较 </li>
<li>如果存在==匹配全等==(===) ，则与该 case 关联的代码块会被执行，并在遇到 break 时停止，整个 switch 语句代码执行结束</li>
<li>如果所有的 case 的值都和表达式的值不匹配，则执行 default[^3] 里的代码</li>
</ul>
<h5 id="2-注意事项"><a href="#2-注意事项" class="headerlink" title="2 注意事项"></a>2 注意事项</h5><p>1.我们在开发里面，表达式经常写成变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num =<span class="number">3</span>;</span><br><span class="line"><span class="keyword">switch</span>(num) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.num与case里的值，是全等关系。值和数据类型都一样才行；</p>
<p>3.break：如果当前的case里面没有break，则不会退出switch，是继续执行下一个case；</p>
<h5 id="3-案例-1"><a href="#3-案例-1" class="headerlink" title="3 案例"></a>3 案例</h5><p>1.查询水果：用户在弹出框里面输入一个水果，如果有就弹出该水果的价格， 如果没有该水果就弹出“没有此水果”。</p>
<p>2.案例分析：</p>
<ul>
<li>弹出 prompt 输入框，让用户输入水果名称，把这个值取过来保存到变量中。</li>
<li>将这个变量作为 switch 括号里面的表达式。</li>
<li>case 后面的值写几个不同的水果名称，注意一定要加引号 ，因为必须是全等匹配。</li>
<li>弹出不同价格即可。同样注意每个 case 之后加上 break ，以便退出 switch 语句。</li>
<li>将 default 设置为没有此水果。</li>
</ul>
<p>3.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fruit = prompt(<span class="string">&#x27;请您输入查询的水果:&#x27;</span>);</span><br><span class="line"><span class="keyword">switch</span> (fruit) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;苹果&#x27;</span>:</span><br><span class="line">alert(<span class="string">&#x27;苹果的价格是 3.5/斤&#x27;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;榴莲&#x27;</span>:</span><br><span class="line">alert(<span class="string">&#x27;榴莲的价格是 35/斤&#x27;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">alert(<span class="string">&#x27;没有此水果&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> shuiGuo = prompt(<span class="string">&#x27;请输入要查价格的水果名称&#x27;</span>);</span><br><span class="line"><span class="keyword">switch</span>(shuiGuo)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;pingGuo&#x27;</span>:</span><br><span class="line">    alert(<span class="string">&#x27;苹果1元/斤&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;liZi&#x27;</span>:alert(<span class="string">&#x27;梨子2元/斤&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    alert(<span class="string">&#x27;目前暂时没有收录此水果信息&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br />

<h4 id="6-3-5-区别"><a href="#6-3-5-区别" class="headerlink" title="6.3.5 区别"></a>6.3.5 区别</h4><p>1.switch 语句和 if else if 语句的区别</p>
<p>2.一般情况下，它们两个语句可以相互替换</p>
<ul>
<li><p>switch…case 语句通常处理 case为比较确定值的情况， 而 if…else…语句更加灵活，常用于范围判断(大于、等于某个范围)</p>
</li>
<li><p>switch 语句进行条件判断后==直接执行==到程序的条件语句，效率更高。而if…else 语句有几种条件，就得判断多少次。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> shuiGuo = prompt(<span class="string">&#x27;请输入要查价格的水果名称&#x27;</span>);</span><br><span class="line"><span class="keyword">switch</span>(shuiGuo)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;pingGuo&#x27;</span>:</span><br><span class="line">    alert(<span class="string">&#x27;苹果1元/斤&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;liZi&#x27;</span>:alert(<span class="string">&#x27;梨子2元/斤&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    alert(<span class="string">&#x27;目前暂时没有收录此水果信息&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果输入’liZi’，直接跳到第二个case。解释器不会去解释其他case；if else 得一条条解释看满足条件没；</li>
</ul>
</li>
<li><p>当分支比较少时，if… else语句的执行效率比 switch语句高。</p>
</li>
<li><p>当分支比较多时，switch语句的执行效率比较高，而且结构更清晰。 </p>
</li>
</ul>
<hr>
<h3 id="6-4-三元表达式"><a href="#6-4-三元表达式" class="headerlink" title="6.4 三元表达式"></a>6.4 三元表达式</h3><p>1.三元表达式也能做一些简单的条件选择。 由三元运算符组成的式子称为三元表达式</p>
<p>2.语法结构：</p>
<p>表达式1 ? 表达式2 : 表达式3;</p>
<p>3.执行思路 </p>
<ul>
<li>如果表达式1为 true ，则返回表达式2的值，如果表达式1为 false，则返回表达式3的值</li>
<li>简单理解： 就类似于  if  else （双分支） 的简写</li>
</ul>
<p>4.案例 - 数字补0：</p>
<p>用户输入数字，如果数字小于10，则在前面补 0 ，比如01，09 ，如果数字大于10，则不需要补，比如 20。</p>
<p>5.案例分析：</p>
<ul>
<li>用户输入0~59之间的一个数字</li>
<li>如果数字小于10，则在这个数字前面补0,（加0） 否则  不做操作</li>
<li>用一个变量接受这个返回值，输出</li>
</ul>
<p>6.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = prompt(<span class="string">&#x27;请您输入一个 0 ~ 59 之间的一个数字&#x27;</span>);</span><br><span class="line"><span class="comment">// 三元表达式 表达式 ？ 表达式1 ：表达式2 </span></span><br><span class="line"><span class="keyword">var</span> result = time &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + time : time; <span class="comment">// 把返回值赋值给一个变量</span></span><br><span class="line">alert(result);</span><br></pre></td></tr></table></figure>

<p>自：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(prompt(<span class="string">&#x27;请输入数字&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> jieGuo = num1 &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + num1 : num1;</span><br><span class="line"><span class="keyword">if</span> ( <span class="number">0</span>&lt;num1 &amp;&amp; num1 &lt; <span class="number">60</span>) &#123;</span><br><span class="line">    alert(jieGuo);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">&#x27;请输入0~59的数字&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br />

<hr>
<h2 id="7-js流程控制-循环"><a href="#7-js流程控制-循环" class="headerlink" title="7. js流程控制-循环"></a>7. js流程控制-循环</h2><h3 id="7-1-循环"><a href="#7-1-循环" class="headerlink" title="7.1 循环"></a>7.1 循环</h3><p>1.循环目的：在实际问题中，有许多<strong>具有规律性的重复操作</strong>，因此在程序中要完成这类操作就需要重复执行某些语句</p>
<p>2.JS 中的循环，在Js 中，主要有三种类型的循环语句：</p>
<ul>
<li>for 循环</li>
<li>while 循环</li>
<li>do…while 循环</li>
</ul>
<h3 id="7-2-for循环"><a href="#7-2-for循环" class="headerlink" title="7.2 for循环"></a>7.2 for循环</h3><p>在程序中，一组被重复执行的语句被称之为==循环体==，能否继续重复执行，取决于循环的==终止条件==。由循环体及循环的终止条件组成的语句，被称之为==循环语句==</p>
<h4 id="7-2-2-语法结构"><a href="#7-2-2-语法结构" class="headerlink" title="7.2.2 语法结构"></a>7.2.2 语法结构</h4><p>for 循环主要用于把某些代码循环若干次，通常跟计数有关系。其语法结构如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化变量; 条件表达式; 操作表达式 )&#123;</span><br><span class="line">    <span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>初始化变量：通常被用于初始化一个计数器，该表达式可以使用 var 关键字声明新的变量，这个变量帮我们来记录次数。</li>
<li>条件表达式：用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。</li>
<li>操作表达式：每次循环的最后都要执行的表达式。通常被用于更新或者递增计数器变量。当然，递减变量也是可以的。</li>
</ul>
<h5 id="2-执行过程-3"><a href="#2-执行过程-3" class="headerlink" title="2.执行过程"></a>2.执行过程</h5><p>1.初始化变量，初始化操作在整个 for 循环只会执行一次。<br>2.执行条件表达式，如果为true，则执行循环体语句，否则退出循环，循环结束。<br>3.执行操作表达式，此时第一轮结束。<br>4.第二轮开始，直接去执行条件表达式（不再初始化变量），如果为 true ，则去执行循环体语句，否则退出循环。</p>
<p>5.继续执行操作表达式，第二轮结束。</p>
<p>6.后续跟第二轮一致，直至条件表达式为假，结束整个 for 循环。</p>
<hr>
<h4 id="7-2-3-循环相同"><a href="#7-2-3-循环相同" class="headerlink" title="7.2.3 循环相同"></a>7.2.3 循环相同</h4><p>1.for循环可以重复相同的代码 ，比如我们要输出10句“二次元萝莉真的好”。</p>
<p>2.基本写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  基本写法</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;二次元萝莉真的好~&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.获取用户输入，决定输入次数；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户输入次数</span></span><br><span class="line"><span class="keyword">var</span> num = prompt(<span class="string">&#x27;请输入次数:&#x27;</span>)；</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">1</span> ; i &lt;= num; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;二次元萝莉真的好~&#x27;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>3.1 自写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( num1 != <span class="literal">NaN</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">1</span>; i&lt;=num1; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;先把一天的任务完成，再玩；&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">&#x27;请输入数字型数据&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>1.就算输入了非数字型，也不会运行else的代码；</li>
<li>2.我进行了调试，在运行到<code>i&lt;=num1</code>这一步时，马上跳到了第七行的下面</li>
<li>3.如果上下换一下怎样？</li>
</ul>
<p>3.2 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( num1 === <span class="literal">NaN</span>) &#123;</span><br><span class="line">    alert(<span class="string">&#x27;请输入数字型数据&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">1</span>; i&lt;=num1; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;先把一天的任务完成，再玩；&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>1.==也不行==，这…这如何是好？只能放弃做这样的效果了；2020-9-26 03:15:40</li>
</ul>
<br />

<h4 id="7-2-4-循环不同"><a href="#7-2-4-循环不同" class="headerlink" title="7.2.4 循环不同"></a>7.2.4 循环不同</h4><p>1.for 循环还可以重复不同的代码，这主要是因为使用了计数器 ，计数器在每次循环过程中都会有变化。例如，求输出一个人1到100岁：</p>
<p>2.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  基本写法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;这个人今年&#x27;</span> + i + <span class="string">&#x27;岁了&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// for 里面是可以添加其他语句的 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line"> <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;这个人今年1岁了&#x27;</span>);</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;这个人今年100岁了&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;这个人今年&#x27;</span> + i + <span class="string">&#x27;岁了&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br />

<hr>
<h4 id="7-2-5-运算"><a href="#7-2-5-运算" class="headerlink" title="7.2.5 运算"></a>7.2.5 运算</h4><p>1.for 循环因为有了计数器的存在，我们还可以重复的执行某些操作，比如做一些算术运算。 </p>
<p>2.案例：求1-100之间所有整数的累加和</p>
<p>2.1 分析：</p>
<p>需要循环100次，我们需要一个计数器  i<br>我们需要一个存储结果的变量 sum ，但是初始值一定是 0<br>核心算法：1 + 2 + 3 + 4 ….+100   ，sum  =  sum + i;</p>
<p>3.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">        sumNum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1-100之间整数的和 = &#x27;</span> + sum);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>3.1 嗯？for里面是sumNum?这样行么？复制代码试试；</p>
</li>
<li><p>果然报错：</p>
<p><img src="http://bucket-c70.test.upcdn.net/25/25.png" alt="25"></p>
</li>
</ul>
<p>自：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">1</span>; i&lt;=<span class="number">100</span> ; i++) &#123;</span><br><span class="line">    sum1 = sum1+i;</span><br><span class="line">&#125;</span><br><span class="line">alert(sum1);</span><br></pre></td></tr></table></figure>

<p>4.练习：</p>
<p>求1-100之间所有数的平均值<br>求1-100之间所有偶数的和，和，所有奇数的和<br>求1-100之间所有能被3整除的数字的和</p>
<p>4.1 代码–自：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>( i = <span class="number">1</span>; i&lt;=<span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(sum%<span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        sum = sum + i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="string">&#x27;1~100偶数和：&#x27;</span> + sum); </span><br><span class="line"><span class="comment">// 奇数：</span></span><br><span class="line">sum%<span class="number">2</span> != <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 被3整除：</span></span><br><span class="line">sum%<span class="number">3</span> == <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<br />

<p>5.练习2：要求用户输入班级人数，之后依次输入每个学生的成绩，最后打印出该班级总的成绩以及平均成绩。</p>
<p>5.1 分析：</p>
<p>弹出输入框输入总的班级人数 ( num )<br>依次输入学生的成绩（保存起来 score），此时我们需要用到 for 循环，弹出的次数跟班级总人数有关系   条件表达式  i &lt;= num<br>进行业务处理:  计算成绩。 先求总成绩（sum），之后求平均成绩（average）<br>弹出结果</p>
<p>5.2 代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = prompt(<span class="string">&#x27;请输入班级总的人数:&#x27;</span>); <span class="comment">// num 班级总的人数</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>; <span class="comment">// 总成绩</span></span><br><span class="line"><span class="keyword">var</span> average = <span class="number">0</span>; <span class="comment">// 平均成绩</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">     <span class="keyword">var</span> score = prompt(<span class="string">&#x27;请输入第&#x27;</span> + i + <span class="string">&#x27;个学生的成绩&#x27;</span>);</span><br><span class="line">     sum = sum + <span class="built_in">parseFloat</span>(score);         </span><br><span class="line">&#125;</span><br><span class="line">average = sum / num;</span><br><span class="line">alert(<span class="string">&#x27;班级总的成绩是：&#x27;</span> + sum);</span><br><span class="line">alert(<span class="string">&#x27;班级总的平均成绩是：&#x27;</span> + average);</span><br></pre></td></tr></table></figure>

<br />

<ul>
<li>要是没写前面的<code>var sum = 0; // 总成绩
var average = 0; // 平均成绩</code></li>
<li>就会报错：NaN；2021-3-26 17:28:43</li>
</ul>
<hr>
<h3 id="7-3-双重for循环"><a href="#7-3-双重for循环" class="headerlink" title="7.3 双重for循环"></a>7.3 双重for循环</h3><h4 id="7-3-1-概述"><a href="#7-3-1-概述" class="headerlink" title="7.3.1 概述"></a>7.3.1 概述</h4><p>1.很多情况下，单层 for 循环并不能满足我们的需求，比如我们要打印一个 5 行 5 列的图形、打印一个倒<br>直角三角形等，此时就可以通过循环嵌套来实现。</p>
<p><img src="http://bucket-c70.test.upcdn.net/25/26.png" alt="26"></p>
<p>2.循环嵌套是指在一个循环语句中再定义一个循环语句的语法结构，例如在for循环语句中，可以再嵌套一个for 循环，这样的 for 循环语句我们称之为<strong>双重for循环</strong>。</p>
<h4 id="7-3-2-语法"><a href="#7-3-2-语法" class="headerlink" title="7.3.2 语法"></a>7.3.2 语法</h4><p>1.结构：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (外循环的初始; 外循环的条件; 外循环的操作表达式) &#123;</span><br><span class="line">    <span class="keyword">for</span> (内循环的初始; 内循环的条件; 内循环的操作表达式) &#123;  </span><br><span class="line">       需执行的代码;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内层循环可以看做外层循环的语句<br>内层循环执行的顺序也要遵循 for 循环的执行顺序<br>外层循环执行一次，内层循环要执行全部次数</p>
<h4 id="7-3-3-案例"><a href="#7-3-3-案例" class="headerlink" title="7.3.3 案例"></a>7.3.3 案例</h4><h5 id="1-五行五列星星"><a href="#1-五行五列星星" class="headerlink" title="1. 五行五列星星"></a>1. 五行五列星星</h5><p>1.核心： </p>
<ul>
<li>内层循环负责一行打印五个星星</li>
<li>外层循环负责打印五行</li>
</ul>
<p>2.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> star = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">      star += <span class="string">&#x27;☆&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每次满 5个星星 就 加一次换行</span></span><br><span class="line">    star += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(star);</span><br><span class="line"><span class="comment">//自：5行6列</span></span><br><span class="line"><span class="keyword">var</span> star = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">        star += <span class="string">&#x27;☆&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    star = star + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(star);</span><br></pre></td></tr></table></figure>

<h5 id="2-n-行-n-列的星星"><a href="#2-n-行-n-列的星星" class="headerlink" title="2. n 行 n 列的星星"></a>2. n 行 n 列的星星</h5><p>3.案例2：打印 n 行 n 列的星星</p>
<p>要求用户输入行数和列数，之后在控制台打印出用户输入行数和列数的星星。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> row = prompt(<span class="string">&#x27;请输入您打印几行星星:&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> col = prompt(<span class="string">&#x27;请输入您打印几列星星:&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= row; i++) &#123;</span><br><span class="line">   <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= col; j++) &#123;</span><br><span class="line">       str += <span class="string">&#x27;☆&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   str += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure>

<h5 id="3-倒三角形星星"><a href="#3-倒三角形星星" class="headerlink" title="3.倒三角形星星"></a>3.倒三角形星星</h5><p>4.案例3：打印倒三角形</p>
<img src="http://bucket-c70.test.upcdn.net/25/27.png" alt="27" style="zoom:80%;" />

<p>4.1 分析：</p>
<p>一共有10行，但是每行的星星个数不一样，因此需要用到双重 for 循环<br>外层的 for 控制行数 i ，循环10次可以打印10行<br>内层的 for 控制每行的星星个数 j<br>核心算法： 每一行星星的个数   j = i ;    j &lt;= 10;   j++<br>每行打印完毕后，都需要重新换一行 </p>
<p>4.2 代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打印倒三角形案例</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123; <span class="comment">// 外层循环控制行数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &lt;= <span class="number">10</span>; j++) &#123; <span class="comment">// 里层循环打印的个数不一样  j = i</span></span><br><span class="line">        str = str + <span class="string">&#x27;★&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure>

<ul>
<li>第一行，i是1，j从1开始++到10，第一行输出10个星星；</li>
<li>第二行：i是2，j从2开始++到10，第二行输出9个星星；</li>
</ul>
<p>4.3 重温的代码：随便打几行倒三角；2021-3-28 16:42:05</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> row = prompt(<span class="string">&#x27;打印几行？&#x27;</span>);</span><br><span class="line">        <span class="comment">// var col = prompt(&#x27;打印记列？&#x27;);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> start = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = i; j &lt;= row; j++) &#123;</span><br><span class="line">                start = start + <span class="string">&#x27;☆&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            start += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        alert(start);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h5 id="4-正三角形星星"><a href="#4-正三角形星星" class="headerlink" title="4.正三角形星星"></a>4.正三角形星星</h5><p>5.同理，打印正三角形</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> star = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">10</span>; j &gt;= <span class="number">1</span>; j--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = j; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        star += <span class="string">&#x27;☆&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    star = star + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(star);</span><br></pre></td></tr></table></figure>

<ul>
<li>5.1 既要输出10行，又要从第一行开始只打印1个。那么能让i从10开始就好了；</li>
<li>5.2 让j–，倒起来循环10次；</li>
</ul>
<p>5.3 重温时的思考:</p>
<ul>
<li><p>自己的思考：</p>
<p>(1) i– 吗？行数，i++ ，i --都无所谓；</p>
<p>(2) 主要是里面的列，正三角，那么列得从1慢慢加；</p>
<p>（3）怎么弄呢？行正好也是从1慢慢加的，列能跟着行走吗？能</p>
<p>（4）j=1，j&lt;=i，不就跟着行走了；第一行，j循环一次；第二行j循环2次；</p>
<p>（5）可行！</p>
</li>
<li><p>代码：2021-3-28 16:48:42</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> row = prompt(<span class="string">&#x27;打印几行？&#x27;</span>);</span><br><span class="line">    <span class="comment">// var col = prompt(&#x27;打印记列？&#x27;);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> start = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            start = start + <span class="string">&#x27;☆&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        start += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    alert(start);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h5 id="5-99乘法表"><a href="#5-99乘法表" class="headerlink" title="5. 99乘法表"></a>5. 99乘法表</h5><p>一共有9行，但是每行的个数不一样，因此需要用到双重 for 循环<br>外层的 for 循环控制行数 i ，循环9次 ，可以打印 9 行<br>内层的 for 循环控制每行公式  j<br>核心算法：每一行 公式的个数正好和行数一致， j &lt;= i;<br>每行打印完毕，都需要重新换一行<br>把公式用 i 和 j 替换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123; <span class="comment">//  外层for控制 行数  9行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123; <span class="comment">// j 控制列数    列数和行数是一样的  j &lt;= i  </span></span><br><span class="line">        str += j + <span class="string">&quot; × &quot;</span> + i + <span class="string">&quot; = &quot;</span> + i * j + <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>5.1 因为第一行是1x1，那么在上面，用的i–方法就不行。咋办呢？</p>
</li>
<li><p>5.2 每一列的行，是一样，而第几行，恰好也是有几列。</p>
<ul>
<li>行继续是最外面的循环控制。</li>
<li>列去追行从1开始，这次控制-条件表达式：for(初始化变量; 条件表达式; 操作表达式 )</li>
<li>j&lt;=i</li>
</ul>
</li>
<li><p>5.3 列在前，行在后</p>
<p><img src="http://bucket-c70.test.upcdn.net/25/28.png" alt="28"></p>
</li>
<li><p>5.4 不要忘记写console.log()，唉脑壳晕了；2020-9-27 03:20:45</p>
</li>
</ul>
<br />

<p>5.1 重温：2021-4-1 16:27:11</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> i, j;</span><br><span class="line">    <span class="keyword">var</span> start = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            start += j + <span class="string">&#x27;x&#x27;</span> + i + <span class="string">&#x27;=&#x27;</span> + j * i + <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        start += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(start);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> i, j;</span><br><span class="line">    <span class="keyword">var</span> start = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">11</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            start += i + <span class="string">&#x27;x&#x27;</span> + j + <span class="string">&#x27;=&#x27;</span> + i * j + <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        start += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(start);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="7-4-for循环小节"><a href="#7-4-for循环小节" class="headerlink" title="7.4 for循环小节"></a>7.4 for循环小节</h3><p>for 循环可以重复执行某些相同代码<br>for 循环可以重复执行些许不同的代码，因为我们有计数器<br>for 循环可以重复执行某些操作，比如算术运算符加法操作<br>随着需求增加，双重for循环可以做更多、更好看的效果<br>双重 for 循环，外层循环一次，内层 for 循环全部执行<br>for 循环是循环条件和数字直接相关的循环<br>分析要比写代码更重要<br>一些核心算法想不到，但是要学会，分析它执行过程<br>举一反三，自己经常总结，做一些相似的案例</p>
<hr>
<h3 id="7-5-while-循环"><a href="#7-5-while-循环" class="headerlink" title="7.5 while 循环"></a>7.5 while 循环</h3><p>1.while 语句可以在条件表达式为真的前提下，循环执行指定的一段代码，直到表达式不为真时结束循环。<br>while语句的语法结构如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">// 循环体代码 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>执行思路：</strong></p>
<ul>
<li>先执行条件表达式，如果结果为 true，则执行循环体代码；如果为 false，则退出循环，执行后面代码</li>
<li>执行循环体代码</li>
<li>循环体代码执行完毕后，程序会继续判断执行条件表达式，如条件仍为true，则会继续执行循环体，直到循环条件为 false 时，整个循环过程才会结束</li>
</ul>
<p>1.2 注意：</p>
<p>使用 while 循环时一定要注意，它必须要有退出条件，否则会成为死循环</p>
<ul>
<li>如果没有写结果为false的条件，就没有退出条件，就会一直循环。当然，break也行；</li>
</ul>
<p>while 循环和 for 循环的不同之处在于 while 循环可以做较为复杂的条件判断，比如判断用户名和密码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. while 循环语法结构  while 当...的时候</span></span><br><span class="line"><span class="comment">// while (条件表达式) &#123;</span></span><br><span class="line"><span class="comment">//     // 循环体</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 2. 执行思路  当条件表达式结果为true 则执行循环体 否则 退出循环</span></span><br><span class="line"><span class="comment">// 3. 代码验证</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (num &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;好啊有&#x27;</span>);</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4. 里面应该也有计数器 初始化变量</span></span><br><span class="line"><span class="comment">// 5. 里面应该也有操作表达式  完成计数器的更新 防止死循环</span></span><br></pre></td></tr></table></figure>



<p>2.案例：</p>
<ul>
<li>打印人的一生，从1岁到100岁</li>
<li>计算 1 ~ 100 之间所有整数的和</li>
</ul>
<p>2.1 代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// while循环案例</span></span><br><span class="line"><span class="comment">// 1. 打印人的一生，从1岁到100岁</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;这个人今年&#x27;</span> + i + <span class="string">&#x27;岁了&#x27;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 计算 1 ~ 100 之间所有整数的和</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    sum += j;</span><br><span class="line">    j++</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"><span class="comment">// 2.2 自：</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    j = j + i</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(j); </span><br></pre></td></tr></table></figure>

<p>3.案例2：弹出一个提示框， 你爱我吗？  如果输入我爱你，就提示结束，否则，一直询问。</p>
<p>3.1 分析：</p>
<p>弹出输入框，要求用户输入。<br>判断条件比较复杂我们使用 while 循环。<br>while 循环语句中的条件表达式只要输入的不是 我爱你，就一直循环。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 弹出一个提示框， 你爱我吗？  如果输入我爱你，就提示结束，否则，一直询问。</span></span><br><span class="line"><span class="keyword">var</span> message = prompt(<span class="string">&#x27;你爱我吗?&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span> (message !== <span class="string">&#x27;我爱你&#x27;</span>) &#123;</span><br><span class="line">    message = prompt(<span class="string">&#x27;你爱我吗?&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="string">&#x27;我也爱你啊！&#x27;</span>);</span><br></pre></td></tr></table></figure>

<br />

<h3 id="7-6-do-while-循环"><a href="#7-6-do-while-循环" class="headerlink" title="7.6 do while 循环"></a>7.6 do while 循环</h3><p>1.概述：</p>
<p>do… while 语句其实是 while 语句的一个变体。该循环会先执行一次代码块，然后对条件表达式进行判断，如果条件为真，就会重复执行循环体，否则退出循环。</p>
<p>2.do… while 语句的语法结构如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 循环体代码 - 条件表达式为 true 时重复执行循环体代码</span></span><br><span class="line">&#125; <span class="keyword">while</span>(条件表达式);</span><br></pre></td></tr></table></figure>

<p>3.执行思路：</p>
<p>先执行一次循环体代码<br>再执行条件表达式，如果结果为 true，则继续执行循环体代码，如果为 false，则退出循环，继续执行后面代码</p>
<p>4.<strong>注意</strong>：先再执行循环体，再判断，我们会发现 do…while 循环语句至少会执行一次循环体代码</p>
<p>5.案例：</p>
<p>打印人的一生，从1岁到100岁<br>计算 1 ~ 100 之间所有整数的和</p>
<ul>
<li>同样的要求，不同的写法；</li>
</ul>
<p>5.1 打印人的一生，从1岁到100岁</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自：</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;今年岁数：&#x27;</span> + i);</span><br><span class="line">    i++</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">100</span>);</span><br><span class="line"><span class="comment">// 1. 打印人的一生，从1岁到100岁</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;这个人今年&#x27;</span> + i + <span class="string">&#x27;岁了&#x27;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<p>5.2 计算 1 ~ 100 之间所有整数的和</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自:</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    j=j+i;</span><br><span class="line">    i++</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(j);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 计算 1 ~ 100 之间所有整数的和</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    sum += j;</span><br><span class="line">    j++;</span><br><span class="line">&#125; <span class="keyword">while</span> (j &lt;= <span class="number">100</span>) </span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure>

<p>6.练习2：弹出一个提示框， 你爱我吗？  如果输入我爱你，就提示结束，否则，一直询问。</p>
<p>6.1 分析：</p>
<p>弹出输入框，要求用户输入。<br>判断条件我们使用 do…while 循环。<br>do… while 循环语句中的条件表达式只要输入的不是我爱你，就一直循环。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> love = prompt(<span class="string">&#x27;你爱我吗？&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (love != <span class="string">&#x27;我爱你&#x27;</span>)</span><br><span class="line">alert(<span class="string">&#x27;登录成功&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>7.小结：</p>
<p>JS 中循环有 for 、while 、 do while<br>三个循环很多情况下都可以相互替代使用<br>如果是用来计次数，跟数字相关的，三者使用基本相同，但是我们更喜欢用 for<br>while 和 do…while 可以做更复杂的判断条件，比 for 循环灵活一些<br>while 和 do…while 执行顺序不一样，while 先判断后执行，do…while 先执行一次，再判断执行<br>while 和 do…while 执行次数不一样，do…while 至少会执行一次循环体， 而 while 可能一次也不执行<br>实际工作中，我们更常用for 循环语句，它写法更简洁直观， 所以这个要重点学习</p>
<hr>
<h3 id="7-7-continue和break"><a href="#7-7-continue和break" class="headerlink" title="7.7 continue和break"></a>7.7 continue和break</h3><h4 id="7-7-1-continue-关键字"><a href="#7-7-1-continue-关键字" class="headerlink" title="7.7.1 continue 关键字"></a>7.7.1 continue 关键字</h4><p>1.<a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/continue">continue</a> 关键字用于立即跳出本次循环，继续下一次循环（本次循环体中 continue 之后的代码就会少执行一次）。<br>例如，吃5个包子，第3个有虫子，就扔掉第3个，继续吃第4个第5个包子，其代码实现如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;这个包子有虫子，扔掉&#x27;</span>);</span><br><span class="line">        <span class="keyword">continue</span>; <span class="comment">// 跳出本次循环，跳出的是第3次循环 </span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;我正在吃第&#x27;</span> + i + <span class="string">&#x27;个包子呢&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>1.1 如果不加continue，就会执行if外面的那个console.log；</p>
<p><img src="http://bucket-c70.test.upcdn.net/25/29.png" alt="29"></p>
</li>
<li><p>1.2 加了后，就不执行了；</p>
<p><img src="http://bucket-c70.test.upcdn.net/25/30.png" alt="30"></p>
</li>
</ul>
<h4 id="7-7-2-break-关键字"><a href="#7-7-2-break-关键字" class="headerlink" title="7.7.2 break 关键字"></a>7.7.2 break 关键字</h4><p>1.<a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/break">break</a> 关键字用于立即跳出整个循环（循环结束）。<br>例如，吃5个包子，吃到第3个发现里面有半个虫子，其余的不吃了，其代码实现如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">   <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">// 直接退出整个for 循环，跳到整个for下面的语句</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;我正在吃第&#x27;</span> + i + <span class="string">&#x27;个包子呢&#x27;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>2.效果：</p>
<ul>
<li><p>2.1 循环到第三次，i==3时，响应<code>break</code>，跳出循环，下面的console也不会执行（第三次的）。</p>
<p><img src="http://bucket-c70.test.upcdn.net/25/31.png" alt="31"></p>
</li>
</ul>
<hr>
<h3 id="7-8-作业"><a href="#7-8-作业" class="headerlink" title="7.8 作业"></a>7.8 作业</h3><p>1.接收用户输入的用户名和密码，若用户名为 “admin” ,密码为 “123456” ,则提示用户登录成功!  否则，让用户一直输入。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user = prompt(<span class="string">&#x27;请输入用户名&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> password1 = prompt(<span class="string">&#x27;输入密码&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span> (user !== <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">    user = prompt(<span class="string">&#x27;请输入正确的用户名&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (password1 != <span class="number">123456</span>)&#123; <span class="comment">//如果这里用!==,那么会一直错，因为prompt里面是字符串数据类型。否则转换password1的类型</span></span><br><span class="line">    password1 = prompt(<span class="string">&#x27;请输入正确的密码&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;登录成功&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>2.求整数1～100的累加值，但要求跳过所有个位为3的数【用continue实现】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(j&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (j%<span class="number">10</span>==<span class="number">3</span>)&#123;</span><br><span class="line">        j++; <span class="comment">// 自己写的时候没加这句，浏览器连F12都按不出来，只好在vscode调试，发现会一直卡在i=3</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum2 = sum2 + j;</span><br><span class="line">    j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum2);</span><br></pre></td></tr></table></figure>

<p>方法2–for循环：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>;j&lt;=<span class="number">100</span>;j++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (j%<span class="number">10</span>==<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum1 = sum1 +j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum1);</span><br></pre></td></tr></table></figure>

<p>3.简易ATM</p>
<p>里面现存有  100 块钱。<br>如果存钱，就用输入钱数加上先存的钱数, 之后弹出显示余额提示框<br>如果取钱，就减去取的钱数，之后弹出显示余额提示框<br>如果显示余额，就输出余额<br>如果退出，弹出退出信息提示框</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自</span></span><br><span class="line"><span class="keyword">var</span> yuE = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> shuRu = prompt(<span class="string">&#x27;请输入你要的操作：\n1.存钱\n2.取钱\n3.显示余额\n4.退出&#x27;</span>);</span><br><span class="line">shuRu = <span class="built_in">parseFloat</span>(shuRu);</span><br><span class="line"><span class="keyword">if</span> (shuRu == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> shuRu1 = <span class="built_in">parseFloat</span>(prompt(<span class="string">&#x27;存多少？&#x27;</span>));</span><br><span class="line">    yuE1 = shuRu1 + yuE;</span><br><span class="line">    alert(<span class="string">&#x27;余额：&#x27;</span> + shuRu1 + <span class="string">&#x27;+&#x27;</span> + yuE + <span class="string">&#x27;=&#x27;</span> + yuE1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (shuRu == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// var shuRu2 = parseFloat(prompt(&#x27;取多少？&#x27;));</span></span><br><span class="line">    <span class="keyword">var</span> shuRu2 = prompt(<span class="string">&#x27;取多少？&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (shuRu2 &gt;= <span class="number">0</span> &amp;&amp; shuRu2 &lt;= yuE)&#123;</span><br><span class="line">        yuE2 = yuE - shuRu2;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">&#x27;余额不足&#x27;</span>);</span><br><span class="line">    &#125;                </span><br><span class="line">    alert(<span class="string">&#x27;余额：&#x27;</span> + yuE + <span class="string">&#x27;-&#x27;</span> + shuRu2 + <span class="string">&#x27;=&#x27;</span> + yuE2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (shuRu == <span class="number">3</span>) &#123;</span><br><span class="line">    alert(<span class="string">&#x27;余额：&#x27;</span>+yuE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">&#x27;已退出,88&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>也许用switch 语句好一些；2020-9-29 14:05:35</li>
</ul>
<hr>
<h2 id="8-调试"><a href="#8-调试" class="headerlink" title="8. 调试"></a>8. 调试</h2><h3 id="1-浏览器"><a href="#1-浏览器" class="headerlink" title="1.浏览器"></a>1.浏览器</h3><p>1.断点调试是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。<br>2.断点调试可以帮我们观察程序的运行过程</p>
<p><img src="http://bucket-c70.test.upcdn.net/25/24.png" alt="24"></p>
<p>2.1 ①一直在转圈，因为断点，断了程序，代码没有运行完；</p>
<p>2.2 打了断点后，要再刷新一次页面，才能运行打的断点，浏览器刷新；2020-9-25 19:43:14</p>
<ul>
<li>浏览器中按 F12–&gt; sources –&gt;找到需要调试的文件–&gt;在程序的某一行设置断点</li>
<li>Watch: 监视，通过watch可以监视变量的值的变化，非常的常用。</li>
<li>F11: 程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化。</li>
<li>代码调试的能力非常重要，只有学会了代码调试，才能学会自己解决bug的能力。初学者不要觉得调试代码麻烦就不去调试，知识点花点功夫肯定学的会，但是代码调试这个东西，自己不去练，永远都学不会。</li>
<li>今天学的代码调试非常的简单，只要求同学们记住代码调试的这几个按钮的作用即可，后面还会学到很多的代码调试技巧。</li>
</ul>
<p>3.断点还是看视频较好：<a href="https://www.bilibili.com/video/BV1Sy4y1C7ha?p=73">https://www.bilibili.com/video/BV1Sy4y1C7ha?p=73</a></p>
<hr>
<h3 id="2-vsCode"><a href="#2-vsCode" class="headerlink" title="2. vsCode"></a>2. vsCode</h3><p>1.打点</p>
<p>2.选择调试</p>
<p>3.创建launch.json文件，vscode调试要创建这样的文件，为什么不清楚。属于配置，具体可以百度</p>
<p>4.选择文件创建在哪里（文件夹）</p>
<p><img src="http://bucket-c70.test.upcdn.net/25/34.png" alt="34"></p>
<p>5.选择环境。</p>
<p><img src="http://bucket-c70.test.upcdn.net/25/35.png" alt="35"></p>
<ul>
<li>5.1 实验过，Chrome(preview)可以直接用；</li>
<li>node.js与node.js()都不能，估计是要配置东西，在ts那边有了解过；</li>
<li>5.2 Edge:Launch没有用过；</li>
</ul>
<p>6.<a href="https://fanyi.baidu.com/translate?aldtype=16047&query=preview&keyfrom=baidu&smartresult=dict&lang=auto2zh#en/zh/preview">preview</a></p>
<h4 id="2-2-node-js的调试配置"><a href="#2-2-node-js的调试配置" class="headerlink" title="2.2 node.js的调试配置"></a>2.2 node.js的调试配置</h4><blockquote>
<p><a href="https://my.oschina.net/u/4599572/blog/4452955">https://my.oschina.net/u/4599572/blog/4452955</a></p>
</blockquote>
<p>1.主要是：”program”；它指向要调试的js的路径，html里面的js好像不行，我试了试不得行；</p>
<ul>
<li>例如：<code>&quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/index.html&quot;,</code></li>
</ul>
<p>2.图片解释：</p>
<p><img src="../../img/25/22.png" alt="22"></p>
<hr>
<h2 id="x-资料"><a href="#x-资料" class="headerlink" title="x. 资料"></a>x. 资料</h2><p>1.学习所用视频：<a href="https://www.bilibili.com/video/BV1Sy4y1C7ha?t=6&amp;p=169">https://www.bilibili.com/video/BV1Sy4y1C7ha?t=6&amp;p=169</a></p>
<p>2.学习所用PPT：链接: <a href="https://pan.baidu.com/s/1B8i_8dZxIfPz7uzRo6TebA">https://pan.baidu.com/s/1B8i_8dZxIfPz7uzRo6TebA</a> 提取码: znwp笔记资料</p>
<p>2.1 来源：是下面的评论，不是pink老师账号那边的，是黑马那边的；</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1ux411d75J">https://www.bilibili.com/video/BV1ux411d75J</a></li>
</ul>
<p>25.1待续，字数够多了；2020-9-28 20:26:31</p>
<h2 id="Y-题注"><a href="#Y-题注" class="headerlink" title="Y. 题注"></a>Y. 题注</h2><p>[^1]:parse 英 [pɑːz]   美 [pɑːrs]<br>v.(对句子)作语法分析;作句法分析</p>
<p>[^2]:operator  英 [ˈɒpəreɪtə(r)]   美 [ˈɑːpəreɪtər]<br>n.操作人员;技工;电话员;接线员;(某企业的)经营者，专业公司</p>
<p>[^3]:default  英 [dɪˈfɔːlt]   美 [dɪˈfɔːlt]<br>n.违约(尤指未偿付债务);默认;系统设定值;预置值<br>v.违约;不履行义务(尤指不偿还债务);默认;预设;预置</p>
<p>[^4]:switch  英 [swɪtʃ]   美 [swɪtʃ]<br>n.(电路的)开关，闸，转换器;(尤指突然彻底的)改变，转变;(铁路的)转辙器，道岔<br>v.(使)改变，转变，突变;交换;掉换;转换;对调;调班;临时掉换工作时间</p>
]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>25.1-JavaScript</title>
    <url>/1-(0~50)/25.1-JS/</url>
    <content><![CDATA[<h2 id="9-JS规范"><a href="#9-JS规范" class="headerlink" title="9. JS规范"></a>9. JS规范</h2><a id="more"></a>

<p>1.目标：</p>
<p> 能够知道 JS 中命名规范规则<br> 能够书写规范的 JS 代码</p>
<h3 id="1-标识符命名规范"><a href="#1-标识符命名规范" class="headerlink" title="1.标识符命名规范"></a>1.标识符命名规范</h3><p> 变量、函数的命名必须要有意义<br> 变量的名称一般用名词<br> 函数的名称一般用动词  </p>
<h3 id="2-操作符规范"><a href="#2-操作符规范" class="headerlink" title="2.操作符规范"></a>2.操作符规范</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 操作符的左右两侧各保留一个空格</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">   <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">// 直接退出整个 for 循环，跳到整个for循环下面的语句</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;我正在吃第&#x27;</span> + i + <span class="string">&#x27;个包子呢&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br />

<h3 id="3-单行注释规范"><a href="#3-单行注释规范" class="headerlink" title="3.单行注释规范"></a>3.单行注释规范</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">   <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">// 单行注释前面注意有个空格</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;我正在吃第&#x27;</span> + i + <span class="string">&#x27;个包子呢&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br />

<h3 id="4-其他规范"><a href="#4-其他规范" class="headerlink" title="4. 其他规范"></a>4. 其他规范</h3><p><img src="http://bucket-c70.test.upcdn.net/25/33.png" alt="33"></p>
<hr>
<h2 id="10-数组"><a href="#10-数组" class="headerlink" title="10. 数组"></a>10. 数组</h2><p>1.目标</p>
<p> 能够知道为什么要有数组<br> 能够创建数组<br> 能够获取数组中的元素<br> 能够对数组进行遍历<br> 能够给数组新增一个元素<br> 能够独立完成冒泡排序的案例</p>
<h3 id="10-1-概念"><a href="#10-1-概念" class="headerlink" title="10.1 概念"></a>10.1 概念</h3><p>问：之前学习的数据类型，只能存储一个值。如果我们想存储班级中所有学生的姓名，那么该如何存储呢？<br>答：可以使用数组(<a href="https://fanyi.baidu.com/translate?aldtype=16047&query=switch&keyfrom=baidu&smartresult=dict&lang=auto2zh#en/zh/array">Array</a>)。数组可以把一组相关的数据一起存放，并提供方便的访问(获取）方式。<br>问：什么是数组呢？<br>答：数组是指一组数据的集合，其中的每个数据被称作元素，在数组中可以存放任意类型的元素。数组是一种将一组数据存储在单个变量名下的优雅方式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通变量一次只能存储一个值</span></span><br><span class="line"><span class="keyword">var</span>  num = <span class="number">10</span>; </span><br><span class="line"><span class="comment">// 数组一次可以存储多个值</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br></pre></td></tr></table></figure>

<br />

<h3 id="10-2-创建数组"><a href="#10-2-创建数组" class="headerlink" title="10.2 创建数组"></a>10.2 创建数组</h3><h4 id="1-创建方式"><a href="#1-创建方式" class="headerlink" title="1.创建方式"></a>1.创建方式</h4><p>JS 中创建数组有两种方式：</p>
<ul>
<li>利用  new 创建数组  </li>
<li>利用数组字面量创建数组</li>
</ul>
<h4 id="2-new"><a href="#2-new" class="headerlink" title="2. new"></a>2. new</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 数组名 = <span class="keyword">new</span> <span class="built_in">Array</span>() ；</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();   <span class="comment">// 创建一个新的空数组</span></span><br></pre></td></tr></table></figure>

<p>这种方式暂且了解，等学完对象再看<br>注意 Array () ，A 要大写  </p>
<h4 id="3-数组字面量"><a href="#3-数组字面量" class="headerlink" title="3. 数组字面量"></a>3. 数组字面量</h4><p>1.利用数组字面量创建数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 使用数组字面量方式创建空的数组</span></span><br><span class="line"><span class="keyword">var</span>  数组名 = []；</span><br><span class="line"><span class="comment">//2. 使用数组字面量方式创建带初始值的数组</span></span><br><span class="line"><span class="keyword">var</span>  数组名 = [<span class="string">&#x27;小白&#x27;</span>,<span class="string">&#x27;小黑&#x27;</span>,<span class="string">&#x27;大黄&#x27;</span>,<span class="string">&#x27;瑞奇&#x27;</span>];</span><br></pre></td></tr></table></figure>

<p>数组的字面量是方括号 [ ]<br>声明数组并赋值称为数组的初始化<br>这种字面量方式也是我们以后最多使用的方式  </p>
<h4 id="4-数组元素的类型"><a href="#4-数组元素的类型" class="headerlink" title="4.数组元素的类型"></a>4.数组元素的类型</h4><p>数组中可以存放==任意类型==的数据，例如字符串，数字，布尔值等。</p>
<p><code>var arrStus = [&#39;小白&#39;,12,true,28.9];</code></p>
<h4 id="5-复习提问"><a href="#5-复习提问" class="headerlink" title="5. 复习提问"></a>5. 复习提问</h4><ol>
<li>数组的作用是什么？</li>
<li>创建数组我们有哪两种方式？ 哪一种我们最常用？</li>
<li>什么是数组元素？ 数组里面类型有限制吗？ </li>
</ol>
<hr>
<h3 id="10-3-获取数组元素"><a href="#10-3-获取数组元素" class="headerlink" title="10.3 获取数组元素"></a>10.3 获取数组元素</h3><h4 id="1-数组的索引"><a href="#1-数组的索引" class="headerlink" title="1. 数组的索引"></a>1. 数组的索引</h4><p>索引 (下标) ：用来访问数组元素的序号（数组下标从 0 开始）。</p>
<p><img src="http://bucket-c70.test.upcdn.net/25/36.png" alt="36"></p>
<p>数组可以通过<strong>索引</strong>来访问、设置、修改对应的数组元素，我们可以通过“==数组名[索引]==”的形式来获取数组中的元素。<br>这里的<strong>访问</strong>就是获取得到的意思</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义数组</span></span><br><span class="line"><span class="keyword">var</span> arrStus = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 获取数组中的第2个元素</span></span><br><span class="line">alert(arrStus[<span class="number">1</span>]);    </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>练习</li>
</ol>
<p>定义一个数组，里面存放星期一、星期二…… 直到星期日（共7天），在控制台输出：星期日。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> day1 = [<span class="string">&#x27;星期一&#x27;</span>,<span class="string">&#x27;星期二&#x27;</span>,<span class="string">&#x27;星期三&#x27;</span>,<span class="string">&#x27;星期四&#x27;</span>,<span class="string">&#x27;星期五&#x27;</span>,<span class="string">&#x27;星期六&#x27;</span>,<span class="string">&#x27;星期日&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(day1[<span class="number">6</span>]);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="10-4-遍历数组"><a href="#10-4-遍历数组" class="headerlink" title="10.4 遍历数组"></a>10.4 遍历数组</h3><h4 id="1-遍历"><a href="#1-遍历" class="headerlink" title="1. 遍历"></a>1. 遍历</h4><p>1.问：数组中的每一项我们怎么取出来？</p>
<ul>
<li>答：可以通过“数组名[索引号]”的方式一项项的取出来。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]) <span class="comment">// red</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">1</span>]) <span class="comment">// green</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">2</span>]) <span class="comment">// blue</span></span><br></pre></td></tr></table></figure>

<p>2.问：怎么把数组里面的元素全部取出来？</p>
<p>规律：<br>从代码中我们可以发现，从数组中取出每一个元素时，代码是重复的，有所不一样的是索引值在递增<br>答案就是 <strong>循环</strong></p>
<p>3.<strong>遍历</strong>: 就是把数组中的每个元素从头到尾都访问一次（类似我们每天早上学生的点名）。<br>我们可以通过 for 循环索引遍历数组中的每一项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arrStus[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br />

<hr>
<h4 id="2-数组的长度"><a href="#2-数组的长度" class="headerlink" title="2. 数组的长度"></a>2. 数组的长度</h4><p>1.使用“数组名.length”可以访问数组元素的数量（数组长度）。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrStus = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">alert(arrStus.length);  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：<br>此处数组的长度是数组元素的个数 ，不要和数组的索引号混淆。<br>当我们数组里面的元素个数发生了变化，这个 length 属性跟着一起变化。</p>
<h4 id="3-练习"><a href="#3-练习" class="headerlink" title="3. 练习"></a>3. 练习</h4><p>1.遍历数组: 请将  [“关羽”,”张飞”,”马超”,”赵云”,”黄忠”,”刘备”,”姜维”]; 数组里的元素依次打印到控制台。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;关羽&quot;</span>,<span class="string">&quot;张飞&quot;</span>,<span class="string">&quot;马超&quot;</span>,<span class="string">&quot;赵云&quot;</span>,<span class="string">&quot;黄忠&quot;</span>,<span class="string">&quot;刘备&quot;</span>,<span class="string">&quot;姜维&quot;</span>]; </span><br><span class="line"><span class="comment">// 遍历  从第一个到最后一个</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++ )  &#123; </span><br><span class="line">   <span class="built_in">console</span>.log( arr[i] );</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<ul>
<li><code>i &lt; arr.length;</code>不能用&lt;=，会多一个，那一个没有数据就是undefind;</li>
<li>长度从1开始算，索引从0开始算；</li>
</ul>
<hr>
<h4 id="4-复习提问"><a href="#4-复习提问" class="headerlink" title="4. 复习提问"></a>4. 复习提问</h4><ol>
<li><p>什么是遍历 ？</p>
</li>
<li><p>我们通过什么来遍历数组里面的元素 ？</p>
</li>
<li><p>for 里面的 i 是什么？当什么使用？  for里面的数组元素怎么写？</p>
</li>
<li><p>怎么获取数组的长度？ </p>
</li>
<li><p>数组索引号和数组长度有什么关系？</p>
</li>
</ol>
<h4 id="5-案例"><a href="#5-案例" class="headerlink" title="5. 案例"></a>5. 案例</h4><h5 id="1-数组求和及平均值"><a href="#1-数组求和及平均值" class="headerlink" title="1.数组求和及平均值"></a>1.数组求和及平均值</h5><ul>
<li>求数组 [2,6,1,7, 4] 里面所有元素的和以及平均值。</li>
</ul>
<p>2.分析：</p>
<p>声明一个求和变量 sum。<br>遍历这个数组，把里面每个数组元素加到 sum 里面。<br>用求和变量 sum 除以数组的长度就可以得到数组的平均值。</p>
<p>3.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> average = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    sum += arr[i];</span><br><span class="line">&#125;</span><br><span class="line">average = sum / arr.length;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;这组数的和是：&#x27;</span> + sum);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;这组数的平均值是：&#x27;</span> + average);</span><br></pre></td></tr></table></figure>

<h5 id="2-数组最大值"><a href="#2-数组最大值" class="headerlink" title="2. 数组最大值"></a>2. 数组最大值</h5><p>1.求数组[2,6,1,77,52,25,7]中的最大值。</p>
<p>2.分析：</p>
<p>声明一个保存最大元素的变量 max。<br>默认最大值可以取数组中的第一个元素。<br>遍历这个数组，把里面每个数组元素和 max 相比较。<br>如果这个数组元素大于max 就把这个数组元素存到 max 里面，否则继续下一轮比较。<br>最后输出这个 max。</p>
<p>3.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrNum = [<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">77</span>,<span class="number">52</span>,<span class="number">25</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> maxNum = arrNum[<span class="number">0</span>]; <span class="comment">// 用来保存最大元素,默认最大值是数组中的第一个元素</span></span><br><span class="line"><span class="comment">// 从0 开始循环数组里的每个元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt; arrNum.length; i++)&#123;</span><br><span class="line">    <span class="comment">// 如果数组里当前循环的元素大于 maxNum，则保存这个元素和下标</span></span><br><span class="line">    <span class="keyword">if</span>(arrNum[i] &gt; maxNum)&#123;</span><br><span class="line">        maxNum = arrNum[i]; <span class="comment">// 保存数值到变量 maxNum</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自：</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">77</span>,<span class="number">52</span>,<span class="number">251</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> max= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(max&lt;arr[i])&#123;</span><br><span class="line">        max=arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">alert(max);</span><br></pre></td></tr></table></figure>



<p>3.1 重温看分析写下的代码，成功；2021-3-30 14:05:48</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> arr1 = [<span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">77</span>, <span class="number">52</span>, <span class="number">25</span>, <span class="number">7</span>];</span><br><span class="line">    <span class="keyword">var</span> maxNum = arr1[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (maxNum &lt; arr1[i]) &#123;</span><br><span class="line">            maxNum = arr1[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(maxNum);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>





<h5 id="3-数组转换为字符串"><a href="#3-数组转换为字符串" class="headerlink" title="3. 数组转换为字符串"></a>3. 数组转换为字符串</h5><p>1.要求：将数组 [‘red’, ‘green’, ‘blue’, ‘pink’] 里面的元素转换为字符串<br>   输出： ‘redgreenbluepink’</p>
<p>2.分析：</p>
<p>思路：就是把里面的元素相加就好了，但是注意保证是字符相加。<br>需要一个新变量 str 用于存放转换完的字符串。<br>遍历原来的数组，分别把里面数据取出来，加到字符串变量 str 里面。</p>
<p>3.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    str += arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure>

<h5 id="4-数组转换为分割字符串"><a href="#4-数组转换为分割字符串" class="headerlink" title="4. 数组转换为分割字符串"></a>4. 数组转换为分割字符串</h5><p>要求：将数组 [‘red’, ‘green’, ‘blue’, ‘pink’] 转换为字符串，并且用 | 或其他符号分割<br>输出： ‘red|green|blue|pink’</p>
<ul>
<li>也可以加空格；</li>
</ul>
<p>1.分析：</p>
<p>需要一个新变量用于存放转换完的字符串 str。<br>遍历原来的数组，分别把里面数据取出来，加到字符串里面。<br>同时在后面多加一个分隔符。</p>
<p>2.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> separator = <span class="string">&#x27;|&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">   str += arr[i] + separator;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="comment">// 自：</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    str += arr[i]+<span class="string">&#x27;\xa0&#x27;</span>;</span><br><span class="line">    <span class="comment">// str += arr[i]+&#x27;\b&#x27;;</span></span><br><span class="line">&#125;</span><br><span class="line">alert(str);</span><br></pre></td></tr></table></figure>

<br />

<hr>
<h3 id="10-5-添加元素"><a href="#10-5-添加元素" class="headerlink" title="10.5 添加元素"></a>10.5 添加元素</h3><h4 id="1-长度添加"><a href="#1-长度添加" class="headerlink" title="1. 长度添加"></a>1. 长度添加</h4><p>1.通过修改 length 长度新增数组元素</p>
<p> 可以通过修改 length 长度来实现数组扩容的目的<br> length 属性是可读写的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line">arr.length = <span class="number">7</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">4</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">5</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">6</span>]);</span><br></pre></td></tr></table></figure>

<p>其中索引号是 4，5，6 的空间没有给值，就是声明变量未给值，默认值就是 undefined。</p>
<p><img src="http://bucket-c70.test.upcdn.net/25/37.png" alt="37"></p>
<h4 id="2-数组索引"><a href="#2-数组索引" class="headerlink" title="2. 数组索引"></a>2. 数组索引</h4><p>1.通过修改数组索引新增数组元素</p>
<ul>
<li>可以通过修改数组索引的方式追加数组元素</li>
<li>不能直接给数组名赋值，否则会覆盖掉以前的数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line">arr[<span class="number">4</span>] = <span class="string">&#x27;hotpink&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>

<p>这种方式也是我们最常用的一种方式。</p>
<h4 id="3-案例：数组新增元素"><a href="#3-案例：数组新增元素" class="headerlink" title="3. 案例：数组新增元素"></a>3. 案例：数组新增元素</h4><p>1.新建一个数组，里面存放10个整数（ 1~10）， 要求使用循环追加的方式输出： [1,2,3,4,5,6,7,8,9,10]</p>
<p>2.分析：</p>
<p>使用循环来追加数组。<br>声明一个空数组 arr。<br>循环中的计数器 i  可以作为数组元素存入。<br>由于数组的索引号是从0开始的， 因此计数器从 0 开始更合适，存入的数组元素要+1。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    arr[i] = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>

<h4 id="4-案例：筛选数组"><a href="#4-案例：筛选数组" class="headerlink" title="4. 案例：筛选数组"></a>4. 案例：筛选数组</h4><p>1.要求：将数组 [2, 0, 6, 1, 77, 0, 52, 0, 25, 7] 中大于等于 10 的元素选出来，放入新数组。</p>
<p>2.分析：</p>
<p>声明一个新的数组用于存放新数据。<br>遍历原来的数组，找出大于等于 10 的元素。<br>依次追加给新数组 newArr。</p>
<p>3.代码1：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">77</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="comment">// 定义一个变量 用来计算 新数组的索引号</span></span><br><span class="line"><span class="keyword">var</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="comment">// 给新数组</span></span><br><span class="line">        newArr[j] = arr[i];</span><br><span class="line">        <span class="comment">// 索引号 不断自加</span></span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br><span class="line"><span class="comment">//自同上</span></span><br></pre></td></tr></table></figure>

<p>4.方法2：不错</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">77</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="comment">// 给新数组</span></span><br><span class="line">        newArr[newArr.length] = arr[i];</span><br><span class="line">      <span class="comment">// length从1开始算，而且每加入一个元素会自动加长度。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure>

<br />

<h3 id="10-6-数组案例"><a href="#10-6-数组案例" class="headerlink" title="10.6 数组案例"></a>10.6 数组案例</h3><h4 id="1-删除指定数组元素"><a href="#1-删除指定数组元素" class="headerlink" title="1. 删除指定数组元素"></a>1. 删除指定数组元素</h4><p>1.要求：将数组[2, 0, 6, 1, 77, 0, 52, 0, 25, 7]中的 0 去掉后，形成一个不包含 0 的新数组。</p>
<p>2.分析：</p>
<p>需要一个新数组用于存放筛选之后的数据。<br>遍历原来的数组，把不是 0 的数据添加到新数组里面( 此时要注意采用数组名+索引的格式接收数据)。<br>新数组里面的个数，用 length 不断累加。</p>
<ul>
<li>就是把上面的案例里面的if条件改了；（捂脸）2021-3-30 16:52:15</li>
</ul>
<p>3.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">77</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];   <span class="comment">// 空数组的默认的长度为 0 </span></span><br><span class="line"><span class="comment">// 定义一个变量 i 用来计算新数组的索引号</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 找出大于 10 的数</span></span><br><span class="line">    <span class="keyword">if</span> (arr[i] != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 给新数组</span></span><br><span class="line">        <span class="comment">// 每次存入一个值，newArr长度都会 +1  </span></span><br><span class="line">        newArr[newArr.length] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure>

<h4 id="2-翻转数组"><a href="#2-翻转数组" class="headerlink" title="2. 翻转数组"></a>2. 翻转数组</h4><p>要求: 将数组 [‘red’, ‘green’, ‘blue’, ‘pink’, ‘purple’] 的内容反过来存放。<br>输出： [‘purple’, ‘pink’, ‘blue’, ‘green’, ‘red’]</p>
<p>2.分析：</p>
<img src="http://bucket-c70.test.upcdn.net/25/38.png" alt="38" style="zoom:90%;" />

<p>3.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;purple&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">// newArr 是接收方，arr 是输送方</span></span><br><span class="line">    newArr[i] = arr[arr.length - i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br><span class="line"><span class="comment">//自：</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">0</span>,<span class="string">&#x27;6&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;77&#x27;</span>,<span class="number">0</span>,<span class="number">52</span>,<span class="string">&#x27;10&#x27;</span>,<span class="number">25</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;            </span><br><span class="line">        newArr[i] = arr[arr.length-i<span class="number">-1</span>];           </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>arr.length - i - 1</code>解析：<ul>
<li>1.当第一次循环，i=0时，<code>newArr[0]=arr[5-0-1]</code>=<code>newArr[0]=arr[4]</code></li>
<li>2.当第二次循环时，i=1，<code>newArr[1]=arr[5-1-1]</code>=<code>newArr[1]=arr[3]</code></li>
<li>3.当第三次循环，i=2，<code>newArr[2]=arr[5-2-1]=arr[2]</code></li>
<li>4.当第四次循环,i=3，<code>newArr[3]=arr[5-3-1]=arr[1]</code></li>
<li>依次类推，这样就实现了翻转数组；2020-9-30 20:24:10；</li>
</ul>
</li>
</ul>
<p>3.1 重温：2021-3-30 16:57:20</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;purple&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">    arr2[i] = arr1[arr1.length - <span class="number">1</span> - i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></table></figure>



<h4 id="3-数组排序（冒泡排序）"><a href="#3-数组排序（冒泡排序）" class="headerlink" title="3. 数组排序（冒泡排序）"></a>3. 数组排序（冒泡排序）</h4><p>1.我们先复习下如何把2个变量交换数据  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用第三个变量</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> temp = num1;</span><br><span class="line">num1 = num2;</span><br><span class="line">num2 = temp;</span><br><span class="line"><span class="built_in">console</span>.log(num1, num2);</span><br></pre></td></tr></table></figure>

<p>2.冒泡排序：是一种算法，把一系列的数据按照一定的顺序进行排列显示(从小到大或从大到小）。<br>例如，我们可以将数组 [5, 4, 3, 2, 1]中的元素按照从小到大的顺序排序，输出： 1，2，3，4，5</p>
<p><img src="http://bucket-c70.test.upcdn.net/25/39.png" alt="39"></p>
<p>3.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">               <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">               arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">               arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>1.外层循环只需要length-1次；</p>
<ul>
<li>例如数组：<code>arr = [5, 4, 3, 2, 1];</code>,length=5，length-1=4；</li>
<li>5个元素，只需要排四次，最后一个，元素就是最小的。</li>
</ul>
</li>
<li><p>2.那么内循环，循环几次比较好呢？我们先不设置循环多少次（先不考虑条件表达式）</p>
<ul>
<li>从j=0开始：如果arr[0]&gt;arr[1]，则把arr[1]的元素给arr[0];</li>
<li>j=1时，arr[1]再与arr[2]做比较。</li>
<li>j=2时，[2]与[3]</li>
<li>j=3时，[3]与[4]</li>
<li>j=4时，[4]与[5]，但索引是比长度少一个的，索引4就是长度5，这里没有索引5的数据，所以不需要j=4；</li>
<li>循环几次？0123，4次；循环4次；</li>
<li>可以先假设，条件表达式应该这么写：<code>j&lt;arr.length-1</code></li>
</ul>
</li>
<li><p>2.1 第二次，i=1了，j还是从0开始，循环的次数是：<code>j &lt; arr.length - 1=5-1=4</code>，0，1，2，3。循环4次；</p>
<ul>
<li><p>1.那么就是:arr[0]与arr[1]，arr[1]与arr[2]，arr[2]与arr[3]比较，arr[3]与arr[4]。</p>
<ul>
<li><p>那么问题来了，arr[4]上一轮，i=0的时候，已经比较过了，是最大了的。不需要比较这一次了；</p>
<p>1.例如：[1,3,2,5,4]</p>
<p>2.首先，if(arr[0]&gt;arr[1])，不大于，跳过。</p>
<p>3.然后arr[1]是否大于arr[2]，3&gt;2，成立，交换，arr[1]=2，arr[2]=3；</p>
<p>4.接着arr[2]与arr[3]，也就是3与5，3&gt;5为假，跳过；</p>
<p>5.arr[3]与arr[4]，5&gt;4成立，arr[3]=4，arr[4]=5。</p>
<p>6.第一轮，就会选出最大的放在最高的索引值的地方；</p>
</li>
</ul>
</li>
<li><p>2.那怎么办？修改条件表达式，如何修改呢？这次-2，下次-3吗？明显不能这样，代码需要动态的变化</p>
<ul>
<li>这里，我们可以预想i=2的时候，也就是外循环第三次的时候，我们内循环又该循环几次呢？没错，那个时候应该比这次还要少一次，2次；</li>
<li>i=1时，j循环的次数，比i=0少一次；i=2时，j循环的次数，比i=1的时候也少一次；</li>
<li>外循环i每增加一个，内循环就要减少一个。正好可以-i；</li>
</ul>
</li>
<li><p>所以：条件表达式从<code>j&lt;arr.length-1</code>修改为<code>j&lt;arr.length-i-1</code>;</p>
</li>
</ul>
</li>
<li><p>所以，在里面的循环里的条件表达式，可以为：<code>j &lt; arr.length - i - 1</code></p>
</li>
<li><p>3.这样写出来后，思路终于清晰了。2020-9-30 22:19:06</p>
</li>
</ul>
<h5 id="4-重温："><a href="#4-重温：" class="headerlink" title="4.重温："></a>4.重温：</h5><ul>
<li>最关键一点，for循环里面的，i++，是一次循环最后才执行的。这个调试断点能看到；</li>
<li>2021-3-30 17:05:25</li>
</ul>
<hr>
<h2 id="11-函数"><a href="#11-函数" class="headerlink" title="11. 函数"></a>11. 函数</h2><p>1.目标：</p>
<p> 能够说出为什么需要函数<br> 能够根据语法书写函数<br> 能够根据需求封装函数<br> 能够说出形参和实参的传递过程<br> 能够使用函数的返回值<br> 能够使用arguments获取函数的参数</p>
<h3 id="11-1-概念"><a href="#11-1-概念" class="headerlink" title="11.1 概念"></a>11.1 概念</h3><p>在 JS 里面，可能会定义非常多的相同代码或者功能相似的代码，这些代码可能需要大量重复使用。<br>虽然 for循环语句也能实现一些简单的重复操作，但是比较具有局限性，此时我们就可以使用 JS 中的函数。</p>
<ul>
<li>毕竟怎么循环需要写好条件，不能哪里用的时候，直接调用；</li>
</ul>
<p>函数：就是封装了一段可被重复调用执行的代码块。通过此代码块可以实现大量代码的重复使用。  </p>
<p>2.榨汁机解释：</p>
<p><img src="http://bucket-c70.test.upcdn.net/25/42.jpg" alt="42"></p>
<h3 id="11-2-使用"><a href="#11-2-使用" class="headerlink" title="11.2 使用"></a>11.2 使用</h3><p>函数在使用时分为两步：声明函数和调用函数。</p>
<h4 id="1-声明函数"><a href="#1-声明函数" class="headerlink" title="1. 声明函数"></a>1. 声明函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//函数体代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>function 是声明函数的关键字,必须小写</li>
<li>由于函数一般是为了实现某个功能才定义的， 所以通常我们将函数名命名为动词，比如 getSum  </li>
</ul>
<h4 id="2-调用函数"><a href="#2-调用函数" class="headerlink" title="2. 调用函数"></a>2. 调用函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">函数名();  <span class="comment">// 通过调用函数名来执行函数体代码</span></span><br></pre></td></tr></table></figure>

<p>调用的时候千万不要忘记添加小括号<br>口诀：函数不调用，自己不执行。</p>
<p>==注意==：声明函数本身并不会执行代码，只有调用函数时才会执行函数体代码。</p>
<h4 id="3-封装"><a href="#3-封装" class="headerlink" title="3. 封装"></a>3. 封装</h4><p>函数的封装是把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口<br>简单理解：封装类似于将电脑配件整合组装到机箱中 ( 类似快递打包）  </p>
<h4 id="4-案例"><a href="#4-案例" class="headerlink" title="4. 案例"></a>4. 案例</h4><p>1.利用函数计算1-100之间的累加和</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">   计算1-100之间值的函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sumNum = <span class="number">0</span>;<span class="comment">// 准备一个变量，保存数字和</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sumNum += i;<span class="comment">// 把每个数值 都累加 到变量中</span></span><br><span class="line">  &#125;</span><br><span class="line">  alert(sumNum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">getSum();</span><br></pre></td></tr></table></figure>

<br />

<h4 id="5-复习提问-1"><a href="#5-复习提问-1" class="headerlink" title="5. 复习提问"></a>5. 复习提问</h4><ol>
<li>函数是做什么的（作用）？</li>
<li>声明函数用什么关键词？</li>
<li>如何调用函数？ </li>
<li>封装是什么意思？ </li>
</ol>
<hr>
<h3 id="11-3-参数"><a href="#11-3-参数" class="headerlink" title="11.3 参数"></a>11.3 参数</h3><h4 id="1-形参与实参"><a href="#1-形参与实参" class="headerlink" title="1.  形参与实参"></a>1.  形参与实参</h4><p>在声明函数时，可以在函数名称后面的小括号中添加一些参数，这些参数被称为<strong>形参</strong>，而在调用该函数时，同样也需要传递相应的参数，这些参数被称为<strong>实参</strong>。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>形参</td>
<td>形式上的参数，函数定义的时候，传递的参数，当前并不知道是什么</td>
</tr>
<tr>
<td>实参</td>
<td>实际上的参数，函数调用的时候传递的参数，实参是传递给形参的</td>
</tr>
</tbody></table>
<p>参数的作用 : 在<strong>函数内部</strong>某些值不能固定，我们可以通过参数在<strong>调用函数时传递</strong>不同的值进去。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 带参数的函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参<span class="number">1</span>, 形参<span class="number">2</span> , 形参<span class="number">3.</span>..</span>) </span>&#123; <span class="comment">// 可以定义任意多的参数，用逗号分隔</span></span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 带参数的函数调用</span></span><br><span class="line">函数名(实参<span class="number">1</span>, 实参<span class="number">2</span>, 实参<span class="number">3.</span>..); </span><br></pre></td></tr></table></figure>

<p>2.案例：利用函数求任意两个数的和</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num1 + num2);</span><br><span class="line">&#125;</span><br><span class="line">getSum(<span class="number">1</span>, <span class="number">3</span>); <span class="comment">// 4</span></span><br><span class="line">getSum(<span class="number">6</span>, <span class="number">5</span>); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure>

<br />

<hr>
<h4 id="2-参数的传递"><a href="#2-参数的传递" class="headerlink" title="2. 参数的传递"></a>2. 参数的传递</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num1 + num2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">getSum(<span class="number">1</span>, <span class="number">3</span>); <span class="comment">// 4</span></span><br><span class="line">getSum(<span class="number">6</span>, <span class="number">5</span>); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>调用的时候实参值是传递给形参的</p>
</li>
<li><p>形参简单理解为：==不用声明的变量==</p>
</li>
<li><p>实参和形参的多个参数之间用逗号（,）分隔</p>
</li>
</ol>
<hr>
<h4 id="3-形参和实参个数不匹配问题"><a href="#3-形参和实参个数不匹配问题" class="headerlink" title="3. 形参和实参个数不匹配问题"></a>3. 形参和实参个数不匹配问题</h4><table>
<thead>
<tr>
<th>参数个数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>实参个数 等于 形参个数</td>
<td>输出正确结果</td>
</tr>
<tr>
<td>实参个数 多余 形参个数</td>
<td>只取到形参的个数</td>
</tr>
<tr>
<td>实参个数 小于 形参个数</td>
<td>多的形参定义为undefined，结果为NaN</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num1 + num2);</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">100</span>, <span class="number">200</span>);             <span class="comment">// 形参和实参个数相等，输出正确结果</span></span><br><span class="line">sum(<span class="number">100</span>, <span class="number">400</span>, <span class="number">500</span>, <span class="number">700</span>);   <span class="comment">// 实参个数多于形参，只取到形参的个数</span></span><br><span class="line">sum(<span class="number">200</span>);                  <span class="comment">// 实参个数少于形参，多的形参定义为undefined，结果为NaN</span></span><br></pre></td></tr></table></figure>

<p>注意：在JavaScript中，形参的默认值是undefined。</p>
<hr>
<h4 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h4><p> 函数可以带参数也可以不带参数<br> 声明函数的时候，函数名括号里面的是形参，形参的默认值为 undefined<br> 调用函数的时候，函数名括号里面的是实参<br> 多个参数中间用逗号分隔<br> 形参的个数可以和实参个数不匹配，但是结果不可预计，我们尽量要匹配</p>
<hr>
<h3 id="11-4-函数的返回值"><a href="#11-4-函数的返回值" class="headerlink" title="11.4 函数的返回值"></a>11.4 函数的返回值</h3><h4 id="1-return语句"><a href="#1-return语句" class="headerlink" title="1. return语句"></a>1. return语句</h4><p>有的时候，我们会希望函数将值返回给调用者，此时通过使用 return 语句就可以实现。<br>return 语句的语法格式如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名（）</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span>  需要返回的值；</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">函数名();    <span class="comment">// 此时调用函数就可以得到函数体内return 后面的值</span></span><br></pre></td></tr></table></figure>

<p> 在使用 return 语句时，函数会停止执行，并返回指定的值<br> 如果函数没有 return ，返回的值是 undefined</p>
<p>2.例如：</p>
<p>声明了一个sum()函数，该函数的返回值为666，其代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">666</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">sum();      <span class="comment">// 此时 sum 的值就等于666，因为 return 语句会把自身后面的值返回给调用者</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// sum的值？sum变成了变量名了么？明明没有用 var sum</span></span><br><span class="line"><span class="comment">// 实验一下</span></span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"><span class="built_in">console</span>.log(sum());</span><br></pre></td></tr></table></figure>

<p>2.2 实验结果：</p>
<p><img src="http://bucket-c70.test.upcdn.net/25/40.png" alt="40"></p>
<p>看来具体是sum()的值变成了666，而不是sum的值；</p>
<ul>
<li><p>既然有return的需要，那么大概是这样：</p>
<p>没有写return的时候，里面代码得出的结果不保存到sum();</p>
</li>
<li><p>重温：2021-4-1 17:43:09</p>
<p>不会保存到那个函数本身上；2021-4-1 17:43:26</p>
</li>
</ul>
<h5 id="3-案例-1-任意两个数的最大值"><a href="#3-案例-1-任意两个数的最大值" class="headerlink" title="3. 案例 1 - 任意两个数的最大值"></a>3. 案例 1 - 任意两个数的最大值</h5><p>利用函数求任意两个数的最大值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMax</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 &gt; num2 ? num1 : num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getMax(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(getMax(<span class="number">11</span>, <span class="number">2</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.emm，难道说？如果我这么写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMax</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = num1 &gt; num2 ? num1 : num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getMax(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(getMax(<span class="number">11</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<p>1.1 console打印的：undefined;</p>
<ul>
<li>如果没有返回值，函数里面的代码计算出的值，就用不了吗？</li>
</ul>
<p>1.2 继续试验，返回a</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMax</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = num1 &gt; num2 ? num1 : num2;</span><br><span class="line">      <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getMax(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(getMax(<span class="number">11</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<p>1.2.1 好了，又打印的出值了；</p>
<p><img src="http://bucket-c70.test.upcdn.net/25/41.png" alt="41"></p>
<h5 id="4-案例2-数组max"><a href="#4-案例2-数组max" class="headerlink" title="4. 案例2 数组max"></a>4. 案例2 数组max</h5><p>1.利用函数求任意一个数组中的最大值 </p>
<p>求数组 [5,2,99,101,67,77] 中的最大数值。</p>
<p>2.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个获取数组中最大数的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMaxFromArr</span>(<span class="params">numArray</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i &lt; numArray.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(numArray[i] &gt; maxNum)&#123;</span><br><span class="line">            maxNum = numArray[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxNum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arrNum = [<span class="number">5</span>,<span class="number">2</span>,<span class="number">99</span>,<span class="number">101</span>,<span class="number">67</span>,<span class="number">77</span>];</span><br><span class="line"><span class="keyword">var</span> maxN = getMaxFromArr(arrNum); <span class="comment">// 这个实参是个数组</span></span><br><span class="line">alert(<span class="string">&#x27;最大值为：&#x27;</span>+ maxN);</span><br></pre></td></tr></table></figure>

<br />

<p>2.2 以前的写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrNum = [<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">77</span>,<span class="number">52</span>,<span class="number">25</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> maxNum = arrNum[<span class="number">0</span>]; <span class="comment">// 用来保存最大元素,默认最大值是数组中的第一个元素</span></span><br><span class="line"><span class="comment">// 从0 开始循环数组里的每个元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt; arrNum.length; i++)&#123;</span><br><span class="line">    <span class="comment">// 如果数组里当前循环的元素大于 maxNum，则保存这个元素和下标</span></span><br><span class="line">    <span class="keyword">if</span>(arrNum[i] &gt; maxNum)&#123;</span><br><span class="line">        maxNum = arrNum[i]; <span class="comment">// 保存数值到变量 maxNum</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="string">&#x27;最大值为：&#x27;</span> + maxNum);</span><br></pre></td></tr></table></figure>

<p>2.3 怎么感觉函数还要复杂一下？</p>
<ul>
<li>1.如果调用的少，1次，2次，是这样；</li>
<li>2.如果调用的多，如果是用循环的写法，还要修改循环里面的arrNum.length，等相关变量名。</li>
<li>3.如果要多个使用，那么需要写多个循环</li>
</ul>
<p>2.4 而函数，一个函数完成后，一般是不会修改到函数里面的内容，除非要改变逻辑，算法等。</p>
<ul>
<li>2.函数内部不需要修改，只需要改变外面调用的实参</li>
<li>3.不需要写多个函数，只需要多次调用。不同的调用，就是不同的实参；</li>
</ul>
<h5 id="5-重温；"><a href="#5-重温；" class="headerlink" title="5. 重温；"></a>5. 重温；</h5><p>1.~2021-4-1 17:49:01</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = num1 + num2;</span><br><span class="line">    <span class="comment">// return sum;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">parseFloat</span>(prompt(<span class="string">&#x27;输入第一个数&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">parseFloat</span>(prompt(<span class="string">&#x27;输入第二个数&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> sum2 = getSum(a, b);</span><br><span class="line">alert(sum2);</span><br></pre></td></tr></table></figure>

<p>2.如果没有return，就会undefined;</p>
<hr>
<h4 id="2-return-终止函数"><a href="#2-return-终止函数" class="headerlink" title="2. return 终止函数"></a>2. return 终止函数</h4><p>return 语句之后的代码不被执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1，num2</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2; <span class="comment">// 注意：return 后的代码不执行</span></span><br><span class="line">    alert(<span class="string">&#x27;我不会被执行，因为前面有 return&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> resNum = add(<span class="number">21</span>,<span class="number">6</span>); <span class="comment">// 调用函数，传入两个实参，并通过 resNum 接收函数返回值</span></span><br><span class="line">alert(resNum);          <span class="comment">// 27</span></span><br></pre></td></tr></table></figure>

<br />

<hr>
<h4 id="3-return-的返回值"><a href="#3-return-的返回值" class="headerlink" title="3. return 的返回值"></a>3. return 的返回值</h4><p>1.return 只能返回一个值。如果用逗号隔开多个值，以最后一个为准。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1，num2</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">    <span class="keyword">return</span> num1，num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> resNum = add(<span class="number">21</span>,<span class="number">6</span>); <span class="comment">// 调用函数，传入两个实参，并通过 resNum 接收函数返回值</span></span><br><span class="line">alert(resNum);          <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>

<p>2.案例：创建一个函数，实现两个数之间的加减乘除运算，并将结果返回 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">parseFloat</span>(prompt(<span class="string">&#x27;请输入第一个数&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">parseFloat</span>(prompt(<span class="string">&#x27;请输入第二个数&#x27;</span>));</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [a + b, a - b, a * b, a / b];</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = count(a, b);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://fanyi.baidu.com/translate#en/zh/count">count</a></li>
<li>这个案例是告诉我，想返回多个数，就用数组框在一起么，然后用一个变量调用；</li>
</ul>
<hr>
<h4 id="4-undefined"><a href="#4-undefined" class="headerlink" title="4. undefined"></a>4. undefined</h4><p>1.函数没有 return 返回 undefined</p>
<p>函数都是有返回值的<br>如果有return 则返回 return 后面的值<br>如果没有return 则返回 undefined </p>
<hr>
<h4 id="5-bcr的区别"><a href="#5-bcr的区别" class="headerlink" title="5. bcr的区别"></a>5. bcr的区别</h4><p>1.break ,continue ,return 的区别</p>
<ul>
<li>break ：结束当前的循环体（如 for、while）</li>
<li>continue ：跳出本次循环，继续执行下次循环（如 for、while）</li>
<li>return ：不仅可以退出循环，还能够返回 return 语句中的值，同时还可以结束当前的函数体内的代码</li>
</ul>
<hr>
<h4 id="6-作业"><a href="#6-作业" class="headerlink" title="6. 作业"></a>6. 作业</h4><p>1.写一个函数，用户输入任意两个数字的任意算术运算（简单的计算器小功能），并能弹出运算后的结果。</p>
<p>1.1 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//写一个函数,用户输入任意两个数字的任意算术运算,并弹出运算后的结果</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">num1,symbol,num2</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">           <span class="keyword">switch</span>(symbol)&#123;</span></span><br><span class="line"><span class="javascript">               <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> num1 + num2;</span></span><br><span class="line">                    </span><br><span class="line"><span class="javascript">               <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> num1 - num2;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">               <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span>  num1 * num2;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span>  num1 / num2;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;                 </span></span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        alert(get(<span class="number">3</span>,<span class="string">&#x27;+&#x27;</span>,<span class="number">6</span>));</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1.2 自己写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">num1, sign_of_operation, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (sign_of_operation) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> num1 + num2;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> num1 - num2;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> num1 * num2;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> num1 / num2;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;输入的实参有误，查看代码修改&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(get(<span class="number">20</span>, <span class="string">&#x27;*&#x27;</span>, <span class="number">5</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>[sign_of_operation[^3]](<a href="https://fanyi.baidu.com/#en/zh/sign">https://fanyi.baidu.com/#en/zh/sign</a> of operation)</li>
</ul>
<br />

<p>2.写一个函数，用户输入任意两个数字的最大值，并能出弹运算后的结果。</p>
<ul>
<li>在上面11.4.1.3做过，这里重新做一次也没事，当做复习</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMax</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 &gt; num2 ? num1 : num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getMax(<span class="number">23</span>,<span class="number">66</span>));</span><br></pre></td></tr></table></figure>



<p>3.写一个函数，用户输入任意三个不同数字的最大值，并能弹出运算后的结果。</p>
<p>3.1 重温，2021-4-2 09:28:05；代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">parseFloat</span>(prompt(<span class="string">&#x27;第一个数&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">parseFloat</span>(prompt(<span class="string">&#x27;第二个数&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">parseFloat</span>(prompt(<span class="string">&#x27;第三个数&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> getMaxNum = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (getMaxNum &lt; arr[i]) &#123;</span><br><span class="line">            getMaxNum = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getMaxNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> relust = abc([a, b, c]);</span><br><span class="line">alert(relust);</span><br></pre></td></tr></table></figure>



<p>4.写一个函数，用户输入一个数判断是否是素数，并返弹出回值(又叫质数，只能被1和自身整数的数)</p>
<hr>
<h3 id="11-5-arguments"><a href="#11-5-arguments" class="headerlink" title="11.5 arguments"></a>11.5 arguments</h3><p>0.<a href="https://fanyi.baidu.com/translate?aldtype=16047&query=argument&keyfrom=baidu&smartresult=dict&lang=auto2zh#en/zh/argument">argument</a></p>
<p>1.当我们<strong>不确定</strong>有多少个参数传递的时候，可以用 arguments 来获取。在 JavaScript 中，arguments 实际上它是当前函数的一个内置对象。所有函数都内置了一个 arguments 对象，==arguments 对象中存储了传递的所有实参==。</p>
<ul>
<li><p>内置是什么？</p>
<p>如同买了个手机，里面打电话的功能，发短信的功能，不需要我们再去下载app什么的，或者类似下载APP的操作。</p>
<p>不需要新的操作，上手可用</p>
</li>
</ul>
<p>2.arguments展示形式是一个伪数组，因此可以进行遍历。伪数组具有以下特点：</p>
<ul>
<li>具有 length 属性</li>
<li>按索引方式储存数据</li>
<li>不具有数组的 push[^4]() , pop() 等方法</li>
</ul>
<p>2.1 数组的方法这里我们还没说过，不过我本人在学习JS基础之前，学习了一些TS的基础，里面讲过push方法</p>
<ul>
<li><p><code>pop</code> 方法从一个数组中删除并返回最后一个元素。</p>
</li>
<li><p>push 方法：添加元素（在数组最后一项元素的后面添加）。</p>
<p>例如：<code>songs.push(&#39;痒&#39;)</code></p>
</li>
</ul>
<p>2.2 索引还是可以用；例如：<code>arguments[2]</code></p>
<ul>
<li>自然数组的遍历也是可行的</li>
</ul>
<p>2.3 <red>注意</red>，只有函数有这个对象，只有函数可以用，当然是在函数里面的函数体代码用；</p>
<p>3.案例：利用函数求任意个数的最大值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> max = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">         <span class="keyword">if</span> (max &lt; <span class="built_in">arguments</span>[i]) &#123;</span><br><span class="line">                    max = <span class="built_in">arguments</span>[i];</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">console</span>.log(maxValue(<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>));</span><br><span class="line"> <span class="built_in">console</span>.log(maxValue(<span class="number">12</span>, <span class="number">4</span>, <span class="number">9</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li><code>var max = arguments[0];</code>大概可以写成<code>var max = arguments;</code></li>
<li>实验后，不能，否则返回的是整个数组；2020-10-15 17:08:33</li>
</ul>
<p>3.1 复习；2021-4-2 09:41:22</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> max = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (max &lt; <span class="built_in">arguments</span>[i]) &#123;</span><br><span class="line">            max = <span class="built_in">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var max1 = maxValue([2, 15, 3, 456, 12]);</span></span><br><span class="line"><span class="comment">// var max2 = maxValue([3.45, 456, 8, 31, 67, 486]);</span></span><br><span class="line"><span class="comment">// 如果用数组的形式就会报错</span></span><br><span class="line"><span class="keyword">var</span> max1 = maxValue(<span class="number">2</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">456</span>, <span class="number">12</span>);</span><br><span class="line"><span class="keyword">var</span> max2 = maxValue(<span class="number">3.45</span>, <span class="number">456</span>, <span class="number">8</span>, <span class="number">31</span>, <span class="number">67</span>, <span class="number">486</span>);</span><br><span class="line"><span class="keyword">var</span> maxArr = [max1, max2];</span><br><span class="line"><span class="built_in">console</span>.log(maxArr);</span><br><span class="line"><span class="built_in">console</span>.log(max1);</span><br></pre></td></tr></table></figure>



<p>4.解析：</p>
<p>4.1 arguments如何接受所有实参的？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>直接接收，不需要另外说明什么；</p>
<ul>
<li>而且还不用写方括号，不是arguments[]。</li>
<li>注意arguments不是真正的数组，然后它应该算一个关键字；2020-10-8 01:14:38</li>
</ul>
<hr>
<h3 id="11-6-案例"><a href="#11-6-案例" class="headerlink" title="11.6 案例"></a>11.6 案例</h3><p>1.利用函数封装方式，翻转任意一个数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">newArr[newArr.length] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr1 = reverse([<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//自:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fanZhuan</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        newArr[newArr.length] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(newArr);</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line">&#125;</span><br><span class="line">fanZhuan([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br></pre></td></tr></table></figure>

<ul>
<li>1 .让i等于arr.length-1，就是让i从最大的一个索引开始；</li>
<li>2 .随着循环，newArr.length逐渐增加，到最大值时候，对应arr[0]，完成翻转；</li>
</ul>
<br />

<p>1.1 问题：</p>
<p>1.1.1 在上面arguments，在调用函数的时候，里面用的()</p>
<ul>
<li><code>console.log(maxValue(2, 4, 5, 9))</code>;</li>
</ul>
<p>1.1.2 而我们这里，需要套上[]；</p>
<ul>
<li>reverse([1, 3, 4, 6, 9]);</li>
</ul>
<p>1.1.3 我想，arguments本身说明了是数组的含义，回去复习。</p>
<ul>
<li>arguments展示形式是一个伪数组</li>
</ul>
<p>1.1.4 虽然不是真正的数组，但效果有了。而1里面的arr，是没有申明数组的，所以</p>
<p>调用的时候需要申明，需要使用[]；</p>
<ul>
<li>个人猜想；2020-10-8 22:12:05</li>
</ul>
<br />

<p>2.案例 2： 利用函数封装方式，对数组排序 – 冒泡排序</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">var</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble_sort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">var</span> a = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = a;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line">&#125;</span><br><span class="line">bubble_sort([<span class="number">1</span>, <span class="number">55</span>, <span class="number">2</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">61</span>]);</span><br></pre></td></tr></table></figure>

<br />

<p>3.案例 3： 判断闰年</p>
<ul>
<li>要求：输入一个年份，判断是否是闰年（闰年：能被4整除并且不能被100整数，或者能被400整除）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isRun</span>(<span class="params">year</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">     <span class="keyword">if</span> (year % <span class="number">4</span> === <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> !== <span class="number">0</span> || year % <span class="number">400</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(isRun(<span class="number">2010</span>));</span><br><span class="line"><span class="built_in">console</span>.log(isRun(<span class="number">2012</span>));</span><br><span class="line"><span class="comment">//自</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runNian</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nian = prompt(<span class="string">&#x27;输入一个年份,仅限数字&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (nian % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; nian % <span class="number">100</span> != <span class="number">0</span> || nian % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        alert(<span class="string">&#x27;是闰年&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">&#x27;不是&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">runNian();</span><br></pre></td></tr></table></figure>

<br />

<hr>
<h3 id="11-7-函调函"><a href="#11-7-函调函" class="headerlink" title="11.7 函调函"></a>11.7 函调函</h3><p>1.函数可以调用另外一个函数</p>
<ul>
<li>因为每个函数都是独立的代码块，用于完成特殊任务，因此经常会用到函数相互调用的情况。</li>
</ul>
<p>2.例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">111</span>);</span><br><span class="line">  fn2();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;fn1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">222</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;fn2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn1();</span><br></pre></td></tr></table></figure>

<p>3.案例 4： 用户输入年份，输出当前年份2月份的天数</p>
<ul>
<li>如果是闰年，则2月份是 29天， 如果是平年，则2月份是 28天</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runNian</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nian = prompt(<span class="string">&#x27;输入一个年份,仅限数字&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (nian % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; nian % <span class="number">100</span> != <span class="number">0</span> || nian % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        alert(<span class="string">&#x27;今年2月份有29天&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">&#x27;今年是平年，2月份有28天&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">runNian();</span><br></pre></td></tr></table></figure>

<ul>
<li>也没用两个函数。算了，这个意思也好懂，不需要案例进一步解析；</li>
</ul>
<hr>
<h3 id="11-8-匿名函数"><a href="#11-8-匿名函数" class="headerlink" title="11.8 匿名函数"></a>11.8 匿名函数</h3><p>函数有两种声明方式</p>
<h4 id="1-自定义"><a href="#1-自定义" class="headerlink" title="1. 自定义"></a>1. 自定义</h4><p>1.自定义函数方式(命名函数)</p>
<p>利用函数关键字 function 自定义函数方式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明定义方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;...&#125;</span><br><span class="line"><span class="comment">// 调用  </span></span><br><span class="line">fn();  </span><br></pre></td></tr></table></figure>

<p> 因为有名字，所以也被称为命名函数<br> 调用函数的代码既可以放到声明函数的前面，也可以放在声明函数的后面</p>
<h4 id="2-函数表达式方式-匿名函数）"><a href="#2-函数表达式方式-匿名函数）" class="headerlink" title="2. 函数表达式方式(匿名函数）"></a>2. 函数表达式方式(匿名函数）</h4><p>利用函数表达式方式的写法如下： </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是函数表达式写法，匿名函数后面跟分号结束</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;；</span><br><span class="line"><span class="comment">// 调用的方式，函数调用必须写到函数体下面</span></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>

<p> 因为函数没有名字，所以也被称为匿名函数<br> 这个fn 里面存储的是一个函数<br> 函数表达式方式原理跟声明变量方式是一致的<br> 函数调用的代码必须写到函数体后面</p>
<hr>
<h2 id="12-作用域"><a href="#12-作用域" class="headerlink" title="12. 作用域"></a>12. 作用域</h2><p>1.JavaScript 作用域</p>
<p>2.目标：</p>
<p>能够说出 JavaScript 的两种作用域<br>能够区分全局变量和局部变量<br>能够说出如何在作用域链中查找变量的值</p>
<h3 id="12-1-概述"><a href="#12-1-概述" class="headerlink" title="12.1 概述"></a>12.1 概述</h3><p>1.通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</p>
<p>2.JavaScript（es6前）中的作用域有两种：<br>全局作用域<br>局部作用域（函数作用域）</p>
<h4 id="2-全局作用域"><a href="#2-全局作用域" class="headerlink" title="2 全局作用域"></a>2 全局作用域</h4><p>作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件。</p>
<h4 id="3-局部作用域"><a href="#3-局部作用域" class="headerlink" title="3 局部作用域"></a>3 局部作用域</h4><p>作用于函数内的代码环境，就是局部作用域。 因为跟函数有关系，所以也称为函数作用域。</p>
<h4 id="4-JS没有块级作用域"><a href="#4-JS没有块级作用域" class="headerlink" title="4 JS没有块级作用域"></a>4 JS没有块级作用域</h4><p>块作用域由 { } 包括。<br>在其他编程语言中（如 java、c#等），在 if 语句、循环语句中创建的变量，仅仅只能在本 if 语句、本循环语句中使用，如下面的Java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">123</span>;</span><br><span class="line">  system.out.print(num);  <span class="comment">// 123</span></span><br><span class="line">&#125;</span><br><span class="line">system.out.print(num);    <span class="comment">// 报错,应该是找不到num，这个变量只作用于上面那个if里面</span></span><br></pre></td></tr></table></figure>

<p>Js中没有块级作用域（在ES6之前）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">123</span>); <span class="comment">//123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num);   <span class="comment">//123</span></span><br></pre></td></tr></table></figure>

<br />

<hr>
<h3 id="12-2-变量的作用域"><a href="#12-2-变量的作用域" class="headerlink" title="12.2 变量的作用域"></a>12.2 变量的作用域</h3><h4 id="1-分类"><a href="#1-分类" class="headerlink" title="1. 分类"></a>1. 分类</h4><p>在JavaScript中，根据作用域的不同，变量可以分为两种：<br>全局变量<br>局部变量</p>
<h4 id="2-全局"><a href="#2-全局" class="headerlink" title="2. 全局"></a>2. 全局</h4><p>在全局作用域下声明的变量叫做全局变量（在函数外部定义的变量）。<br>全局变量在代码的任何位置都可以使用<br>在全局作用域下 var 声明的变量 是全局变量<br>特殊情况下，在函数内不使用 var 声明的变量也是全局变量（不建议使用）</p>
<h4 id="3-局部"><a href="#3-局部" class="headerlink" title="3. 局部"></a>3. 局部</h4><p>在局部作用域下声明的变量叫做局部变量（在函数内部定义的变量）<br>局部变量只能在该函数内部使用<br>在函数内部 var 声明的变量是局部变量<br>函数的形参实际上就是局部变量</p>
<h4 id="4-区别"><a href="#4-区别" class="headerlink" title="4. 区别"></a>4. 区别</h4><p>全局变量：在任何一个地方都可以使用，只有在浏览器关闭时才会被销毁，因此比较占内存<br>局部变量：只在函数内部使用，当其所在的代码块被执行时，会被初始化；当代码块运行结束后，就会被销毁，因此更==节省内存空间==</p>
<hr>
<h3 id="12-3-作用域链"><a href="#12-3-作用域链" class="headerlink" title="12.3 作用域链"></a>12.3 作用域链</h3><p>只要是代码，就至少有一个作用域<br>写在函数内部的局部作用域<br>如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域<br>根据在内部函数可以访问外部函数变量的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作,作用域链</p>
<p>2.案例 1： 结果是几？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( num );</span><br><span class="line">    &#125;</span><br><span class="line">    f2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">456</span>;</span><br><span class="line">f1();</span><br></pre></td></tr></table></figure>

<p>案例分析：</p>
<p><img src="http://bucket-c70.test.upcdn.net/25/44.png" alt="44"></p>
<p><strong>作用域链：采取<red>就近原则</red>的方式来查找变量最终的值。</strong></p>
<p>3.案例 2： 结果是几？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="string">&#x27;22&#x27;</span>;</span><br><span class="line">    fn2();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">        fn3();</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(a); <span class="comment">//a的值 ?</span></span><br><span class="line">            <span class="built_in">console</span>.log(b); <span class="comment">//b的值 ?</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn1();</span><br></pre></td></tr></table></figure>

<ul>
<li>明显a=4，b=’22’;</li>
<li>不过打印出来的b，是22，没有单引号，但也是字符串型</li>
</ul>
<hr>
<h2 id="13-预解析"><a href="#13-预解析" class="headerlink" title="13. 预解析"></a>13. 预解析</h2><p>目标：</p>
<p>能够知道解析器运行 JS 分为哪两步<br>能够说出变量提升的步骤和运行过程<br>能够说出函数提升的步骤和运行过程</p>
<h3 id="13-1-预解析"><a href="#13-1-预解析" class="headerlink" title="13.1 预解析"></a>13.1 预解析</h3><p>1.问：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(num);  <span class="comment">// 结果是多少？</span></span><br></pre></td></tr></table></figure>

<ul>
<li>结果报错：Uncaught ReferenceError: num is not defined</li>
</ul>
<p>2.问：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(num);  <span class="comment">// 结果是多少？</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;   ？</span><br></pre></td></tr></table></figure>

<ul>
<li>undefined</li>
</ul>
<p>3.问：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fn();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;打印&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>打印</li>
</ul>
<p>4.问：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fn();</span><br><span class="line"><span class="keyword">var</span>  fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;想不到吧&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>报错：TypeError: fn is not a function</p>
</li>
<li><p>翻译：类型错误：fn不是函数</p>
</li>
<li><p>但是，如果把fn()放在下面，就不会报错；2020-10-11 03:01:44</p>
</li>
</ul>
<p>4.1 相当于：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn;</span><br><span class="line">fn();</span><br><span class="line">fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;想不到吧&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>1.所以当执行到第二行代码的时候，fn还不是函数，是个变量，就报错；</li>
<li>（我还以为这样的形式，也是变量，没想到会变成函数）</li>
</ul>
<p>5.JavaScript 代码是由浏览器中的 JavaScript 解析器来执行的。JavaScript 解析器在运行 JavaScript 代码的时候分为两步：预解析和代码执行。</p>
<ul>
<li>预解析：在当前作用域下, JS 代码执行之前，浏览器会默认把带有 var 和 function 声明的变量在内存中进行提前声明或者定义。</li>
<li>代码执行： 从上到下执行JS语句。</li>
</ul>
<p>6.预解析只会发生在通过 var 定义的变量和 function 上。学习预解析能够让我们知道为什么在变量声明之前访问变量的值是 undefined，为什么在函数声明之前就可以调用函数。</p>
<h3 id="13-2-变量与函数的预解析"><a href="#13-2-变量与函数的预解析" class="headerlink" title="13.2 变量与函数的预解析"></a>13.2 变量与函数的预解析</h3><h4 id="1-变量预解析（变量提升）"><a href="#1-变量预解析（变量提升）" class="headerlink" title="1. 变量预解析（变量提升）"></a>1. 变量预解析（变量提升）</h4><p>预解析也叫做变量、函数提升。<br>变量提升： 变量的声明会被提升到当前作用域的最上面，变量的赋值不会提升。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(num);  <span class="comment">// 结果是多少？</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;      <span class="comment">// ？</span></span><br></pre></td></tr></table></figure>

<p>1.预解析模样：先预解析，后执行代码；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br><span class="line">num = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 上面的代码，其实是这样执行的</span></span><br><span class="line"><span class="comment">// 上面的第4问，就在这里解析了；2021-4-7 09:56:11</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>1.因为代码执行： 从上到下执行JS语句。</p>
<p>所以打印出来的是undefined;</p>
</li>
</ul>
<h4 id="2-函数预解析（函数提升）"><a href="#2-函数预解析（函数提升）" class="headerlink" title="2. 函数预解析（函数提升）"></a>2. 函数预解析（函数提升）</h4><p>函数提升： 函数的声明会被提升到当前作用域的最上面，但是不会调用函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fn();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;打印&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>等于：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;打印&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>

<ul>
<li>所以，写在前面后面都一样；2020-10-11 03:12:29</li>
</ul>
<h4 id="3-练习-1"><a href="#3-练习-1" class="headerlink" title="3. 练习"></a>3. 练习</h4><p>1.练习： 结果是几？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 练习</span></span><br><span class="line">alert(a); <span class="comment">// 应该是null，结果是undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">alert(a) <span class="comment">// 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.实验运行后；</p>
<p>第一个alert(a)返回的是整个下面a函数所有代码；</p>
<p><img src="http://bucket-c70.test.upcdn.net/25/45.png" alt="45"></p>
<hr>
<h3 id="13-3-预解析案例"><a href="#13-3-预解析案例" class="headerlink" title="13.3 预解析案例"></a>13.3 预解析案例</h3><p>1.案例 1： 结果是几？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 案例1</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">fun();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(num);</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>undefind;</li>
<li>既然是undefind，那么就是函数内部先var num了，外面的var num是迷惑的；</li>
</ul>
<p>2.案例 2： 结果是几？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 案例2</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125; </span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>

<p>自己估算：</p>
<ul>
<li>第一个console：undefind;</li>
<li>20</li>
</ul>
<p>正确；2020-10-11 18:29:56</p>
<p>3.案例 3： 结果是几？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 案例3</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">18</span>;</span><br><span class="line">f1();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">9</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>a：undefined；</li>
<li>b：9</li>
<li>正确；2020-10-11 18:30:57</li>
</ul>
<p>4.案例 4： 结果是几？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 案例4</span></span><br><span class="line">f1();</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = b = c = <span class="number">9</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>函数外面3个console应该是报错，因为那个时候变量都没申明；</li>
<li>里面的全是9</li>
<li><red>错误</red>；2020-10-11 18:35:02</li>
</ul>
<p>4.1 不愧是最后一问；</p>
<p>解析：</p>
<ul>
<li>1.首先，预解析，调整位置：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = b = c = <span class="number">9</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>2.然后，var a = b = c = 9;解析：</p>
</li>
<li><p>2.1 var a = b = c = 9;不是申明了3个变量，而止申明了变量a；</p>
<p>var a = b = c = 9;</p>
<p>相当于：var a=9; b=9; c=9; b和c直接赋值，没有var声明，当全局变量看</p>
</li>
<li><p>2.2 集体声明写法：var a=9, b=9, c=9;要加逗号</p>
</li>
</ul>
<p>4.2 正确结果是：</p>
<p>9，9，9，9，9，ReferenceError: a is not defined（翻译：引用错误，未定义）</p>
<ul>
<li>1.var a 是在函数里面申明，是局部变量，外面是调用不到的。所以报错：未定义；2020-10-11 18:44:39</li>
</ul>
<hr>
<br />

<h2 id="14-对象"><a href="#14-对象" class="headerlink" title="14. 对象"></a>14. 对象</h2><p>1.目标：</p>
<p> 能够说出为什么需要对象<br> 能够使用字面量创建对象<br> 能够使用构造函数创建对象<br> 能够说出 new 的执行过程<br> 能够遍历对象</p>
<h3 id="14-1-对象"><a href="#14-1-对象" class="headerlink" title="14.1 对象"></a>14.1 对象</h3><h4 id="1-什么是对象？"><a href="#1-什么是对象？" class="headerlink" title="1. 什么是对象？"></a>1. 什么是对象？</h4><p>1.现实生活中：万物皆对象，对象是一个具体的事物，看得见摸得着的实物。例如，一本书、一辆汽车、一个人可以是“对象”，一个数据库、一张网页、一个与远程服务器的连接也可以是“对象”。</p>
<p>  明星    周星驰(星爷)  女朋友    迪丽热巴     班主任    咱们班班主任 </p>
<p>  苹果    这个苹果      手机    pink老师的小米手机     游戏    刺激战场 </p>
<p>2.在 JavaScript 中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。<br>对象是由属性和方法组成的。<br>属性：事物的特征，在对象中用属性来表示（常用名词）<br>方法：事物的行为，在对象中用方法来表示（常用动词）</p>
<h4 id="2-为什么需要对象？"><a href="#2-为什么需要对象？" class="headerlink" title="2. 为什么需要对象？"></a>2. 为什么需要对象？</h4><p>保存一个值时，可以使用变量，保存多个值（一组值）时，可以使用数组。如果要保存一个人的完整信息呢？<br>例如，将“张三疯”的个人的信息保存在数组中的方式为：</p>
<p><code>var arr = [‘张三疯’, ‘男&#39;, 128,154];</code></p>
<p>JS 中的对象表达结构更清晰，更强大。张三疯的个人信息在对象中的表达结构如下：</p>
<p>张三疯.姓名 =  ‘张三疯’;</p>
<p>张三疯.性别 = ‘男’; </p>
<p>张三疯.年龄 = 128; </p>
<p>张三疯.身高 = 154； </p>
<p>person.name =  ‘张三疯’;</p>
<p>person.sex = ‘男’; </p>
<p>person.age = 128; </p>
<p>person.height = 154； </p>
<h3 id="14-2-创建对象"><a href="#14-2-创建对象" class="headerlink" title="14.2 创建对象"></a>14.2 创建对象</h3><p>在 JavaScript 中，现阶段我们可以采用三种方式创建对象（object）：</p>
<ul>
<li>利用字面量创建对象 </li>
<li>利用 new Object 创建对象 </li>
<li>利用构造函数创建对象 </li>
</ul>
<h4 id="1-字面量创建"><a href="#1-字面量创建" class="headerlink" title="1. 字面量创建"></a>1. 字面量创建</h4><p>对象字面量：就是花括号 { } 里面包含了表达这个具体事物（对象）的属性和方法。<br>{ } 里面采取键值对的形式表示 </p>
<ul>
<li>键：相当于属性名</li>
<li>值：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）</li>
<li>用逗号分行；2020-10-12 05:17:42</li>
</ul>
<p>2.例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> star = &#123;</span><br><span class="line">    name : <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">    age : <span class="number">18</span>,</span><br><span class="line">    sex : <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    sayHi : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;大家好啊~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="2-对象的调用"><a href="#2-对象的调用" class="headerlink" title="2. 对象的调用"></a>2. 对象的调用</h4><p>2.1 对象里面的属性调用 : 对象.属性名 ，这个小点 . 就理解为“ 的 ”  </p>
<p>对象里面属性的另一种调用方式 : 对象[‘属性名’]，注意方括号里面的属性必须加引号，我们后面会用</p>
<p>2.2 对象里面的方法调用：对象.方法名() ，注意这个方法名字后面一定加括号 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(star.name)     <span class="comment">// 调用名字属性</span></span><br><span class="line"><span class="built_in">console</span>.log(star[<span class="string">&#x27;name&#x27;</span>])  <span class="comment">// 调用名字属性</span></span><br><span class="line">star.sayHi();              <span class="comment">// 调用 sayHi 方法,注意，一定不要忘记带后面的括号</span></span><br></pre></td></tr></table></figure>

<p>3.练习：请按照要求写出对象</p>
<p>请用对象字面量的形式创建一个名字为可可的狗对象。<br>具体信息如下：<br>姓名：可可<br>类型(type)：阿拉斯加犬<br>年龄：5岁，<br>颜色：棕红色。<br>技能：汪汪汪(bark) ，演电影 (showFilm)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自</span></span><br><span class="line"><span class="keyword">var</span> keke = &#123;</span><br><span class="line">  name: <span class="string">&#x27;可可&#x27;</span>,</span><br><span class="line">  type: <span class="string">&#x27;阿拉斯加犬&#x27;</span>,</span><br><span class="line">  age: <span class="number">5</span>,</span><br><span class="line">  color: <span class="string">&#x27;棕红色&#x27;</span>,</span><br><span class="line">  skill: <span class="string">&#x27;汪汪&#x27;</span> + <span class="string">&#x27;，&#x27;</span> + <span class="string">&#x27;showFilm&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(keke.skill);</span><br></pre></td></tr></table></figure>

<br />

<h4 id="3-变量、属性、函数、方法"><a href="#3-变量、属性、函数、方法" class="headerlink" title="3. 变量、属性、函数、方法"></a>3. 变量、属性、函数、方法</h4><p>1.变量：单独声明赋值，单独存在<br>2.属性：对象里面的变量称为属性，不需要声明，用来描述该对象的特征</p>
<ul>
<li><p>1.属性和变量都是用来存储数据的</p>
</li>
<li><p>2.变量需要申明，属性不用；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="comment">// new 后面第一个字母要大些，而字面量创建方式，var 后面 不需要大写；</span></span><br><span class="line">  num: <span class="number">18</span>, <span class="comment">// 不用 var num:18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>3.函数：单独存在的，通过“函数名()”的方式就可以调用<br>4.方法：对象里面的函数称为方法，方法不需要声明，使用“对象.方法名()”的方式就可以调用，方法用来描述该对象的行为和功能。 </p>
<hr>
<h4 id="4-new-Object创建"><a href="#4-new-Object创建" class="headerlink" title="4. new Object创建"></a>4. new Object创建</h4><p>跟我们前面学的  new Array()  原理一致</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> andy = <span class="keyword">new</span> Obect();</span><br><span class="line">andy.name = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">andy.age = <span class="number">18</span>;</span><br><span class="line">andy.sex = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">andy.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;大家好啊~&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>但明显不同，不是花括号里面了，格式也没有字面量创建的好看；2020-10-12 05:32:13</li>
<li>语句的结尾也是平常的分号’;’</li>
</ul>
<p>Object() ：第一个字母大写<br>new Object() ：需要 new 关键字<br>使用的格式：对象.属性 =  值;     </p>
<p><strong>2.练习：</strong></p>
<p>请用new Object 形式创建一个鸣人对象。<br>具体信息如下：<br>姓名：鸣人<br>性别：男<br>年龄：19岁<br>技能（skill）：影分身术</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mingRen=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">mingRen.name=<span class="string">&#x27;鸣人&#x27;</span>;</span><br><span class="line">mingRen.sex=<span class="string">&#x27;难&#x27;</span>;</span><br><span class="line">mingRen.age=<span class="number">19</span>;</span><br><span class="line">mingRen.skill=<span class="string">&#x27;影分身&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(mingRen);</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="5-构造函数来创建"><a href="#5-构造函数来创建" class="headerlink" title="5. 构造函数来创建"></a>5. 构造函数来创建</h4><p>0.为什么需要使用构造函数来创建对象呢？</p>
<ul>
<li>1.因为，前两种创建对象的方式，一次只能创建一个对象。</li>
</ul>
<p>0.1 比如，创建一个a对象与一个b对象，那么他们是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  name:<span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  age:<span class="number">18</span>,</span><br><span class="line">  sex:<span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b=&#123;</span><br><span class="line">  name:<span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">  age:<span class="string">&#x27;19&#x27;</span>,</span><br><span class="line">  sex:<span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>1.里面的键，重复，只是值不同；</li>
<li>2.重复代码；</li>
<li>3.而函数，就是专门用于重复代码的；2020-10-12 05:52:21</li>
<li>4.为什么要另取一个名字，叫构造函数？因为里面装的是对象….<a href="https://www.bilibili.com/video/BV1Sy4y1C7ha?p=148">视频3:15</a>说的</li>
</ul>
<p><strong>1.构造函数</strong> ：是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 new 运算符一起使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。</p>
<p>在 js 中，使用构造函数要时要<red>注意</red>以下两点：</p>
<ul>
<li>构造函数用于创建某一类对象，其首字母要<red>大写</red></li>
<li>构造函数要和 new 一起使用才有意义</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">this</span>.name = name;</span><br><span class="line">     <span class="built_in">this</span>.age = age;</span><br><span class="line">     <span class="built_in">this</span>.sex = sex;</span><br><span class="line">     <span class="built_in">this</span>.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(<span class="string">&#x27;我的名字叫：&#x27;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27;，年龄：&#x27;</span> + <span class="built_in">this</span>.age + <span class="string">&#x27;，性别：&#x27;</span> + <span class="built_in">this</span>.sex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bigbai = <span class="keyword">new</span> Person(<span class="string">&#x27;大白&#x27;</span>, <span class="number">100</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> smallbai = <span class="keyword">new</span> Person(<span class="string">&#x27;小白&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bigbai.name);</span><br><span class="line"><span class="built_in">console</span>.log(smallbai.name);</span><br></pre></td></tr></table></figure>

<p>注意<br>1.构造函数约定首字母大写。</p>
<p>2.函数内的属性和方法前面需要添加 this ，表示当前对象的属性和方法。</p>
<p>2.1 如果不这样写的话，估计不能用对象的语法；也就是 对象名点属性or方法名；</p>
<ul>
<li>这里当前对象，不是函数名person。是 bigbai 那些？<ul>
<li>重温；2021-5-10 11:16:09</li>
<li>都是对象名，Person应该算是方法名吧，函数名；</li>
<li>这个函数却创建了一个对象格式的玩意？</li>
</ul>
</li>
<li>是第9，第10行，用 new Object创建对象时的，对象名。也就是对象的变量名；2020-10-12 19:04:57</li>
<li>（自己的想法，正确与否不清楚）</li>
</ul>
<p>2.1 this指向了这个函数，这个函数叫person。this=person。</p>
<ul>
<li>那里面直接写person是否可以？2021-4-8 11:02:24</li>
<li>代码实验，不可以。</li>
</ul>
<p>3.构造函数中不需要 return 返回结果。</p>
<ul>
<li>emm，忘记了，可以去复习一下return；</li>
</ul>
<p>4.当我们创建对象的时候，必须用 new 来调用构造函数。</p>
<ul>
<li><p>1.如果用了申明变量，就是这样：<code>var bigbai = new Person(&#39;大白&#39;, 100, &#39;男&#39;);</code></p>
</li>
<li><p>2.如果没用申明变量，就这样：<code>new Person()</code>，在普通调用函数的格式前面加一个new；</p>
</li>
<li><p>3.构造函数为对象服务，一般函数体里面没有实参，调用函数基本会加上实参。<code>new Person(&#39;大白&#39;, 100, &#39;男&#39;);</code></p>
</li>
<li><p>4.如果要打印，就需要用申明变量，<del>不然无法选取某个键</del>；</p>
<p>然而我实验后：<code>console.log(new Person(&#39;大白&#39;, 101, &#39;男&#39;).age);</code>发现可行；2333</p>
</li>
</ul>
<p><strong>2.练习：</strong></p>
<p>利用构造函数创建两个英雄对象。函数中的公共部分包括：姓名属性(name)，类型属性（type），血量属性（blood）和攻击方式（attack）。<br>英雄对象的信息如下 ：<br> 廉颇   力量型    500血量    攻击 ：近战<br> 后羿   射手型    100血量    攻击： 远程</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hero</span>(<span class="params">name,type,blood,attack</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name=name;</span><br><span class="line">  <span class="built_in">this</span>.type=type;</span><br><span class="line">  <span class="built_in">this</span>.blood=blood;</span><br><span class="line">  <span class="built_in">this</span>.attack=attack;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> lianPo = <span class="keyword">new</span> Hero(<span class="string">&#x27;廉颇&#x27;</span>,<span class="string">&#x27;力量型&#x27;</span>,<span class="string">&#x27;500&#x27;</span>,<span class="string">&#x27;近战&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> houYi = <span class="keyword">new</span> Hero(<span class="string">&#x27;后裔&#x27;</span>,<span class="string">&#x27;射手型&#x27;</span>,<span class="string">&#x27;100&#x27;</span>,<span class="string">&#x27;远程&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(lianPo);</span><br><span class="line"><span class="built_in">console</span>.log(houYi);</span><br></pre></td></tr></table></figure>

<br />

<hr>
<h4 id="6-构造函数与对象"><a href="#6-构造函数与对象" class="headerlink" title="6. 构造函数与对象"></a>6. 构造函数与对象</h4><p>1.构造函数，如 Stars()，抽象了对象的公共部分，封装到了函数里面，它泛指某一大类（class）<br>2.创建对象，如 new Stars()，特指某一个，通过 new 关键字创建对象的过程我们也称为对象实例化 </p>
<ul>
<li>1.创建对象，是一个具体的事物；</li>
<li>2.比如上面的练习，lianPo，houYi，是具体的某位英雄；</li>
<li>3.而Hero，是指英雄这一类；</li>
<li>2020-10-14 06:02:11.</li>
</ul>
<hr>
<h3 id="14-3-new关键字"><a href="#14-3-new关键字" class="headerlink" title="14.3 new关键字"></a>14.3 new关键字</h3><p>0.为什么调用构造函数，得用new</p>
<ul>
<li>new Person()，而不是Person();</li>
</ul>
<p>1.new 在执行时会做四件事情：</p>
<ul>
<li>1.new构造函数会在内存中创建一个新的空对象。</li>
<li>2.让 this 指向这个新的对象。</li>
<li>3.执行构造函数里面的代码，给这个新对象添加属性和方法。</li>
<li>4.返回这个新对象（所以构造函数里面不需要return）。</li>
</ul>
<p>2.New 和构造函数确认了眼神</p>
<ul>
<li>1.他们俩生了一个宝宝。</li>
<li>2.这个宝宝必须是亲生的 this指向。</li>
<li>3.教孩子读书一肚子墨水。</li>
<li>4.长大挣钱回报父母。</li>
</ul>
<hr>
<h3 id="14-4-遍历对象"><a href="#14-4-遍历对象" class="headerlink" title="14.4 遍历对象"></a>14.4 遍历对象</h3><p>0.平常我们输出对象的属性，只能一个个console.log(obj.name);</p>
<ul>
<li>1.万一一个对象有很多属性呢？</li>
<li>2.可以用上面学习过的for循环，遍历打印吗？不行</li>
<li>2.1 我们对象是无序的，无法提供计数，是无法使用的</li>
<li>2.2 传统的for循环，是无法打印的</li>
</ul>
<p>1.for…in 语句用于对数组或者对象的属性进行循环操作。</p>
<ul>
<li>建议 对 对象使用即可，数组似乎有其他更好的</li>
</ul>
<p>其语法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (变量 <span class="keyword">in</span> 对象名字) &#123;</span><br><span class="line">    <span class="comment">// 在此执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>语法中的变量是自定义的，它需要符合命名规范，通常我们会将这个变量写为 k 或者 key。</p>
<ul>
<li>1.k不需要取值；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(k);      <span class="comment">// 这里的 k 是属性名</span></span><br><span class="line">    <span class="built_in">console</span>.log(obj[k]); <span class="comment">// 这里的 obj[k] 是属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.解析</p>
<ul>
<li><p>1.<code>console.log(k);</code>输出的是属性名；obj[k]的格式，console.log(obj[k]);输出属性值；</p>
<p>1.1 在对象的调用里有说：console.log(star[‘name’])；这种括号的写法，属性名是要加引号的，应该是双引号和单引号都可以</p>
<p>但是，这里不用加。</p>
<p>1.2 要说原因，我也不清楚。但一方是真正的属性名，一方是一个变量，也许是这点；2020-10-14 20:19:17</p>
</li>
<li><p>2.实验与案例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">&#x27;70&#x27;</span>,</span><br><span class="line">  age: <span class="number">12</span>,</span><br><span class="line">  sex: <span class="string">&#x27;难&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(k);</span><br><span class="line">  <span class="built_in">console</span>.log(obj[k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.1 为什么打印出的是交互的，而不是属性在一起，值在一起，这个…我也不知道；2020-10-14 19:51:03</p>
</li>
</ul>
<p>3.ts那边</p>
<ul>
<li>与typescript那边遍历对象很不同；2020-10-14 18:57:45</li>
<li>可能这是旧方法，那边直接讲的新方法</li>
<li>结果过去看了看，只有遍历数组？？？2020-10-14 19:35:24</li>
</ul>
<p>4.重温：2021-4-20 15:14:59</p>
<ul>
<li>1.根本没有解析好不好。百度</li>
</ul>
<p>4.1 <a href="https://www.runoob.com/jsref/jsref-forin.html">https://www.runoob.com/jsref/jsref-forin.html</a></p>
<p>for/in 语句用于循环对象属性。</p>
<p>循环中的代码每执行一次，就会对数组的元素或者对象的属性进行一次操作。</p>
<p>JavaScript 支持不同类型的循环：</p>
<ul>
<li><strong><a href="https://www.runoob.com/jsref/jsref-for.html">for</a></strong> - 循环代码块一定的次数</li>
<li>for/in - 循环遍历对象的属性</li>
<li><strong><a href="https://www.runoob.com/jsref/jsref-while.html">while</a></strong> - 当指定的条件为 true 时循环指定的代码块</li>
<li><strong><a href="https://www.runoob.com/jsref/jsref-dowhile.html">do/while</a></strong> - 同样当指定的条件为 true 时循环指定的代码块</li>
</ul>
<p><strong>注意：</strong> 不要使用 for/in 语句来循环数组的索引，你可以使用 <a href="https://www.runoob.com/jsref/jsref-for.html">for</a> 语句替代。</p>
<hr>
<h3 id="14-5-小结"><a href="#14-5-小结" class="headerlink" title="14.5 小结"></a>14.5 小结</h3><p>1.对象可以让代码结构更清晰</p>
<p>2.对象是复杂数据类型object。</p>
<p>3.本质：对象就是一组无序的相关属性和方法的集合。</p>
<p>4.构造函数泛指某一大类，比如苹果，不管是红色苹果还是绿色苹果，都统称为苹果。</p>
<p>5.对象实例特指一个事物，比如这个苹果、正在给你们讲课的pink老师等。</p>
<p>6.for…in 语句用于对对象的属性进行循环操作。</p>
<hr>
<h2 id="15-内置对象"><a href="#15-内置对象" class="headerlink" title="15. 内置对象"></a>15. 内置对象</h2><p>1.目标：</p>
<p> 能够说出什么是内置对象<br> 能够根据文档查询指定API的使用方法<br> 能够使用 Math 对象的常用方法<br> 能够使用 Date 对象的常用方法<br> 能够使用 Array 对象的常用方法<br> 能够使用 String 对象的常用方法</p>
<h3 id="15-1-内置对象"><a href="#15-1-内置对象" class="headerlink" title="15.1 内置对象"></a>15.1 内置对象</h3><p>1.JavaScript 中的对象分为3种：自定义对象 、内置对象、 浏览器对象<br>2.前面两种对象是JS 基础 内容，属于 ECMAScript；  第三个浏览器对象属于我们JS 独有的， 我们JS API 讲解<br>3.内置对象就是指 JS 语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是最基本而必要的功能（属性和方法）<br>4.内置对象最大的优点就是帮助我们快速开发<br>5.JavaScript 提供了多个内置对象：Math、 Date 、Array、String等</p>
<h3 id="15-2-查文档"><a href="#15-2-查文档" class="headerlink" title="15.2 查文档"></a>15.2 查文档</h3><h4 id="1-MDN"><a href="#1-MDN" class="headerlink" title="1. MDN"></a>1. MDN</h4><p>1.内置对象非常多，这里Math、 Date 、Array、String等，只是常用而已；2020-10-14 20:48:55</p>
<p>学习一个内置对象的使用，只要学会其常用成员的使用即可，我们可以通过查文档学习，可以通过MDN/W3C来查询。<br>Mozilla 开发者网络（MDN）提供了有关开放网络技术（Open Web）的信息，包括 HTML、CSS 和万维网及 HTML5 应用的 API。<br>MDN:   <a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p>
<p>2.pink老师说，这种中括号，表示，可以有也可以没有；</p>
<p><img src="http://bucket-c70.test.upcdn.net/25/48.png" alt="48"></p>
<h4 id="2-如何学习对象中的方法"><a href="#2-如何学习对象中的方法" class="headerlink" title="2. 如何学习对象中的方法"></a>2. 如何学习对象中的方法</h4><p>查阅该方法的功能<br>查看里面参数的意义和类型<br>查看返回值的意义和类型<br>通过 demo 进行测试</p>
<ul>
<li>大概是，写点代码实验对象方法的效果；2020-10-15 00:28:20</li>
</ul>
<hr>
<h3 id="15-3-math对象"><a href="#15-3-math对象" class="headerlink" title="15.3 math对象"></a>15.3 math对象</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h4><p>1.Math 对象不是构造函数，不需要用new调用，它具有数学常数和函数的属性和方法。跟数学相关的运算（求绝对值，取整、最大值等）可以使用 Math 中的成员。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.PI         <span class="comment">// 圆周率</span></span><br><span class="line"><span class="built_in">Math</span>.floor()      <span class="comment">// 向下取整</span></span><br><span class="line"><span class="built_in">Math</span>.ceil()            <span class="comment">// 向上取整</span></span><br><span class="line"><span class="built_in">Math</span>.round()           <span class="comment">// 四舍五入版 就近取整   注意 -3.5   结果是  -3 </span></span><br><span class="line"><span class="built_in">Math</span>.abs()         <span class="comment">// 绝对值</span></span><br><span class="line"><span class="built_in">Math</span>.max()/<span class="built_in">Math</span>.min()     <span class="comment">// 求最大和最小值 </span></span><br></pre></td></tr></table></figure>

<p>注意：上面的方法必须带括号</p>
<ul>
<li>详细信息，例如举例说明等，查看MDN文档；</li>
</ul>
<p>1.2 返回给定的一组数字中的最大值。如果给定的参数中至少有一个参数无法被转换成数字，则会返回 NaN。</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/max">MDN</a></li>
</ul>
<p>2.案例：封装自己的数学对象</p>
<p>利用对象封装自己的数学对象 里面有 PI 最大值和最小值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myMath = &#123;</span><br><span class="line">  PI: <span class="number">3.14</span>,</span><br><span class="line">  max: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> max1 = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(max1 &lt; <span class="built_in">arguments</span>[i])&#123;</span><br><span class="line">        max1=<span class="built_in">arguments</span>[i]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max1;</span><br><span class="line">  &#125;,</span><br><span class="line">  min: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> min=<span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(min &gt; <span class="built_in">arguments</span>[i])&#123;</span><br><span class="line">        min=<span class="built_in">arguments</span>[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(myMath.max(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>));</span><br><span class="line"><span class="built_in">console</span>.log(myMath.min(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>));</span><br></pre></td></tr></table></figure>

<br />

<h5 id="1-2-Math-floor"><a href="#1-2-Math-floor" class="headerlink" title="1.2 Math.floor()"></a>1.2 Math.floor()</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">1.1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">1.9</span>)); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h5 id="1-3-ceil"><a href="#1-3-ceil" class="headerlink" title="1.3 .ceil"></a>1.3 .ceil</h5><p>1.向上取整</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// (2) Math.ceil()   ceil 天花板 向上取整  往最大了取值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">1.1</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">1.9</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<br />

<h5 id="1-4-四舍五入"><a href="#1-4-四舍五入" class="headerlink" title="1.4 四舍五入"></a>1.4 四舍五入</h5><p>Math.round()   四舍五入  其他数字都是四舍五入，但是 .5 特殊 它往大了取</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">1.1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">1.5</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">1.9</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">-1.1</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">-1.5</span>)); <span class="comment">// 这个结果是 -1</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>1.我们人会这么想，.5以下小了，所以舍，.5以上包括.5够大了，进1</p>
</li>
<li><p>2.而负数，.1~.4够大，进；.5~.9,负的更多，更小了，舍；</p>
</li>
<li><p>3.但计算机是往大的那边靠，或者是没有给负数的.5另写逻辑</p>
<p><img src="http://bucket-c70.test.upcdn.net/25/49.png" alt="49"></p>
</li>
</ul>
<hr>
<h4 id="2-random"><a href="#2-random" class="headerlink" title="2. random()"></a>2. random()</h4><h5 id="2-1-概述与理解"><a href="#2-1-概述与理解" class="headerlink" title="2.1 概述与理解"></a>2.1 概述与理解</h5><p>1.随机数方法 random()</p>
<p>random() 方法可以随机返回一个浮点数，其取值范围是 [0，1)，左闭右开 0 &lt;= x &lt; 1 </p>
<p><code>console.log(Math.random());</code></p>
<p>1.1 得到一个两数之间的随机整数，包括两个数在内</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getRandom(<span class="number">1</span>,<span class="number">10</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li><p>1.怎么理解这代码？</p>
</li>
<li><p>2.首先是Math.floor，向下取整。为什么要这个？举例理解：</p>
<p>2.1 比如(2.2, 5.6)，要取这两个数之间的随机整数。</p>
<p>2.2 不对，想到这，我忽然发现了不对，这是为了随机出来的浮点数取整，而不是为了实参min与max取整</p>
<p>2.3 思考思路，应该<red>从里到外</red>，而不是从外到里，先分解里面的方法，再看外面的方法</p>
</li>
<li><p>3.那么，先看Math.random()，random() 方法可以随机返回一个浮点数，其取值范围是 [0，1)，左闭右开 0 &lt;= x &lt; 1</p>
<p>3.1 (max - min + 1)，举例说明，还是(2.2, 5.6)</p>
<p>3.2 (5.6-2.2+1)=3.4+1=4.4</p>
<p>3.3 于是，Math.random() * (max - min + 1)的值区间是[0,1)*4.4=[0,4.4)，显然不是我们想要的[2.2, 5.6]的的区间；</p>
<p>继续</p>
<p>3.4 因为最外面有向下取整，Math.floor，所以随机数区间为[0, 4)</p>
<p>3.5 最后有一个+min；区间就变成：[0, 4) + 2.2 = [2.2, 5.2)；</p>
<p>3.6 emm，这区间好像有点不对劲。</p>
<p>3.7 所以在MDN里面，代码是这样的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomIntInclusive</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  min = <span class="built_in">Math</span>.ceil(min);</span><br><span class="line">  max = <span class="built_in">Math</span>.floor(max);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min; <span class="comment">//含最大值，含最小值 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.8 把min向上取整，max向下取整。</p>
<p>3.9 但是如果这样，那么在max-min的时候就会少一个1了；比如继续用min=2.2，max=5.6举例；</p>
<p>min=3，max=5</p>
<p>(Math.random() * (max - min + 1) = [0,1)*(5-3+1)=[0,3)</p>
<p>外面有.floor，则[0,2]</p>
<p>3.10 然后外面加一个min，[0,3)+2=[2,4]</p>
<p>3.11 这结果也不对啊2333</p>
<p>3.12 但是代码实验出的区间是[3,5]，哪里算错了？2020-10-16 17:52:02</p>
<p>难道是3.9的最后一步？如果那一步我先不算；</p>
<p>3.13 (Math.random() * (max - min + 1) = [0,1)*(5-3+1)=[0,3)</p>
<p>+min=[2,5)，也不行，要有5，区间要大于5才行；</p>
<p>3.14 发现<red>错误</red>，3.10错误，把min当做了2，这里的min已经是3了，上面3.13也是这样的错误</p>
<p>3.15 +min=+3=[0,2]+3=[3,5] 完成；2020-10-16 17:56:17</p>
<br />
</li>
<li><p>4.(3.~3.15)是以举例实验记录函数的逻辑，那么怎么从无到有的理解了？怎么能记录出公式呢？</p>
<p>4.1 首先明白，Math.random()只在[0,1)随机一个浮点数。</p>
<p>4.2 如果要让它随机产生[0,x)的区间，只需要乘以一个x；</p>
<p>这个x是什么？是max-min的差吗？</p>
<p>4.3 如果是差，举例10-1=9，[0,1)*9=[0,9)，右区间差一个。</p>
<p>4.4 我忽然想起，如果是10-2，10-3，10-4，不正是差2个，差3个，差4个么；</p>
<p>这里不是差一个+1，而是差一个min；</p>
<p>无法单独做到[0,x)，<red>直接[x,y)</red></p>
<p>4.5 在外面加一个min：(Math.random()*(max-min))+min;</p>
<p>4.6 如果取整就加一个向下取整: Math.floor(Math.random() * (max - min)) + min</p>
<p>举例(1,10)</p>
<p>Math.floor([0,1)*(10-1))+1=Math.floor([1,9))+1=[0,8]+1=[1,9]=[min,max-1](min,max∈Z)</p>
<p>(min,max∈Z)=min，max只能是整数；</p>
<p>这是，<red>任意区间随机整数</red>，加左闭合，右开合。</p>
</li>
<li><p>5.理解了随机区间+左闭右开，下一步是随机区间+左闭右闭；</p>
<p>5.1 直接把max-min的差+1，也就是(max-min+1)</p>
<p>5.2 因为Math.random()的结果是[0,1)，因为左闭合的是0，所以乘以多少，左闭合都不会改变，只会增加右开区间的最大值；</p>
<p>这也需要(min,max∈Z)=min，max只能是整数；</p>
<p>5.3 浮点数之间下次再想；2020-10-16 18:24:51</p>
</li>
</ul>
<br />

<h5 id="2-2-案例-随机点名"><a href="#2-2-案例-随机点名" class="headerlink" title="2.2 案例-随机点名"></a>2.2 案例-随机点名</h5><p>1.2 随机点名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  min = <span class="built_in">Math</span>.ceil(min);</span><br><span class="line">  max = <span class="built_in">Math</span>.floor(max);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min; <span class="comment">//含最大值，含最小值 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;王渊&#x27;</span>,<span class="string">&#x27;吴豪&#x27;</span>,<span class="string">&#x27;我&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr[getRandom(<span class="number">0</span>,<span class="number">4</span>)]);</span><br><span class="line"><span class="built_in">console</span>.log(arr[getRandom(<span class="number">0</span>,arr.length<span class="number">-1</span>)]);</span><br></pre></td></tr></table></figure>



<h5 id="2-3-案例-猜数字"><a href="#2-3-案例-猜数字" class="headerlink" title="2.3 案例-猜数字"></a>2.3 案例-猜数字</h5><p>2.案例：猜数字游戏</p>
<p>程序随机生成一个 1~ 10 之间的数字，并让用户输入一个数字，<br>2.1.如果大于该数字，就提示，数字大了，继续猜；<br>2.2.如果小于该数字，就提示数字小了，继续猜；</p>
<p>2.3.如果等于该数字，就提示猜对了， 结束程序。</p>
<p>3.案例分析</p>
<p>3.1 随机生成一个1~10 的整数  我们需要用到 Math.random() 方法。<br>3.2 需要一直猜到正确为止，所以一直循环。<br>3.3 用while 循环合适更简单。<br>3.4 核心算法：使用 if  else if 多分支语句来判断大于、小于、等于。 </p>
<p>4.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> random1 = getRandom(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(random1);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(prompt(<span class="string">&quot;随机一个数[1,10]，你猜个数字&quot;</span>));</span><br><span class="line">  <span class="keyword">if</span> (num &gt; random1) &#123;</span><br><span class="line">    alert(<span class="string">&#x27;你好，猜大了&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; random1) &#123;</span><br><span class="line">    alert(<span class="string">&#x27;猜小了&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">&#x27;猜对了，666&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br />

<h3 id="15-4-日期对象"><a href="#15-4-日期对象" class="headerlink" title="15.4 日期对象"></a>15.4 日期对象</h3><h4 id="1-Date-概述"><a href="#1-Date-概述" class="headerlink" title="1. Date 概述"></a>1. Date 概述</h4><p> Date 对象和 Math 对象不一样，他是一个构造函数，所以我们需要实例化后才能使用</p>
<ul>
<li>构造函数需要用new来调用；2020-10-17 03:38:18</li>
</ul>
<p>Date 实例用来处理日期和时间</p>
<p>MDN文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date</a></p>
<h4 id="2-date-使用"><a href="#2-date-使用" class="headerlink" title="2. date()使用"></a>2. date()使用</h4><p>Date()方法的使用</p>
<p>1.获取当前时间必须实例化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(now);</span><br></pre></td></tr></table></figure>

<p>2.Date() 构造函数的参数</p>
<p>2.1 如果括号里面有时间，就返回参数里面的时间。例如日期格式字符串为‘2019-5-1’，可以写成new Date(‘2019-5-1’)  或者 new Date(‘2019/5/1’)</p>
<ul>
<li><p>如果Date()不写参数，就返回当前时间</p>
</li>
<li><p>如果Date()里面写参数，就返回括号里面输入的时间 </p>
</li>
</ul>
<p>2.2 数字型格式：2019,10,01 (用逗号分隔)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date1); <span class="comment">//返回的是11月不是10月</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>返回的是：Fri Nov 01 2019 00:00:00 GMT+0800 (中国标准时间)</p>
</li>
<li><p>Nov是十一月的缩写：November英 [nəʊˈvembə(r)]   美 [noʊˈvembər] n.十一月</p>
</li>
<li><p>1.为什么是返回的11月，而不是12月？；</p>
<p>1.1 字符串写法不会增加一月；</p>
</li>
</ul>
<hr>
<h4 id="3-日期格式化"><a href="#3-日期格式化" class="headerlink" title="3. 日期格式化"></a>3. 日期格式化</h4><p>我们想要 2019-8-8  8:8:8 格式的日期，要怎么办？<br>需要获取日期指定的部分，所以我们要手动的得到这种格式</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>代码</th>
</tr>
</thead>
<tbody><tr>
<td>getFullYear()</td>
<td>获取当年</td>
<td>dateObj.getFullYear()</td>
</tr>
<tr>
<td>getMonth()</td>
<td>获取当月(0~11)(从0开始的)</td>
<td>dObj.getMonth()</td>
</tr>
<tr>
<td>getDate()</td>
<td>获取当天日期</td>
<td>dObj.getDate()</td>
</tr>
<tr>
<td>getDay()</td>
<td>获取星期几（周日0到周六6）</td>
<td>dObj.getDay()</td>
</tr>
<tr>
<td>getHours()</td>
<td>获取当前小时</td>
<td>dObj.getHours()</td>
</tr>
<tr>
<td>getMinutes()</td>
<td>获取当前分钟</td>
<td>dObj.getMinutes()</td>
</tr>
<tr>
<td>getSeconds()</td>
<td>获取当前秒钟</td>
<td>dObj.getSecond()</td>
</tr>
</tbody></table>
<p>1.注意</p>
<ul>
<li><p>1.getMonth()的一月是0，12月是11，一般需要+1</p>
<p>console.log(date.getMonth()+1);</p>
</li>
<li><p>2.getDay();的周日返回的是0；</p>
</li>
</ul>
<p>2.首先我们先弄前面的2019-8-8；</p>
<ul>
<li>年月日</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式化日期 年月日 </span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.getFullYear()); <span class="comment">// 返回当前日期的年  </span></span><br><span class="line"><span class="built_in">console</span>.log(date.getMonth() + <span class="number">1</span>); <span class="comment">// 月份 返回的月份小1个月   记得月份+1 呦</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getDate()); <span class="comment">// 返回的是 几号</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getDay()); <span class="comment">// 3  周一返回的是 1 周六返回的是 6 但是 周日返回的是 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> year = date.getFullYear();</span><br><span class="line"><span class="keyword">var</span> month = date.getMonth() + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> dates = date.getDate();</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;星期日&#x27;</span>, <span class="string">&#x27;星期一&#x27;</span>, <span class="string">&#x27;星期二&#x27;</span>, <span class="string">&#x27;星期三&#x27;</span>, <span class="string">&#x27;星期四&#x27;</span>, <span class="string">&#x27;星期五&#x27;</span>, <span class="string">&#x27;星期六&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> day = date.getDay();</span><br><span class="line"><span class="comment">// console.log(&#x27;今天是：&#x27; + year + &#x27;年&#x27; + month + &#x27;月&#x27; + dates + &#x27;日 &#x27; + arr[day]);</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;今天是：&#x27;</span> + year + <span class="string">&#x27;-&#x27;</span> + month + <span class="string">&#x27;-&#x27;</span> + dates + <span class="string">&#x27; &#x27;</span> + arr[day]);</span><br></pre></td></tr></table></figure>

<p>3.同理，时分秒</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.getFullYear()); <span class="comment">// 返回当前日期的年  2019</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getMonth() + <span class="number">1</span>); <span class="comment">// 月份 返回的月份小1个月   记得月份+1 呦</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getDate()); <span class="comment">// 返回的是 几号</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getDay()); <span class="comment">// 3  周一返回的是 1 周六返回的是 6 但是 周日返回的是 0</span></span><br><span class="line"><span class="comment">// 我们写一个 2019年 5月 1日 星期三</span></span><br><span class="line"><span class="keyword">var</span> year = date.getFullYear();</span><br><span class="line"><span class="keyword">var</span> month = date.getMonth() + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> dates = date.getDate();</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;星期日&#x27;</span>, <span class="string">&#x27;星期一&#x27;</span>, <span class="string">&#x27;星期二&#x27;</span>, <span class="string">&#x27;星期三&#x27;</span>, <span class="string">&#x27;星期四&#x27;</span>, <span class="string">&#x27;星期五&#x27;</span>, <span class="string">&#x27;星期六&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> day = date.getDay();</span><br><span class="line"><span class="keyword">var</span> hours = date.getHours();</span><br><span class="line"><span class="keyword">var</span> minutes = date.getMinutes();</span><br><span class="line"><span class="keyword">var</span> seconds=date.getSeconds();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;今天是：&#x27;</span> + year + <span class="string">&#x27;-&#x27;</span> + month + <span class="string">&#x27;-&#x27;</span> + dates + <span class="string">&#x27; &#x27;</span> +hours+<span class="string">&#x27;:&#x27;</span>+minutes+<span class="string">&#x27;:&#x27;</span>+seconds+<span class="string">&#x27; &#x27;</span>+ arr[day]);</span><br></pre></td></tr></table></figure>

<br />

<h5 id="3-1-案例"><a href="#3-1-案例" class="headerlink" title="3.1 案例"></a>3.1 案例</h5><p>1.案例： 输出当前日期</p>
<ul>
<li>请写出这个格式的日期：2019年8月8日 星期四 </li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式化日期 年月日 </span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.getFullYear()); <span class="comment">// 返回当前日期的年  </span></span><br><span class="line"><span class="built_in">console</span>.log(date.getMonth() + <span class="number">1</span>); <span class="comment">// 月份 返回的月份小1个月   记得月份+1 呦</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getDate()); <span class="comment">// 返回的是 几号</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getDay()); <span class="comment">// 3  周一返回的是 1 周六返回的是 6 但是 周日返回的是 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> year = date.getFullYear();</span><br><span class="line"><span class="keyword">var</span> month = date.getMonth() + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> dates = date.getDate();</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;星期日&#x27;</span>, <span class="string">&#x27;星期一&#x27;</span>, <span class="string">&#x27;星期二&#x27;</span>, <span class="string">&#x27;星期三&#x27;</span>, <span class="string">&#x27;星期四&#x27;</span>, <span class="string">&#x27;星期五&#x27;</span>, <span class="string">&#x27;星期六&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> day = date.getDay();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;今天是：&#x27;</span> + year + <span class="string">&#x27;年&#x27;</span> + month + <span class="string">&#x27;月&#x27;</span> + dates + <span class="string">&#x27;日 &#x27;</span> + arr[day]);</span><br></pre></td></tr></table></figure>

<p>2.案例： 输出当前时间</p>
<ul>
<li>写一个函数，格式化日期对象，成为 HH:mm:ss 的形式   比如  00:10:45</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式化日期 时分秒</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.getHours()); <span class="comment">// 时</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getMinutes()); <span class="comment">// 分</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getSeconds()); <span class="comment">// 秒</span></span><br><span class="line"><span class="comment">// 要求封装一个函数返回当前的时分秒 格式 08:08:08</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTimer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> h = time.getHours();</span><br><span class="line">    h = h &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + h : h;</span><br><span class="line">    <span class="keyword">var</span> m = time.getMinutes();</span><br><span class="line">    m = m &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + m : m;</span><br><span class="line">    <span class="keyword">var</span> s = time.getSeconds();</span><br><span class="line">    s = s &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + s : s;</span><br><span class="line">    <span class="keyword">return</span> h + <span class="string">&#x27;:&#x27;</span> + m + <span class="string">&#x27;:&#x27;</span> + s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getTimer());</span><br></pre></td></tr></table></figure>

<br />

<hr>
<h4 id="4-毫秒形式"><a href="#4-毫秒形式" class="headerlink" title="4. 毫秒形式"></a>4. 毫秒形式</h4><p>1.获取日期的总的毫秒形式（<strong>时间戳</strong>）</p>
<ul>
<li>时间戳：每一个毫秒都是独一无二的。基于1970年1月1日（世界标准时间）起的毫秒数</li>
<li>毫秒，不是秒。毫秒/1000=秒；2020-10-21 00:26:38</li>
</ul>
<p>Date 对象是基于1970年1月1日（世界标准时间）起的毫秒数<br>为什么计算机起始时间从1970年开始?<br>我们经常利用总的毫秒数来计算时间，因为它更精确</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
<th>语法</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_getTime.asp">getTime()</a></td>
<td>返回 1970 年 1 月 1 日至今的毫秒数。</td>
<td>dateObj.getTime()</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/jsref/jsref-valueof-date.html">valueOf()</a></td>
<td>返回 Date 对象的原始值。原始值返回1970年1月1日午夜以来的毫秒数！</td>
<td><em>Date</em>.valueOf()</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/now">Date.now()</a></td>
<td>方法返回自 1970 年 1 月 1 日 00:00:00 (UTC) 到当前时间的毫秒数。</td>
<td>var timeInMs = Date.now();</td>
</tr>
</tbody></table>
<p>代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化Date对象</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// 1. 用于获取对象的原始值</span></span><br><span class="line"><span class="built_in">console</span>.log(date.valueOf())    </span><br><span class="line"><span class="built_in">console</span>.log(date.getTime())    </span><br><span class="line"><span class="comment">// 2. 简单写可以这么做</span></span><br><span class="line"><span class="keyword">var</span> now = + <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(now);</span><br><span class="line"><span class="comment">// 3. HTML5中提供的方法，有兼容性问题</span></span><br><span class="line"><span class="keyword">var</span> now1 = <span class="built_in">Date</span>.now();</span><br><span class="line"><span class="built_in">console</span>.log(now1);</span><br></pre></td></tr></table></figure>

<p>1.1 问题</p>
<ul>
<li><p>1.Date.now()语法是什么意思？</p>
<p>意思是：可以直接用，不用new；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. HTML5中提供的方法，有兼容性问题</span></span><br><span class="line"><span class="keyword">var</span> now1 = <span class="built_in">Date</span>.now();</span><br><span class="line"><span class="built_in">console</span>.log(now1);</span><br></pre></td></tr></table></figure>
</li>
<li><p>1.1 注意严格大小写；</p>
</li>
</ul>
<br />

<hr>
<h4 id="5-倒计时"><a href="#5-倒计时" class="headerlink" title="5. 倒计时"></a>5. 倒计时</h4><p>1.分析：</p>
<p>核心算法：输入的时间减去现在的时间就是剩余的时间，即倒计时 ，但是不能拿着时分秒相减，比如 05 分减去25分，结果会是负数的。<br>用时间戳来做。用户输入时间总的毫秒数减去现在时间的总的毫秒数，得到的就是剩余时间的毫秒数。<br>把剩余时间总的毫秒数转换为天、时、分、秒 （时间戳转换为时分秒）</p>
<p>2.转换公式如下：<br> d = parseInt(总秒数/ 60/60 /24);    //  计算天数<br> h = parseInt(总秒数/ 60/60 %24)   //   计算小时<br> m = parseInt(总秒数 /60 %60 );     //   计算分数<br> s = parseInt(总秒数%60);               //   计算当前秒数 </p>
<p>3.代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDown</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nowTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 返回的是当前时间总的毫秒数</span></span><br><span class="line">    <span class="keyword">var</span> inputTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(time); <span class="comment">// 返回的是用户输入时间总的毫秒数</span></span><br><span class="line">    <span class="keyword">var</span> times = (inputTime - nowTime) / <span class="number">1000</span>; <span class="comment">// times是剩余时间总的秒数 </span></span><br><span class="line">    <span class="keyword">var</span> d = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>); <span class="comment">// 天</span></span><br><span class="line">    d = d &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + d : d;</span><br><span class="line">    <span class="keyword">var</span> h = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>); <span class="comment">//时</span></span><br><span class="line">    h = h &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + h : h;</span><br><span class="line">    <span class="keyword">var</span> m = <span class="built_in">parseInt</span>(times / <span class="number">60</span> % <span class="number">60</span>); <span class="comment">// 分</span></span><br><span class="line">    m = m &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + m : m;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">parseInt</span>(times % <span class="number">60</span>); <span class="comment">// 当前的秒</span></span><br><span class="line">    s = s &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + s : s;</span><br><span class="line">    <span class="keyword">return</span> d + <span class="string">&#x27;天&#x27;</span> + h + <span class="string">&#x27;时&#x27;</span> + m + <span class="string">&#x27;分&#x27;</span> + s + <span class="string">&#x27;秒&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(countDown(<span class="string">&#x27;2019-5-1 18:00:00&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date);</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li><p>1.parseInt会取整，但不会四舍五入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;3.14&#x27;</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;3.94&#x27;</span>)); <span class="comment">// 3，还是3</span></span><br></pre></td></tr></table></figure>
</li>
<li></li>
</ul>
<p>3.1 举例简单的例子理解一下；</p>
<ul>
<li><p>1.假如相差正好1w毫秒</p>
</li>
<li><p>2.天：10000/60/60/24=0.11574074074074074074074074074074 ，0天</p>
<p>小时：10000/60/60%24=2.7，2小时；</p>
<p>分：</p>
<p>10000/60%60=0.7777777777777777777777777777778 ，0分；错误；</p>
<p>0.7777777777777777777777777777778*60=46.666666666666666666666666666667</p>
<p>parseInt(‘46.666666666666666666666666666667’)=46min；2020-10-21 00:52:13</p>
<p>秒：40s；</p>
</li>
<li><p>余数的算法：x/y=小数(小数点后面的数)*y；</p>
<p>所以上面我一直算不对；</p>
<p>后来实验的多次，发现小数的含义，是以前面的除数为100%。</p>
<p>例如：26/4=6.5，这里的0.5就是以6位100%，0.5*6=3，3才是余数；0.5不是；</p>
</li>
</ul>
<p>3.2 后面学习API的时候，再把它打印到页面中；2020-10-21 00:54:20</p>
<hr>
<h3 id="15-5-数组对象"><a href="#15-5-数组对象" class="headerlink" title="15.5 数组对象"></a>15.5 数组对象</h3><blockquote>
<p><a href="https://www.bilibili.com/video/BV1Sy4y1C7ha?p=169">https://www.bilibili.com/video/BV1Sy4y1C7ha?p=169</a></p>
</blockquote>
<h4 id="1-数组对象的创建"><a href="#1-数组对象的创建" class="headerlink" title="1. 数组对象的创建"></a>1. 数组对象的创建</h4><p>1.创建数组对象的两种方式</p>
<ul>
<li>字面量方式</li>
<li>new Array()</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建数组的两种方式</span></span><br><span class="line"><span class="comment">// 1.利用数组字面量</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.利用new Array()</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">// 创建了一个空的数组</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>); <span class="comment">// 这个2 表示 数组的长度为2 里面有2个空的数组元素</span></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 这样如同字面量创建，但感觉不对；</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br></pre></td></tr></table></figure>



<h4 id="2-检测是否为数组"><a href="#2-检测是否为数组" class="headerlink" title="2. 检测是否为数组"></a>2. 检测是否为数组</h4><blockquote>
<p><a href="https://www.bilibili.com/video/BV1Sy4y1C7ha?p=170&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1Sy4y1C7ha?p=170&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.instanceof 运算符，可以判断一个对象是否属于某种类型</p>
<p>2.Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法     </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">23</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arr));   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(obj));   <span class="comment">// false</span></span><br></pre></td></tr></table></figure>



<h4 id="3-添加删除数组元素的方法"><a href="#3-添加删除数组元素的方法" class="headerlink" title="3. 添加删除数组元素的方法"></a>3. 添加删除数组元素的方法</h4><p><img src="../../img/25.1/6.png" alt="6"></p>
<blockquote>
<p>01-JavaScript内置对象;</p>
<p>F:\三次元\4-学习\7-web\2-pink老师-JS资料\1-基础\2-PPT\6\PPT</p>
</blockquote>
<h4 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h4><h2 id="X-题注"><a href="#X-题注" class="headerlink" title="X.  题注"></a>X.  题注</h2><p>1 query 英 [ˈkwɪəri]   美 [ˈkwɪri] n.疑问;询问;问号v.怀疑;表示疑虑;询问</p>
<p>[^2]:inner 英 [ˈɪnə(r)]   美 [ˈɪnər] adj.里面的;向内的;内部的;接近中心的;内心的;未表达出来的;隐藏的n.内部;里面;射中接近靶心部分的一发</p>
<p>[^3]:sign of operation 英 [saɪn ɒv ˌɒpəˈreɪʃn]   美 [saɪn əv ˌɑːpəˈreɪʃn] 运算符号;运算记号<br>[^4]:push 英 [pʊʃ]   美 [pʊʃ] <br/>v.推动(人或物);移动(身体部位);推进(道路);挤开;推动;促使(达到某程度或状态)<br/>n.推;搡;进攻;攻势;挺进;矢志的追求;坚定的努力</p>
<h2 id="X2-看到哪？"><a href="#X2-看到哪？" class="headerlink" title="X2. 看到哪？"></a>X2. 看到哪？</h2><p>1.15.5.1；</p>
<ul>
<li>2021-4-7 16:46:46</li>
</ul>
<p>要带的东西：</p>
<p>1.药，文具盒，U盘，指甲刀，耳；</p>
<p>2.眼镜布；电动车钥匙；长袖衣服；</p>
<ul>
<li>瑜伽垫？？</li>
</ul>
<p>3.洗衣服的？洗衣液；</p>
<p>4.身份证；</p>
<p>5.衣架；（已经带了）</p>
<p>6.，，走之前，把更新的笔记，拷到U盘里面，记得img里面也有；2021-3-14 15:34:51</p>
<p>7.周报？周报没写；</p>
]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>25.2-JavaScript</title>
    <url>/1-(0~50)/25.2-JS%E5%9F%BA%E7%A1%80%E6%A0%B8%E5%BF%83_DOM_BOM/</url>
    <content><![CDATA[<h2 id="17-Web-APIs-简介"><a href="#17-Web-APIs-简介" class="headerlink" title="17. Web APIs 简介"></a>17. Web APIs 简介</h2><blockquote>
<p><a href="https://www.bilibili.com/video/BV1Sy4y1C7ha?p=191">https://www.bilibili.com/video/BV1Sy4y1C7ha?p=191</a></p>
</blockquote>
<ol>
<li>目标</li>
</ol>
<a id="more"></a>

<ul>
<li>能够说出Web APIs 阶段与 JavaScript 语法阶段的关联性</li>
<li>什么是API</li>
<li>什么是Web API</li>
</ul>
<h3 id="17-1-JS的组成"><a href="#17-1-JS的组成" class="headerlink" title="17.1 JS的组成"></a>17.1 JS的组成</h3><blockquote>
<p><a href="https://www.bilibili.com/video/BV1Sy4y1C7ha?p=192&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1Sy4y1C7ha?p=192&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p><img src="F:%5C2-3ciyuan%5C8-%E5%8D%9A%E5%AE%A2%E5%8F%98%E6%9B%B4%E5%86%85%E5%AE%B9%5Csource%5Cimg%5C25.1%5C1.png" alt="1"></p>
<h3 id="17-2-基础阶段以及Web-APIs阶段"><a href="#17-2-基础阶段以及Web-APIs阶段" class="headerlink" title="17.2 基础阶段以及Web APIs阶段"></a>17.2 基础阶段以及Web APIs阶段</h3><p>1.JS基础阶段</p>
<ul>
<li>我们学习ECMAScript标准规定的基本语法</li>
<li>要求同学们掌握JS基础语法</li>
<li>不过基本语法，做不了常用的网页交互效果</li>
<li>为JS后面打基础</li>
</ul>
<p>2.Web APIs 阶段</p>
<ul>
<li>Web APIs 是 W3C 组织的标准</li>
<li>Web APIs 我们账户要学习DOM和BOM</li>
<li>Web APIs 是我们JS所独有的部分</li>
<li>我们主要学习页面交互功能</li>
<li>需要JS基础的课程内容做基础</li>
</ul>
<p>3.JS基础学系ECMAScript基础语法，WEB APIs 是 JS 的应用。大量使用JS基础语法做交互效果；</p>
<h3 id="3-API-和-Web-API"><a href="#3-API-和-Web-API" class="headerlink" title="3. API 和 Web API"></a>3. API 和 Web API</h3><p>1.API ( Application Programming Interface,应用程序编程接口)是一些预先定义的函数,目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力,而无需访问源码,或理解内部工作机制的细节。</p>
<p>1.1 简单理解: ==API是给程序员提供的一种工具,以便能更轻松的实现想要完成的功能。==</p>
<p>1.2 手机充电的接口，就是一个API；2021-3-12 17:26:39</p>
<p>2.Web API</p>
<p>Web API是浏览器提供的一套操作浏览器功能和页面元素的API (BOM和DOM)。</p>
<p>现阶段我们主要针对于浏览器讲解常用的API,主要针对浏览器做交互效果。</p>
<p>比如我们想要浏览器弹出一个警示框,直接使用alert( “弹出 )</p>
<p>MDN详细 APl: <a href="https://developer.mozilla.org/zh-CN/docs/Web/API">https://developer.mozilla.org/zh-CN/docs/Web/API</a></p>
<p>因为Web APl很多,所以我们将这个阶段称为Web APls</p>
<p>3.总结</p>
<p>1.API是为我们程序员提供的一个接口,帮助我们实现某种功能,我们会使用就可以了,不必纠结内部如何实现</p>
<p>2.Web API主要是针对于浏览器提供的接口,主要针对于浏览器做交互效果。</p>
<p>3.Web APl一般都有输入和输出(函数的传参和返回值) , Web APl很多都是方法(函数)</p>
<p>4.学习Web API可以结合前面学习内置对象方法的思路学习</p>
<hr>
<h2 id="18-DOM"><a href="#18-DOM" class="headerlink" title="18. DOM"></a>18. DOM</h2><h3 id="1-导读"><a href="#1-导读" class="headerlink" title="1. 导读"></a>1. 导读</h3><p>  能够说出什么是 DOM<br>  能够获取页面元素<br>  能够给元素注册事件<br>  能够操作 DOM 元素的属性<br>  能够创建元素<br>  能够操作 DOM 节点</p>
<h3 id="2-DOM简介"><a href="#2-DOM简介" class="headerlink" title="2. DOM简介"></a>2. DOM简介</h3><h4 id="2-1-什么是DOM"><a href="#2-1-什么是DOM" class="headerlink" title="2.1 什么是DOM"></a>2.1 什么是DOM</h4><p>1.文档对象模型（Document Object Model，简称 DOM），是 W3C 组织推荐的处理可扩展标记语言（HTML或者XML）的标准编程接口。</p>
<p>W3C 已经定义了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页的内容、结构和样式。</p>
<h4 id="2-2-DOM-树"><a href="#2-2-DOM-树" class="headerlink" title="2.2 DOM 树"></a>2.2 DOM 树</h4><p><img src="F:%5C2-3ciyuan%5C8-%E5%8D%9A%E5%AE%A2%E5%8F%98%E6%9B%B4%E5%86%85%E5%AE%B9%5Csource%5Cimg%5C25.1%5C2.png" alt="2"></p>
<ul>
<li><p>文档：一个页面就是一个文档，DOM 中使用 document 表示</p>
</li>
<li><p>元素：页面中的所有标签都是元素，DOM 中使用 element 表示</p>
</li>
<li><p>节点：网页中的所有内容都是节点（标签、属性、文本、注释等），DOM 中使用 node 表示</p>
</li>
</ul>
<p>DOM 把以上内容都看做是对象，所以就可以使用这些标签的，属性和方法；2021-3-14 14:58:30</p>
<h3 id="3-获取元素"><a href="#3-获取元素" class="headerlink" title="3. 获取元素"></a>3. 获取元素</h3><blockquote>
<p><a href="https://www.bilibili.com/video/BV1Sy4y1C7ha?p=196&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1Sy4y1C7ha?p=196&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<h4 id="3-1-如何获取页面元素"><a href="#3-1-如何获取页面元素" class="headerlink" title="3.1 如何获取页面元素"></a>3.1 如何获取页面元素</h4><p>1.DOM在我们实际开发中主要用来操作元素。我们如何来获取页面中的元素呢?</p>
<p>2.获取页面中的元素可以使用以下几种方式:</p>
<ul>
<li>根据 ID 获取</li>
<li>根据标签名获取</li>
<li>通过 HTML5 新增的方法获取</li>
<li>特殊元素获取</li>
</ul>
<h4 id="3-2-根据-ID-获取"><a href="#3-2-根据-ID-获取" class="headerlink" title="3.2 根据 ID 获取"></a>3.2 根据 ID 获取</h4><p>1.使用 getElementById() 方法可以获取带有 ID 的元素对象。</p>
<p><code>document.getElementById(&#39;id&#39;);</code></p>
<p>1.1 可以在MDN里，看更多的信息；</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/getElementById">https://developer.mozilla.org/zh-CN/docs/Web/API/Document/getElementById</a></p>
<ul>
<li><p><strong><code>id</code></strong>是大小写敏感的字符串，代表了所要查找的元素的唯一ID.</p>
</li>
<li><p>所以里面你是字符串；</p>
<p>例如：<code>var timer = document.getElementById(&#39;time&#39;);</code></p>
</li>
</ul>
<p>2.使用 console.dir() 可以打印我们获取的元素对象，更好的查看对象里面的属性和方法。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span>&gt;</span>2019-9-9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> timer = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;time&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(timer);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> timer);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.dir(timer);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//5. console.dir 打印我们返回的元素对象，更好的查看里面的属性和方法</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<p>2.1 看了<code>console.dir(timer)</code>后，感觉div是一个对象似的；</p>
<hr>
<h4 id="3-3-根据标签名获取"><a href="#3-3-根据标签名获取" class="headerlink" title="3.3 根据标签名获取"></a>3.3 根据标签名获取</h4><blockquote>
<p><a href="https://www.bilibili.com/video/BV1Sy4y1C7ha?t=393&amp;p=197">https://www.bilibili.com/video/BV1Sy4y1C7ha?t=393&amp;p=197</a></p>
</blockquote>
<p>1.使用 getElementsByTagName() 方法可以返回带有指定标签名的对象的集合。</p>
<p><code>document.getElementsByTagName(&#39;标签名&#39;);</code></p>
<ul>
<li>注意，别写成 getElementsByName();</li>
</ul>
<p>2.注意：<br>因为得到的是一个对象的集合，所以我们想要操作里面的元素就需要遍历。<br>得到元素对象是动态的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否11<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否22<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否33<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否44<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否55<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 返回的是，获取过来元素对象的集合，以伪数组的形式存储;</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(lis);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 3.yu 4.如果页面只有一个li，和null，返回的还是伪数组的形式；</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.1 预览</p>
<p><img src="F:%5C2-3ciyuan%5C8-%E5%8D%9A%E5%AE%A2%E5%8F%98%E6%9B%B4%E5%86%85%E5%AE%B9%5Csource%5Cimg%5C25.1%5C3.png" alt="2"></p>
<p>3.这样，会把==整个==标签都取过来，能不能更==指定==一点？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否11<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否22<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否33<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否44<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否55<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>233<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>233<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>233<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>233<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>233<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 返回的是，获取过来元素对象的集合，以伪数组的形式存储;</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// console.log(lis);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 我们想要依依打印里面的元素对象我们可以采取遍历的方式</span></span></span><br><span class="line">    for (i = 0; i &lt; lis.length; i++) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(lis[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ol1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;ol&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 3.但是，父元素必须指明哪一个元素，不能是一个伪数组；</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 4.console.log(ol[0]).getElmentsByName(&#x27;li&#x27;);是会报错的</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(ol1[<span class="number">0</span>].getElementsByTagName(<span class="string">&#x27;li&#x27;</span>));</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>4.当然，还是直接ID，更加方便；</p>
<hr>
<h4 id="3-4-通过HTML5-新增的方法获取"><a href="#3-4-通过HTML5-新增的方法获取" class="headerlink" title="3.4 通过HTML5 新增的方法获取"></a>3.4 通过HTML5 新增的方法获取</h4><p>1.document.getElementsByClassName(‘类名’)；// 根据类名返回元素对象集合</p>
<ul>
<li>1.1 类名不需要+点；.xxx 错误，xxx 正确；</li>
</ul>
<p>2.document.query[^1]Selector(‘选择器’);        // 根据指定选择器返回第一个元素对象</p>
<ul>
<li>2.1 选择器，需要加前面的点or#，类名不用；</li>
</ul>
<p>3.document.querySelectorAll(‘选择器’);     // 根据指定选择器返回</p>
<p>4.注意：<br>querySelector 和 querySelectorAll里面的选择器需要加符号,比如:document.querySelector(‘#nav’); </p>
<h4 id="3-5-获取特殊元素（body，html）"><a href="#3-5-获取特殊元素（body，html）" class="headerlink" title="3.5 获取特殊元素（body，html）"></a>3.5 获取特殊元素（body，html）</h4><p>1.获取body元素</p>
<p><code>doucumnet.body  // 返回body元素对象</code></p>
<p>2.获取html元素</p>
<p><code>document.documentElement  // 返回html元素对象</code></p>
<ul>
<li>2.1 <code>document.html</code>是undefined;</li>
</ul>
<h4 id="X-自我提问"><a href="#X-自我提问" class="headerlink" title="X. 自我提问"></a>X. 自我提问</h4><p>1.什么选择器需要加符号，例如：document.XXXXX(‘#nav’);</p>
<ul>
<li>1.1 因为是选择器？233；2021-5-18 09:13:12</li>
</ul>
<hr>
<h3 id="4-事件基础"><a href="#4-事件基础" class="headerlink" title="4. 事件基础"></a>4. 事件基础</h3><h4 id="4-1-事件概述"><a href="#4-1-事件概述" class="headerlink" title="4.1 事件概述"></a>4.1 事件概述</h4><blockquote>
<p><a href="https://www.bilibili.com/video/BV1Sy4y1C7ha?p=200&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1Sy4y1C7ha?p=200&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.JavaScript 使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为。</p>
<p>简单理解： 触发— 响应机制。</p>
<p>网页中的每个元素都可以产生某些可以触发 JavaScript 的事件，例如，我们可以在用户点击某按钮时产生一事件，然后去执行某些操作。</p>
<h4 id="4-2-事件三要素"><a href="#4-2-事件三要素" class="headerlink" title="4.2 事件三要素"></a>4.2 事件三要素</h4><p>1.事件源 （谁）<br>2.事件类型 （什么事件）</p>
<p>3.事件处理程序 （做啥）</p>
<h4 id="4-3-案例"><a href="#4-3-案例" class="headerlink" title="4.3 案例"></a>4.3 案例</h4><p>1.页面中有一个按钮，当鼠标点击按钮的时候，弹出“你好”警示框。</p>
<p>2.分析：</p>
<ul>
<li>获取事件源（按钮）</li>
<li>注册事件（绑定事件），使用 onclick</li>
<li>编写事件处理程序，写一个函数弹出 alert 警示框</li>
</ul>
<p>3.代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&#x27;你好吗&#x27;</span>);  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>更多：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 点击一个个按钮，弹出对话框</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1. 事件是由三部分组成，事件源，事件类型，事件处理程序。事件三要素</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// (1)事件源：事件被触发的对象；谁？按钮</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// (2) 事件类型，如何触发，什么事件，比如鼠标点击(onclick)还是鼠标经过，还是键盘按下</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// （3）事件处理程序，一般是通过一个函数赋值的方式，完成</span></span></span><br><span class="line"><span class="javascript">        btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&#x27;点点中彩票&#x27;</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="4-4-执行事件的步骤"><a href="#4-4-执行事件的步骤" class="headerlink" title="4.4 执行事件的步骤"></a>4.4 执行事件的步骤</h4><blockquote>
<p><a href="https://www.bilibili.com/video/BV1Sy4y1C7ha?p=201&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1Sy4y1C7ha?p=201&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<ol>
<li>获取事件源</li>
<li>注册事件（绑定事件）</li>
</ol>
<p>3.添加事件处理程序（采取函数赋值形式）</p>
<h4 id="4-5-常见的鼠标事件"><a href="#4-5-常见的鼠标事件" class="headerlink" title="4.5 常见的鼠标事件"></a>4.5 常见的鼠标事件</h4><p><img src="F:%5C2-3ciyuan%5C8-%E5%8D%9A%E5%AE%A2%E5%8F%98%E6%9B%B4%E5%86%85%E5%AE%B9%5Csource%5Cimg%5C25.1%5C4.jpg" alt="4"></p>
<h4 id="4-6-分析事件三要素"><a href="#4-6-分析事件三要素" class="headerlink" title="4.6 分析事件三要素"></a>4.6 分析事件三要素</h4><p>下拉菜单三要素<br>关闭广告三要素</p>
<hr>
<h3 id="5-操作元素"><a href="#5-操作元素" class="headerlink" title="5. 操作元素"></a>5. 操作元素</h3><p>1.JavaScript 的 DOM 操作可以改变网页内容、结构和样式，我们可以利用 DOM 操作元素来改变元素里面的内容 、属性等。注意以下都是属性</p>
<h4 id="5-1-改变元素内容"><a href="#5-1-改变元素内容" class="headerlink" title="5.1 改变元素内容"></a>5.1 改变元素内容</h4><p>1.element.inner[^2]Text</p>
<p>从起始位置到终止位置的内容, 但它去除 html 标签， 同时空格和换行也会去掉</p>
<p>1.1 例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>现在时间<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>time<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> now_time = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(now_time);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div1 = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">            div1.innerText = now_time;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1.2 这些都是进入页面后，点击才有。有没有直接进入页面就有的？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>现在时间<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>time<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>123123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> now_time = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 不添加事件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> p1 = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;p&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// p1.innerText(now_time);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 这么写是错误的</span></span></span><br><span class="line">        p1.innerText = now_time;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2.element.inner[^2]HTML</p>
<p>起始位置到终止位置的全部内容，包括 html 标签，同时保留空格和换行</p>
<ul>
<li>它会识别html标签；</li>
</ul>
<p>3.区别</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// innerText 和 innerHTML的区别</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1. innerText 不识别html标签 ,非标准</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2. innerHTML W3C标准</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> p = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="handlebars"><span class="xml">        div.innerText = &#x27;<span class="tag">&lt;<span class="name">strong</span>&gt;</span>今天<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>2333&#x27;;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        p.innerHTML = &#x27;<span class="tag">&lt;<span class="name">strong</span>&gt;</span>今天<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>2333&#x27;;</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="2-可读取"><a href="#2-可读取" class="headerlink" title="2. 可读取"></a>2. 可读取</h5><p>1.这两个属性是可读写的，可以获取元素里面的内容；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        我是文字</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> p = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(p.innerText);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.同时，去除 html 标签，空格和换行也会去掉</p>
<p>3.如果是inner[^2]HTML;</p>
<p><img src="F:%5C2-3ciyuan%5C8-%E5%8D%9A%E5%AE%A2%E5%8F%98%E6%9B%B4%E5%86%85%E5%AE%B9%5Csource%5Cimg%5C25.1%5C5.jpg" alt="5"></p>
<p>3.1 保留空格和换行</p>
<h5 id="3-使用inner-2-HTML就可以的了"><a href="#3-使用inner-2-HTML就可以的了" class="headerlink" title="3. 使用inner[^2]HTML就可以的了"></a>3. 使用inner[^2]HTML就可以的了</h5><hr>
<h4 id="5-2-常用元素的属性操作"><a href="#5-2-常用元素的属性操作" class="headerlink" title="5.2 常用元素的属性操作"></a>5.2 常用元素的属性操作</h4><p>1.innerText、innerHTML 改变元素内容</p>
<p>2.src、href</p>
<p>3.id、alt、title</p>
<p>4.改src，title的例子；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;a1&quot;</span>&gt;</span>a111<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;a2&quot;</span>&gt;</span>a222<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;1.png&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 修改元素属性 src</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1. 获得元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ldh = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;a1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> b2 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;a2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> img = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;img&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        b2.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            img.src = <span class="string">&#x27;./images/2.png&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            img.title = <span class="string">&#x27;2.png&#x27;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        ldh.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            img.src = <span class="string">&#x27;./images/1.png&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            img.title = <span class="string">&#x27;1.png&#x27;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>5.元素里有很多属性，我们都可以修改。格式：元素.属性；</p>
<p>6.案例：分时显示不同图片,显示不同问候语</p>
<p>1.要求：</p>
<p>根据不同时间，页面显示不同图片，同时显示不同的问候语。<br>如果上午时间打开页面，显示上午好，显示上午的图片。<br>如果下午时间打开页面，显示下午好，显示下午的图片。<br>如果晚上时间打开页面，显示晚上好，显示晚上的图片。</p>
<p>2.案例分析：</p>
<p>➀根据系统不同时间来判断，所以需要用到日期内置对象<br>❷利用多分支语句来设置不同的图片<br>③需要一个图片，并且根据时间修改图片，就需要用到操作元素src属性<br>④需要一个div元素，显示不同问候语，修改元素内容即可</p>
<hr>
<h4 id="5-3-表单元素的属性操作"><a href="#5-3-表单元素的属性操作" class="headerlink" title="5.3 表单元素的属性操作"></a>5.3 表单元素的属性操作</h4><blockquote>
<p><a href="https://www.bilibili.com/video/BV1Sy4y1C7ha?p=206&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1Sy4y1C7ha?p=206&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<h5 id="2-案例"><a href="#2-案例" class="headerlink" title="2. 案例"></a>2. 案例</h5><p>1.仿京东显示密码</p>
<p>2.点击按钮将密码框切换为文本框，并可以查看密码明文。</p>
<p><img src="../../img/25.2/1.png" alt="1"></p>
<p>3.核心思路：  </p>
<ul>
<li>1.点击眼睛按钮，把密码框类型改为文本框就可以看见里面的密码<br>2.一个按钮两个状态，点击一次，切换为文本框，继续点击一次切换为密码框<br>3.算法：利用一个flag变量，来判断flag的值，如果是1 就切换为文本框，flag 设置为0，如果是0 就切换为密码框，flag设置为1</li>
</ul>
<h4 id="5-4-样式属性操作"><a href="#5-4-样式属性操作" class="headerlink" title="5.4 样式属性操作"></a>5.4 样式属性操作</h4><p>1.我们可以通过 JS 修改元素的大小、颜色、位置等样式。</p>
<ul>
<li><p>1.element.style     行内样式操作</p>
<p>如果就是内联的元素修改，就不用.style;</p>
<p>例如：<code>this.value = &#39;&#39;;</code></p>
</li>
<li><p>2.element.className 类名样式操作</p>
</li>
</ul>
<p>2.注意：</p>
<ul>
<li>JS 里面的样式采取驼峰命名法 比如 fontSize、 backgroundColor</li>
<li>JS 修改 style 样式操作，产生的是行内样式，CSS 权重比较高</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1.获取元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2.注册事件，处理程序</span></span></span><br><span class="line"><span class="javascript">        div.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// div.style</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 用this，this指向这个函数的调用者，也就是div</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.style.backgroundColor = <span class="string">&#x27;purple&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.style.width = <span class="string">&#x27;255px&#x27;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3.案例：淘宝点击关闭二维码</p>
<p>3.1 当鼠标点击二维码关闭按钮的时候，则关闭整个二维码。</p>
<p>4.案例分析</p>
<ul>
<li>核心思路：  利用样式的显示和隐藏完成， display:none 隐藏元素 display:block 显示元素  </li>
<li>点击按钮，就让这个二维码盒子隐藏起来即可</li>
</ul>
<p>5.实现代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.close-btn&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line"><span class="comment">// 2.注册事件 程序处理</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">box.style.display = <span class="string">&#x27;none&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>5.1 个人自写完整版：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.a1</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            right: 0;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>x<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src=&quot;./js/jquery.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/one.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.a1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        div.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.style.backgroundColor = <span class="string">&#x27;purple&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.style.width = <span class="string">&#x27;255px&#x27;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            div.style.display = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="5-5-案例"><a href="#5-5-案例" class="headerlink" title="5.5 案例"></a>5.5 案例</h4><h5 id="1-循环精灵图背景"><a href="#1-循环精灵图背景" class="headerlink" title="1.循环精灵图背景"></a>1.循环精灵图背景</h5><blockquote>
<p><a href="https://www.bilibili.com/video/BV1Sy4y1C7ha?p=211&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1Sy4y1C7ha?p=211&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.可以利用 for 循环设置一组元素的精灵图背景</p>
<p>1.1 分析</p>
<p>首先精灵图图片排列有规律的<br>核心思路： 利用for循环  修改精灵图片的 背景位置 background-position<br>让循环里面的 i 索引号 * 44 就是每个图片的y坐标</p>
<p>2.position;定位；往下是正数，往上是负数；==注意==</p>
<ul>
<li>这里不是相对背景图，往下（正数）</li>
<li>这里是把背景图；拉到上面去（负数）</li>
</ul>
<p>2.1 重温，视角是背景图，如果正数，背景图往下拉。如果是负数，背景图往上拉；2021-4-6 20:11:30</p>
<p>3.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;练习&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .box &#123;</span><br><span class="line">            width: <span class="number">250</span>px;</span><br><span class="line">            margin: <span class="number">100</span>px auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .box li &#123;</span><br><span class="line">            display: block;</span><br><span class="line">            float: left;</span><br><span class="line">            width: <span class="number">24</span>px;</span><br><span class="line">            height: <span class="number">24</span>px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            margin: <span class="number">15</span>px;</span><br><span class="line">            background: url(./lianxi.png) no-repeat center;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 1.获取元素，所有的li</span></span><br><span class="line">        <span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> i2 = i * <span class="number">44</span>;</span><br><span class="line">            lis[i].style.backgroundPosition = <span class="string">&#x27;0 -&#x27;</span> + i2 + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<br />

<p>4.精灵图：<a href="https://img.alicdn.com/tfs/TB1eiXTXlTH8KJjy0FiXXcRsXXa-24-595.png">https://img.alicdn.com/tfs/TB1eiXTXlTH8KJjy0FiXXcRsXXa-24-595.png</a></p>
<ul>
<li>可能看的时候，背景是黑色的。但其实没有背景；</li>
</ul>
<p>5.问：将<code>&lt;li&gt;</code>设置成内联块状元素为什么前面的小黑点不见了</p>
<p>答：有小黑点是因为 他的display属性是 list-item; 而li默认的display就是 list-item  所以就有小黑点，你把li的display改成了 inline-block 小黑点自然就没有了，你可以试试把一个span的display改成list-item 你会发现这个span也有小黑点了。</p>
<ul>
<li><table>
<thead>
<tr>
<th>list-item</th>
<th>此元素会作为列表显示。</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
</li>
</ul>
<hr>
<h5 id="2-案例：显示隐藏文本框内容"><a href="#2-案例：显示隐藏文本框内容" class="headerlink" title="2. 案例：显示隐藏文本框内容"></a>2. 案例：显示隐藏文本框内容</h5><p>1.当鼠标点击文本框时，里面的默认文字隐藏，当鼠标离开文本框时，里面的文字显示。</p>
<p>2.分析：</p>
<p>首先表单需要2个新事件，获得焦点 onfocus  失去焦点 onblur<br>如果获得焦点， 判断表单里面内容是否为默认文字，如果是默认文字，就清空表单内容<br>如果失去焦点， 判断表单内容是否为空，如果为空，则表单内容改为默认文字</p>
<p>3.使用内联元素placeholder更方便；</p>
<p><code>&lt;input type=&quot;text&quot; placeholder=&quot;手机&quot;&gt;</code></p>
<p>4.但这里主要是学习；</p>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        input &#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#999</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;手机&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//1.获取元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> text = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2.注册事件，获得焦点事件</span></span></span><br><span class="line"><span class="javascript">        text.onfocus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="built_in">this</span>.value === <span class="string">&#x27;手机&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.value = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="comment">// 获得焦点需要把文本框里面的文字颜色变黑</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.style.color = <span class="string">&#x27;#333&#x27;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">// 3.注册事件，失去焦点事件</span></span></span><br><span class="line"><span class="javascript">        text.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="built_in">this</span>.value === <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                text.value = <span class="string">&#x27;手机&#x27;</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.style.color = <span class="string">&#x27;#999&#x27;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br />

<hr>
<h4 id="5-6-element-className-类名样式操作"><a href="#5-6-element-className-类名样式操作" class="headerlink" title="5.6  element.className 类名样式操作"></a>5.6  element.className 类名样式操作</h4><blockquote>
<p><a href="https://www.bilibili.com/video/BV1Sy4y1C7ha?p=213&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1Sy4y1C7ha?p=213&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<ol>
<li>如果样式修改较多，可以采取操作类名方式更改元素样式。 </li>
<li>class因为是个保留字，因此使用className来操作元素类名属性</li>
<li>className 会直接更改元素的类名，会覆盖原先的类名。</li>
</ol>
<p>4.代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.a1</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: pink;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.a2</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            font-size: 24px;</span><br><span class="line">            margin-top: 100px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a1&quot;</span>&gt;</span>2333<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div1 = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.a1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        div1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.className += <span class="string">&#x27; a2&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 用+=，用记得一个空格，不然会挨在一起；2021-3-15 17:30:32</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 也可以麻烦一点，但类名多了，就不好用了</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// this.className = &#x27;a1 a2&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><a href="https://www.bilibili.com/video/BV1Sy4y1C7ha?p=214">https://www.bilibili.com/video/BV1Sy4y1C7ha?p=214</a></p>
<h2 id="X-轮播图"><a href="#X-轮播图" class="headerlink" title="X. 轮播图"></a>X. 轮播图</h2><p>1.轮播图也称为焦点图，是网页中比较常见的网页特效。<br>2.功能需求：</p>
<ul>
<li>鼠标经过轮播图模块，左右按钮显示，离开隐藏左右按钮。</li>
<li>点击右侧按钮一次，图片往左播放一张，以此类推， 左侧按钮同理。</li>
<li>图片播放的同时，下面小圆圈模块跟随一起变化。</li>
<li>点击小圆圈，可以播放相应图片。</li>
<li>鼠标不经过轮播图， 轮播图也会自动播放图片。</li>
<li>鼠标经过，轮播图模块， 自动播放停止。</li>
</ul>
<p>3.动态生成小圆圈</p>
<ul>
<li>核心思路：小圆圈的个数要跟图片张数一致</li>
<li>所以首先先得到ul里面图片的张数（图片放入li里面，所以就是li的个数）</li>
<li>利用循环动态生成小圆圈（这个小圆圈要放入ol里面）</li>
<li>创建节点 createElement(‘li’)</li>
<li>插入节点 ol. appendChild(li)</li>
<li>第一个小圆圈需要添加 current 类</li>
</ul>
<p>4.</p>
<h2 id="X2-看到哪"><a href="#X2-看到哪" class="headerlink" title="X2. 看到哪"></a>X2. 看到哪</h2><p>1.2021-4-6 20:14:20</p>
<ul>
<li>18.5.5.1，重新再写一遍；2021-4-6 20:14:31</li>
</ul>
<h2 id="X3-题注"><a href="#X3-题注" class="headerlink" title="X3. 题注"></a>X3. 题注</h2>]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>25.3-JS笔记</title>
    <url>/1-(0~50)/25.3-JS%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="1-call"><a href="#1-call" class="headerlink" title="1. call()"></a>1. call()</h2><p>1.JavaScript call[^1]() 方法</p>
<blockquote>
<p><a href="https://www.w3school.com.cn/js/js_function_call.asp">https://www.w3school.com.cn/js/js_function_call.asp</a></p>
</blockquote>
<p>call() 方法是预定义的 JavaScript 方法。</p>
<a id="more"></a>

<p>它可以用来调用所有者对象作为参数的方法。</p>
<p>通过 call()，您能够使用属于另一个对象的方法。</p>
<p>本例调用 person 的 fullName 方法，并用于 person1：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    fullName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&quot; &quot;</span> + <span class="built_in">this</span>.lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">    firstName:<span class="string">&quot;Bill&quot;</span>,</span><br><span class="line">    lastName: <span class="string">&quot;Gates&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person2 = &#123;</span><br><span class="line">    firstName:<span class="string">&quot;Steve&quot;</span>,</span><br><span class="line">    lastName: <span class="string">&quot;Jobs&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">person.fullName.call(person1);  <span class="comment">// 将返回 &quot;Bill Gates&quot;</span></span><br></pre></td></tr></table></figure>



<p>2.call() 方法可接受参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  fullName: <span class="function"><span class="keyword">function</span>(<span class="params">city, country</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&quot; &quot;</span> + <span class="built_in">this</span>.lastName + <span class="string">&quot;,&quot;</span> + city + <span class="string">&quot;,&quot;</span> + country;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  firstName:<span class="string">&quot;Bill&quot;</span>,</span><br><span class="line">  lastName: <span class="string">&quot;Gates&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">person.fullName.call(person1, <span class="string">&quot;Seattle&quot;</span>, <span class="string">&quot;USA&quot;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="2-函数内部的this指向"><a href="#2-函数内部的this指向" class="headerlink" title="2. 函数内部的this指向"></a>2. 函数内部的this指向</h2><p>1.~<a href="https://www.e-learn.cn/topic/3358584">https://www.e-learn.cn/topic/3358584</a></p>
<p>2021-4-8 11:00:28</p>
<p>2.所谓的指向，称呼为代替更合适；</p>
<ul>
<li>this指向谁，就等于了谁，代替了谁。</li>
<li>而这些指向一般都是函数名，对象名。不会指向某一个简单的值；</li>
<li>2021-4-8 11:05:49</li>
</ul>
<h2 id="3-this"><a href="#3-this" class="headerlink" title="3. this"></a>3. this</h2><p>1.~<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this</a></p>
<p>2.与其他语言相比，<strong>函数的 <code>this</code> 关键字</strong>在 JavaScript 中的表现略有不同，此外，在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">严格模式</a>和非严格模式之间也会有一些差别。</p>
<p>在绝大多数情况下，函数的调用方式决定了 <code>this</code> 的值（运行时绑定）。<code>this</code> 不能在执行期间被赋值，并且在每次函数被调用时 <code>this</code> 的值也可能会不同。ES5 引入了 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">bind</a> 方法来设置函数的 <code>this</code> 值，而不用考虑函数如何被调用的。ES2015 引入了<a href="https://wiki.developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions">箭头函数</a>，箭头函数不提供自身的 this 绑定（<code>this</code> 的值将保持为闭合词法上下文的值）</p>
<p>3.当前执行上下文（global、function 或 eval）的一个属性，在非严格模式下，总是指向一个对象，在严格模式下可以是任意值。</p>
<ul>
<li>总是指向一个对象，不是指向那种创建的对象，而是总有指向的地方；<ul>
<li>2021-4-8 11:35:33</li>
</ul>
</li>
</ul>
<h3 id="3-1-在全局上下文中"><a href="#3-1-在全局上下文中" class="headerlink" title="3.1 在全局上下文中"></a>3.1 在全局上下文中</h3><p>1.无论是否在严格模式下，在全局执行环境中（在任何函数体外部）<code>this</code> 都指向全局对象。</p>
<h3 id="3-2-函数上下文"><a href="#3-2-函数上下文" class="headerlink" title="3.2 函数上下文"></a>3.2 函数上下文</h3><p>1.在函数内部，<code>this</code>的值取决于函数被调用的方式。</p>
<p>因为下面的代码不在严格模式下，且 <code>this</code> 的值不是由该调用设置的，所以 <code>this</code> 的值默认指向全局对象，浏览器中就是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window"><code>window</code></a>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在浏览器中：</span></span><br><span class="line">f1() === <span class="built_in">window</span>;   <span class="comment">//在浏览器中，全局对象是window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在Node中：</span></span><br><span class="line">f1() === globalThis;</span><br></pre></td></tr></table></figure>



<p>2.然而，在严格模式下，如果进入执行环境时没有设置 <code>this</code> 的值，<code>this</code> 会保持为 <code>undefined</code>，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">  &quot;use strict&quot;</span>; <span class="comment">// 这里是严格模式</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f2() === <span class="literal">undefined</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>



<p>3.在第二个例子中，<code>this</code> 应是 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/undefined">undefined</a>，因为 <code>f2</code> 是被直接调用的，而不是作为对象的属性或方法调用的（如 <code>window.f2()</code>）。有一些浏览器最初在支持<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">严格模式</a>时没有正确实现这个功能，于是它们错误地返回了<code>window</code>对象。</p>
<h3 id="3-3-函数上下文"><a href="#3-3-函数上下文" class="headerlink" title="3.3 函数上下文"></a>3.3 函数上下文</h3><h3 id="3-4-类上下文"><a href="#3-4-类上下文" class="headerlink" title="3.4 类上下文"></a>3.4 类上下文</h3><h3 id="3-5-派生类"><a href="#3-5-派生类" class="headerlink" title="3.5 派生类"></a>3.5 派生类</h3><h2 id="4-回调函数"><a href="#4-回调函数" class="headerlink" title="4. 回调函数"></a>4. 回调函数</h2><p>1.<a href="https://blog.csdn.net/UnderIcon/article/details/81188923?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param">https://blog.csdn.net/UnderIcon/article/details/81188923?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param</a></p>
<p>简单一句：函数a的事先干完，回头再调用函数b</p>
<p>a（b），不过上面怎么看起来很复杂，因为直接把函数b本身写进参数了吗？而不是b这个代名词；</p>
<p>2.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">m, n, Callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = m + n;</span><br><span class="line">    alert(<span class="string">&quot;一个从父函数e 产生的参数将要被传递给回调函数 ，这个参数是:&quot;</span> + d);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里才写你想调用的函数---参数要正确  </span></span><br><span class="line">    callback(d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;我是回调函数，我的名字叫:callback ,我接收到来自父函数的参数，参数是:&quot;</span> + data);</span><br><span class="line">&#125;</span><br><span class="line">e(<span class="number">1</span>, <span class="number">2</span>, callback)</span><br><span class="line"></span><br><span class="line"><span class="comment">// m+n , m+n</span></span><br></pre></td></tr></table></figure>



<h2 id="5-问题"><a href="#5-问题" class="headerlink" title="5. 问题"></a>5. 问题</h2><h3 id="1-这种写法？"><a href="#1-这种写法？" class="headerlink" title="1. 这种写法？"></a>1. 这种写法？</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mySwiper = <span class="keyword">new</span> Swiper(<span class="string">&#x27;.swiper-container&#x27;</span>, &#123;</span><br><span class="line">    autoplay: <span class="literal">true</span>,<span class="comment">//可选选项，自动滑动</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果需要分页器</span></span><br><span class="line">    pagination: &#123;</span><br><span class="line">        el: <span class="string">&#x27;.swiper-pagination&#x27;</span>,</span><br><span class="line">        bulletActiveClass: <span class="string">&#x27;my-bullet2&#x27;</span>,</span><br><span class="line">        bulletClass: <span class="string">&#x27;my-bullet&#x27;</span>,</span><br><span class="line">        clickable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果需要前进后退按钮</span></span><br><span class="line">    navigation: &#123;</span><br><span class="line">        nextEl: <span class="string">&#x27;.swiper-button-next&#x27;</span>,</span><br><span class="line">        prevEl: <span class="string">&#x27;.swiper-button-prev&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">&#x27;htmlmin&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    gulp.src(<span class="string">&#x27;./src/*.html&#x27;</span>)</span><br><span class="line">        .pipe(fileInclude(&#123;</span><br><span class="line">            prefix: <span class="string">&#x27;@@&#x27;</span>,</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./src/commom/header.html&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>2.问什么在{}里面，又有xxx: {}的</p>
<p>3.问了组队，是json。B站视频没个啥。百度随便先看看，不写自己的笔记；</p>
<blockquote>
<p><a href="https://www.runoob.com/json/json-tutorial.html">https://www.runoob.com/json/json-tutorial.html</a></p>
</blockquote>
<h2 id="6-JSON"><a href="#6-JSON" class="headerlink" title="6. JSON"></a>6. JSON</h2><h3 id="6-1-菜鸟教程出品"><a href="#6-1-菜鸟教程出品" class="headerlink" title="6.1 菜鸟教程出品"></a>6.1 菜鸟教程出品</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p>1.SON: <strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation[^2](JavaScript 对象表示法)</p>
<p>JSON 是存储和交换文本信息的语法，类似 XML。</p>
<p>JSON 比 XML 更小、更快，更易解析。</p>
<p>2.例如：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;sites&quot;</span>: [</span><br><span class="line">    &#123; <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;菜鸟教程&quot;</span> , <span class="attr">&quot;url&quot;</span>:<span class="string">&quot;www.runoob.com&quot;</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;google&quot;</span> , <span class="attr">&quot;url&quot;</span>:<span class="string">&quot;www.google.com&quot;</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;微博&quot;</span> , <span class="attr">&quot;url&quot;</span>:<span class="string">&quot;www.weibo.com&quot;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>当然这里是看不懂地；</p>
</li>
<li><p>这个 sites 对象是包含 3 个站点记录（对象）的数组。</p>
</li>
</ul>
<h5 id="1-2-什么是-JSON-？"><a href="#1-2-什么是-JSON-？" class="headerlink" title="1.2 什么是 JSON ？"></a>1.2 什么是 JSON ？</h5><ul>
<li>JSON 指的是 JavaScript 对象表示法（<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation）</li>
<li>JSON 是轻量级的文本数据交换格式</li>
<li>JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。</li>
<li>JSON 具有自我描述性，更易理解</li>
</ul>
<h5 id="1-3-转换为-JavaScript-对象"><a href="#1-3-转换为-JavaScript-对象" class="headerlink" title="1.3 转换为 JavaScript 对象"></a>1.3 转换为 JavaScript 对象</h5><p>JSON 文本格式在语法上与创建 JavaScript 对象的代码相同。</p>
<p>由于这种相似性，无需解析器，JavaScript 程序能够使用内建的 eval() 函数，用 JSON 数据来生成原生的 JavaScript 对象。</p>
<hr>
<h4 id="2-语法"><a href="#2-语法" class="headerlink" title="2.  语法"></a>2.  语法</h4><p>1.JSON 语法是 JavaScript 语法的子集。</p>
<ul>
<li>数据在名称/值对中</li>
<li>数据由逗号分隔</li>
<li>大括号 <strong>{}</strong> 保存对象</li>
<li>中括号 <strong>[]</strong> 保存数组，数组可以包含多个对象</li>
</ul>
<h5 id="2-JSON-数据的书写格式是："><a href="#2-JSON-数据的书写格式是：" class="headerlink" title="2. JSON 数据的书写格式是："></a><strong>2. JSON 数据的书写格式是：</strong></h5><figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="built_in">key</span> : <span class="built_in">value</span></span><br></pre></td></tr></table></figure>



<p>2.1 名称/值对包括字段名称（在双引号中），后面写一个冒号，然后是值：</p>
<p><code>&quot;name&quot; : &quot;菜鸟教程&quot;</code></p>
<ul>
<li><p>这很容易理解，等价于这条 JavaScript 语句：</p>
<p><code>name = &quot;菜鸟教程&quot;</code></p>
</li>
</ul>
<p>2.2 同时，与js创建对象非常相似：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> star = &#123;</span><br><span class="line">    name : <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">    age : <span class="number">18</span>,</span><br><span class="line">    sex : <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    sayHi : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;大家好啊~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>1.只是左边的name，没有双引号；</li>
</ul>
<h5 id="3-JSON-值"><a href="#3-JSON-值" class="headerlink" title="3. JSON 值"></a><strong>3. JSON 值</strong></h5><p>1.JSON 值可以是：</p>
<ul>
<li>数字（整数或浮点数）<ul>
<li><code>&#123; &quot;age&quot;:30 &#125;</code></li>
</ul>
</li>
<li>字符串（在双引号中）</li>
<li>逻辑值（true 或 false）</li>
<li>数组（在中括号中）</li>
<li>对象（在大括号中）</li>
<li>null</li>
</ul>
<h5 id="4-JSON-对象"><a href="#4-JSON-对象" class="headerlink" title="4. JSON 对象"></a>4. JSON 对象</h5><p>1.JSON 对象在大括号 <strong>{}</strong> 中书写：</p>
<p><code>&#123;key1 : value1, key2 : value2, ... keyN : valueN &#125;</code></p>
<ul>
<li>1.1  对象可以包含多个名称/值对：</li>
</ul>
<p><code>&#123; &quot;name&quot;:&quot;菜鸟教程&quot; , &quot;url&quot;:&quot;www.runoob.com&quot; &#125;</code></p>
<ul>
<li>1.2 这一点也容易理解，与这条 JavaScript 语句等价：</li>
</ul>
<p><code>name = &quot;菜鸟教程&quot; url = &quot;www.runoob.com&quot;</code></p>
<h5 id="5-JSON数组"><a href="#5-JSON数组" class="headerlink" title="5. JSON数组"></a>5. JSON数组</h5><p>1.JSON 数组在中括号 <strong>[]</strong> 中书写：</p>
<ul>
<li>1.数组可包含多个对象：</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123; key1 : value1-1 , key2:value1-2 &#125;, </span><br><span class="line">    &#123; key1 : value2-1 , key2:value2-2 &#125;, </span><br><span class="line">    &#123; key1 : value3-1 , key2:value3-2 &#125;, </span><br><span class="line">    ...</span><br><span class="line">    &#123; keyN : valueN-1 , keyN:valueN-2 &#125;, </span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;sites&quot;</span>: [</span><br><span class="line">        &#123; <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;菜鸟教程&quot;</span> , <span class="attr">&quot;url&quot;</span>:<span class="string">&quot;www.runoob.com&quot;</span> &#125;, </span><br><span class="line">        &#123; <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;google&quot;</span> , <span class="attr">&quot;url&quot;</span>:<span class="string">&quot;www.google.com&quot;</span> &#125;, </span><br><span class="line">        &#123; <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;微博&quot;</span> , <span class="attr">&quot;url&quot;</span>:<span class="string">&quot;www.weibo.com&quot;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在上面的例子中，对象 <strong>sites[^3]</strong> 是包含三个对象的数组。每个对象代表一条关于某个网站（name、url）的记录。</p>
<hr>
<h3 id="6-2-狂神说-1小时掌握json"><a href="#6-2-狂神说-1小时掌握json" class="headerlink" title="6.2 狂神说-1小时掌握json"></a>6.2 狂神说-1小时掌握json</h3><blockquote>
<p><a href="https://www.bilibili.com/video/BV1Pt411u7R3">https://www.bilibili.com/video/BV1Pt411u7R3</a></p>
</blockquote>
<hr>
<h2 id="7-gulp-4-0"><a href="#7-gulp-4-0" class="headerlink" title="7. gulp-4.0"></a>7. gulp-4.0</h2><p>1.因为在15-node.js中，是4.0版本一下的</p>
<p>2.这里要写4.0版本以上的</p>
<h2 id="X-题注"><a href="#X-题注" class="headerlink" title="X.题注"></a>X.题注</h2><p>[^1]:call英 [kɔːl]   美 [kɔːl]  v.给…命名;称呼;把…叫做;认为…是;把…看作;把自己称为;自诩<br/>n.打电话;通话;(禽、兽的)叫声;(唤起注意的)喊声;短暂拜访<br>[^2]:notation 英 [nəʊˈteɪʃn]   美 [noʊˈteɪʃn]  n.(数学、科学和音乐中的)符号，记号，谱号<br>[^3]:site英 [saɪt]   美 [saɪt]  n.(建筑物、城镇等的)地点，位置，建筑工地;现场;发生地;场所;网站;站点<br/>v.使坐落在;为…选址<br/>sites英 [saɪts]   美 [saɪts]  n.(建筑物、城镇等的)地点，位置，建筑工地;现场;发生地;场所;网站;站点<br>v.使坐落在;为…选址  site的第三人称单数和复数</p>
]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>25.4-js进阶-面向对象ES6</title>
    <url>/1-(0~50)/25.4-js%E8%BF%9B%E9%98%B6_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1ES6/</url>
    <content><![CDATA[<h2 id="1-JavaScript-面向对象"><a href="#1-JavaScript-面向对象" class="headerlink" title="1. JavaScript 面向对象"></a>1. JavaScript 面向对象</h2><p>目标：</p>
<p> 能够说出什么是面向对象<br> 能够说出类和对象的关系<br> 能够使用 class 创建自定义类型<br> 能够说出什么是继承</p>
<a id="more"></a>

<p>面向对象编程介绍<br>ES6 中的类和对象<br>类的继承<br>面向对象案例</p>
<h3 id="1-1-面向对象编程介绍"><a href="#1-1-面向对象编程介绍" class="headerlink" title="1.1 面向对象编程介绍"></a>1.1 面向对象编程介绍</h3><h4 id="1-两大编程思想"><a href="#1-两大编程思想" class="headerlink" title="1. 两大编程思想"></a>1. 两大编程思想</h4><ul>
<li>面向过程</li>
<li>面向对象</li>
</ul>
<h4 id="2-面向过程编程"><a href="#2-面向过程编程" class="headerlink" title="2. 面向过程编程"></a>2. 面向过程编程</h4><p>面向过程编程 POP (Process-oriented programming)</p>
<p>1.面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次调用就可以了。</p>
<p>2.举个栗子：将大象装进冰箱，面向过程做法。</p>
<p><img src="../../img/25.4/1.png" alt="1"></p>
<p>3.面向过程，就是按照我们分析好了的步骤，按照步骤解决问题。</p>
<h4 id="3-面向对象编程-OOP"><a href="#3-面向对象编程-OOP" class="headerlink" title="3. 面向对象编程 OOP"></a>3. 面向对象编程 OOP</h4><p>面向对象编程 OOP (Object Oriented Programming)</p>
<p>1.面向对象是把事务分解成为一个个对象，然后由对象之间分工与合作。</p>
<p>2.举个栗子：将大象装进冰箱，面向对象做法。先找出对象，并写出这些对象的功能：</p>
<ul>
<li><p>1.大象对象<br>进去<br>2.冰箱对象<br>打开<br>关闭</p>
<p>3.使用大象和冰箱的功能 </p>
</li>
<li><p>面向对象是以对象功能来划分问题，而不是步骤。</p>
</li>
</ul>
<p>3.在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工。</p>
<p>面向对象编程具有灵活、代码可复用、容易维护和开发的优点，更适合多人合作的大型软件项目。</p>
<p>4.面向对象的特性：<br>封装性<br>继承性<br>多态性</p>
<img src="../../img/25.4/2.png" alt="2" style="zoom:87%;" />



<h4 id="4-面向过程和面向对象的对比"><a href="#4-面向过程和面向对象的对比" class="headerlink" title="4. 面向过程和面向对象的对比"></a>4. 面向过程和面向对象的对比</h4><p>1.面向过程：</p>
<p>优点：性能比面向对象高，适合跟硬件联系很紧密的东西，例如单片机就采用的面向过程编程。<br>缺点：没有面向对象易维护、易复用、易扩展。</p>
<p>2.面向对象：</p>
<p>优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合[^1][^2]的系统，使系统 更加灵活、更加易于维护 </p>
<p>缺点：性能比面向过程低</p>
<p>3.用面向过程的方法写出来的程序是一份蛋炒饭，而用面向对象写出来的程序是一份盖浇饭。</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1Kt411w7MP?p=3&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1Kt411w7MP?p=3&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<hr>
<h3 id="1-2-ES6-中的类和对象"><a href="#1-2-ES6-中的类和对象" class="headerlink" title="1.2 ES6 中的类和对象"></a>1.2 ES6 中的类和对象</h3><h4 id="1-面向对象"><a href="#1-面向对象" class="headerlink" title="1. 面向对象"></a>1. 面向对象</h4><p>1.面向对象更贴近我们的实际生活, 可以使用面向对象描述现实世界事物.  但是事物分为具体的事物和抽象的事物<br>抽象的(泛指的)，具体的(特指的)</p>
<p>2.面向对象的思维特点: </p>
<ul>
<li>抽取（抽象）对象共用的属性和行为组织(封装)成一个类(模板)</li>
<li>对类进行实例化, 获取类的对象</li>
</ul>
<p>3.面向对象编程我们考虑的是有哪些对象，按照面向对象的思维特点,不断的创建对象,使用对象,指挥对象做事情.</p>
<h4 id="2-对象"><a href="#2-对象" class="headerlink" title="2. 对象"></a>2. 对象</h4><p>1.现实生活中：万物皆对象，对象是一个具体的事物，看得见摸得着的实物。例如，一本书、一辆汽车、一个人可以是“对象”，一个数据库、一张网页、一个与远程服务器的连接也可以是“对象”。</p>
<p>2.在 JavaScript 中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。</p>
<p>3.对象是由==属性==和==方法==组成的：<br>属性：事物的==特征==，在对象中用==属性==来表示（常用名词）<br>方法：事物的==行为==，在对象中用==方法==来表示（常用动词）</p>
<h4 id="3-类-class"><a href="#3-类-class" class="headerlink" title="3. 类 class"></a>3. 类 class</h4><p>1.在 ES6 中新增加了类的概念，可以使用 class 关键字声明一个类，之后以这个类来实例化对象。</p>
<p>2.类抽象了对象的公共部分，它泛指某一大类（class），对象特指某一个，通过类实例化一个具体的对象。</p>
<p><img src="../../img/25.4/3.png" alt="3"></p>
<p>3.类抽象了对象的公共部分，它泛指某一大类（class）</p>
<ul>
<li>对象特指某一个，通过类实例化一个具体的对象 </li>
</ul>
<p>4.面向对象的思维特点: </p>
<ul>
<li>抽取（抽象）对象共用的属性和行为组织(封装)成一个类(模板)</li>
<li>对类进行实例化, 获取类的对象</li>
</ul>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1Kt411w7MP?p=3">https://www.bilibili.com/video/BV1Kt411w7MP?p=3</a></p>
</blockquote>
<p>5.面向对象的思维特点: </p>
<p>抽取（抽象）对象共用的属性和行为组织(封装)成一个类(模板)</p>
<p>对类进行实例化, 获取类的对象</p>
<h4 id="4-创建类"><a href="#4-创建类" class="headerlink" title="4. 创建类"></a>4. 创建类</h4><p>1.语法：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">name</span> &#123;</span><br><span class="line">  <span class="comment">// class body</span></span><br><span class="line">&#125;       </span><br></pre></td></tr></table></figure>

<p>2.创建实例：</p>
<p><code>var xx = new name();</code></p>
<p>2.1 注意： 类必须使用 new 实例化对象</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1Kt411w7MP?p=4&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1Kt411w7MP?p=4&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>2.2 图示：</p>
<p><img src="../../img/25.4/4.png" alt="4"></p>
<p>3.constructor() 方法是类的构造函数(默认方法)，用于传递参数,返回实例对象，通过 new 命令生成对象实例时，自动调用该方法。如果没有显示定义, 类内部会自动给我们创建一个constructor() 。</p>
<p>3.1 语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name,age) &#123;   <span class="comment">// constructor 构造方法或者构造函数</span></span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;       </span><br></pre></td></tr></table></figure>

<p>3.2 创建实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Person(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>); </span><br><span class="line"><span class="built_in">console</span>.log(ldh.name) </span><br></pre></td></tr></table></figure>

<br />

<p>4.注意：</p>
<ul>
<li><p>(1) 通过class关键字创建类，类名首写字母大写；</p>
</li>
<li><p>(2) 类里面有个constructor函数,可以接受传递过来的参数,同时返回实例对象。</p>
</li>
<li><p>(3) constructor函数只要new生成实例时,就会自动调用这个函数,如果我们不写这个函数,类也会自动生成这个函数</p>
</li>
<li><p>(4) 生成实例new不能省略</p>
</li>
<li><p>(5) 最后注意语法规范，创建类类名后面不要加小括号，生成实例类名后面加小括号，构造函数不需要加function</p>
</li>
</ul>
<h4 id="5-类添加方法"><a href="#5-类添加方法" class="headerlink" title="5. 类添加方法"></a>5. 类添加方法</h4><p>1.语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name,age) &#123;   <span class="comment">// constructor 构造器或者构造函数</span></span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">   say() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27;你好&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;       </span><br></pre></td></tr></table></figure>

<p>2.创建实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Person(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>); </span><br><span class="line">ldh.say()   </span><br></pre></td></tr></table></figure>

<p>注意： 方法之间不能加逗号分隔，同时方法不需要添加 function 关键字。</p>
<p>3.自写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1. 创建类 class 创建一个 明星类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Start</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(uname) &#123;</span><br><span class="line">            <span class="built_in">this</span>.uname = uname;</span><br><span class="line">        &#125;</span><br><span class="line">        sing(song) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.uname + <span class="string">&#x27;唱&#x27;</span> + song);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 利用类创建对象 new</span></span><br><span class="line">    <span class="keyword">var</span> LJ = <span class="keyword">new</span> Start(<span class="string">&#x27;李洁&#x27;</span>);</span><br><span class="line">    <span class="comment">// (1) 我们类里面所有的函数不需要写function</span></span><br><span class="line">    <span class="comment">// (2) 多个函数方法之间不需要添加逗号分隔</span></span><br><span class="line">    LJ.sing(<span class="string">&#x27;李窕凤00&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(LJ);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="1-3-类的继承"><a href="#1-3-类的继承" class="headerlink" title="1.3 类的继承"></a>1.3 类的继承</h3><h4 id="1-继承"><a href="#1-继承" class="headerlink" title="1. 继承"></a>1. 继承</h4><p>现实中的继承：子承父业，比如我们都继承了父亲的姓。<br>程序中的继承：子类可以继承父类的一些属性和方法。</p>
<p>1.语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;   <span class="comment">// 父类</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;  <span class="comment">// 子类继承父类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>2.实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">      <span class="keyword">constructor</span>(surname) &#123;</span><br><span class="line">        <span class="built_in">this</span>.surname= surname;</span><br><span class="line">      &#125;</span><br><span class="line">      say() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;你的姓是&#x27;</span> + <span class="built_in">this</span>.surname);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;  <span class="comment">// 这样子类就继承了父类的属性和方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> damao= <span class="keyword">new</span> Son(<span class="string">&#x27;刘&#x27;</span>);</span><br><span class="line">damao.say();</span><br></pre></td></tr></table></figure>



<h4 id="2-super-关键字"><a href="#2-super-关键字" class="headerlink" title="2. super 关键字"></a>2. super 关键字</h4><p>1==.super 关键字==用于访问和调用对象父类上的函数。==可以调用父类的构造函数==，也可以调用父类的普通函数</p>
<p>2.语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;   <span class="comment">// 父类</span></span><br><span class="line">      <span class="keyword">constructor</span>(surname)&#123;</span><br><span class="line">         <span class="built_in">this</span>.surname = surname;</span><br><span class="line">     &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;       <span class="comment">// 子类继承父类</span></span><br><span class="line">     <span class="keyword">constructor</span>(surname,firstname)&#123;</span><br><span class="line">          <span class="built_in">super</span>(surname);             <span class="comment">// 调用父类的constructor(surname)</span></span><br><span class="line">    <span class="built_in">this</span>.firstname = firstname; <span class="comment">// 定义子类独有的属性</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;       </span><br></pre></td></tr></table></figure>



<p>3.注意: 子类在构造函数中使用super, 必须放到 this 前面  (必须先调用父类的构造方法,在使用子类构造方法)</p>
<p>4.个人案例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1.新建一个小霞类，继承Start；</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Start</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(uname) &#123;</span><br><span class="line">            <span class="built_in">this</span>.uname = uname;</span><br><span class="line">        &#125;</span><br><span class="line">        sing(song) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.uname + <span class="string">&#x27;唱&#x27;</span> + song);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">xiaoXia</span> <span class="keyword">extends</span> <span class="title">Start</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(uname) &#123;</span><br><span class="line">            <span class="built_in">super</span>(uname);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> LJ = <span class="keyword">new</span> xiaoXia(<span class="string">&#x27;李洁&#x27;</span>);</span><br><span class="line">    LJ.sing(<span class="string">&#x27;小凤&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(LJ);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<p><a href="https://www.bilibili.com/video/BV1Kt411w7MP?p=7&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1Kt411w7MP?p=7&amp;spm_id_from=pageDriver</a></p>
<h2 id="A1-ES6"><a href="#A1-ES6" class="headerlink" title="A1. ES6"></a>A1. ES6</h2><h3 id="A1-1-简介"><a href="#A1-1-简介" class="headerlink" title="A1.1 简介"></a>A1.1 简介</h3><h4 id="1-什么是-ES6"><a href="#1-什么是-ES6" class="headerlink" title="1. 什么是 ES6 ?"></a>1. 什么是 ES6 ?</h4><p>1.ES 的全称是 ECMAScript , 它是由 ECMA 国际标准化组织,制定的一项脚本语言的标准化规范。</p>
<table>
<thead>
<tr>
<th><strong>年份</strong></th>
<th><strong>版本</strong></th>
</tr>
</thead>
<tbody><tr>
<td>2015年6月</td>
<td>ES2015</td>
</tr>
<tr>
<td>2016年6月</td>
<td>ES2016</td>
</tr>
<tr>
<td>2017年6月</td>
<td>ES2017</td>
</tr>
<tr>
<td>2018年6月</td>
<td>ES2018</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<p>2.ES6 实际上是一个泛指，泛指  ES2015 及后续的版本。 </p>
<h4 id="2-为什么使用-ES6"><a href="#2-为什么使用-ES6" class="headerlink" title="2. 为什么使用 ES6 ?"></a>2. 为什么使用 ES6 ?</h4><p>1.每一次标准的诞生都意味着语言的完善，功能的加强。JavaScript语言本身也有一些令人不满意的地方。</p>
<ul>
<li>变量提升特性增加了程序运行时的不可预测性</li>
<li>语法过于松散，实现相同的功能，不同的人可能会写出不同的代码</li>
</ul>
<hr>
<h3 id="A1-2-ES6新增语法"><a href="#A1-2-ES6新增语法" class="headerlink" title="A1.2 ES6新增语法"></a>A1.2 ES6新增语法</h3><h4 id="1-let"><a href="#1-let" class="headerlink" title="1. let"></a>1. let</h4><p>1.ES6中新增的用于声明变量的关键字。</p>
<h5 id="1-1-块级有效"><a href="#1-1-块级有效" class="headerlink" title="1.1 块级有效"></a>1.1 块级有效</h5><ul>
<li>let声明的变量只在所处于的块级有效</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">if</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">     <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">     <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">         <span class="keyword">let</span> c =<span class="number">30</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">console</span>.log(c);<span class="comment">// c is not defined</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// a is not defined</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.注意：使用let关键字声明的变量才具有块级作用域，使用var声明的变量不具备块级作用域特性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">var</span> abc = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(abc); <span class="comment">// 找得到,不过如果是函数里面var 外面还是不能用（局部变量）</span></span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="comment">// not defined</span></span><br></pre></td></tr></table></figure>

<p>3.一个{}就是一个块级；</p>
<p>4.作用：在逻辑复杂的时候，能防止内层变量覆盖外层变量；</p>
<p>4.1 防止循环变量变成全局变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>在for的外面，i的值也有；2021-4-7 17:22:14</li>
<li>如果改成let，那么外面是undefined，找不到；</li>
</ul>
<h5 id="1-2-不存在变量提升"><a href="#1-2-不存在变量提升" class="headerlink" title="1.2 不存在变量提升"></a>1.2 不存在变量提升</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// a is not defined </span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>



<h5 id="1-3-暂时性死区"><a href="#1-3-暂时性死区" class="headerlink" title="1.3 暂时性死区"></a>1.3 暂时性死区</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"> <span class="keyword">if</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">     tmp = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">     <span class="keyword">let</span> tmp; </span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.本来，按照平常的规律，外面var num了，里面能找到；</p>
<p>2.但后面let num了，那么在这个{}里面，num就是一个块级作用的变量了，与外面的 var num没关系了。</p>
<h5 id="1-4-经典面试题"><a href="#1-4-经典面试题" class="headerlink" title="1.4 经典面试题"></a>1.4 经典面试题</h5><p>1.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>]();</span><br><span class="line">arr[<span class="number">1</span>]();</span><br></pre></td></tr></table></figure>



<p>2.图解？</p>
<p><img src="../../img/25.4/5.png" alt="5"></p>
<p>3.经典面试题图解：此题的关键点在于变量i是全局的，函数执行时输出的都是全局作用域下的i值。</p>
<p>4.添加断点看懂了；</p>
<ul>
<li><p>下面 <code>arr[0]();</code>执行的时候，i=2，不变了。这个时候还去console，就只有2了；</p>
</li>
<li><p>如果只是arr[0]，估计是0，我去代码试试；</p>
<ul>
<li><p>两个结果都是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ƒ () &#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组里面的值，或者叫元素，居然可以是一个函数。我的天；2021-4-7 18:00:07</p>
</li>
</ul>
</li>
</ul>
<p>5.如果换成let</p>
<ul>
<li><p>经典面试题图解：此题的关键点在于每次循环都会产生一个块级作用域，每个块级作用域中的变量都是不同的，函数执行时输出的是自己上一级（循环产生的块级作用域）作用域下的i值.</p>
</li>
<li><p><code>arr[0](); arr[1]();</code>的结果就是0和1</p>
</li>
</ul>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1Kt411w7MP?p=96&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1Kt411w7MP?p=96&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<hr>
<h4 id="2-const"><a href="#2-const" class="headerlink" title="2. const"></a>2. const</h4><p>1.作用：声明常量，常量就是值（内存地址）不能变化的量。</p>
<ul>
<li>具有块级作用域</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">if</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">     <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure>

<p>2.声明常量时必须赋值</p>
<p><code>const PI; // Missing initializer in const declaration</code></p>
<p>3.常量赋值后，值不能修改。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line">PI = <span class="number">100</span>; <span class="comment">// Assignment to constant variable. </span></span><br></pre></td></tr></table></figure>

<p>3.1 不过复杂数据可以更改（虽然也不复杂）比如数组里面的数据</p>
<ul>
<li>直接改数组是报错的；2021-4-7 19:58:36</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ary = [<span class="number">100</span>, <span class="number">200</span>];</span><br><span class="line">ary[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">ary[<span class="number">1</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(ary); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;]; </span></span><br><span class="line">ary = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]; <span class="comment">// Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>



<h4 id="3-let、const、var-的区别"><a href="#3-let、const、var-的区别" class="headerlink" title="3. let、const、var 的区别"></a>3. let、const、var 的区别</h4><p>1.使用 var 声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象。</p>
<p>2.使用 let 声明的变量，其作用域为该语句所在的代码块内，不存在变量提升。</p>
<p>3.使用 const 声明的是常量，在后面出现的代码中不能再修改该常量的值。</p>
<ul>
<li>复杂数据的值可以变化</li>
</ul>
<table>
<thead>
<tr>
<th><strong>var</strong></th>
<th><strong>let</strong></th>
<th><strong>const</strong></th>
</tr>
</thead>
<tbody><tr>
<td>函数级作用域</td>
<td>块级作用域</td>
<td>块级作用域</td>
</tr>
<tr>
<td>变量提升</td>
<td>不存在变量提升</td>
<td>不存在变量提升</td>
</tr>
<tr>
<td>值可更改</td>
<td>值可更改</td>
<td>值不可更改</td>
</tr>
</tbody></table>
<hr>
<h4 id="4-解构赋值"><a href="#4-解构赋值" class="headerlink" title="4. 解构赋值"></a>4. 解构赋值</h4><p>1.ES6中允许从数组中提取值，按照对应位置，对变量赋值。对象也可以实现解构。</p>
<h5 id="4-1-数组解构"><a href="#4-1-数组解构" class="headerlink" title="4.1 数组解构"></a>4.1 数组解构</h5><p>0.数组解构，允许我们按照一一对应的关系从数组中提起值，然后将值赋值给变量。</p>
<p>1.右边的<code>[1,2,3]</code>是数组，左边的是变量；（快速赋值用？）</p>
<ul>
<li>左边写[]代表数组解构；</li>
<li>左边写{}代表对象解构</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"> <span class="built_in">console</span>.log(a)</span><br><span class="line"> <span class="built_in">console</span>.log(b)</span><br><span class="line"> <span class="built_in">console</span>.log(c) </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> [z,x,s] = ary;<span class="comment">//也行</span></span><br></pre></td></tr></table></figure>



<p>2.以上是左边变量数，等于，右边数组值的个数。</p>
<ul>
<li>如果不相等呢？</li>
</ul>
<p>如果解构不成功，变量的值为undefined。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo] = [];</span><br><span class="line"><span class="keyword">let</span> [bar, foo] = [<span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<br />

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">let</span> [a,b,c,e,d] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"> <span class="built_in">console</span>.log(a)</span><br><span class="line"> <span class="built_in">console</span>.log(b)</span><br><span class="line"> <span class="built_in">console</span>.log(c)</span><br><span class="line"><span class="built_in">console</span>.log(e);<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://www.bilibili.com/video/BV1Kt411w7MP?p=102&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1Kt411w7MP?p=102&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<h5 id="4-2-对象解构"><a href="#4-2-对象解构" class="headerlink" title="4.2 对象解构"></a>4.2 对象解构</h5><p>1.对象解构允许我们使用变量的名字匹配对象的属性，匹配成功，将对象属性的值赋值给变量。</p>
<p>2.一个对象：<code>let person = &#123; name: &#39;zhangsan&#39;, age: 20 &#125;;</code></p>
<p>2.1 如果在之前，我们取数据是XX.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">person.name;</span><br><span class="line">person.age;</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;; </span><br><span class="line"><span class="keyword">let</span> &#123; name, age &#125; = person;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// &#x27;zhangsan&#x27; </span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>



<p>3.对象解构的另一种写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: myName, <span class="attr">age</span>: myAge&#125; = person; <span class="comment">// myName myAge 属于别名</span></span><br><span class="line"><span class="built_in">console</span>.log(myName); <span class="comment">// &#x27;zhangsan&#x27; </span></span><br><span class="line"><span class="built_in">console</span>.log(myAge); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>



<p>3.1 自</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;lijie&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">name</span>: a1, <span class="attr">age</span>: a2 &#125; = person;</span><br><span class="line"><span class="built_in">console</span>.log(a1);</span><br><span class="line"><span class="built_in">console</span>.log(a2);</span><br></pre></td></tr></table></figure>



<hr>
<h4 id="5-箭头函数"><a href="#5-箭头函数" class="headerlink" title="5. 箭头函数"></a>5. 箭头函数</h4><p>1.ES6中新增的定义函数的方式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">() =&gt; &#123;&#125; </span><br><span class="line"><span class="keyword">const</span> fn = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line"><span class="comment">// () =&gt; &#123;&#125;是一个整体。就像这样const fn = ( () =&gt; &#123;&#125; )</span></span><br></pre></td></tr></table></figure>

<ul>
<li>()形参，{}函数体；</li>
</ul>
<p>2.函数体中只有一句代码，且代码的执行结果就是返回值，可以省略大括号。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> num1 + num2; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2; </span><br></pre></td></tr></table></figure>



<p>3.如果形参只有一个，可以省略小括号</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br></pre></td></tr></table></figure>



<p>4.箭头函数不绑定this关键字，箭头函数中的this，指向的是函数定义位置的上下文this。</p>
<ul>
<li>比如下面，这个箭头函数是在fn函数里面，那么箭头函数里面的this就是fn函数里面this指向的地方；</li>
<li>而不是箭头函数自己，所谓的this的指向；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">const</span> resFn = fn.call(obj); </span><br><span class="line">resFn();</span><br></pre></td></tr></table></figure>

<p>返回的结果：是一个对象；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span></span><br><span class="line">name: <span class="string">&quot;张三&quot;</span></span><br></pre></td></tr></table></figure>

<p>4.1 call方法，可以改变函数内部的this指向；</p>
<p>4.2 上面那个，果然就叫：匿名箭头函数；</p>
<h5 id="5-2-练习题"><a href="#5-2-练习题" class="headerlink" title="5.2 练习题"></a>5.2 练习题</h5><p>1.以下代码输出什么？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    say: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.say();</span><br></pre></td></tr></table></figure>

<p>1.1 输出undfined。</p>
<ul>
<li>为什么不是20？</li>
<li>不是说this指向是，包含它的那个谁的this指向吗？<ul>
<li>这里是对象obj包含了它</li>
<li>那就是obj的this指向，这里的obj没什么特殊情况，就应该是obj的呀？</li>
</ul>
</li>
</ul>
<p>1.2 视频说：</p>
<ul>
<li>对象没有作用域，所以没有this指向。<ul>
<li>？？？</li>
</ul>
</li>
<li>所以，这里的，箭头函数的this，是window；因为这里的箭头函数被定义到了全局作用域下<ul>
<li>而window.say()，是没有的；2021-4-8 11:19:32</li>
</ul>
</li>
<li>我觉得我有必要，写一个this关键字的 小结笔记；<ul>
<li>2021-4-8 11:27:47</li>
</ul>
</li>
</ul>
<p>1.3 如果不是箭头函数，那么this能指向对象名；</p>
<ul>
<li><p>也是MDN上面的第一个例子</p>
</li>
<li><blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this</a></p>
</blockquote>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> test = &#123;</span><br><span class="line">  prop: <span class="number">42</span>,</span><br><span class="line">  func: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.prop;</span><br><span class="line">  &#125;,</span><br><span class="line">  say: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.prop);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test.func());<span class="comment">// 42，因为不是箭头函数</span></span><br><span class="line"><span class="built_in">console</span>.log(test.say());<span class="comment">// 我就找不到，我是箭头函数，我应该找包我的人，结果他是个对象，没有作用域，于是我找包那个对象的人，他是window，window西面没有say()</span></span><br></pre></td></tr></table></figure>



<hr>
<h4 id="6-剩余参数"><a href="#6-剩余参数" class="headerlink" title="6. 剩余参数"></a>6. 剩余参数</h4><p>1.剩余参数语法允许我们将一个不定数量的参数表示为一个数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">first, ...args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(first); <span class="comment">// 10</span></span><br><span class="line">    <span class="built_in">console</span>.log(args); <span class="comment">// [20, 30] </span></span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br></pre></td></tr></table></figure>

<p>1.1 在args前面加了三个点，表示剩余的参数我都接收了；</p>
<h5 id="2-配合着箭头函数使用："><a href="#2-配合着箭头函数使用：" class="headerlink" title="2.配合着箭头函数使用："></a>2.配合着箭头函数使用：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">    args.forEach(<span class="function"><span class="params">item</span> =&gt;</span> total += item);</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line"><span class="keyword">var</span> a = sum(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>



<p>2.1 emm，大略的说说：</p>
<ul>
<li><p>forEach()是遍历函数的方法，数组为对象</p>
</li>
<li><p>item就是个形参，因为forEach()能得到数组里面的每一个值，所以这里就是每一个值。</p>
</li>
<li><p>然后是箭头函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">item =&gt; total += item;</span><br><span class="line"><span class="comment">// 等于</span></span><br><span class="line">(item) =&gt; &#123;</span><br><span class="line">    total += item;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    total += item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h5 id="3-和解构配合使用"><a href="#3-和解构配合使用" class="headerlink" title="3. 和解构配合使用"></a>3. 和解构配合使用</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> students = [<span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [s1, ...s2] = students; </span><br><span class="line"><span class="built_in">console</span>.log(s1);  <span class="comment">// &#x27;wangwu&#x27; </span></span><br><span class="line"><span class="built_in">console</span>.log(s2);  <span class="comment">// [&#x27;zhangsan&#x27;, &#x27;lisi&#x27;]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://www.bilibili.com/video/BV1Kt411w7MP?p=108&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1Kt411w7MP?p=108&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = [<span class="string">&#x27;老李&#x27;</span>, <span class="string">&quot;小凤&quot;</span>, <span class="string">&#x27;xxxx&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [s1, ...s2] = name;</span><br><span class="line"><span class="built_in">console</span>.log(s1);</span><br><span class="line"><span class="built_in">console</span>.log(s2);</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="A1-3-ES6-的内置对象扩展"><a href="#A1-3-ES6-的内置对象扩展" class="headerlink" title="A1.3 ES6 的内置对象扩展"></a>A1.3 ES6 的内置对象扩展</h3><h4 id="1-Array-的扩展方法"><a href="#1-Array-的扩展方法" class="headerlink" title="1. Array 的扩展方法"></a>1. Array 的扩展方法</h4><h4 id="1-1-扩展运算符（展开语法）"><a href="#1-1-扩展运算符（展开语法）" class="headerlink" title="1.1 扩展运算符（展开语法）"></a>1.1 扩展运算符（展开语法）</h4><p>1.扩展运算符可以将数组或者对象转为用逗号分隔的参数序列。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">...ary  <span class="comment">// 1, 2, 3</span></span><br><span class="line"><span class="built_in">console</span>.log(...ary);    <span class="comment">// 1 2 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>



<p>1.1 自</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = [<span class="string">&#x27;老李&#x27;</span>, <span class="string">&quot;小凤&quot;</span>, <span class="string">&#x27;xxxx&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(...name);</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></figure>

<p>1.2 预览：</p>
<p><img src="../../img/25.4/6.png" alt="5"></p>
<p>2.扩展运算符可以应用于合并数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一 </span></span><br><span class="line"><span class="keyword">let</span> ary1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> ary2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> ary3 = [...ary1, ...ary2];</span><br><span class="line"> <span class="comment">// 方法二 </span></span><br><span class="line">ary1.push(...ary2);</span><br></pre></td></tr></table></figure>

<p>2.1 自写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = [<span class="string">&#x27;老李&#x27;</span>, <span class="string">&quot;小凤&quot;</span>, <span class="string">&#x27;xxxx&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> age = [<span class="number">20</span>, <span class="number">20</span>, <span class="number">199</span>];</span><br><span class="line"><span class="comment">// let a1 = name.push(...age);</span></span><br><span class="line"><span class="comment">// console.log(name);</span></span><br><span class="line">name.push(age);</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ary1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> ary2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">ary1.push(...ary2);</span><br><span class="line"><span class="built_in">console</span>.log(ary1);</span><br></pre></td></tr></table></figure>

<p>2.2 预览：</p>
<p><img src="../../img/25.4/7.png" alt="5"></p>
<p>3.将类数组或可遍历对象转换为真正的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> oDivs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>); </span><br><span class="line"><span class="comment">// 3.1 得到页面所有的div集合，返回一个伪数组；</span></span><br><span class="line">oDivs = [...oDivs];</span><br><span class="line"><span class="comment">// 3.2 变成真正的数组；</span></span><br></pre></td></tr></table></figure>

<p>3.3 …oDivs，先把一个伪数组集合里的每一个值，分成由逗号分隔的；例如：</p>
<p>(div,div,div)</p>
<ul>
<li>然后[]起来，变成一个数组格式，由变量保存；</li>
</ul>
<hr>
<h4 id="1-2-构造函数方法：Array-from"><a href="#1-2-构造函数方法：Array-from" class="headerlink" title="1.2 构造函数方法：Array.from()"></a>1.2 构造函数方法：Array.from()</h4><blockquote>
<p><a href="https://www.bilibili.com/video/BV1Kt411w7MP?p=112&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1Kt411w7MP?p=112&amp;spm_id_from=pageDriver</a></p>
<p>2021-4-8 15:31:49</p>
</blockquote>
<p>1.将类数组或可遍历对象转换为真正的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    length: <span class="number">3</span></span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(arrayLike); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>2.方法还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123; </span><br><span class="line">    <span class="string">&quot;0&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;1&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;length&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newAry = <span class="built_in">Array</span>.from(aryLike, <span class="function"><span class="params">item</span> =&gt;</span> item *<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<br />

<hr>
<h4 id="1-3-实例方法：find"><a href="#1-3-实例方法：find" class="headerlink" title="1.3 实例方法：find()"></a>1.3 实例方法：find()</h4><hr>
<h3 id="A1-4-String-的扩展方法"><a href="#A1-4-String-的扩展方法" class="headerlink" title="A1.4 String 的扩展方法"></a>A1.4 String 的扩展方法</h3><h4 id="1-模板字符串"><a href="#1-模板字符串" class="headerlink" title="1. 模板字符串"></a>1. 模板字符串</h4><p>1.ES6新增的创建字符串的方式，使用反引号定义。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">`zhangsan`</span>;</span><br></pre></td></tr></table></figure>



<p>2.模板字符串中可以解析变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;张三&#x27;</span>; </span><br><span class="line"><span class="keyword">let</span> sayHello = <span class="string">`hello,my name is <span class="subst">$&#123;name&#125;</span>`</span>; <span class="comment">// hello, my name is zhangsan</span></span><br></pre></td></tr></table></figure>

<ul>
<li>以前啊，要用 + 号，多个 引号；</li>
</ul>
<p>3.模板字符串中可以换行。</p>
<ul>
<li>1.模板字符串里面的东西都会记录，不过是标签还是换行</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = &#123; </span><br><span class="line">    name: <span class="string">&#x27;zhangsan&#x27;</span>, </span><br><span class="line">    age: <span class="number">20</span>, </span><br><span class="line">    sex: <span class="string">&#x27;男&#x27;</span> </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> html = <span class="string">` &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;<span class="subst">$&#123;result.name&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;<span class="subst">$&#123;result.age&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;<span class="subst">$&#123;result.sex&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt; `</span>;</span><br></pre></td></tr></table></figure>

<p>3.1 你以为span就是span？视频里说这是换行用的。。。。</p>
<p>3.2 然而并不是这样；</p>
<p><img src="../../img/25.4/8.png" alt="8"></p>
<ul>
<li>换行只是因为ENTER吧；</li>
</ul>
<p>4.在模板字符串中可以调用函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;哈哈哈哈 追不到我吧 我就是这么强大&#x27;</span>;</span><br><span class="line"> &#125;; </span><br><span class="line"> <span class="keyword">let</span> greet = <span class="string">`<span class="subst">$&#123;sayHello()&#125;</span> 哈哈哈哈`</span>; </span><br><span class="line"><span class="built_in">console</span>.log(greet); <span class="comment">// 哈哈哈哈 追不到我吧 我就是这么强大 哈哈哈哈</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://www.bilibili.com/video/BV1Kt411w7MP?p=116&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1Kt411w7MP?p=116&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p><img src="../../img/25.4/9.png" alt="9"></p>
<hr>
<h4 id="2-实例方法：startsWith-和-endsWith"><a href="#2-实例方法：startsWith-和-endsWith" class="headerlink" title="2. 实例方法：startsWith() 和 endsWith()"></a>2. 实例方法：startsWith() 和 endsWith()</h4><p>startsWith()：表示参数字符串是否在原字符串的头部，返回布尔值<br>endsWith()：表示参数字符串是否在原字符串的尾部，返回布尔值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Hello world!&#x27;</span>;</span><br><span class="line">str.startsWith(<span class="string">&#x27;Hello&#x27;</span>) <span class="comment">// true </span></span><br><span class="line">str.endsWith(<span class="string">&#x27;!&#x27;</span>)       <span class="comment">// true</span></span><br></pre></td></tr></table></figure>





<h2 id="X-题注"><a href="#X-题注" class="headerlink" title="X. 题注"></a>X. 题注</h2><p>[^2]:<strong>耦合性</strong>（英语：Coupling，dependency，或称<strong>耦合力</strong>或<strong>耦合度</strong>）是一种<a href="https://baike.baidu.com/item/软件度量">软件度量</a>，是指一程序中，<a href="https://baike.baidu.com/item/模块">模块</a>及模块之间信息或参数依赖的程度。<br /><a href="https://baike.baidu.com/item/内聚性">内聚性</a>是一个和耦合性相对的概念，一般而言低耦合性代表高内聚性，反之亦然。耦合性和内聚性都是由提出结构化设计概念的赖瑞·康斯坦丁所提出[1]。低耦合性是结构良好<a href="https://baike.baidu.com/item/程序">程序</a>的特性，低耦合性程序的可读性及可维护性会比较好。</p>
]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>25.5-JS插件</title>
    <url>/1-(0~50)/25.5-JS%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="1-swiper"><a href="#1-swiper" class="headerlink" title="1. swiper"></a>1. swiper</h2><p>1.官网：<a href="https://www.swiper.com.cn">https://www.swiper.com.cn</a></p>
<a id="more"></a>

<h3 id="1-1-使用"><a href="#1-1-使用" class="headerlink" title="1.1 使用"></a>1.1 使用</h3><p>1.~<a href="https://www.swiper.com.cn/usage/index.html">https://www.swiper.com.cn/usage/index.html</a></p>
<p>2.</p>
<h3 id="1-2-分页器"><a href="#1-2-分页器" class="headerlink" title="1.2 分页器"></a>1.2 分页器</h3><h4 id="1-clickable"><a href="#1-clickable" class="headerlink" title="1. clickable"></a>1. clickable</h4><p>1.此参数设置为true时，点击分页器的指示点分页器会控制Swiper切换。</p>
<blockquote>
<p><a href="https://www.swiper.com.cn/api/pagination/69.html">https://www.swiper.com.cn/api/pagination/69.html</a></p>
</blockquote>
<h4 id="2-bulletClass"><a href="#2-bulletClass" class="headerlink" title="2. bulletClass"></a>2. bulletClass</h4><p>1.可以自定义节点的css；</p>
<p>2.pagination分页器内元素的类名。</p>
<blockquote>
<p><a href="https://www.swiper.com.cn/api/pagination/79.html">https://www.swiper.com.cn/api/pagination/79.html</a></p>
</blockquote>
<p>3.用法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;javascript&quot;</span>&gt; </span><br><span class="line"><span class="keyword">var</span> mySwiper = <span class="keyword">new</span> Swiper(<span class="string">&#x27;.swiper-container&#x27;</span>,&#123;</span><br><span class="line">  pagination:&#123;</span><br><span class="line">    el: <span class="string">&#x27;.swiper-pagination&#x27;</span>,</span><br><span class="line">    bulletClass : <span class="string">&#x27;my-bullet&#x27;</span>,<span class="comment">//需设置.my-bullet样式</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h4 id="3-bulletActiveClass"><a href="#3-bulletActiveClass" class="headerlink" title="3.  bulletActiveClass"></a>3.  bulletActiveClass</h4><p>1.定义pagination 分页器内当前活动块的指示小点的类名。</p>
<h3 id="1-3-Navigation-Buttons（前进后退按钮）"><a href="#1-3-Navigation-Buttons（前进后退按钮）" class="headerlink" title="1.3 Navigation Buttons（前进后退按钮）"></a>1.3 Navigation Buttons（前进后退按钮）</h3><h4 id="1-设置按钮的css"><a href="#1-设置按钮的css" class="headerlink" title="1. 设置按钮的css"></a>1. 设置按钮的css</h4><p>1.可以不用，nextEl把类名直接换了，添加类名覆盖也许。</p>
<p>1.1 这样可以用原本有的一些东西；</p>
<p>1.2 比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如果需要导航按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-prev swiper-button-next2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-next swiper-button-next2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.swiper-button-next2 &#123;</span><br><span class="line">    width           : <span class="number">76</span>px;</span><br><span class="line">    height          : <span class="number">76</span>px;</span><br><span class="line">    background-color: #000000;</span><br><span class="line">    box-shadow      : <span class="number">0</span>px <span class="number">0</span>px <span class="number">25</span>px <span class="number">2</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.89</span>);</span><br><span class="line">    opacity         : <span class="number">0.24</span>;</span><br><span class="line">    border-radius   : <span class="number">50</span>%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-修改颜色"><a href="#2-修改颜色" class="headerlink" title="2. 修改颜色"></a>2. 修改颜色</h4><p>1.添加类名：swiper-button-white</p>
<ul>
<li>这个是swiper自己写了的；</li>
</ul>
<blockquote>
<p><a href="https://www.swiper.com.cn/api/navigation/209.html">https://www.swiper.com.cn/api/navigation/209.html</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>26-电脑软件</title>
    <url>/1-(0~50)/26-PC_softWare/</url>
    <content><![CDATA[<h2 id="1-小丸工具箱"><a href="#1-小丸工具箱" class="headerlink" title="1. 小丸工具箱"></a>1. 小丸工具箱</h2><p>1.是压制视频的</p>
<p>2.B站发布的视频有严格的要求，很容易被B站二压</p>
<a id="more"></a>

<p><img src="../../img/26/1.png" alt="1"></p>
<p>3.软件资源：</p>
<p><a href="https://pan.baidu.com/s/1VHonGHoZ0DmQBNZaRjML2A">https://pan.baidu.com/s/1VHonGHoZ0DmQBNZaRjML2A</a><br>提取码: crhu</p>
<ul>
<li>百度的是不是最新版，作者没有更新，说是网站问题。大概</li>
<li>要找最新版，要去搜索 微博@小丸酱</li>
</ul>
<p>4.软件预览：</p>
<p>&lt;../img src=”../../img/26/2.png” alt=”2” style=”zoom:100%;” /&gt;</p>
<hr>
<h3 id="1-2-B站投稿限制"><a href="#1-2-B站投稿限制" class="headerlink" title="1.2 B站投稿限制"></a>1.2 B站投稿限制</h3><p>1.以前分辨率最高是1080P；</p>
<p>&lt;../img src=”../../img/26/3.png” alt=”3” style=”zoom:90%;” /&gt;</p>
<ul>
<li>这是别人2019-08-24 13:05:13投稿的教学视频</li>
<li>网址：<a href="https://www.bilibili.com/video/BV1L4411R75X?t=268">https://www.bilibili.com/video/BV1L4411R75X?t=268</a><ul>
<li>里面讲解是用pr导出+MediaCoder压制，我不用这些。</li>
<li>虽然软件讲解白搭，但有一些数据讲解可以学习。不过能学习的都在上图了</li>
</ul>
</li>
</ul>
<p>1.2 这里的视频码率应该不是目标码率，应该是视频总码率；</p>
<ul>
<li>视频目标码率+音频目标码率(只是自己得出的假设概念)</li>
</ul>
<p>2.现在可以4k了；2020-9-19 03:12:46</p>
<p>&lt;../img src=”../../img/26/1.png” alt=”1” style=”zoom:90%;” /&gt;</p>
<ul>
<li>不知道什么时候改版</li>
<li>但我屏幕就只有1080P，不过我也不需要录制2K及以上的视频</li>
</ul>
<br />

<p>3.以前因为目标码率≤6000Kbps。</p>
<ul>
<li>那么，什么是目标码率？什么是最高码率？</li>
<li>为什么最高码率可以大于目标码率？</li>
</ul>
<br />

<p>3.1</p>
<p>目标码率：视频的最低码率(也就是说视频的最低码率不低于这个设定的目标码率)</p>
<p>最大码率：画面复杂时，可以达到的最大码率</p>
<p>不知道你注意到没，有一个比特率编码选项，一般是 VBR。VBR 就是动态码率编码，在画面复杂的情况下码率比较高，不复杂的时候码率就比较低，以达到充分利用数据资源的目的。要是把最大码率设置的很大，在画面复杂时，数据量就很大，硬件可能带不动，播放起来就容易卡。</p>
<p>比特率大了图像就更清晰，同时导出体积也会变大，但大到一定程度清晰度就不会再提高了。</p>
<p>H.264 视频编码建议码率</p>
<p>视频大小       分辨率           建议码率 </p>
<p>480P            720x480        1800Kbps </p>
<p>720P           1280x720       3500Kbps </p>
<p>1080P        1920x1080      8500Kbps</p>
<p>作者：吱吱吱果冻柠檬<br>链接：<a href="https://www.zhihu.com/question/401033586/answer/1295057660">https://www.zhihu.com/question/401033586/answer/1295057660</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<ul>
<li><p>可是小丸工具箱里面只有一个码率设置。不知道是固定码率，还是最高码率啊</p>
<p><img src="../../img/26/4.png" alt="4"></p>
</li>
<li><p>百度一下，看能百度到不；2020-9-19 03:20:33</p>
<p>没有百度到</p>
</li>
</ul>
<br />

<p>3.2 自定义数据，一部分解析</p>
<p><a href="https://www.bilibili.com/read/cv4430814/">https://www.bilibili.com/read/cv4430814/</a></p>
<ul>
<li>虽然没百度到，但才5900Kbps，明显是固定码率</li>
</ul>
<br />

<p>3.3 接着主题问题：以前因为目标码率≤6000Kbps。所以我们设置往往接近6000Kbps，例如5900Kbps；</p>
<ul>
<li><p>往往会多200Kbps。例如5900Kbps，可能有6100，保险点5700好点。也许我被提醒码率高就是因为我设置成5900</p>
</li>
<li><p>现在可以2wKbps了，岂不是可以设置19000Kbps？</p>
<ul>
<li>如上面小黑点所说，5900就被提醒了，更别说19000。</li>
<li>1.目标码率徒有虚名，根本无法支持到2w，还是现在6k的上限</li>
<li>2.可能是其他参数出现了需要压制的数据，而不是目标码率的错</li>
<li>3.音频那边的参数全是上限之下，所以我也没法。只能假设是目标码率的问题，上限码率又不知道是多少。</li>
</ul>
</li>
</ul>
<p>3.4 找到最高码率</p>
<ul>
<li><p>1.Bandicam游戏录像下来的视频，在小丸工具箱的MediaTinfo里面看不到最高码率的参数与数据</p>
</li>
<li><p>2.但被小丸压制过的视频，有这个参数与数据</p>
<p><img src="../../img/26/5.png" alt="5"></p>
<p>2.2 在最下面的详细信息里面</p>
</li>
</ul>
<br />

<p>4.什么是总码率？</p>
<ul>
<li><p>1.一个视频文件由图像部分和音频部分组成，总比特率=视频比特率+音频比特率。</p>
</li>
<li><p>2.用数据计算，看是不是这样</p>
<p>2.1 5900+196，接近总码率，看来这就是3.3-第一个黑点的答案了；</p>
</li>
</ul>
<p>5.</p>
<br />

<hr>
<h2 id="2-Dism-x64"><a href="#2-Dism-x64" class="headerlink" title="2.Dism++x64"></a>2.Dism++x64</h2><p>1.自定义清理：</p>
<p><a href="http://www.chuyu.me/zh-Hans/Document.html?file=Dism++Library/自定义规则.md">http://www.chuyu.me/zh-Hans/Document.html?file=Dism++Library/自定义规则.md</a></p>
<p>2020-9-23 01:06:44</p>
<p><img src="../../img/26/6.png" alt="6"></p>
<p>2.</p>
<p><img src="../../img/26/7.png" alt="7"></p>
<br />

<hr>
<h2 id="3-RPG-maker-翻译器"><a href="#3-RPG-maker-翻译器" class="headerlink" title="3. RPG maker 翻译器"></a>3. RPG maker 翻译器</h2><p>1.9做的翻译器；</p>
<p>2.来源：<a href="https://afdian.net/@AdventCirno">https://afdian.net/@AdventCirno</a></p>
<ul>
<li>下载也是这个页面，9一般都在这里更新，比群好用；</li>
</ul>
<p>3.预览：</p>
<p><img src="../../img/26/8.png" alt="8"></p>
<br />

<p><img src="../../img/26/9.png" alt="9"></p>
<br />

<p><strong>4.注意</strong>：</p>
<ul>
<li><p>在用-XP &amp;&amp; VX-Ace &amp;&amp; Vx 翻译器时，要先按照说明：</p>
<p>复制 winmm.dll 到游戏目录。</p>
<p>运行 cheat/Game.exe 打开修改器。<br>运行 trs/nw.exe 打开翻译工具。</p>
<p>运行游戏。</p>
</li>
<li><p>打开翻译工具，才会翻译，每次都要打开；MV那边也许是内挂在游戏里面的，所以没这种事（不打开，就是原文）2020-9-26 02:45:01</p>
</li>
</ul>
<hr>
<h3 id="3-2-报错"><a href="#3-2-报错" class="headerlink" title="3.2 报错"></a>3.2 报错</h3><p>1.网络请求失败？2020-10-25 23:28:20</p>
<ul>
<li>现在已经是54版本了；</li>
</ul>
<p>2.如图：</p>
<p><img src="http://bucket-c70.test.upcdn.net/26/21.png" alt="21"></p>
<p>3.目前不知道怎么办；</p>
<ul>
<li>问了作者，作者没回；2020-10-25 23:30:38</li>
</ul>
<p>3.1 回了，是网络被墙了，作者用的服务器是国外的，虽然以前都没被墙过；</p>
<ul>
<li>反正梯子全局模式，ok了；2020-10-25 23:53:51</li>
</ul>
<hr>
<h2 id="4-双核浏览器"><a href="#4-双核浏览器" class="headerlink" title="4. 双核浏览器"></a>4. 双核浏览器</h2><p>1.预览：</p>
<img src="../../img/26/10.png" alt="10" style="zoom:80%;" />

<h3 id="4-2-关闭自动翻译"><a href="#4-2-关闭自动翻译" class="headerlink" title="4.2 关闭自动翻译"></a>4.2 关闭自动翻译</h3><p>1.每次打开一个新网页，就会问翻不翻译成中文，即使就是中文网页；</p>
<p>2.关闭：</p>
<p><img src="../../img/26/11.png" alt="11"></p>
<p>2020-10-3 03:29:41</p>
<hr>
<h2 id="5-比特彗星"><a href="#5-比特彗星" class="headerlink" title="5. 比特彗星"></a>5. 比特彗星</h2><h3 id="5-1-端口堵塞"><a href="#5-1-端口堵塞" class="headerlink" title="5.1 端口堵塞"></a>5.1 端口堵塞</h3><p>1.图片：</p>
<p><img src="../../img/26/12.png" alt="12"></p>
<p>2.百度了很多，说需要公网IP；</p>
<p>3.百度了很多，比较好看的一个资料网：<a href="https://www.vachiko.com/archives/bitcomet_block_solution.html；">https://www.vachiko.com/archives/bitcomet_block_solution.html；</a></p>
<p>4.主要是明白自己是不是公网，里面说找光猫，连路由器的不行么？</p>
<h4 id="2-公网"><a href="#2-公网" class="headerlink" title="2. 公网"></a>2. 公网</h4><p>1.什么是公网？</p>
<ul>
<li>1.广域网IP是指以公网连接Internet上的非保留地址。广域网、局域网是两种Internet的接入方式，广域网的计算机和Internet上的其他计算机可随意互相访问。（百度百科）</li>
</ul>
<p>2.什么是内网？</p>
<ul>
<li>1.局域网的覆盖范围一般是方圆几千米之内，其具备的安装便捷、成本节约、扩展方便等特点使其在各类办公室内运用广泛。局域网可以实现文件管理、<a href="https://baike.baidu.com/item/应用软件/216367">应用软件</a>共享、<a href="https://baike.baidu.com/item/打印机共享/1979511">打印机共享</a>等功能，在使用过程当中，通过维护局域网网络安全，能够有效地保护资料安全，保证局域网网络能够正常稳定的运行。</li>
<li>2.内网就是局域网</li>
</ul>
<p><strong>3.如何分辨是公网还是内网？</strong></p>
<p>直接百度”ip地址查询”就可以看到本机IP，然后在下面这几个地址段内的都是内网：<br>10.0.0.0/8： 10.0.0.0～10.255.255.255172.16.0.0/12： 172.16.0.0～172.31.255.255192.168.0.0/16： 192.168.0.0～192.168.255.255<br>还有个100.64开头的地址段也是内网。</p>
<p>信息来源：<a href="http://ask.zol.com.cn/x/5398808.html">http://ask.zol.com.cn/x/5398808.html</a></p>
<p>3.2 通过网通联通的ADSL猫拨号上网后，在整个互联网上，联通会zhi分配给你一个独占的IP地址dao，这个IP在全世界都是唯一的，我们叫公网IP。<br>而你家有个路由器，路由器下连接了多台电脑，为了区分他们啊，路由器会给每台电脑会分配一个独立的IP地址，这个只是在你家里内部网络才能使用的，这个就是私网IP<br>常见的私网IP有 192.168.0.X ,192.168.1.1,172.16.X.X，10.X.X.X 这样的IP地址当初就规定好了，在公网上是看不到的，是不会分配给用户的。</p>
<p>信息来源:<a href="https://zhidao.baidu.com/question/1497787602236877219.html">https://zhidao.baidu.com/question/1497787602236877219.html</a></p>
<ul>
<li>难道是因为我用了路由器，所以才是内网？</li>
<li>实际我是公网？</li>
</ul>
<p>3.2.1 </p>
<h4 id="3-WAN的IP"><a href="#3-WAN的IP" class="headerlink" title="3. WAN的IP"></a>3. WAN的IP</h4><p>3.1 问题：</p>
<ul>
<li><p>1.判断ip地址的时候，是查看本机ip吗？路由器里面的WAN端口的IP地址又是什么？</p>
<p><img src="../../img/26/13.png" alt="13"></p>
</li>
<li><p>2.WAN口就是路由器的外网接口，相当于外面的进线接口，它有自己的IP，MAC地址，和获取IP的多种方式;<a href="http://www.lotpc.com/lyqzs/5149.html">来源</a></p>
<p>3.WAN口可以通过PPPOE拨号，这种方式上网一般都是因为你用的是宽带帐号上网，不过这样的上网方式你的IP地址是随机分配的，如果你要想拥有固定的IP地址，那么需要将接口类型设置成固定IP，这种方式一般为这台电脑需要被外界直接访问时使用。还有一种接口类型为自动获取IP，一般当路由器后面还需要接路由器时，一般使用自动获取IP。</p>
<p>3.1 不过，我自己的路由器，只有自动获取与固定两种模式，可能与品牌有关（水晶路由器）</p>
<p>3.2 也可能，现在都是这样了，时代改变；2020-10-7 16:13:25</p>
<p><img src="../../img/26/14.png" alt="14"></p>
</li>
</ul>
<h4 id="4-LAN口的IP"><a href="#4-LAN口的IP" class="headerlink" title="4. LAN口的IP"></a>4. LAN口的IP</h4><p>  1.既然了解了WAN口的IP，顺便也看看LAN口的含意；LAN口也是有IP地址的；</p>
<p>  LAN口就是路由器的内网接口，它的LAN口就是它在内网之间的PC访问时的一个身份。因此，我们在登录路由器的时候都是通过输入路由器的LAN口，如果路由器的LAN修改了，那么我们输入路由器的IP也要改成修改后的IP。修改LAN的IP一般在多个路由器串联时使用，此时的路由器WAN口接口类型为自动获取。</p>
<p>  不过一般为了安全考虑，很多都是修改了LAN口IP的，比如政府机构，他们的内网IP你们一般不会知道。</p>
<h4 id="5-MAC地址"><a href="#5-MAC地址" class="headerlink" title="5. MAC地址"></a>5. MAC地址</h4><p>1.如果说路由器的WAN口和LAN口IP地址为艺名的话，那么WAN口和LAN口的MAC地址为它的真实姓名。IP地址都是虚拟出来的地址，好使用和识别些。MAC地址就是物理地址的意思。比如，有些固网服务商绑定了帐号，那就是通过帐号绑定它的WAN口MAC地址，只要你换路由器的话就需要松绑，否则是连不上的。如果你开始通过电脑拨号上网的话，然后再安装路由器，此时服务商又绑定了帐号，那么我们可以通过打他们的电话叫他们松绑，也可以通过克隆PCMAC地址就OK了。</p>
<h4 id="6-链接路由器被分配的ip"><a href="#6-链接路由器被分配的ip" class="headerlink" title="6. 链接路由器被分配的ip"></a>6. 链接路由器被分配的ip</h4><p>1.当电脑、手机连接路由器上网时，路由器会先给电脑/手机分配一个IP地址。而这个IP地址，是在路由器在DHCP地址池中随机进行分配的</p>
<p>2.DHCP（动态主机配置协议）是一个局域网的网络协议。指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码。默认情况下，DHCP作为Windows Server的一个服务组件不会被系统自动安装，还需要管理员手动安装并进行必要的配置。</p>
<p>3.DHCP(Dynamic Host Configuration Protocol),动态主机配置协议，是一个应用层协议。当我们将客户主机ip地址设置为动态获取方式时，DHCP服务器就会根据DHCP协议给客户端分配IP，使得客户机能够利用这个IP上网。<a href="https://blog.csdn.net/u012359618/article/details/51872678">来自</a></p>
<hr>
<h3 id="5-2-Tracker"><a href="#5-2-Tracker" class="headerlink" title="5.2 Tracker"></a>5.2 Tracker</h3><p>1.<a href="https://trackerslist.com/#/zh">https://trackerslist.com/#/zh</a></p>
<p>2.预览：</p>
<p><img src="../../img/26/15.png" alt="15"></p>
<p>3.可以增加下载速度；具体使用看网址内容；2020-10-7 18:57:46</p>
<hr>
<h4 id="1-比特彗星"><a href="#1-比特彗星" class="headerlink" title="1. 比特彗星"></a>1. 比特彗星</h4><p>1.原本是：<a href="http://github.itzmx.com/1265578519/OpenTracker/master/tracker.txt">http://github.itzmx.com/1265578519/OpenTracker/master/tracker.txt</a></p>
<img src="../../img/26/17.png" alt="17" style="zoom:80%;" />

<hr>
<h4 id="2-qBittorrent"><a href="#2-qBittorrent" class="headerlink" title="2. qBittorrent"></a>2. qBittorrent</h4><p>32-qBittorrentPortable.exe</p>
<p>1.软件自带：<a href="http://github.itzmx.com/1265578519/OpenTracker/master/tracker.txt">http://github.itzmx.com/1265578519/OpenTracker/master/tracker.txt</a></p>
<p><img src="../../img/26/18.png" alt="18"></p>
<hr>
<h2 id="6-KinhDown-百度云盘"><a href="#6-KinhDown-百度云盘" class="headerlink" title="6. KinhDown-百度云盘"></a>6. KinhDown-百度云盘</h2><p>1.百度云盘下载使用</p>
<p>2.来源：</p>
<ul>
<li><p>群友分享：感谢猴哥2020-10-9 19:46:27</p>
<p><img src="../../img/26/19.png" alt="19"></p>
</li>
<li><p><a href="http://www.lanzoux.com/s/KinhDown">http://www.lanzoux.com/s/KinhDown</a></p>
</li>
</ul>
<p>3.预览：</p>
<img src="../../img/26/20.png" alt="20" style="zoom:80%;" />

<hr>
]]></content>
  </entry>
  <entry>
    <title>27-正则表达式</title>
    <url>/1-(0~50)/27-Regular_Expression/</url>
    <content><![CDATA[<h2 id="1-RPG记录"><a href="#1-RPG记录" class="headerlink" title="1. RPG记录"></a>1. RPG记录</h2><p>1.RPGMakerMVGame Hook patcher.exe的记录</p>
<p>1.如何匹配任意重复2次以上的字符串？</p>
<a id="more"></a>

<p> (.*):所有字符串分组；</p>
<p>^(.*)$</p>
<p>{2,}:第一个字符再重复出现2次或以上</p>
<p>2.</p>
<p>^(.*?){3,0}$  ;不行;</p>
<p>^.*?{3,}$ ;buxing;</p>
<p>^(….){3,}</p>
<p>(^(….){3,}$)</p>
<p>^(スミレ){3,}$</p>
<p>ナギ,サリア;</p>
<p>^.<em>HP。.<em>HP。.</em>HP。.<em>HP。.</em>HP。.*HP。.</em>$</p>
<p>^体力((。max。)|(。min。)|(。\d{1,3}％。)|(。\d{1,5}。))(.+|)魔力((。max。)|(。min。)|(。\d{1,3}％。)|(。\d{1,5}。))疲労((。max。)|(。min。)|(。\d{1,3}％。)|(。\d{1,5}。))$</p>
<p>3.数字：^[0-9]*$</p>
<p>3.</p>
<p>快楽</p>
<p>^[快楽]{2,}$</p>
<p>^(現在の仔は|コボルド|欠陥巨人兵|芋虫|犬|触手)($|.$|。$)</p>
<p>^(快楽)($|.$|。$)</p>
<p>4.数字</p>
<p>^[a-zA-Z0-9_]{1,}$    // 所有包含一个以上的字母、数字或下划线的字符串 </p>
<p>^[1-9][0-9]{0,}$     // 所有的正整数 </p>
<p>^-{0,1}[0-9]{1,}$    // 所有的整数 </p>
<p>^[-]?[0-9]+.?[0-9]+$  // 所有的浮点数</p>
<p>2020-5-18 00:42:51</p>
<p><a href="https://www.runoob.com/regexp/regexp-rule.html">https://www.runoob.com/regexp/regexp-rule.html</a></p>
<p>5.</p>
<p>^(現在の仔は|コボルド|欠陥巨人兵|芋虫|犬|触手)($|.$|。$)</p>
<p>6.</p>
<p>落し物</p>
<p>^[落し物]*$</p>
<p>「ベーコン。×10。薬草</p>
<p>^[ベーコン]*$</p>
<p>7.</p>
<p>「アイテム。武器。防具。大事なもの。」</p>
<p>「ｑｌｌｉｎ。Lv。89。冒険者。HP。649。/3,884。MP。276。/711。快楽。1」</p>
<p>「ブレッド。×10。ソーセージ。×11。ベーコン。×10。薬草。×2。ポーション。×11。ハイポーション。×7。エーテル。×15。毒消し。×17。キュアハーブ。×6。聖者のハーブ。×9。清廉の種。×30。青水晶。×2。アメジスト。×8。ゴブリンの爪。×8。ゴブリンの目玉。×5。スライムの油。×5。怪しい下着。×13。ぷよぷよしたパッド。×8。黒皮の鞭。×5。盗賊の短剣。×9。小麦粉の布袋。×1。ラム肉。×11。」</p>
<p>^[アイテム]*$</p>
<p>^[Lv]*$</p>
<p>8.</p>
<p>「どのファイルにセーブしますか？」</p>
<p>「ファイル 1。ｑｌｌｉｎ。Lv。89港町エウロぺ入口。DREAMLAND -夢魔の王国-。16:11:37。ファイル 1。ファイル 2。ｑｌｌｉｎ。Lv。80路地裏。DREAMLAND -夢魔の王国-。13:00:05。ファイル 2。ファイル 3。ｑｌｌｉｎ。Lv。80路地裏。DREAMLAND -夢魔の王国-。13:03:04。ファイル 3。ファイル 1。ｑｌｌｉｎ。Lv。89港町エウロぺ入口。DREAMLAND -夢魔の王国-。16:11:37。ファイル 1。ファイル 2。ｑｌｌｉｎ。Lv。80路地裏。DREAMLAND -夢魔の王国-。13:00:05。ファイル 2。ファイル 3。ｑｌｌｉｎ。Lv。80路地裏。DREAMLAND -夢魔の王国-。13:03:04。ファイル 3。」</p>
<p>^[どのファイルにセーブしますか]*$</p>
<p>9.</p>
<p>「静謐の森を冒険中、兄の預かり物である盾を失くしてしまった。探し出して欲しい。 依頼主：惚けた冒険者　報酬：2000Ｇ 」</p>
<p>「落し物を探して欲しい４。島を荒らす魔物を退治５。テュロス島で人探し４。湖に沈むもの。遡る足跡２。」</p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>27-AJax</title>
    <url>/1-(0~50)/28-AJax/</url>
    <content><![CDATA[<p>1.<a href="https://www.xp.cn/download.html">https://www.xp.cn/download.html</a></p>
<a id="more"></a>

<p>2.黑马程序员-视频库：<a href="http://yun.itheima.com/?hm">http://yun.itheima.com/?hm</a></p>
<ul>
<li>从这个网站收到的视频资源，已经存入了自己的百度网盘：<a href="https://pan.baidu.com/s/1-yytOOZerNdj87HvTeqkHA#list/path=%2Fsharelink3232509500-351581364850572%2Fajax从入门到精通视频&parentPath=%2Fsharelink3232509500-351581364850572">链接</a></li>
</ul>
<p>2020-10-4 18:56:09</p>
<p>3.<a href="https://www.bilibili.com/video/BV1ji4y1876Y/?spm_id_from=333.788.videocard.0">https://www.bilibili.com/video/BV1ji4y1876Y/?spm_id_from=333.788.videocard.0</a></p>
<ul>
<li>黑马web前后端交互 Ajax</li>
<li>这个视频有ppt；</li>
<li>但没目前没有PPT资料；</li>
<li>2020-10-5 00:33:06</li>
</ul>
<p>4.B站黑马程序员官方：<a href="https://www.bilibili.com/video/BV1ox411M7P2?from=search&amp;seid=11294797197276371476">https://www.bilibili.com/video/BV1ox411M7P2?from=search&amp;seid=11294797197276371476</a></p>
<ul>
<li>但和黑马程序员视频库的不一样</li>
</ul>
<p>5.</p>
<hr>
<h1 id="1-尚硅谷"><a href="#1-尚硅谷" class="headerlink" title="1. 尚硅谷"></a>1. 尚硅谷</h1><h2 id="1-第1章：原生-AJAX"><a href="#1-第1章：原生-AJAX" class="headerlink" title="1. 第1章：原生 AJAX"></a>1. 第1章：原生 AJAX</h2><h3 id="1-1-AJAX-简介"><a href="#1-1-AJAX-简介" class="headerlink" title="1.1 AJAX  简介"></a>1.1 AJAX  简介</h3><p>AJAX 全称为 Asynchronous JavaScript And XML，就是异步的 JS 和 XML。<br>通过 AJAX 可以在浏览器中向服务器发送异步请求，最大的优势：<strong>无刷新获取数据</strong>。<br>AJAX 不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式。</p>
<h3 id="1-2-XML-简介-已被json取代"><a href="#1-2-XML-简介-已被json取代" class="headerlink" title="1.2 XML 简介 已被json取代"></a>1.2 XML 简介 已被json取代</h3><p>1.XML 可扩展标记语言。<br>2.XML 被设计用来传输和存储数据。<br>3.XML 和 HTML 类似，不同的是 HTML 中都是预定义标签，而 XML 中没有预定义标签，全都是自定义标签，用来表示一些数据。</p>
<p>4.比如说我有一个学生数据：</p>
<p><code>name = &quot;孙悟空&quot; ; age = 18 ; gender = &quot;男&quot; ;</code></p>
<p>5.用 XML 表示:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">gender</span>&gt;</span>男<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>6.现在已经被 JSON 取代了。</p>
<p>用 JSON 表示：<br>{“name”:”孙悟空”,”age”:18,”gender”:”男”}</p>
<h3 id="1-3-AJAX的特点"><a href="#1-3-AJAX的特点" class="headerlink" title="1.3 AJAX的特点"></a>1.3 AJAX的特点</h3><p>0.<strong>优点</strong></p>
<p>1.可以无需刷新页面而与服务器进行通信。</p>
<p>2.允许你根据用户事件来更新部分页面内容。</p>
<p>0.2 <strong>缺点</strong></p>
<p>1) 没有浏览历史，不能回退<br>2) 存在跨域问题(同源)<br>3) SEO 不友好</p>
<ul>
<li><p>搜索引擎优化不好。</p>
</li>
<li><blockquote>
<p><a href="https://www.bilibili.com/video/BV1WC4y1b78y?p=4&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1WC4y1b78y?p=4&amp;spm_id_from=pageDriver</a></p>
<p>视频还说了，为什么不好；2021-3-17 19:34:09</p>
</blockquote>
</li>
</ul>
<hr>
<h3 id="1-4-AJAX-的使用"><a href="#1-4-AJAX-的使用" class="headerlink" title="1.4 AJAX 的使用"></a>1.4 AJAX 的使用</h3><h4 id="1-AJAX-HTTP协议请求报文与响应文本结构"><a href="#1-AJAX-HTTP协议请求报文与响应文本结构" class="headerlink" title="1.AJAX-HTTP协议请求报文与响应文本结构"></a>1.AJAX-HTTP协议请求报文与响应文本结构</h4><blockquote>
<p><a href="https://www.bilibili.com/video/BV1WC4y1b78y?p=5&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1WC4y1b78y?p=5&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.HTTP</p>
<p>2.请求报文</p>
<ul>
<li><p>重点是格式与参数</p>
<ul>
<li><p>行：get，post等 + url + HTTP/1.1 (1.2 2.0等，视频里说，最多的是1.1)</p>
</li>
<li><p>头；格式；名字+：+空格+值</p>
<p>Host: atguigu.com</p>
<p>Cookie: name=guigu</p>
<p>Content-type: application/x-www-form-urlencoded</p>
<p>User-Agent: chrome 83</p>
<p>(不过我看不懂，2021-3-17 19:49:46)</p>
</li>
<li><p>空行 ；这个是固定的；</p>
</li>
<li><p>体；行是get的话，请求体是空的，行是post的话，请求体可以不为空</p>
<p>username=admin&amp;password=admin；</p>
</li>
</ul>
</li>
</ul>
<p>3.响应报文</p>
<hr>
<h4 id="2-AJAX-Chrome网络控制台查看通信报文"><a href="#2-AJAX-Chrome网络控制台查看通信报文" class="headerlink" title="2. AJAX-Chrome网络控制台查看通信报文"></a>2. AJAX-Chrome网络控制台查看通信报文</h4><p>1.打开F12，选择Networ，如果没有内容，就刷新一下，或者CTRL+R；</p>
<ul>
<li>当前网页的所有请求，都会在network[^1]显示；</li>
</ul>
<p><img src="../../img/28/1.png" alt="1"></p>
<p>2.重点，先看Headers[^2]，和，Response[^3]</p>
<p>3.在Headers，里，重点看：Response Headers，与 Request Headers</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1WC4y1b78y?p=6&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1WC4y1b78y?p=6&amp;spm_id_from=pageDriver</a></p>
<p>02:04</p>
</blockquote>
<p>4.</p>
<p>打卡；下班卡；2021-3-17 20:22:37</p>
<h2 id="X-题注"><a href="#X-题注" class="headerlink" title="X. 题注"></a>X. 题注</h2><p>[^1]:network  英 [ˈnetwɜːk]   美 [ˈnetwɜːrk]<br>n.网络;网状系统;关系网;人际网;相互关系(或配合)的系统;(互联)网络<br>v.将…连接成网络;联播;建立工作关系</p>
<p>[^2]:headers 英 [ˈhɛdəz]   美 [ˈhɛdərz]<br>n.用头顶球;头球;(计算机打印时自动加在各页顶端的)标头，首标<br>header的复数</p>
<p>[^3]:response 英 [rɪˈspɒns]   美 [rɪˈspɑːns]<br>n.(口头的或书面的)回答，答复;反应;响应;(礼拜仪式中的)答唱咏，启应经</p>
<p>[^4]:request 英 [rɪˈkwest]   美 [rɪˈkwest]<br>n.(正式或礼貌的)要求，请求;要求的事<br>v.(正式或礼貌地)请求，要求</p>
]]></content>
  </entry>
  <entry>
    <title>29-aos.js</title>
    <url>/1-(0~50)/29-aos.js/</url>
    <content><![CDATA[<p>1.使用aos要初始化；</p>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    AOS.init(/*&#123;</span><br><span class="line"><span class="javascript">          easing: <span class="string">&#x27;ease-out-in&#x27;</span>,</span></span><br><span class="line">          duration: 1000</span><br><span class="line">      &#125;*/);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>里面不写内容也行，应该有默认值；</li>
<li>这里的初始化，应该是启动的意思；</li>
</ul>
<p>2.什么是aos.js？</p>
<ul>
<li>目前百度：<a href="https://www.jq22.com/jquery-info8150">https://www.jq22.com/jquery-info8150</a></li>
</ul>
<p>3.虽然以前用过，但那个时候也不会写笔记</p>
<ul>
<li>所以现在只能重学；2020-10-6 11:23:58</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>30-计算机基础</title>
    <url>/1-(0~50)/30-Fundamentals_of_computer/</url>
    <content><![CDATA[<h2 id="1-IP"><a href="#1-IP" class="headerlink" title="1. IP"></a>1. IP</h2><a id="more"></a>

<h4 id="2-公网"><a href="#2-公网" class="headerlink" title="2. 公网"></a>2. 公网</h4><p>1.什么是公网？</p>
<ul>
<li>1.广域网IP是指以公网连接Internet上的非保留地址。广域网、局域网是两种Internet的接入方式，广域网的计算机和Internet上的其他计算机可随意互相访问。（百度百科）</li>
</ul>
<p>2.什么是内网？</p>
<ul>
<li>1.局域网的覆盖范围一般是方圆几千米之内，其具备的安装便捷、成本节约、扩展方便等特点使其在各类办公室内运用广泛。局域网可以实现文件管理、<a href="https://baike.baidu.com/item/应用软件/216367">应用软件</a>共享、<a href="https://baike.baidu.com/item/打印机共享/1979511">打印机共享</a>等功能，在使用过程当中，通过维护局域网网络安全，能够有效地保护资料安全，保证局域网网络能够正常稳定的运行。</li>
<li>2.内网就是局域网</li>
</ul>
<p><strong>3.如何分辨是公网还是内网？</strong></p>
<p>直接百度”ip地址查询”就可以看到本机IP，然后在下面这几个地址段内的都是内网：<br>10.0.0.0/8： 10.0.0.0～10.255.255.255172.16.0.0/12： 172.16.0.0～172.31.255.255192.168.0.0/16： 192.168.0.0～192.168.255.255<br>还有个100.64开头的地址段也是内网。</p>
<p>信息来源：<a href="http://ask.zol.com.cn/x/5398808.html">http://ask.zol.com.cn/x/5398808.html</a></p>
<p>3.2 通过网通联通的ADSL猫拨号上网后，在整个互联网上，联通会zhi分配给你一个独占的IP地址dao，这个IP在全世界都是唯一的，我们叫公网IP。<br>而你家有个路由器，路由器下连接了多台电脑，为了区分他们啊，路由器会给每台电脑会分配一个独立的IP地址，这个只是在你家里内部网络才能使用的，这个就是私网IP<br>常见的私网IP有 192.168.0.X ,192.168.1.1,172.16.X.X，10.X.X.X 这样的IP地址当初就规定好了，在公网上是看不到的，是不会分配给用户的。</p>
<p>信息来源:<a href="https://zhidao.baidu.com/question/1497787602236877219.html">https://zhidao.baidu.com/question/1497787602236877219.html</a></p>
<ul>
<li>难道是因为我用了路由器，所以才是内网？</li>
<li>实际我是公网？</li>
</ul>
<p>3.2.1 </p>
<h4 id="3-WAN的IP"><a href="#3-WAN的IP" class="headerlink" title="3. WAN的IP"></a>3. WAN的IP</h4><p>3.1 问题：</p>
<ul>
<li><p>1.判断ip地址的时候，是查看本机ip吗？路由器里面的WAN端口的IP地址又是什么？</p>
<p><img src="../../img/26/13.png" alt="13"></p>
</li>
<li><p>2.WAN口就是路由器的外网接口，相当于外面的进线接口，它有自己的IP，MAC地址，和获取IP的多种方式;<a href="http://www.lotpc.com/lyqzs/5149.html">来源</a></p>
<p>3.WAN口可以通过PPPOE拨号，这种方式上网一般都是因为你用的是宽带帐号上网，不过这样的上网方式你的IP地址是随机分配的，如果你要想拥有固定的IP地址，那么需要将接口类型设置成固定IP，这种方式一般为这台电脑需要被外界直接访问时使用。还有一种接口类型为自动获取IP，一般当路由器后面还需要接路由器时，一般使用自动获取IP。</p>
<p>3.1 不过，我自己的路由器，只有自动获取与固定两种模式，可能与品牌有关（水晶路由器）</p>
<p>3.2 也可能，现在都是这样了，时代改变；2020-10-7 16:13:25</p>
<p><img src="../../img/26/14.png" alt="14"></p>
</li>
</ul>
<h4 id="4-LAN口的IP"><a href="#4-LAN口的IP" class="headerlink" title="4. LAN口的IP"></a>4. LAN口的IP</h4><p>  1.既然了解了WAN口的IP，顺便也看看LAN口的含意；LAN口也是有IP地址的；</p>
<p>  LAN口就是路由器的内网接口，它的LAN口就是它在内网之间的PC访问时的一个身份。因此，我们在登录路由器的时候都是通过输入路由器的LAN口，如果路由器的LAN修改了，那么我们输入路由器的IP也要改成修改后的IP。修改LAN的IP一般在多个路由器串联时使用，此时的路由器WAN口接口类型为自动获取。</p>
<p>  不过一般为了安全考虑，很多都是修改了LAN口IP的，比如政府机构，他们的内网IP你们一般不会知道。</p>
<h4 id="5-MAC地址"><a href="#5-MAC地址" class="headerlink" title="5. MAC地址"></a>5. MAC地址</h4><p>1.如果说路由器的WAN口和LAN口IP地址为艺名的话，那么WAN口和LAN口的MAC地址为它的真实姓名。IP地址都是虚拟出来的地址，好使用和识别些。MAC地址就是物理地址的意思。比如，有些固网服务商绑定了帐号，那就是通过帐号绑定它的WAN口MAC地址，只要你换路由器的话就需要松绑，否则是连不上的。如果你开始通过电脑拨号上网的话，然后再安装路由器，此时服务商又绑定了帐号，那么我们可以通过打他们的电话叫他们松绑，也可以通过克隆PCMAC地址就OK了。</p>
<h4 id="6-链接路由器被分配的ip"><a href="#6-链接路由器被分配的ip" class="headerlink" title="6. 链接路由器被分配的ip"></a>6. 链接路由器被分配的ip</h4><p>1.当电脑、手机连接路由器上网时，路由器会先给电脑/手机分配一个IP地址。而这个IP地址，是在路由器在DHCP地址池中随机进行分配的</p>
<p>2.DHCP（动态主机配置协议）是一个局域网的网络协议。指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码。默认情况下，DHCP作为Windows Server的一个服务组件不会被系统自动安装，还需要管理员手动安装并进行必要的配置。</p>
<p>3.DHCP(Dynamic Host Configuration Protocol),动态主机配置协议，是一个应用层协议。当我们将客户主机ip地址设置为动态获取方式时，DHCP服务器就会根据DHCP协议给客户端分配IP，使得客户机能够利用这个IP上网。<a href="https://blog.csdn.net/u012359618/article/details/51872678">来自</a></p>
]]></content>
  </entry>
  <entry>
    <title>30-英语单词</title>
    <url>/1-(0~50)/31-word/</url>
    <content><![CDATA[<h3 id="1-accepted"><a href="#1-accepted" class="headerlink" title="1.accepted"></a>1.accepted</h3><ul>
<li>2020/10/14 01:19:15 127.0.0.1:59001 accepted //<a href="http://www.google.com:443">www.google.com:443</a> [proxy11001] </li>
</ul>
<a id="more"></a>

<p>accepted<br>英 [əkˈseptɪd]   美 [əkˈseptɪd]<br>adj.公认的;被普遍接受的<br>v.收受;接受(建议、邀请等);(认为合适或足够好而)接受;同意;认可<br>accept的过去分词和过去式</p>
<ul>
<li><a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/accepted">https://fanyi.baidu.com/?aldtype=16047#en/zh/accepted</a></li>
</ul>
<hr>
<h3 id="2-container"><a href="#2-container" class="headerlink" title="2.container"></a>2.container</h3><p>1.2020-10-24 02:25:23</p>
<p>container<br>英 [kənˈteɪnə(r)]   美 [kənˈteɪnər]<br>n.容器;集装箱;货柜</p>
<p>2.<code>&lt;div class=&quot;container&quot;&gt;&lt;/div&gt;</code></p>
<p>一般用于容器命名；</p>
<hr>
<h3 id="3-screen"><a href="#3-screen" class="headerlink" title="3.screen"></a>3.screen</h3><p>1.2020-10-24 02:26:52</p>
<p>2.<a href="https://fanyi.baidu.com/translate?aldtype=16047&query=Responsive+layout&keyfrom=baidu&smartresult=dict&lang=auto2zh#en/zh/screen">screen</a><br>英 [skriːn]   美 [skriːn]<br>n.屏幕;荧光屏;荧屏;银幕;(统称)电影，电视<br>v.掩藏;遮蔽;保护;庇护;包庇;袒护;筛查;检查</p>
<p>3.媒体查询的时候使用；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">767px</span>) &#123;</span><br><span class="line"> <span class="selector-class">.container</span> &#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br />

<hr>
<h3 id="4-push"><a href="#4-push" class="headerlink" title="4. push"></a>4. push</h3><p><a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/push">push</a><br>英 [pʊʃ]   美 [pʊʃ]<br>v.推动(人或物);移动(身体部位);推进(道路);挤开;推动;促使(达到某程度或状态)<br>n.推;搡;进攻;攻势;挺进;矢志的追求;坚定的努力</p>
<p>2020-10-28 04:29:06</p>
<p>2.通过使用 .col-md-push-* 和 .col-md-pull-* 类就可以很容易的改变列（column）的顺序。</p>
<p>3.pull<br>英 [pʊl]   美 [pʊl]<br>v.拉;拽;扯;拖;拔出;抽出;(向某方向)拖，拉动<br>n.拉;拽;扯;力;引力;磁力;吸引力;诱惑;影响</p>
<hr>
<h3 id="5-visible"><a href="#5-visible" class="headerlink" title="5. visible"></a>5. visible</h3><p>1.visible<br>英 [ˈvɪzəbl]   美 [ˈvɪzəbl]<br>adj.<br>看得见的;可见的;明显的;能注意到的</p>
<p>2.</p>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">超小屏幕手机 (&lt;768px)</th>
<th align="left">小屏幕平板 (≥768px)</th>
<th align="left">中等屏幕桌面 (≥992px)</th>
<th align="left">大屏幕桌面 (≥1200px)</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>.visible-xs-*</code></td>
<td align="left">可见</td>
<td align="left">隐藏</td>
<td align="left">隐藏</td>
<td align="left">隐藏</td>
</tr>
<tr>
<td align="left"><code>.visible-sm-*</code></td>
<td align="left">隐藏</td>
<td align="left">可见</td>
<td align="left">隐藏</td>
<td align="left">隐藏</td>
</tr>
<tr>
<td align="left"><code>.visible-md-*</code></td>
<td align="left">隐藏</td>
<td align="left">隐藏</td>
<td align="left">可见</td>
<td align="left">隐藏</td>
</tr>
<tr>
<td align="left"><code>.visible-lg-*</code></td>
<td align="left">隐藏</td>
<td align="left">隐藏</td>
<td align="left">隐藏</td>
<td align="left">可见</td>
</tr>
</tbody></table>
<p>3.2020-10-28 06:33:06</p>
<hr>
<h3 id="6-deploy"><a href="#6-deploy" class="headerlink" title="6. deploy"></a>6. deploy</h3><p>1.<a href="https://fanyi.baidu.com/translate?aldtype=16047&query=#en/zh/deploy">deploy</a><br>英 [dɪˈplɔɪ]   美 [dɪˈplɔɪ]<br>v.部署，调度(军队或武器);有效地利用;调动</p>
<p>2.</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo deploy</span><br></pre></td></tr></table></figure>

<p>部署网站。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-g</code>, <code>--generate</code></td>
<td align="left">部署之前预先生成静态文件</td>
</tr>
</tbody></table>
<p>该命令可以简写为：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo d</span><br></pre></td></tr></table></figure>

<ul>
<li>2和3可以快捷为：hexo g -d </li>
</ul>
<hr>
<h3 id="7-camera"><a href="#7-camera" class="headerlink" title="7. camera"></a>7. camera</h3><p>camera<br>英 [ˈkæmərə]   美 [ˈkæmərə]<br>n.照相机;(电影)摄影机;(电视)摄像机</p>
<p><a href="https://fanyi.baidu.com/?aldtype=16047#en/zh/camera">https://fanyi.baidu.com/?aldtype=16047#en/zh/camera</a></p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>34-jqery</title>
    <url>/1-(0~50)/34-jquery/</url>
    <content><![CDATA[<h1 id="1-jQuery-入门"><a href="#1-jQuery-入门" class="headerlink" title="1. jQuery 入门"></a>1. jQuery 入门</h1><p>能够说出什么是 jQuery<br>能够说出 jQuery 的优点<br>能够简单使用 jQuery</p>
<p>能够说出 DOM 对象和 jQuery 对象的区别</p>
<a id="more"></a>

<p>jQuery 概述</p>
<p>jQuery 的基本使用</p>
<h2 id="1-1-jQuery-概述"><a href="#1-1-jQuery-概述" class="headerlink" title="1.1  jQuery 概述"></a>1.1  jQuery 概述</h2><p>1.仓库：   可以把很多东西放到这个仓库里面。找东西只需要到仓库里面查找到就可以了。</p>
<p>2.JavaScript库：即 library，是一个封装好的特定的集合（方法和函数）。从封装一大堆函数的角度理解库，就是在这个库中，封装了很多预先定义好的函数在里面，比如动画animate、hide、show，比如获取元素等。<br>简单理解： 就是一个JS 文件，里面对我们原生js代码进行了封装，存放到里面。这样我们可以快速高效的使用这些封装好的功能了。<br>比如 jQuery，就是为了快速方便的操作DOM，里面基本都是函数（方法）。</p>
<p>3.常见的JavaScript 库</p>
<p>jQuery<br>Prototype<br>YUI<br>Dojo<br>Ext JS<br>移动端的zepto</p>
<p>4.这些库都是对原生 JavaScript 的封装，内部都是用 JavaScript 实现的，我们主要学习的是 jQuery。</p>
<h2 id="1-2-jQuery-的概念"><a href="#1-2-jQuery-的概念" class="headerlink" title="1.2 jQuery 的概念"></a>1.2 jQuery 的概念</h2><p>1.jQuery 是一个快速、简洁的 JavaScript 库，其设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。</p>
<p>2.j 就是 JavaScript；   Query 查询； 意思就是查询js，把js中的DOM操作做了封装，我们可以快速的查询使用里面的功能。</p>
<p>3.jQuery 封装了 JavaScript 常用的功能代码，优化了 DOM 操作、事件处理、动画设计和 Ajax 交互。<br>学习jQuery本质： 就是学习调用这些函数（方法）。<br>jQuery 出现的目的是加快前端人员的开发速度，我们可以非常方便的调用和使用它，从而提高开发效率。</p>
<h3 id="2-优点"><a href="#2-优点" class="headerlink" title="2. 优点"></a>2. 优点</h3><p>轻量级。核心文件才几十kb，不会影响页面加载速度<br>跨浏览器兼容。基本兼容了现在主流的浏览器<br>链式编程、隐式迭代<br>对事件、样式、动画支持，大大简化了DOM操作<br>支持插件扩展开发。有着丰富的第三方的插件，例如：树形菜单、日期控件、轮播图等<br>免费、开源</p>
<h2 id="1-3-jQuery-的基本使用"><a href="#1-3-jQuery-的基本使用" class="headerlink" title="1.3 jQuery 的基本使用"></a>1.3 jQuery 的基本使用</h2><h4 id="1-jQuery-的下载"><a href="#1-jQuery-的下载" class="headerlink" title="1. jQuery 的下载"></a>1. jQuery 的下载</h4><p>1.官网地址： <a href="https://jquery.com/">https://jquery.com/</a></p>
<p>2.版本：<br>1x ：兼容 IE 678 等低版本浏览器， 官网不再更新<br>2x ：不兼容 IE 678 等低版本浏览器， 官网不再更新<br>3x ：不兼容 IE 678 等低版本浏览器， 是官方主要更新维护的版本</p>
<p>3.各个版本的下载：<a href="https://code.jquery.com/">https://code.jquery.com/</a></p>
<h3 id="2-使用步骤"><a href="#2-使用步骤" class="headerlink" title="2. 使用步骤"></a>2. 使用步骤</h3><p>1.直接复制粘贴一个新文件；</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1a4411w7Gx?p=4&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1a4411w7Gx?p=4&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<h3 id="3-入口函数"><a href="#3-入口函数" class="headerlink" title="3. 入口函数"></a>3. 入口函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;   </span><br><span class="line">    ...  <span class="comment">// 此处是页面 DOM 加载完成的入口</span></span><br><span class="line"> &#125;) ;         </span><br></pre></td></tr></table></figure>

<br />

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   ...  <span class="comment">//  此处是页面DOM加载完成的入口</span></span><br><span class="line">&#125;);       </span><br></pre></td></tr></table></figure>

<p>1.等着 DOM 结构渲染完毕即可执行内部代码，不必等到所有外部资源加载完成，jQuery 帮我们完成了封装。</p>
<p>2.相当于原生 js 中的 DOMContentLoaded。</p>
<p>3.不同于原生 js 中的 load 事件是等页面文档、外部的 js 文件、css文件、图片加载完毕才执行内部代码。</p>
<p>4.更推荐使用第一种方式。</p>
<h3 id="4-jQuery-的顶级对象"><a href="#4-jQuery-的顶级对象" class="headerlink" title="4. jQuery 的顶级对象 $"></a>4. jQuery 的顶级对象 $</h3><p>1.$ 是 jQuery 的别称，在代码中可以使用 jQuery 代替 $，但一般为了方便，通常都直接使用 ​$ 。</p>
<p>2.$ 是jQuery 的顶级对象， 相当于原生JavaScript中的 window。把元素利用$包装成jQuery对象，就可以调用jQuery 的方法。</p>
<h3 id="5-jQuery-对象和-DOM-对象"><a href="#5-jQuery-对象和-DOM-对象" class="headerlink" title="5. jQuery 对象和 DOM 对象"></a>5. jQuery 对象和 DOM 对象</h3><p>1.用原生 JS 获取来的对象就是 DOM 对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myDiv = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>); <span class="comment">//myDiv 是DOM对象</span></span><br><span class="line"><span class="built_in">console</span>.dir(myDiv);</span><br></pre></td></tr></table></figure>



<p>2.jQuery 方法获取的元素就是 jQuery 对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>); <span class="comment">// $(&#x27;div&#x27;)是一个jquery对象</span></span><br><span class="line"><span class="built_in">console</span>.dir($(<span class="string">&#x27;div&#x27;</span>));</span><br></pre></td></tr></table></figure>



<p>3.jQuery 对象本质是： 利用$对DOM 对象包装后产生的对象（伪数组形式存储）。</p>
<ul>
<li>div是原生</li>
<li>S.fn.init(1)是jquery</li>
</ul>
<p><img src="../../img/34/1.png" alt="1"></p>
<p>==注意：==<br>只有 jQuery 对象才能使用 jQuery 方法，DOM 对象则使用原生的 JavaScirpt 方法。</p>
<h4 id="2-相互转换"><a href="#2-相互转换" class="headerlink" title="2. 相互转换"></a>2. 相互转换</h4><blockquote>
<p><a href="https://www.bilibili.com/video/BV1a4411w7Gx?p=7&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1a4411w7Gx?p=7&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.DOM 对象与 jQuery 对象之间是可以相互转换的。</p>
<p>2.因为原生js 比 jQuery 更大，原生的一些属性和方法 jQuery没有给我们封装.,要想使用这些属性和方法需要把</p>
<p>jQuery对象转换为DOM对象才能使用。</p>
<p>3.DOM 对象转换为 jQuery 对象： $(DOM对象)</p>
<p><code>$(&#39;div&#39;)</code></p>
<p>4.jQuery 对象转换为 DOM 对象（两种方式）</p>
<p><code>$(&#39;div&#39;) [index]       index 是索引号</code></p>
<p><code>$(&#39;div&#39;) .get(index)    index 是索引号</code></p>
<h1 id="2-jquery常用API"><a href="#2-jquery常用API" class="headerlink" title="2. jquery常用API"></a>2. jquery常用API</h1><ol>
<li>能够写出常用的 jQuery 选择器<br>能够操作 jQuery 样式<br>能够写出常用的 jQuery 动画<br>能够操作 jQuery 属性<br>能够操作 jQuery 元素<br>能够操作 jQuery 元素尺寸、位置</li>
<li>jQuery 选择器<br>jQuery 样式操作<br>jQuery 效果<br>jQuery 属性操作<br>jQuery 文本属性值<br>jQuery 元素操作<br>jQuery 尺寸、位置操作</li>
</ol>
<h2 id="2-1-jQuery-选择器"><a href="#2-1-jQuery-选择器" class="headerlink" title="2.1 jQuery 选择器"></a>2.1 jQuery 选择器</h2><h3 id="1-基础选择器"><a href="#1-基础选择器" class="headerlink" title="1. 基础选择器"></a>1. 基础选择器</h3><p>1.原生 JS 获取元素方式很多，很杂，而且兼容性情况不一致，因此 jQuery 给我们做了封装，使获取元素统一标准。</p>
<p><code>$(“选择器”)   //  里面选择器直接写 CSS 选择器即可，但是要加引号</code></p>
<p><img src="../../img/34/2.png" alt="2"></p>
<h3 id="2-jQuery-层级选择器"><a href="#2-jQuery-层级选择器" class="headerlink" title="2. jQuery 层级选择器"></a>2. jQuery 层级选择器</h3><p>1.</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>用法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>子代选择器</td>
<td>$(“ul&gt;li”);</td>
<td>使用&gt;号，获取下一层级的元素。不会获取更下一层的</td>
</tr>
<tr>
<td>后代选择器</td>
<td>$(“ul li”);</td>
<td>使用空格，代表后代选择器，获取ul下所以li元素。</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>2.jQuery 设置样式</p>
<p><code>$(&#39;div&#39;).css(&#39;属性&#39;, &#39;值&#39;)</code></p>
<h3 id="3-隐式迭代（重要）"><a href="#3-隐式迭代（重要）" class="headerlink" title="3. 隐式迭代（重要）"></a>3. 隐式迭代（重要）</h3><p>1.遍历内部 DOM 元素（伪数组形式存储）的过程就叫做隐式迭代。</p>
<p>2.简单理解：给匹配到的所有元素进行循环遍历，执行相应的方法，而不用我们再进行循环，简化我们的操作，方便我们调用。</p>
<h3 id="4-jQuery-筛选选择器"><a href="#4-jQuery-筛选选择器" class="headerlink" title="4. jQuery 筛选选择器"></a>4. jQuery 筛选选择器</h3><p>1.</p>
<p><img src="../../img/34/3.png" alt="3"></p>
<h3 id="5-jQuery-筛选方法（重点）"><a href="#5-jQuery-筛选方法（重点）" class="headerlink" title="5. jQuery 筛选方法（重点）"></a>5. jQuery 筛选方法（重点）</h3><p>1.</p>
<p><img src="../../img/34/4.png" alt="3"></p>
<p>重点记住： parent()  children()  find()  siblings()  eq()</p>
<h3 id="6-jQuery-里面的排他思想"><a href="#6-jQuery-里面的排他思想" class="headerlink" title="6. jQuery 里面的排他思想"></a>6. jQuery 里面的排他思想</h3><p>1.想要多选一的效果，排他思想：当前元素设置样式，其余的兄弟元素清除样式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">this</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">$(<span class="built_in">this</span>).siblings().css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>











<h1 id="x-视频看到"><a href="#x-视频看到" class="headerlink" title="x. 视频看到"></a>x. 视频看到</h1><p>1.<a href="https://www.bilibili.com/video/BV1a4411w7Gx?p=7&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1a4411w7Gx?p=7&amp;spm_id_from=pageDriver</a></p>
<ul>
<li>相互转化</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>35-vue</title>
    <url>/1-(0~50)/35-vue_%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>1.笔记由视频资料而来；</p>
<ul>
<li>资料：<a href="https://www.bilibili.com/video/BV1HE411e7vY?p=2&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1HE411e7vY?p=2&amp;spm_id_from=pageDriver</a></li>
</ul>
<h2 id="1-VUE基础"><a href="#1-VUE基础" class="headerlink" title="1. VUE基础"></a>1. VUE基础</h2><a id="more"></a>

<h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><ol>
<li><p>JavaScript框架</p>
</li>
<li><p>简化Dom操作</p>
</li>
<li><p>响应式数据驱动</p>
</li>
</ol>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1HE411e7vY?p=2&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1HE411e7vY?p=2&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<h3 id="1-2-第一个Vue程序"><a href="#1-2-第一个Vue程序" class="headerlink" title="1.2 第一个Vue程序"></a>1.2 第一个Vue程序</h3><ol>
<li><p>文档传送门</p>
<p><a href="https://cn.vuejs.org">https://cn.vuejs.org</a></p>
</li>
<li><p>进入文档，点击起步，查看第一个vue程序的信息；</p>
</li>
<li><p>代码：</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;script&gt;</span></span><br><span class="line"><span class="comment">    var app = new Vue(&#123;</span></span><br><span class="line"><span class="comment">        el: &#x27;#app&#x27;,</span></span><br><span class="line"><span class="comment">        data: &#123;</span></span><br><span class="line"><span class="comment">            message: &#x27;Hello Vue!&#x27;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">&lt;/script&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; message &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                message: <span class="string">&#x27;Hello Vue!&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><pre><code class="js">&lt;script&gt;
        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;
            el: <span class="string">'#app'</span>,
            data: &#123;
                message: <span class="string">'Hello Vue!'</span>
            &#125;
        &#125;)
    &lt;<span class="regexp">/script&gt;</span></code></pre>
</li>
<li><p>写在上面是没用的；2021-3-28 17:51:19</p>
</li>
</ul>
<p>4.过程：</p>
<ul>
<li><p>导入==开发版本==的vue.js</p>
</li>
<li><p>创建Vue实例对象，设置==el==属性和==data==属性</p>
</li>
<li><p>使用简洁的==模板语法==把数据渲染到页面上</p>
<p>模板语法就是：<code>&#123;&#123; &#125;&#125;</code>；</p>
</li>
</ul>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1HE411e7vY?p=3&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1HE411e7vY?p=3&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<hr>
]]></content>
  </entry>
  <entry>
    <title>36-接口</title>
    <url>/1-(0~50)/36-%E5%B0%8F%E7%99%BD%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/BV1LJ41137b5?p=2&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1LJ41137b5?p=2&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<h2 id="1-接口的定义"><a href="#1-接口的定义" class="headerlink" title="1. 接口的定义"></a>1. 接口的定义</h2><a id="more"></a>

<h3 id="1-1-现实中的接口"><a href="#1-1-现实中的接口" class="headerlink" title="1.1 现实中的接口"></a>1.1 现实中的接口</h3><p>1.定义：程序之间协作索要遵循的一套规范、标准</p>
<h3 id="1-2-优点"><a href="#1-2-优点" class="headerlink" title="1.2 优点"></a>1.2 优点</h3><p>1.责任划分清晰</p>
<p>2.缩短研发周期</p>
<p>3.可拓展性强</p>
<h3 id="1-3-API接口"><a href="#1-3-API接口" class="headerlink" title="1.3 API接口"></a>1.3 API接口</h3><blockquote>
<p><a href="https://www.bilibili.com/video/BV1LJ41137b5?p=4&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1LJ41137b5?p=4&amp;spm_id_from=pageDriver</a></p>
</blockquote>
<p>1.应用程序编程接口(API: Application Programming Interface,应用程序编程接口) :以HTTP协议形式提供,定义了输入、输出、功能描述的服务。</p>
<p><img src="../../img/36/1.png" alt="1"></p>
<p>2.接口文档是规则（自）</p>
<h2 id="2-接口测试流程"><a href="#2-接口测试流程" class="headerlink" title="2. 接口测试流程"></a>2. 接口测试流程</h2><p>1.接口的功能测试（先要保证接口是正确的）</p>
<p>2.测试接口的数据，传递一些特殊的数据，保证接口没问题</p>
<p>3.自动化测试脚本的编辑</p>
<p>4.接口的性能，压力测试</p>
<p>（我只是想学怎么用接口，怎么就测试了呢？）</p>
<h2 id="3-网络编程基本概念"><a href="#3-网络编程基本概念" class="headerlink" title="3. 网络编程基本概念"></a>3. 网络编程基本概念</h2><p>1.客户端(Client) :移动应用(IOS,Android,Web等应用)</p>
<p>2.服务器(Server) :为客户端提供服务、提供数据、提供资源等机器</p>
<p>3.请求(Request) :客户端向服务器索取数据的一种行为</p>
<p>4.响应(Response) :服务器对客户端对请求做出的反应,一般指返回数据给客户端</p>
<p><img src="../../img/36/2.png" alt="2"></p>
<h3 id="3-2-HTTP协议"><a href="#3-2-HTTP协议" class="headerlink" title="3.2  HTTP协议"></a>3.2  HTTP协议</h3><h4 id="1-HTTP协议概念"><a href="#1-HTTP协议概念" class="headerlink" title="1. HTTP协议概念"></a>1. HTTP协议概念</h4><p>协议:计算机通信网络中两台计算机之前进行通信所必须共同遵守的规则或规定。</p>
<p>HTTP协议:超文本传输协议,是一种规定了浏览器和服务器之间通信的规则</p>
<h4 id="2-URL"><a href="#2-URL" class="headerlink" title="2. URL"></a>2. URL</h4><p>统一资源定位符</p>
<p>概念:互联网上资源的地址、位置。每一个资源都有一个唯一的URL</p>
<p>格式:协议://主机地址/路径</p>
<h4 id="3-GET、POST请求"><a href="#3-GET、POST请求" class="headerlink" title="3. GET、POST请求"></a>3. GET、POST请求</h4><p>1.get：</p>
<p>提交的数据显示在地址栏,不安全;提交的数据量有限制;不重要的数据使用GET</p>
<ul>
<li>浏览器不同，数量的限制也不同</li>
</ul>
<p><img src="../../img/36/3.png" alt="3"></p>
<p>2.post：</p>
<p>隐式提交数据,更安全;没有数据量大小的限制;重要数据使用POST</p>
<p><img src="../../img/36/4.png" alt="4"></p>
<h2 id="4-数据传递格式"><a href="#4-数据传递格式" class="headerlink" title="4. 数据传递格式"></a>4. 数据传递格式</h2><p>1.键值对：?xx=11&amp;xx=22</p>
<ul>
<li><p>视频里面说，问号后面是 传递的数据，前面是网络地址；</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1LJ41137b5?p=9&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1LJ41137b5?p=9&amp;spm_id_from=pageDriver</a></p>
<p>01:17</p>
</blockquote>
</li>
<li><p>&amp;，是 and</p>
</li>
</ul>
<p>2.JSON数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;属性名1&quot;</span>:<span class="string">&quot;属性值&quot;</span>,</span><br><span class="line"><span class="attr">&quot;属性名2&quot;</span>:<span class="string">&quot;属性值&quot;</span>,</span><br><span class="line"><span class="attr">&quot;属性名3&quot;</span>:<span class="string">&quot;属性值&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-状态码"><a href="#5-状态码" class="headerlink" title="5. 状态码"></a>5. 状态码</h2><p>1.HTTP协议之常见响应状态码</p>
<ul>
<li>状态码由三分数字组成，第一位数字定义了响应类型，有5中可能取值</li>
</ul>
<p>1xx:指示信息一表示请求已接收,继续处理。</p>
<p>2xx:成功一表示请求已被成功接收、理解、接受。</p>
<p>3xx:重定向-要完成请求必须进行更进一步的操作。</p>
<p>4xx:客户端错误-请求有语法错误或请求无法实现。</p>
<p>5xx:服务器端错误一服务器未能实现合法的请求。</p>
<p>2.</p>
<h2 id="6-restful风格"><a href="#6-restful风格" class="headerlink" title="6. restful风格"></a>6. restful风格</h2><p>1.按照一定的规则写出的易读、易懂的api文档；目的是让前端、后端、测试三方在工作的时候有据可循，提升开发和测试的效率(非强制要求,软要求)。</p>
<ul>
<li>不是必须这么风格；</li>
</ul>
<p>2.增删改查四大功能的语法风格：</p>
<ul>
<li><p>查</p>
<ul>
<li><p>方法：get</p>
</li>
<li><p>响应码：200 + 查询的数据</p>
<blockquote>
<p>响应码不止给个码，还把查询的数据也给出来，所以需要get，因为能看到</p>
</blockquote>
</li>
</ul>
</li>
<li><p>增</p>
<ul>
<li>方法：post</li>
<li>响应码：201 + 新增的数据</li>
</ul>
</li>
<li><p>改</p>
<ul>
<li>方法：put[^2]</li>
<li>响应码：200或201 + 修改后的数据</li>
</ul>
</li>
<li><p>删</p>
<ul>
<li>方法：delete[^1]</li>
<li>响应码：204 + 无；</li>
</ul>
</li>
</ul>
<h2 id="X-题注"><a href="#X-题注" class="headerlink" title="X. 题注"></a>X. 题注</h2><p>[^1]:delete  英 [dɪˈliːt]   美 [dɪˈliːt]<br>v.删去;删除<br>[^2]:put  英 [pʊt]   美 [pʊt]<br>v.放;安置;猛推;用力插入;将…送往;使…前往</p>
<p>本周工作汇报</p>
<p>1.完成宁夏会计手机端专题</p>
<ul>
<li>PC端；</li>
</ul>
<p>2.完成宁夏酒店管理PC端专题</p>
<ul>
<li>和手机端；</li>
</ul>
<p>3.编写宁夏电气运行与控制专题PC与手机端</p>
<p>下周工作<br>1.完成宁夏电气运行与控制专题PC与手机端</p>
<p>2.学习</p>
]]></content>
  </entry>
  <entry>
    <title>37-数据流图</title>
    <url>/1-(0~50)/37-%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE/</url>
    <content><![CDATA[<p>1.</p>
<p><a href="https://blog.csdn.net/T_I_A_N_/article/details/86016324">https://blog.csdn.net/T_I_A_N_/article/details/86016324</a></p>
<p>2021-4-5 15:18:24</p>
<a id="more"></a>

<p>2.顶层数据流图</p>
<p><a href="https://zhidao.baidu.com/question/537269670.html">https://zhidao.baidu.com/question/537269670.html</a></p>
<ul>
<li>2021-4-5 15:20:49</li>
</ul>
<p>3.</p>
]]></content>
  </entry>
  <entry>
    <title>38-工作</title>
    <url>/1-(0~50)/38-%E5%B7%A5%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="1-数据传递"><a href="#1-数据传递" class="headerlink" title="1. 数据传递"></a>1. 数据传递</h1><p>1.后台官网：<a href="http://base.hope55.com/Home/Index#">http://base.hope55.com/Home/Index#</a></p>
<a id="more"></a>

<h2 id="1-1-先配置企业部门的id；"><a href="#1-1-先配置企业部门的id；" class="headerlink" title="1.1 先配置企业部门的id；"></a>1.1 先配置企业部门的id；</h2><p>0.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> api = &#123;</span><br><span class="line">    Host: <span class="string">&quot;http://base.hope55.com/&quot;</span>,</span><br><span class="line">    API: <span class="string">&quot;http://base.hope55.com/&quot;</span> + <span class="string">&quot;API/WebAPI/&quot;</span>,</span><br><span class="line">    BasePageSize: <span class="number">9</span>, <span class="comment">//默认分页数</span></span><br><span class="line">    DefualtDepartmentID: <span class="number">185</span>, <span class="comment">//默认部门ID</span></span><br><span class="line">    DefualtOrganID: <span class="number">9</span>, <span class="comment">//默认企业ID </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>1.找学校；</p>
<ul>
<li><p>1.在最上面的部门管理找</p>
<p><img src="../../img/38/1.png" alt="1"></p>
</li>
<li><p>2.然后在下面找到对应的学校；</p>
<p><img src="../../img/38/2.png" alt="1"></p>
</li>
<li><p>2.1 鼠标放在企业信息上面，可以在左下角看到企业id</p>
</li>
</ul>
<p>1.2 同理，找到部门的id；</p>
<ul>
<li>1.比如我这里写的是这个学校的院团委；</li>
</ul>
<p><img src="../../img/38/3.png" alt="1"></p>
<ul>
<li>2.鼠标放在栏目信息，这些地方，部门id也不会变；</li>
</ul>
<h2 id="1-2-应该就是上传数据了吧"><a href="#1-2-应该就是上传数据了吧" class="headerlink" title="1.2 应该就是上传数据了吧"></a>1.2 应该就是上传数据了吧</h2><h3 id="1-导航栏"><a href="#1-导航栏" class="headerlink" title="1. 导航栏"></a>1. 导航栏</h3><p>1.首页导航栏，模板：</p>
<p>1.1 位置：js\public.js</p>
<p>1.2 代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导航栏遍历渲染</span></span><br><span class="line"><span class="keyword">var</span> _html = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">_html += <span class="string">&#x27;&lt;li class=&quot;house&quot;&gt;&lt;a href=&quot;index.html&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> arr1) &#123;</span><br><span class="line">    _html += <span class="string">&#x27;&lt;li name=&quot;&#x27;</span> + arr1[i].ID + <span class="string">&#x27;&quot;&gt;&lt;a href=&quot;&#x27;</span> + arr1[i].Url + <span class="string">&#x27;&quot;&gt;&#x27;</span> + arr1[i].Name + <span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr1[i].Clist.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        _html += <span class="string">&#x27;&lt;ul class=&quot;er&quot;&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j <span class="keyword">in</span> arr1[i].Clist) &#123;</span><br><span class="line">            _html += <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;&#x27;</span> + arr1[i].Clist[j].Url + <span class="string">&#x27;&quot;&gt;&#x27;</span> + arr1[i].Clist[j].Name + <span class="string">&#x27;&lt;/a&gt;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        _html += <span class="string">&#x27;&lt;/ul&gt;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    _html += <span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">_html += <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;http://gzucst.com/&quot;&gt;学院首页&lt;/a&gt;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">$(<span class="string">&quot;#navBox&quot;</span>).html(_html);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>1.<code>$(&quot;#navBox&quot;).html(_html);</code>这个是链接id的；</p>
</li>
<li><p>1.1 ul那边；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;navBox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>1.3 数据哪来的？</p>
<p>在栏目信息里面；</p>
<p><img src="../../img/38/4.png" alt="1"></p>
<ul>
<li>1.下面的部门简介，团情快讯这些，就是导航栏的数据；</li>
<li>2.首页的话，自己手动加；</li>
</ul>
<h4 id="1-1-跳转页面"><a href="#1-1-跳转页面" class="headerlink" title="1.1 跳转页面"></a>1.1 跳转页面</h4><p>1.导航栏渲染出来了，但页面能跳转过去吗？不能；</p>
<ul>
<li>1.是空白的；</li>
<li>2.怎么设置这个跳转呢？</li>
</ul>
<p>2.看路径：<a href="http://127.0.0.1:5500/list.html?HType=2&amp;CId=3219">http://127.0.0.1:5500/list.html?HType=2&amp;CId=3219</a></p>
<p>2.1 list.html；</p>
<ul>
<li><p>1.需要创建list.html文件，这个路径写死的，在前端用的字符串，不是后端路由；2021-5-19 11:46:28</p>
</li>
<li><p>2.然后在郭老师那边，没怎么找到list；</p>
</li>
<li><p>3.老李这：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 2. 页面盒子传入数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1.例如：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">![1](../../img/38/5.png)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2.怎样能传入进去？</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2.1 首先找到拼接的地方。但先不问什么能拼；别人的代码，我看了半天没看懂，本来自己也还是小白；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+ 1.在base.js:537的地方；//获取文件信息集合</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  `</span><span class="string">``</span>js</span><br><span class="line">  GetNewsInfoByCid: <span class="function"><span class="keyword">function</span> (<span class="params">strHtml, Cid, IDname, needPhoto, CssClass, PageIndex, SearchWord, PageSize, DefaultImg, descNum</span>) </span>&#123;</span><br></pre></td></tr></table></figure>
</li>
<li><p>1.1 html字符串，Cid信息源id，装html的盒子的id，</p>
</li>
<li><p>1.2 needPhoto，</p>
</li>
</ul>
<p>2.2 可以先打印一下，应该要打印一下，看一下里面的数据；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = Base.GetFilesInfoByCid(<span class="string">&#x27;&#x27;</span>, <span class="number">3222</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a1);</span><br></pre></td></tr></table></figure>

<ul>
<li>1.但栏目id(Cid)一定要有，不然看不到啥数据；</li>
</ul>
<p>2.3 例如：这里院团委的部门新闻，因为没有专门的 部门新闻；我用的 团情快讯</p>
<p><img src="../../img/38/6.png" alt="1"></p>
<ul>
<li><p>1.代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = Base.GetNewsInfoByCid(<span class="string">&#x27;&#x27;</span>, <span class="number">3218</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">1</span>, <span class="string">&quot;&quot;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a1);</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.打印结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="number">3</span>) [&#123;…&#125;, &#123;…&#125;, &#123;…&#125;]</span><br><span class="line"><span class="number">0</span>:</span><br><span class="line">Author: <span class="string">&quot;院团委供稿&quot;</span></span><br><span class="line">Cover: <span class="string">&quot;http://base.hope55.com/gzcjxy/UploadFile/UploadFile_Img/20201106154743e90097b1b6a24ed79fc84c4b37c6b349.jpg&quot;</span></span><br><span class="line">Describe: <span class="string">&quot;“感恩之路，希望力量”2020年感恩季协调会议为引导学生厚植爱国主义情怀，把坚定理想信念，勇担责任，砥砺前行的精神内涵自觉融入和发展到中国特色社会主义事业、建设社会主义现代化强国、实现中华民族伟大复兴的奋斗之中，推动学院发展。2020年11月2日，贵州财经大学商务学院在博学楼112召开感恩季协调会。...&quot;</span></span><br><span class="line">FID: <span class="number">3218</span></span><br><span class="line">HasPhoto: <span class="literal">true</span></span><br><span class="line">Hot: <span class="literal">false</span></span><br><span class="line">ID: <span class="number">47621</span></span><br><span class="line">KeyWords: <span class="string">&quot;&quot;</span></span><br><span class="line">Press: <span class="number">199</span></span><br><span class="line">ShowTime: <span class="string">&quot;2020-11-06T00:00:00&quot;</span></span><br><span class="line">Source: <span class="string">&quot;新媒体中心&quot;</span></span><br><span class="line">Title: <span class="string">&quot;感恩季｜贵州财经大学商务学院“感恩之路，希望力量”2020年感恩季协调会议&quot;</span></span><br><span class="line">Top: <span class="literal">false</span></span><br><span class="line">Url: <span class="literal">null</span></span><br><span class="line">__proto__: <span class="built_in">Object</span></span><br><span class="line"><span class="number">1</span>: &#123;<span class="attr">ID</span>: <span class="number">47620</span>, <span class="attr">FID</span>: <span class="number">3218</span>, <span class="attr">Title</span>: <span class="string">&quot;凝聚青春力量·畅聊人生展望——我与院长面对面交流会&quot;</span>, <span class="attr">Author</span>: <span class="string">&quot;院团委供稿&quot;</span>, <span class="attr">Source</span>: <span class="string">&quot;新媒体中心&quot;</span>, …&#125;</span><br><span class="line"><span class="number">2</span>: &#123;<span class="attr">ID</span>: <span class="number">47619</span>, <span class="attr">FID</span>: <span class="number">3218</span>, <span class="attr">Title</span>: <span class="string">&quot;为新时代中国特色社会主义新疆建设贡献青春力量&quot;</span>, <span class="attr">Author</span>: <span class="string">&quot;共青团中央&quot;</span>, <span class="attr">Source</span>: <span class="string">&quot;共青团中央&quot;</span>, …&#125;</span><br><span class="line">length: <span class="number">3</span></span><br><span class="line">__proto__: <span class="built_in">Array</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>3.这样就知道<code>Model.NewsInfos.Cover</code>那些玩意了；</p>
</li>
<li><p>4.但是，这不是马上的，而是先传到函数的形参里面。</p>
</li>
</ul>
<p>3.要知道model后面到底什么？是NewInfos？还是Model.FilesInfo；这个要在Base.js里面看注释；</p>
<p>3.1 banner是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取文件信息集合</span></span><br><span class="line">GetFilesInfoByCid: <span class="function"><span class="keyword">function</span> (<span class="params">strHtml, Cid, IDname, CssClass, PageIndex, SearchWord, PageSize, DefaultImg</span>) </span>&#123;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>为什么？</li>
</ul>
<p>3.2 是后天那边吗？但只知道后台与前端这里的js联系，只靠Cid；</p>
<ul>
<li>1.郭老师说：这是后台那边有路由处理；</li>
</ul>
<hr>
<h2 id="1-3-我已经懵了"><a href="#1-3-我已经懵了" class="headerlink" title="1.3 我已经懵了"></a>1.3 我已经懵了</h2><p>1.懵了，真的懵了。累，我好想自己写链接接口。</p>
<p>2.但我不会。唉</p>
<p>3.看来，还是应该继续学习，但是学到前端使用接口读取后端数据的操作，总觉得还有很久。2021-5-19 15:47:49</p>
<p>4.现在只有难受着先用着？？</p>
<p>5.我应该边做，边学啊；怎么一直在弄代码啊；</p>
<p>6.计划，计划吧；2021-5-19 15:49:27</p>
<p>7.要改修模板，定位去掉，要用浮动？定位好像不能自己撑开盒子；</p>
<ul>
<li>1.但浮动好像也不行；看郭老师怎么写的；</li>
</ul>
<p>8.哦豁，忘记写笔记了，清楚浮动，可以撑开盒子；</p>
<p>9.导航栏飞在上面了，要拿下来；</p>
<p>9.1 查代码：<code>$(&quot;.NAA_content&quot;).append</code></p>
<ul>
<li>1.语法：$(selector).append(content)</li>
<li>2.效果：append() 方法在被选元素的结尾（仍然在内部）插入指定内容。</li>
</ul>
<p>9.2 同时找到的在前面插入；</p>
<ul>
<li>1.<a href="https://www.w3school.com.cn/jquery/manipulation_prepend.asp">https://www.w3school.com.cn/jquery/manipulation_prepend.asp</a></li>
<li>2.<code>$(selector).prepend(content)</code></li>
</ul>
<p>10.没找到数据</p>
<p><img src="../../img/38/8.png" alt="1"></p>
<p>10.1 同时页面那边也没有，看看后台有没有数据；</p>
<p>10.2 好家伙，后台那边没有数据；</p>
<h2 id="1-4-部门概况"><a href="#1-4-部门概况" class="headerlink" title="1.4 部门概况"></a>1.4 部门概况</h2><h3 id="1-找方法"><a href="#1-找方法" class="headerlink" title="1. 找方法"></a>1. 找方法</h3><p>1.传入特有的内容；</p>
<p>2.查看老李的，用的方法是：<code>Base.GetSinglePageInfoByCid()</code></p>
<p>3.看看郭老师的：<code>Base.GetSinglePageInfoByCid(Model.SinglePage.Describe, CId, &quot;news&quot;);</code></p>
<p>4.一样的；</p>
<p>5.解析这个方法</p>
<p>5.1 去Base.js看看；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取单页信息</span></span><br><span class="line">GetSinglePageInfoByCid: <span class="function"><span class="keyword">function</span> (<span class="params">strHtml, Cid, IDname</span>) </span>&#123;</span><br></pre></td></tr></table></figure>

<ul>
<li>1.看下面的也没看出啥名堂；</li>
<li>2.直接用，看能不能实现效果；</li>
</ul>
<p>5.2 没有数据；</p>
<h3 id="3-选择base里的方法"><a href="#3-选择base里的方法" class="headerlink" title="3. 选择base里的方法"></a>3. 选择base里的方法</h3><p>1.里面很多方法，怎么选？</p>
<p>2.根据：</p>
<p><img src="../../img/38/7.png" alt="1"></p>
<p>根据这里选；</p>
<h2 id="1-5-搜索框"><a href="#1-5-搜索框" class="headerlink" title="1.5 搜索框"></a>1.5 搜索框</h2><p>1.搜索框咋个弄？</p>
<p>2.第一步：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.searth a&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = $(<span class="string">&quot;.searth input&quot;</span>).val();</span><br><span class="line">    <span class="comment">// console.log(str)</span></span><br><span class="line">    <span class="keyword">if</span> (!str) &#123;</span><br><span class="line">        alert(<span class="string">&quot;请输入查询关键词&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        location.href = <span class="string">&quot;search.html?selText=&quot;</span> + str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>3.第二补，渲染search.html</p>
<p>3.1 没有渲染，直接建立了一个新的html；</p>
<ul>
<li>1.然后在下面加</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> temp;</span><br><span class="line">    <span class="keyword">var</span> search_value = Curren.getQueryString(<span class="string">&quot;selText&quot;</span>);</span><br><span class="line">    <span class="comment">// $(&quot;#search-text&quot;).val(search_value);</span></span><br><span class="line">    temp = Base.GetInfoBySearch(search_value, <span class="string">&quot;news_muban&quot;</span>, <span class="string">&#x27;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;&#x27;</span> + Model.NewsInfos.Url + <span class="string">&#x27;&quot;&gt;&lt;div class=&quot;date&quot;&gt;&lt;b&gt;&#x27;</span> + Model.NewsInfos.ShowTime2 + <span class="string">&#x27;&lt;/b&gt;&lt;span&gt;&#x27;</span> + Model.NewsInfos.ShowTime6 + <span class="string">&#x27;&lt;/span&gt;&lt;/div&gt;&lt;p&gt;&#x27;</span> + Model.NewsInfos.Title + <span class="string">&#x27;&lt;/p&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">7</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;郭老师&#x27;</span>, search_value);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;temp：&#x27;</span>, temp)</span><br><span class="line">    <span class="keyword">if</span> (!temp.length) &#123;</span><br><span class="line">        $(<span class="string">&quot;.NAA_content&quot;</span>).html(<span class="string">&#x27;&lt;p style=&quot;text-align: center;color: #999999;font-size: 14px;line-height: 2;margin-top: 30px;&quot;&gt;未搜索到任何信息&lt;/p&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h2 id="1-6-下面的二维码"><a href="#1-6-下面的二维码" class="headerlink" title="1.6 下面的二维码"></a>1.6 下面的二维码</h2><p>1.怎么弄这个二维码？</p>
<p>1.1 先看老李的；打印不出信息，去后台找找在哪；</p>
<p>2.后台在：对应学习——官网——二维码；</p>
<h1 id="2-笔记"><a href="#2-笔记" class="headerlink" title="2. 笔记"></a>2. 笔记</h1><h2 id="2-1-selector-html"><a href="#2-1-selector-html" class="headerlink" title="2.1 $(selector).html()"></a>2.1 $(selector).html()</h2><p>1.<a href="https://www.w3school.com.cn/jquery/manipulation_html.asp">https://www.w3school.com.cn/jquery/manipulation_html.asp</a></p>
<p>2.html() 方法返回或设置被选元素的内容 (inner HTML)。</p>
<p>如果该方法未设置参数，则返回被选元素的当前内容。</p>
<p>2021-5-19 09:59:14</p>
<h2 id="2-2-分页不变"><a href="#2-2-分页不变" class="headerlink" title="2.2 分页不变"></a>2.2 分页不变</h2><p>1.</p>
<p><img src="../../img/38/9.png" alt="1"></p>
<p>2.是参数没有设置对；</p>
<ul>
<li>1.之前一直写的1；</li>
<li>2.现在写为PageIndex</li>
</ul>
<p>2.1 </p>
<p><img src="../../img/38/10.png" alt="1"></p>
<p>2.2 为啥</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">GetNewsInfoByCid: <span class="function"><span class="keyword">function</span> (<span class="params">strHtml, Cid, IDname, needPhoto, CssClass, PageIndex, SearchWord, PageSize, DefaultImg, descNum</span>) </span>&#123;</span><br></pre></td></tr></table></figure>

<ul>
<li>1.从结论做出假设：PageIndex是每页的页码，PageSize每页多少个数据；2021-5-20 13:59:17</li>
</ul>
<h2 id="2-3-url为null但跳转"><a href="#2-3-url为null但跳转" class="headerlink" title="2.3 url为null但跳转"></a>2.3 url为null但跳转</h2><p>1.明明url为空：片段</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Source: <span class="string">&quot;新媒体中心&quot;</span></span><br><span class="line">Title: <span class="string">&quot;感恩季｜贵州财经大学商务学院“感恩之路，希望力量”2020年感恩季协调会议&quot;</span></span><br><span class="line">Top: <span class="literal">false</span></span><br><span class="line">Url: <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p>2.但仔细想想，这个地方，没办法拿到Url；额，不是。我也不知道为啥拿不到；</p>
<p>3.看代码是怎么给的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.myReplace(Model.NewsInfos.Url, (Curren.isEmpty(GetData[i].Url) ? <span class="string">&quot;list.html?HType=2&amp;CId=&quot;</span> + GetData[i].FID + <span class="string">&quot;&amp;NId=&quot;</span> + GetData[i].ID : GetData[i].Url))</span><br></pre></td></tr></table></figure>

<ul>
<li>1.<code>GetData[i].Url</code>是否为空，是的话，不是的话。从Base.js得出，这里是同步，返回值<code>GetData</code>在末尾，这里会一直为空；</li>
<li>2.然后就是拼接出来的<code>&quot;list.html?HType=2&amp;CId=&quot; + GetData[i].FID + &quot;&amp;NId=&quot; + GetData[i].ID</code></li>
</ul>
<p>4.很好，这个是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取列表信息集合</span></span><br><span class="line">GetNewsInfoByCid: <span class="function"><span class="keyword">function</span> (<span class="params">strHtml, Cid, IDname, needPhoto, CssClass, PageIndex, SearchWord, PageSize, DefaultImg, descNum</span>) </span>&#123;</span><br></pre></td></tr></table></figure>



<p>5.看看其他，是不是这样；</p>
<p>5.1 只有两个地方是；一个是上面的列表信息集合。一个是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">GetInfoBySearch: <span class="function"><span class="keyword">function</span> (<span class="params">selText, IDname, strHtml, did, pageSize</span>) </span>&#123;</span><br></pre></td></tr></table></figure>

<ul>
<li>1.通过查找获取信息吗？2021-5-20 14:40:04</li>
</ul>
<h2 id="2-4-index-js怎么联系的index-html"><a href="#2-4-index-js怎么联系的index-html" class="headerlink" title="2.4 index.js怎么联系的index.html"></a>2.4 index.js怎么联系的index.html</h2><p>1.忽然想起这个问题；</p>
<h2 id="2-5-pagesize"><a href="#2-5-pagesize" class="headerlink" title="2.5 pagesize"></a>2.5 pagesize</h2><p>1.好像不是一页数据有多少，而是一页遍历了几次；</p>
<h2 id="2-6-被选中-分页"><a href="#2-6-被选中-分页" class="headerlink" title="2.6 被选中-分页"></a>2.6 被选中-分页</h2><p>1.郭老师，在JS里面写了相应代码；</p>
<p><img src="../../img/38/11.png" alt="11"></p>
<h2 id="2-7-理解导航"><a href="#2-7-理解导航" class="headerlink" title="2.7 理解导航"></a>2.7 理解导航</h2><p>1.代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导航栏遍历</span></span><br><span class="line"><span class="comment">// 导航栏数据重构</span></span><br><span class="line"><span class="keyword">var</span> arr = Base.GetNavColumnsByDid(<span class="string">&quot;&quot;</span>, api.DefualtDepartmentID, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> arr1 = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i].FID == <span class="number">0</span>) &#123;</span><br><span class="line">        arr1.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">    arr1[i].Clist = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j].FID == arr1[i].ID) &#123;</span><br><span class="line">            arr1[i].Clist.push(arr[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>1.1 先去找<code>Base.GetNavColumnsByDid()</code>;</p>
]]></content>
  </entry>
  <entry>
    <title>39_出租信息</title>
    <url>/1-(0~50)/39-%E5%87%BA%E7%A7%9F%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h2 id="1-价格"><a href="#1-价格" class="headerlink" title="1. 价格"></a>1. 价格</h2><p>1·.价格构成: 1100房租+170物业费-水电补助50-宽带助50=1170</p>
<p>1.1.水电为商业价格。水:  ;电:</p>
<a id="more"></a>

<p>1.2 如果是一个人住。-50/月</p>
<p>1.3 如果是对面大学的女侠；-50/月</p>
<p>1.4 如果是二次元兄弟；-50/月</p>
<h2 id="2-联系"><a href="#2-联系" class="headerlink" title="2. 联系"></a>2. 联系</h2><p>2.微信: a17380114645</p>
<h2 id="3-我的情况"><a href="#3-我的情况" class="headerlink" title="3. 我的情况"></a>3. 我的情况</h2><p>3.平常下班18点。房子情况如图所示。虽然单间出租,我个人少有而来,一个月可能一次。</p>
<ul>
<li><p>来也是放取东西，一般不会过夜。不对，我说这个干嘛？</p>
<ul>
<li>表明你可能会有整租的体验；</li>
</ul>
</li>
<li><p>如果我长期而来，会通知。水电气也将改为平摊等。</p>
</li>
</ul>
<p>3.1 若要看房,我得赶车来。需要时间。房屋如58同城图所示。</p>
<h2 id="4-特殊情况"><a href="#4-特殊情况" class="headerlink" title="4. 特殊情况"></a>4. 特殊情况</h2><p>4.有事半路退租，根据情况退还多少押金。封顶一半租金。</p>
<h2 id="5-你可能需要"><a href="#5-你可能需要" class="headerlink" title="5. 你可能需要"></a>5. 你可能需要</h2><p>1.可能需要长一点的插板。5m？emm</p>
<p>2021-5-23 18:20:03</p>
]]></content>
  </entry>
  <entry>
    <title>99-Hello World</title>
    <url>/1-(0~50)/99-hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
